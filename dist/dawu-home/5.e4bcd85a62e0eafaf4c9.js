(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{4:function(e,t){},5:function(e,t){},6:function(e,t){},7:function(e,t){},8:function(e,t){},EhIR:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},PDX0:function(e,t){(function(t){e.exports=t}).call(this,{})},XiDn:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"shuffle",(function(){return K})),n.d(r,"shuffleCombo",(function(){return X})),n.d(r,"clamp",(function(){return Y})),n.d(r,"nearestLargerEven",(function(){return Z})),n.d(r,"sum",(function(){return J})),n.d(r,"randUniform",(function(){return Q})),n.d(r,"distSquared",(function(){return ee})),n.d(r,"assert",(function(){return te})),n.d(r,"assertShapesMatch",(function(){return ne})),n.d(r,"assertNonNull",(function(){return re})),n.d(r,"flatten",(function(){return se})),n.d(r,"sizeFromShape",(function(){return ae})),n.d(r,"isScalarShape",(function(){return ie})),n.d(r,"arraysEqual",(function(){return oe})),n.d(r,"isInt",(function(){return ue})),n.d(r,"tanh",(function(){return le})),n.d(r,"sizeToSquarishShape",(function(){return ce})),n.d(r,"createShuffledIndices",(function(){return he})),n.d(r,"rightPad",(function(){return de})),n.d(r,"repeatedTry",(function(){return pe})),n.d(r,"inferFromImplicitShape",(function(){return fe})),n.d(r,"parseAxisParam",(function(){return me})),n.d(r,"squeezeShape",(function(){return ge})),n.d(r,"getTypedArrayFromDType",(function(){return ye})),n.d(r,"getArrayFromDType",(function(){return be})),n.d(r,"checkConversionForErrors",(function(){return xe})),n.d(r,"isValidDtype",(function(){return we})),n.d(r,"hasEncodingLoss",(function(){return ke})),n.d(r,"isTypedArray",(function(){return ve})),n.d(r,"bytesPerElement",(function(){return Ie})),n.d(r,"bytesFromStringArray",(function(){return Ne})),n.d(r,"isString",(function(){return Se})),n.d(r,"isBoolean",(function(){return Ce})),n.d(r,"isNumber",(function(){return $e})),n.d(r,"inferDtype",(function(){return Te})),n.d(r,"isFunction",(function(){return Ae})),n.d(r,"nearestDivisor",(function(){return Ee})),n.d(r,"computeStrides",(function(){return Re})),n.d(r,"toNestedArray",(function(){return Fe})),n.d(r,"makeOnesTypedArray",(function(){return De})),n.d(r,"makeZerosTypedArray",(function(){return _e})),n.d(r,"makeZerosNestedTypedArray",(function(){return Oe})),n.d(r,"assertNonNegativeIntegerDimensions",(function(){return Me})),n.d(r,"locToIndex",(function(){return ze})),n.d(r,"indexToLoc",(function(){return Le})),n.d(r,"isPromise",(function(){return Pe})),n.d(r,"createScalarValue",(function(){return ls})),n.d(r,"toTypedArray",(function(){return cs})),n.d(r,"now",(function(){return hs})),n.d(r,"fetch",(function(){return ds})),n.d(r,"encodeString",(function(){return ps})),n.d(r,"decodeString",(function(){return fs}));var s={};n.r(s),n.d(s,"makeTypesMatch",(function(){return Es})),n.d(s,"assertTypesMatch",(function(){return Rs})),n.d(s,"isTensorInList",(function(){return Fs})),n.d(s,"getTensorsInContainer",(function(){return Ds}));var a={};n.r(a),n.d(a,"isMobile",(function(){return Bs})),n.d(a,"isBrowser",(function(){return Ws}));var i={};n.r(i),n.d(i,"copyModel",(function(){return Wa})),n.d(i,"listModels",(function(){return Pa})),n.d(i,"moveModel",(function(){return Va})),n.d(i,"removeModel",(function(){return Ba})),n.d(i,"browserFiles",(function(){return ni})),n.d(i,"browserHTTPRequest",(function(){return pi})),n.d(i,"concatenateArrayBuffers",(function(){return aa})),n.d(i,"decodeWeights",(function(){return ta})),n.d(i,"encodeWeights",(function(){return ea})),n.d(i,"fromMemory",(function(){return gi})),n.d(i,"getLoadHandlers",(function(){return pa})),n.d(i,"getModelArtifactsInfoForJSON",(function(){return oa})),n.d(i,"getSaveHandlers",(function(){return da})),n.d(i,"http",(function(){return di})),n.d(i,"isHTTPScheme",(function(){return ci})),n.d(i,"loadWeights",(function(){return ai})),n.d(i,"registerLoadRouter",(function(){return ha})),n.d(i,"registerSaveRouter",(function(){return ca})),n.d(i,"weightsLoaderFactory",(function(){return ii})),n.d(i,"withSaveHandler",(function(){return yi}));var o={};n.r(o),n.d(o,"confusionMatrix",(function(){return ki}));var u={};n.r(u),n.d(u,"toPixels",(function(){return Ni})),n.d(u,"fromPixels",(function(){return Si}));var l={};n.r(l),n.d(l,"prepareAndValidate",(function(){return Ci}));var c={};n.r(c),n.d(c,"validateUpdateShape",(function(){return $i})),n.d(c,"validateInput",(function(){return Ti})),n.d(c,"calculateShapes",(function(){return Ai}));var h={};n.r(h),n.d(h,"assertParamsValid",(function(){return Ei})),n.d(h,"maskToAxes",(function(){return Ri})),n.d(h,"computeOutShape",(function(){return Fi})),n.d(h,"stridesWithElidedDims",(function(){return Di})),n.d(h,"getNormalizedAxes",(function(){return Mi})),n.d(h,"startIndicesWithElidedDims",(function(){return zi})),n.d(h,"stopIndicesWithElidedDims",(function(){return Li})),n.d(h,"stridesForAxis",(function(){return Pi})),n.d(h,"startForAxis",(function(){return Bi})),n.d(h,"stopForAxis",(function(){return Wi})),n.d(h,"isSliceContinous",(function(){return Vi})),n.d(h,"computeFlatOffset",(function(){return Ui})),n.d(h,"parseSliceParams",(function(){return Gi})),n.d(h,"sliceInfo",(function(){return Hi}));var d={};n.r(d),n.d(d,"Serializable",(function(){return ji})),n.d(d,"SerializationMap",(function(){return qi})),n.d(d,"registerClass",(function(){return Ki}));var p={};n.r(p),n.d(p,"TEST_EPSILON_FLOAT16",(function(){return Yi})),n.d(p,"expectArraysClose",(function(){return Zi})),n.d(p,"testEpsilon",(function(){return Ji})),n.d(p,"expectPromiseToFail",(function(){return eo})),n.d(p,"expectArraysEqual",(function(){return to})),n.d(p,"expectNumbersClose",(function(){return no})),n.d(p,"expectValuesInRange",(function(){return so})),n.d(p,"expectArrayBuffersEqual",(function(){return ao})),n.d(p,"encodeStrings",(function(){return io}));var f={};n.r(f),n.d(f,"conv2d",(function(){return jh})),n.d(f,"depthwiseConv2d",(function(){return Xh})),n.d(f,"matMul",(function(){return Yh}));var m={};n.r(m),n.d(m,"segOpComputeOptimalWindowSize",(function(){return yp})),n.d(m,"computeOutShape",(function(){return bp})),n.d(m,"collectGatherOpShapeInfo",(function(){return xp}));var g={};n.r(g),n.d(g,"axesAreInnerMostDims",(function(){return jl})),n.d(g,"combineLocations",(function(){return ql})),n.d(g,"computeOutAndReduceShapes",(function(){return Kl})),n.d(g,"expandShapeToKeepDim",(function(){return Xl})),n.d(g,"assertAxesAreInnerMostDims",(function(){return Yl})),n.d(g,"getAxesPermutation",(function(){return Zl})),n.d(g,"getUndoAxesPermutation",(function(){return Jl})),n.d(g,"getInnerMostAxes",(function(){return Ql})),n.d(g,"getBroadcastDims",(function(){return Qo})),n.d(g,"getReductionAxes",(function(){return eu})),n.d(g,"assertAndGetBroadcastShape",(function(){return tu})),n.d(g,"computeDilation2DInfo",(function(){return xu})),n.d(g,"computePool2DInfo",(function(){return wu})),n.d(g,"computePool3DInfo",(function(){return ku})),n.d(g,"computeConv2DInfo",(function(){return vu})),n.d(g,"computeConv3DInfo",(function(){return Iu})),n.d(g,"computeDefaultPad",(function(){return Nu})),n.d(g,"tupleValuesAreOne",(function(){return Au})),n.d(g,"eitherStridesOrDilationsAreOne",(function(){return Eu})),n.d(g,"convertConv2DDataFormat",(function(){return Ru})),n.d(g,"getFusedDyActivation",(function(){return Vh})),n.d(g,"getFusedBiasGradient",(function(){return Uh})),n.d(g,"applyActivation",(function(){return Gh})),n.d(g,"shouldFuse",(function(){return Hh})),n.d(g,"slice_util",(function(){return h})),n.d(g,"upcastType",(function(){return Ts})),n.d(g,"validateUpdateShape",(function(){return $i})),n.d(g,"validateInput",(function(){return Ti})),n.d(g,"calculateShapes",(function(){return Ai})),n.d(g,"segment_util",(function(){return m})),n.d(g,"fromUint8ToStringArray",(function(){return wp})),n.d(g,"fromStringArrayToUint8",(function(){return kp})),n.d(g,"assertParamsConsistent",(function(){return Vd})),n.d(g,"computeOutShape",(function(){return Ud})),n.d(g,"PARALLELIZE_THRESHOLD",(function(){return Gd})),n.d(g,"computeOptimalWindowSize",(function(){return Hd})),n.d(g,"getImageCenter",(function(){return jd})),n.d(g,"getReshaped",(function(){return qd})),n.d(g,"getPermuted",(function(){return Kd})),n.d(g,"getReshapedPermuted",(function(){return Xd})),n.d(g,"getSliceBeginCoords",(function(){return Yd})),n.d(g,"getSliceSize",(function(){return Zd})),n.d(g,"prepareAndValidate",(function(){return Ci})),n.d(g,"SELU_SCALEALPHA",(function(){return Jd})),n.d(g,"SELU_SCALE",(function(){return Qd})),n.d(g,"ERF_P",(function(){return ep})),n.d(g,"ERF_A1",(function(){return tp})),n.d(g,"ERF_A2",(function(){return np})),n.d(g,"ERF_A3",(function(){return rp})),n.d(g,"ERF_A4",(function(){return sp})),n.d(g,"ERF_A5",(function(){return ap})),n.d(g,"warn",(function(){return ip})),n.d(g,"log",(function(){return op})),n.d(g,"mergeRealAndImagArrays",(function(){return up})),n.d(g,"splitRealAndImagArrays",(function(){return lp})),n.d(g,"complexWithEvenIndex",(function(){return cp})),n.d(g,"complexWithOddIndex",(function(){return hp})),n.d(g,"getComplexWithIndex",(function(){return dp})),n.d(g,"assignToTypedArray",(function(){return pp})),n.d(g,"exponents",(function(){return fp})),n.d(g,"exponent",(function(){return mp})),n.d(g,"prepareSplitSize",(function(){return gp}));var y={};n.r(y),n.d(y,"nonMaxSuppressionV3Impl",(function(){return ud})),n.d(y,"nonMaxSuppressionV4Impl",(function(){return ld})),n.d(y,"nonMaxSuppressionV5Impl",(function(){return cd})),n.d(y,"whereImpl",(function(){return Ah}));var b={};n.r(b),n.d(b,"AdadeltaOptimizer",(function(){return jo})),n.d(b,"AdagradOptimizer",(function(){return Ko})),n.d(b,"AdamOptimizer",(function(){return Zo})),n.d(b,"AdamaxOptimizer",(function(){return ru})),n.d(b,"MomentumOptimizer",(function(){return au})),n.d(b,"Optimizer",(function(){return Ho})),n.d(b,"RMSPropOptimizer",(function(){return iu})),n.d(b,"SGDOptimizer",(function(){return su})),n.d(b,"Tensor",(function(){return xs})),n.d(b,"TensorBuffer",(function(){return ms})),n.d(b,"Variable",(function(){return ks})),n.d(b,"Rank",(function(){return vs})),n.d(b,"sumOutType",(function(){return As})),n.d(b,"upcastType",(function(){return Ts})),n.d(b,"Reduction",(function(){return Id})),n.d(b,"customGrad",(function(){return Vo})),n.d(b,"grad",(function(){return zo})),n.d(b,"grads",(function(){return Lo})),n.d(b,"valueAndGrad",(function(){return Po})),n.d(b,"valueAndGrads",(function(){return Bo})),n.d(b,"variableGrads",(function(){return Wo})),n.d(b,"Environment",(function(){return We})),n.d(b,"env",(function(){return Ve})),n.d(b,"ENV",(function(){return Ge})),n.d(b,"version_core",(function(){return oo})),n.d(b,"nextFrame",(function(){return Wd})),n.d(b,"browser",(function(){return u})),n.d(b,"io",(function(){return i})),n.d(b,"math",(function(){return o})),n.d(b,"serialization",(function(){return d})),n.d(b,"test_util",(function(){return p})),n.d(b,"util",(function(){return r})),n.d(b,"backend_util",(function(){return g})),n.d(b,"tensor_util",(function(){return s})),n.d(b,"slice_util",(function(){return h})),n.d(b,"gather_util",(function(){return l})),n.d(b,"scatter_util",(function(){return c})),n.d(b,"device_util",(function(){return a})),n.d(b,"kernel_impls",(function(){return y})),n.d(b,"KernelBackend",(function(){return j})),n.d(b,"DataStorage",(function(){return H})),n.d(b,"abs",(function(){return Jo})),n.d(b,"acos",(function(){return ou})),n.d(b,"acosh",(function(){return uu})),n.d(b,"add",(function(){return Eo})),n.d(b,"addN",(function(){return lu})),n.d(b,"all",(function(){return cu})),n.d(b,"any",(function(){return hu})),n.d(b,"argMax",(function(){return du})),n.d(b,"argMin",(function(){return pu})),n.d(b,"asin",(function(){return fu})),n.d(b,"asinh",(function(){return mu})),n.d(b,"atan",(function(){return gu})),n.d(b,"atan2",(function(){return yu})),n.d(b,"atanh",(function(){return bu})),n.d(b,"avgPool",(function(){return Du})),n.d(b,"avgPool3d",(function(){return _u})),n.d(b,"basicLSTMCell",(function(){return Pu})),n.d(b,"batchToSpaceND",(function(){return Bu})),n.d(b,"batchNorm",(function(){return Wu})),n.d(b,"batchNorm2d",(function(){return Vu})),n.d(b,"batchNorm3d",(function(){return Uu})),n.d(b,"batchNorm4d",(function(){return Gu})),n.d(b,"bincount",(function(){return Hu})),n.d(b,"broadcastTo",(function(){return ju})),n.d(b,"buffer",(function(){return ja})),n.d(b,"cast",(function(){return qa})),n.d(b,"ceil",(function(){return qu})),n.d(b,"clipByValue",(function(){return Ku})),n.d(b,"clone",(function(){return Ka})),n.d(b,"complex",(function(){return Xs})),n.d(b,"concat",(function(){return Ou})),n.d(b,"concat1d",(function(){return Xu})),n.d(b,"concat2d",(function(){return Yu})),n.d(b,"concat3d",(function(){return Zu})),n.d(b,"concat4d",(function(){return Ju})),n.d(b,"conv1d",(function(){return el})),n.d(b,"conv2d",(function(){return Qu})),n.d(b,"conv2dTranspose",(function(){return nl})),n.d(b,"conv3d",(function(){return rl})),n.d(b,"conv3dTranspose",(function(){return al})),n.d(b,"cos",(function(){return il})),n.d(b,"cosh",(function(){return ol})),n.d(b,"cumsum",(function(){return ul})),n.d(b,"denseBincount",(function(){return ll})),n.d(b,"depthToSpace",(function(){return cl})),n.d(b,"depthwiseConv2d",(function(){return hl})),n.d(b,"diag",(function(){return dl})),n.d(b,"dilation2d",(function(){return pl})),n.d(b,"div",(function(){return Fo})),n.d(b,"divNoNan",(function(){return gl})),n.d(b,"dot",(function(){return yl})),n.d(b,"elu",(function(){return bl})),n.d(b,"equal",(function(){return fl})),n.d(b,"erf",(function(){return xl})),n.d(b,"exp",(function(){return wl})),n.d(b,"expandDims",(function(){return kl})),n.d(b,"expm1",(function(){return vl})),n.d(b,"eye",(function(){return Nl})),n.d(b,"fill",(function(){return qo})),n.d(b,"floor",(function(){return Sl})),n.d(b,"floorDiv",(function(){return Ro})),n.d(b,"gather",(function(){return Cl})),n.d(b,"greater",(function(){return $l})),n.d(b,"greaterEqual",(function(){return Tl})),n.d(b,"imag",(function(){return Al})),n.d(b,"isFinite",(function(){return El})),n.d(b,"isInf",(function(){return Rl})),n.d(b,"isNaN",(function(){return Fl})),n.d(b,"leakyRelu",(function(){return Dl})),n.d(b,"less",(function(){return _l})),n.d(b,"lessEqual",(function(){return Ol})),n.d(b,"linspace",(function(){return Ml})),n.d(b,"localResponseNormalization",(function(){return zl})),n.d(b,"log",(function(){return Ll})),n.d(b,"log1p",(function(){return Pl})),n.d(b,"logSigmoid",(function(){return Vl})),n.d(b,"logSoftmax",(function(){return Hl})),n.d(b,"logSumExp",(function(){return ec})),n.d(b,"logicalAnd",(function(){return tc})),n.d(b,"logicalNot",(function(){return nc})),n.d(b,"logicalOr",(function(){return rc})),n.d(b,"logicalXor",(function(){return sc})),n.d(b,"matMul",(function(){return bi})),n.d(b,"max",(function(){return Ul})),n.d(b,"maxPool",(function(){return ac})),n.d(b,"maxPool3d",(function(){return ic})),n.d(b,"maxPoolWithArgmax",(function(){return oc})),n.d(b,"maximum",(function(){return nu})),n.d(b,"mean",(function(){return uc})),n.d(b,"min",(function(){return lc})),n.d(b,"minimum",(function(){return cc})),n.d(b,"mirrorPad",(function(){return hc})),n.d(b,"mod",(function(){return dc})),n.d(b,"moments",(function(){return pc})),n.d(b,"mul",(function(){return Do})),n.d(b,"multiRNNCell",(function(){return fc})),n.d(b,"multinomial",(function(){return mc})),n.d(b,"neg",(function(){return Bl})),n.d(b,"notEqual",(function(){return gc})),n.d(b,"oneHot",(function(){return xi})),n.d(b,"ones",(function(){return bc})),n.d(b,"onesLike",(function(){return xc})),n.d(b,"outerProduct",(function(){return wc})),n.d(b,"pad",(function(){return kc})),n.d(b,"pad1d",(function(){return vc})),n.d(b,"pad2d",(function(){return Ic})),n.d(b,"pad3d",(function(){return Nc})),n.d(b,"pad4d",(function(){return Sc})),n.d(b,"pool",(function(){return $c})),n.d(b,"pow",(function(){return Xo})),n.d(b,"prelu",(function(){return Tc})),n.d(b,"print",(function(){return Xa})),n.d(b,"prod",(function(){return Ac})),n.d(b,"rand",(function(){return Ec})),n.d(b,"randomGamma",(function(){return Oc})),n.d(b,"randomNormal",(function(){return Mc})),n.d(b,"randomUniform",(function(){return zc})),n.d(b,"range",(function(){return Lc})),n.d(b,"real",(function(){return Pc})),n.d(b,"reciprocal",(function(){return Bc})),n.d(b,"relu",(function(){return Wc})),n.d(b,"relu6",(function(){return Vc})),n.d(b,"reshape",(function(){return Fu})),n.d(b,"reverse",(function(){return Uc})),n.d(b,"reverse1d",(function(){return Gc})),n.d(b,"reverse2d",(function(){return Hc})),n.d(b,"reverse3d",(function(){return jc})),n.d(b,"reverse4d",(function(){return qc})),n.d(b,"round",(function(){return Kc})),n.d(b,"rsqrt",(function(){return Xc})),n.d(b,"scalar",(function(){return Go})),n.d(b,"selu",(function(){return Yc})),n.d(b,"separableConv2d",(function(){return Zc})),n.d(b,"setdiff1dAsync",(function(){return Jc})),n.d(b,"sigmoid",(function(){return Mu})),n.d(b,"sign",(function(){return Qc})),n.d(b,"sin",(function(){return eh})),n.d(b,"sinh",(function(){return th})),n.d(b,"slice",(function(){return zu})),n.d(b,"slice1d",(function(){return nh})),n.d(b,"slice2d",(function(){return rh})),n.d(b,"slice3d",(function(){return sh})),n.d(b,"slice4d",(function(){return ah})),n.d(b,"softmax",(function(){return ih})),n.d(b,"softplus",(function(){return Wl})),n.d(b,"spaceToBatchND",(function(){return Cc})),n.d(b,"fft",(function(){return oh})),n.d(b,"ifft",(function(){return uh})),n.d(b,"irfft",(function(){return lh})),n.d(b,"rfft",(function(){return hh})),n.d(b,"split",(function(){return ch})),n.d(b,"sqrt",(function(){return _o})),n.d(b,"square",(function(){return Oo})),n.d(b,"squaredDifference",(function(){return dh})),n.d(b,"squeeze",(function(){return ph})),n.d(b,"stack",(function(){return fh})),n.d(b,"step",(function(){return mh})),n.d(b,"stridedSlice",(function(){return gh})),n.d(b,"sub",(function(){return Yo})),n.d(b,"sum",(function(){return Gl})),n.d(b,"tan",(function(){return yh})),n.d(b,"tanh",(function(){return Lu})),n.d(b,"tensor",(function(){return Zs})),n.d(b,"tensor1d",(function(){return bh})),n.d(b,"tensor2d",(function(){return xh})),n.d(b,"tensor3d",(function(){return vi})),n.d(b,"tensor4d",(function(){return wh})),n.d(b,"tensor5d",(function(){return kh})),n.d(b,"tensor6d",(function(){return vh})),n.d(b,"tile",(function(){return Il})),n.d(b,"topk",(function(){return Ih})),n.d(b,"truncatedNormal",(function(){return Nh})),n.d(b,"unique",(function(){return Sh})),n.d(b,"unsortedSegmentSum",(function(){return Ch})),n.d(b,"unstack",(function(){return $h})),n.d(b,"variable",(function(){return Th})),n.d(b,"where",(function(){return ml})),n.d(b,"whereAsync",(function(){return Eh})),n.d(b,"zeros",(function(){return yc})),n.d(b,"zerosLike",(function(){return Mo})),n.d(b,"transpose",(function(){return wi})),n.d(b,"op",(function(){return Ks})),n.d(b,"OP_SCOPE_SUFFIX",(function(){return qs})),n.d(b,"image",(function(){return Od})),n.d(b,"linalg",(function(){return Md})),n.d(b,"losses",(function(){return zd})),n.d(b,"spectral",(function(){return Dd})),n.d(b,"fused",(function(){return f})),n.d(b,"signal",(function(){return _d})),n.d(b,"train",(function(){return Pd})),n.d(b,"enableProdMode",(function(){return uo})),n.d(b,"enableDebugMode",(function(){return lo})),n.d(b,"disableDeprecationWarnings",(function(){return co})),n.d(b,"deprecationWarn",(function(){return ho})),n.d(b,"disposeVariables",(function(){return po})),n.d(b,"engine",(function(){return fo})),n.d(b,"memory",(function(){return mo})),n.d(b,"profile",(function(){return go})),n.d(b,"tidy",(function(){return yo})),n.d(b,"dispose",(function(){return bo})),n.d(b,"keep",(function(){return xo})),n.d(b,"time",(function(){return wo})),n.d(b,"setBackend",(function(){return ko})),n.d(b,"ready",(function(){return vo})),n.d(b,"getBackend",(function(){return Io})),n.d(b,"removeBackend",(function(){return No})),n.d(b,"findBackend",(function(){return So})),n.d(b,"findBackendFactory",(function(){return Co})),n.d(b,"registerBackend",(function(){return $o})),n.d(b,"backend",(function(){return To})),n.d(b,"setPlatform",(function(){return Ao})),n.d(b,"getKernel",(function(){return Hr})),n.d(b,"getGradient",(function(){return jr})),n.d(b,"getKernelsForBackend",(function(){return qr})),n.d(b,"registerKernel",(function(){return Kr})),n.d(b,"registerGradient",(function(){return Xr})),n.d(b,"unregisterKernel",(function(){return Yr})),n.d(b,"unregisterGradient",(function(){return Zr})),n.d(b,"copyRegisteredKernels",(function(){return Jr})),n.d(b,"Abs",(function(){return qe})),n.d(b,"Acos",(function(){return Ke})),n.d(b,"Acosh",(function(){return Xe})),n.d(b,"Add",(function(){return Ye})),n.d(b,"AddN",(function(){return Ze})),n.d(b,"All",(function(){return Je})),n.d(b,"Any",(function(){return Qe})),n.d(b,"ArgMax",(function(){return et})),n.d(b,"ArgMin",(function(){return tt})),n.d(b,"Asin",(function(){return nt})),n.d(b,"Asinh",(function(){return rt})),n.d(b,"Atan",(function(){return st})),n.d(b,"Atanh",(function(){return at})),n.d(b,"Atan2",(function(){return it})),n.d(b,"AvgPool",(function(){return ot})),n.d(b,"AvgPoolGrad",(function(){return ut})),n.d(b,"AvgPool3D",(function(){return lt})),n.d(b,"AvgPool3DGrad",(function(){return ct})),n.d(b,"BatchMatMul",(function(){return ht})),n.d(b,"BatchToSpaceND",(function(){return dt})),n.d(b,"Bincount",(function(){return pt})),n.d(b,"BroadcastTo",(function(){return ft})),n.d(b,"Cast",(function(){return mt})),n.d(b,"Ceil",(function(){return gt})),n.d(b,"ClipByValue",(function(){return yt})),n.d(b,"Complex",(function(){return bt})),n.d(b,"ComplexAbs",(function(){return xt})),n.d(b,"Concat",(function(){return wt})),n.d(b,"Conv2D",(function(){return kt})),n.d(b,"Conv2DBackpropFilter",(function(){return vt})),n.d(b,"Conv2DBackpropInput",(function(){return It})),n.d(b,"Conv3D",(function(){return Nt})),n.d(b,"Conv3DBackpropFilterV2",(function(){return St})),n.d(b,"Conv3DBackpropInputV2",(function(){return Ct})),n.d(b,"Cos",(function(){return $t})),n.d(b,"Cosh",(function(){return Tt})),n.d(b,"Cumsum",(function(){return At})),n.d(b,"CropAndResize",(function(){return Et})),n.d(b,"DenseBincount",(function(){return Rt})),n.d(b,"DepthToSpace",(function(){return Ft})),n.d(b,"DepthwiseConv2dNative",(function(){return Dt})),n.d(b,"DepthwiseConv2dNativeBackpropFilter",(function(){return _t})),n.d(b,"DepthwiseConv2dNativeBackpropInput",(function(){return Ot})),n.d(b,"Diag",(function(){return Mt})),n.d(b,"Dilation2D",(function(){return zt})),n.d(b,"Dilation2DBackpropInput",(function(){return Lt})),n.d(b,"Dilation2DBackpropFilter",(function(){return Pt})),n.d(b,"RealDiv",(function(){return Bt})),n.d(b,"Elu",(function(){return Wt})),n.d(b,"EluGrad",(function(){return Vt})),n.d(b,"Erf",(function(){return Ut})),n.d(b,"Equal",(function(){return Gt})),n.d(b,"Exp",(function(){return Ht})),n.d(b,"ExpandDims",(function(){return jt})),n.d(b,"Expm1",(function(){return qt})),n.d(b,"FFT",(function(){return Kt})),n.d(b,"Fill",(function(){return Xt})),n.d(b,"FlipLeftRight",(function(){return Yt})),n.d(b,"Floor",(function(){return Zt})),n.d(b,"FloorDiv",(function(){return Jt})),n.d(b,"FusedBatchNorm",(function(){return Qt})),n.d(b,"GatherV2",(function(){return en})),n.d(b,"GatherNd",(function(){return tn})),n.d(b,"Greater",(function(){return nn})),n.d(b,"GreaterEqual",(function(){return rn})),n.d(b,"Identity",(function(){return sn})),n.d(b,"IFFT",(function(){return an})),n.d(b,"Imag",(function(){return on})),n.d(b,"IsFinite",(function(){return un})),n.d(b,"IsInf",(function(){return ln})),n.d(b,"IsNan",(function(){return cn})),n.d(b,"LeakyRelu",(function(){return hn})),n.d(b,"Less",(function(){return dn})),n.d(b,"LessEqual",(function(){return pn})),n.d(b,"LinSpace",(function(){return fn})),n.d(b,"Log",(function(){return mn})),n.d(b,"Log1p",(function(){return gn})),n.d(b,"LogicalAnd",(function(){return yn})),n.d(b,"LogicalNot",(function(){return bn})),n.d(b,"LogicalOr",(function(){return xn})),n.d(b,"LogSoftmax",(function(){return wn})),n.d(b,"LRN",(function(){return kn})),n.d(b,"LRNGrad",(function(){return vn})),n.d(b,"Max",(function(){return In})),n.d(b,"Maximum",(function(){return Nn})),n.d(b,"MaxPool",(function(){return Sn})),n.d(b,"MaxPoolGrad",(function(){return Cn})),n.d(b,"MaxPool3D",(function(){return $n})),n.d(b,"MaxPool3DGrad",(function(){return Tn})),n.d(b,"MaxPoolWithArgmax",(function(){return An})),n.d(b,"Mean",(function(){return En})),n.d(b,"Min",(function(){return Rn})),n.d(b,"Minimum",(function(){return Fn})),n.d(b,"MirrorPad",(function(){return Dn})),n.d(b,"Mod",(function(){return _n})),n.d(b,"Multinomial",(function(){return On})),n.d(b,"Multiply",(function(){return Mn})),n.d(b,"Neg",(function(){return zn})),n.d(b,"NotEqual",(function(){return Ln})),n.d(b,"NonMaxSuppressionV3",(function(){return Pn})),n.d(b,"NonMaxSuppressionV4",(function(){return Bn})),n.d(b,"NonMaxSuppressionV5",(function(){return Wn})),n.d(b,"OnesLike",(function(){return Vn})),n.d(b,"OneHot",(function(){return Un})),n.d(b,"Pack",(function(){return Gn})),n.d(b,"PadV2",(function(){return Hn})),n.d(b,"Pool",(function(){return jn})),n.d(b,"Pow",(function(){return qn})),n.d(b,"Prelu",(function(){return Kn})),n.d(b,"Prod",(function(){return Xn})),n.d(b,"Range",(function(){return Yn})),n.d(b,"Real",(function(){return Zn})),n.d(b,"Reciprocal",(function(){return Jn})),n.d(b,"Relu",(function(){return Qn})),n.d(b,"Reshape",(function(){return er})),n.d(b,"ResizeNearestNeighbor",(function(){return tr})),n.d(b,"ResizeNearestNeighborGrad",(function(){return nr})),n.d(b,"ResizeBilinear",(function(){return rr})),n.d(b,"ResizeBilinearGrad",(function(){return sr})),n.d(b,"Relu6",(function(){return ar})),n.d(b,"Reverse",(function(){return ir})),n.d(b,"Round",(function(){return or})),n.d(b,"Rsqrt",(function(){return ur})),n.d(b,"ScatterNd",(function(){return lr})),n.d(b,"Select",(function(){return cr})),n.d(b,"Selu",(function(){return hr})),n.d(b,"Slice",(function(){return dr})),n.d(b,"Sin",(function(){return pr})),n.d(b,"Sinh",(function(){return fr})),n.d(b,"Sign",(function(){return mr})),n.d(b,"Sigmoid",(function(){return gr})),n.d(b,"Softplus",(function(){return yr})),n.d(b,"Sqrt",(function(){return br})),n.d(b,"Sum",(function(){return xr})),n.d(b,"SpaceToBatchND",(function(){return wr})),n.d(b,"SplitV",(function(){return kr})),n.d(b,"Softmax",(function(){return vr})),n.d(b,"SquaredDifference",(function(){return Ir})),n.d(b,"Square",(function(){return Nr})),n.d(b,"Sub",(function(){return Sr})),n.d(b,"SparseToDense",(function(){return Cr})),n.d(b,"StridedSlice",(function(){return $r})),n.d(b,"Tan",(function(){return Tr})),n.d(b,"Tanh",(function(){return Ar})),n.d(b,"Tile",(function(){return Er})),n.d(b,"TopK",(function(){return Rr})),n.d(b,"Transpose",(function(){return Fr})),n.d(b,"Unique",(function(){return Dr})),n.d(b,"Unpack",(function(){return _r})),n.d(b,"UnsortedSegmentSum",(function(){return Or})),n.d(b,"ZerosLike",(function(){return Mr})),n.d(b,"Step",(function(){return zr})),n.d(b,"FromPixels",(function(){return Lr})),n.d(b,"RotateWithOffset",(function(){return Pr})),n.d(b,"_FusedMatMul",(function(){return Br})),n.d(b,"FusedConv2D",(function(){return Wr})),n.d(b,"FusedDepthwiseConv2D",(function(){return Vr})),n.d(b,"booleanMaskAsync",(function(){return Rh})),n.d(b,"norm",(function(){return Fh})),n.d(b,"movingAverage",(function(){return Dh})),n.d(b,"scatterND",(function(){return _h})),n.d(b,"sparseToDense",(function(){return Oh})),n.d(b,"gatherND",(function(){return Mh})),n.d(b,"dropout",(function(){return zh})),n.d(b,"enclosingPowerOfTwo",(function(){return Lh})),n.d(b,"cosineWindow",(function(){return Ph})),n.d(b,"inTopKAsync",(function(){return Bh}));var x={};n.r(x),n.d(x,"json",(function(){return hw}));var w={};n.r(w),n.d(w,"json",(function(){return dw}));var k={};n.r(k),n.d(k,"json",(function(){return pw}));var v={};n.r(v),n.d(v,"json",(function(){return fw}));var I={};n.r(I),n.d(I,"json",(function(){return mw}));var N={};n.r(N),n.d(N,"json",(function(){return gw}));var S={};n.r(S),n.d(S,"json",(function(){return yw}));var C={};n.r(C),n.d(C,"json",(function(){return bw}));var $={};n.r($),n.d($,"json",(function(){return xw}));var T={};n.r(T),n.d(T,"json",(function(){return ww}));var A={};n.r(A),n.d(A,"json",(function(){return kw}));var E={};n.r(E),n.d(E,"json",(function(){return vw}));var R={};n.r(R),n.d(R,"json",(function(){return Iw}));var F={};n.r(F),n.d(F,"json",(function(){return Nw}));var D={};n.r(D),n.d(D,"json",(function(){return Sw}));var _={};n.r(_),n.d(_,"json",(function(){return Cw}));var O={};n.r(O),n.d(O,"json",(function(){return $w}));var M={};n.r(M),n.d(M,"array",(function(){return rv})),n.d(M,"Dataset",(function(){return tv})),n.d(M,"zip",(function(){return sv})),n.d(M,"CSVDataset",(function(){return pv})),n.d(M,"TextLineDataset",(function(){return iv})),n.d(M,"csv",(function(){return Tv})),n.d(M,"func",(function(){return Av})),n.d(M,"generator",(function(){return Ev})),n.d(M,"microphone",(function(){return Fv})),n.d(M,"webcam",(function(){return Rv})),n.d(M,"FileDataSource",(function(){return Cv})),n.d(M,"URLDataSource",(function(){return $v})),n.d(M,"version_data",(function(){return Dv}));var z={};n.r(z),n.d(z,"simpleAbsImpl",(function(){return bI})),n.d(z,"addImpl",(function(){return lI})),n.d(z,"bincountImpl",(function(){return tN})),n.d(z,"bincountReduceImpl",(function(){return nN})),n.d(z,"ceilImpl",(function(){return aN})),n.d(z,"concatImpl",(function(){return hN})),n.d(z,"expImpl",(function(){return ZN})),n.d(z,"expm1Impl",(function(){return nS})),n.d(z,"floorImpl",(function(){return vS})),n.d(z,"gatherV2Impl",(function(){return RS})),n.d(z,"greaterImpl",(function(){return DS})),n.d(z,"lessImpl",(function(){return jS})),n.d(z,"linSpaceImpl",(function(){return JS})),n.d(z,"logImpl",(function(){return eC})),n.d(z,"maxImpl",(function(){return mC})),n.d(z,"maximumImpl",(function(){return bC})),n.d(z,"minimumImpl",(function(){return EC})),n.d(z,"multiplyImpl",(function(){return aS})),n.d(z,"negImpl",(function(){return BC})),n.d(z,"notEqualImpl",(function(){return KC})),n.d(z,"prodImpl",(function(){return o$})),n.d(z,"rangeImpl",(function(){return l$})),n.d(z,"rsqrtImpl",(function(){return k$})),n.d(z,"sliceImpl",(function(){return ZI})),n.d(z,"squaredDifferenceImpl",(function(){return K$})),n.d(z,"stridedSliceImpl",(function(){return Q$})),n.d(z,"subImpl",(function(){return dS})),n.d(z,"tileImpl",(function(){return sT})),n.d(z,"topKImpl",(function(){return aT})),n.d(z,"transposeImpl",(function(){return SI})),n.d(z,"uniqueImpl",(function(){return iT}));var L=n("CcnG"),P=function(){return function(){}}(),B=n("pMnS"),W=n("Ip0R"),V=n("mrSG");const U=1e-7,G=1e-4;class H{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class j{decComplexRef(e){}time(e){return q("time")}read(e){return q("read")}readSync(e){return q("readSync")}numDataIds(){return q("numDataIds")}disposeData(e){return q("disposeData")}write(e,t,n){return q("write")}move(e,t,n,r){return q("move")}memory(){return q("memory")}floatPrecision(){return q("floatPrecision")}epsilon(){return 32===this.floatPrecision()?U:G}dispose(){return q("dispose")}}function q(e){throw new Error(`'${e}' not yet implemented or not found in the registry. `+"This kernel may not be supported by the tfjs backend you have chosen")}function K(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,n=e[--t],e[t]=e[r],e[r]=n}function X(e,t){if(e.length!==t.length)throw Error("Array sizes must match to be shuffled together "+`First array length was ${e.length}`+`Second array length was ${t.length}`);let n,r,s=e.length,a=0;for(;s>0;)a=Math.random()*s|0,n=e[--s],r=t[s],e[s]=e[a],t[s]=t[a],e[a]=n,t[a]=r}function Y(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e){return e%2==0?e:e+1}function J(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Q(e,t){const n=Math.random();return t*n+(1-n)*e}function ee(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function te(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function ne(e,t,n=""){te(oe(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function re(e){te(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function se(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||ve(e)&&!n)for(let r=0;r<e.length;++r)se(e[r],t,n);else t.push(e);return t}function ae(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ie(e){return 0===e.length}function oe(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ue(e){return e%1==0}function le(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function ce(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function he(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return K(t),t}function de(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function pe(e,t=(e=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(e())return void r();const o=t(++a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function fe(e,t){let n=1,r=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. "+`Found -1 at dim ${r} and dim ${a}`);r=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when `+"there are 0 elements");if(t%n!=0)throw Error("The implicit shape can't be a fractional number. "+`Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function me(e,t){const n=t.length;return te((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but `+`got axis ${e}`),te(e.every(e=>ue(e)),()=>"All values in axis param must be integers but "+`got axis ${e}`),e.map(e=>e<0?n+e:e)}function ge(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:me(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),r.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),r.push(o))}return{newShape:n,keptDims:r}}function ye(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function be(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function xe(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function we(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ke(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function ve(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function Ie(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Ne(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function Se(e){return"string"==typeof e||e instanceof String}function Ce(e){return"boolean"==typeof e}function $e(e){return"number"==typeof e}function Te(e){return Array.isArray(e)?Te(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":$e(e)?"float32":Se(e)?"string":Ce(e)?"bool":"float32"}function Ae(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Ee(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Re(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Fe(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return function e(t,n,r){const s=new Array;if(1===n.length){const e=n[0];for(let n=0;n<e;n++)s[n]=r[t+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((e,t)=>e*t);for(let n=0;n<a;n++)s[n]=e(t+n*o,i,r)}return s}(0,e,t)}function De(e,t){const n=_e(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function _e(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Oe(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return Fe(e,new Float32Array(n));if("int32"===t)return Fe(e,new Int32Array(n));if("bool"===t)return Fe(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Me(e){e.forEach(t=>{te(Number.isInteger(t)&&t>=0,()=>"Tensor must have a shape comprised of positive integers but got "+`shape [${e}].`)})}function ze(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=n[s]*e[s];return r}function Le(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(e/n[s]),e-=r[s]*n[s];return r[r.length-1]=e,r}function Pe(e){return e&&e.then&&"function"==typeof e.then}const Be="tfjsflags";class We{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. `+`Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags?this.flags[e]:(this.flags[e]=await this.evaluateFlag(e),this.flags[e])}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Pe(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. `+"Please use getAsync() instead.");return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);Be in e&&e[Be].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(`${+t}`===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function Ve(){return Ge}let Ue,Ge=null;function He(){if(null==Ue){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Ue=e}return Ue}function je(e,t){const n=function(){const e=He();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const qe="Abs",Ke="Acos",Xe="Acosh",Ye="Add",Ze="AddN",Je="All",Qe="Any",et="ArgMax",tt="ArgMin",nt="Asin",rt="Asinh",st="Atan",at="Atanh",it="Atan2",ot="AvgPool",ut="AvgPoolGrad",lt="AvgPool3D",ct="AvgPool3DGrad",ht="BatchMatMul",dt="BatchToSpaceND",pt="Bincount",ft="BroadcastTo",mt="Cast",gt="Ceil",yt="ClipByValue",bt="Complex",xt="ComplexAbs",wt="Concat",kt="Conv2D",vt="Conv2DBackpropFilter",It="Conv2DBackpropInput",Nt="Conv3D",St="Conv3DBackpropFilterV2",Ct="Conv3DBackpropInputV2",$t="Cos",Tt="Cosh",At="Cumsum",Et="CropAndResize",Rt="DenseBincount",Ft="DepthToSpace",Dt="DepthwiseConv2dNative",_t="DepthwiseConv2dNativeBackpropFilter",Ot="DepthwiseConv2dNativeBackpropInput",Mt="Diag",zt="Dilation2D",Lt="Dilation2DBackpropInput",Pt="Dilation2DBackpropFilter",Bt="RealDiv",Wt="Elu",Vt="EluGrad",Ut="Erf",Gt="Equal",Ht="Exp",jt="ExpandDims",qt="Expm1",Kt="FFT",Xt="Fill",Yt="FlipLeftRight",Zt="Floor",Jt="FloorDiv",Qt="FusedBatchNorm",en="GatherV2",tn="GatherNd",nn="Greater",rn="GreaterEqual",sn="Identity",an="IFFT",on="Imag",un="IsFinite",ln="IsInf",cn="IsNan",hn="LeakyRelu",dn="Less",pn="LessEqual",fn="LinSpace",mn="Log",gn="Log1p",yn="LogicalAnd",bn="LogicalNot",xn="LogicalOr",wn="LogSoftmax",kn="LRN",vn="LRNGrad",In="Max",Nn="Maximum",Sn="MaxPool",Cn="MaxPoolGrad",$n="MaxPool3D",Tn="MaxPool3DGrad",An="MaxPoolWithArgmax",En="Mean",Rn="Min",Fn="Minimum",Dn="MirrorPad",_n="Mod",On="Multinomial",Mn="Multiply",zn="Neg",Ln="NotEqual",Pn="NonMaxSuppressionV3",Bn="NonMaxSuppressionV4",Wn="NonMaxSuppressionV5",Vn="OnesLike",Un="OneHot",Gn="Pack",Hn="PadV2",jn="Pool",qn="Pow",Kn="Prelu",Xn="Prod",Yn="Range",Zn="Real",Jn="Reciprocal",Qn="Relu",er="Reshape",tr="ResizeNearestNeighbor",nr="ResizeNearestNeighborGrad",rr="ResizeBilinear",sr="ResizeBilinearGrad",ar="Relu6",ir="Reverse",or="Round",ur="Rsqrt",lr="ScatterNd",cr="Select",hr="Selu",dr="Slice",pr="Sin",fr="Sinh",mr="Sign",gr="Sigmoid",yr="Softplus",br="Sqrt",xr="Sum",wr="SpaceToBatchND",kr="SplitV",vr="Softmax",Ir="SquaredDifference",Nr="Square",Sr="Sub",Cr="SparseToDense",$r="StridedSlice",Tr="Tan",Ar="Tanh",Er="Tile",Rr="TopK",Fr="Transpose",Dr="Unique",_r="Unpack",Or="UnsortedSegmentSum",Mr="ZerosLike",zr="Step",Lr="FromPixels",Pr="RotateWithOffset",Br="_FusedMatMul",Wr="FusedConv2D",Vr="FusedDepthwiseConv2D",Ur=je("kernelRegistry",()=>new Map),Gr=je("gradRegistry",()=>new Map);function Hr(e,t){const n=Qr(e,t);return Ur.get(n)}function jr(e){return Gr.get(e)}function qr(e){const t=Ur.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function Kr(e){const{kernelName:t,backendName:n}=e,r=Qr(t,n);Ur.has(r)&&console.warn(`The kernel '${t}' for backend `+`'${n}' is already registered`),Ur.set(r,e)}function Xr(e){const{kernelName:t}=e;Gr.has(t)&&Ve().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Gr.set(t,e)}function Yr(e,t){const n=Qr(e,t);if(!Ur.has(n))throw new Error(`The kernel '${e}' for backend `+`'${t}' is not registered`);Ur.delete(n)}function Zr(e){if(!Gr.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Gr.delete(e)}function Jr(e,t){qr(e).forEach(e=>{Kr(Object.assign({},e,{backendName:t}))})}function Qr(e,t){return`${t}_${e}`}class es{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ns)}profileKernel(e,t,n){let r;const s=this.backendTimer.time(()=>{r=n()});if(Ve().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let a=0;a<r.length;a++){const t=r[a];t.data().then(n=>{ts(n,t.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}function ts(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class ns{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?de(`${r}ms`,9):r.error,o=de(e,25),u=t.rank,l=t.size,c=de(t.shape.toString(),14);let h="";for(const d in s){const e=s[d];if(null!=e){const n=e.shape||t.shape,r=n.length;h+=`${d}: ${r}D ${r>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const rs=20,ss=3,as=7;function is(e,t,n){let r;return de(r=Array.isArray(e)?`${parseFloat(e[0].toFixed(as))} + `+`${parseFloat(e[1].toFixed(as))}j`:Se(e)?`'${e}'`:"bool"===n?os(e):parseFloat(e.toFixed(as)).toString(),t)}function os(e){return 0===e?"false":"true"}function us(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function ls(e,t){return"string"===t?ps(e):cs([e],t)}function cs(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=se(e)),Ve().getBool("DEBUG")&&xe(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function hs(){return Ve().platform.now()}function ds(e,t){return Ve().platform.fetch(e,t)}function ps(e,t="utf-8"){return t=t||"utf-8",Ve().platform.encode(e,t)}function fs(e,t="utf-8"){return t=t||"utf-8",Ve().platform.decode(e,t)}class ms{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ae(e),null!=n){const e=n.length;te(e===this.size,()=>`Length of values '${e}' does not match the size `+`inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||be(t,this.size),this.strides=Re(e)}set(e,...t){0===t.length&&(t=[0]),te(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must `+`match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const r of e){if(r<0||r>=this.shape[t])throw new Error(`Requested out of range element at ${e}. `+`  Buffer shape=${this.shape}`);t++}let n=e[e.length-1];for(let r=0;r<e.length-1;++r)n+=this.strides[r]*e[r];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return gs().makeTensor(this.values,this.shape,this.dtype)}}let gs=null,ys=null,bs=null;class xs{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ae(e),this.strides=Re(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ys.buffer(this.shape,this.dtype,e)}bufferSync(){return ys.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Fe(this.shape,e)}arraySync(){return Fe(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=gs().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>fs(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=gs().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>fs(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await gs().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(gs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ys.print(this,e)}clone(){return this.throwIfDisposed(),ys.clone(this)}toString(e=!1){return function(e,t,n,r){const s=Re(t),a=function(e,t,n,r){const s=ae(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?us(e):e;if(o>1)for(let l=0;l<s/a;l++){const e=l*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],is(u[e+t],0,n).length)}return i}(e,t,n,s),i=t.length,o=function e(t,n,r,s,a,i=!0){const o="complex64"===r?2:1,u=n[0],l=n.length;if(0===l)return"complex64"===r?[is(us(t)[0],0,r)]:"bool"===r?[os(t[0])]:[t[0].toString()];if(1===l){if(u>rs){let e=Array.from(t.slice(0,ss*o)),n=Array.from(t.slice((u-ss)*o,u*o));return"complex64"===r&&(e=us(e),n=us(n)),["["+e.map((e,t)=>is(e,a[t],r)).join(", ")+", ..., "+n.map((e,t)=>is(e,a[u-ss+t],r)).join(", ")+"]"]}return["["+("complex64"===r?us(t):Array.from(t)).map((e,t)=>is(e,a[t],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),d=s[0]*o,p=[];if(u>rs){for(let n=0;n<ss;n++){const s=n*d;p.push(...e(t.slice(s,s+d),c,r,h,a,!1))}p.push("...");for(let n=u-ss;n<u;n++){const s=n*d;p.push(...e(t.slice(s,s+d),c,r,h,a,n===u-1))}}else for(let g=0;g<u;g++){const n=g*d;p.push(...e(t.slice(n,n+d),c,r,h,a,g===u-1))}const f=2===l?",":"";p[0]="["+p[0]+f;for(let g=1;g<p.length-1;g++)p[g]=" "+p[g]+f;let m=",\n";for(let g=2;g<l;g++)m+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(i?"":m),p}(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map(e=>"    "+e).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ys.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),gs().makeVariable(this,e,t,n)}}function ws(){return je("Tensor",()=>xs)}Object.defineProperty(xs,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ws();class ks extends xs{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and `+`previous value (${this.dtype}) must match`);if(!oe(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and `+`previous value (${this.shape}) must match`);gs().disposeTensor(this),this.dataId=e.dataId,gs().incRef(this,null)}dispose(){gs().disposeVariable(this),this.isDisposedInternal=!0}}var vs,Is,Ns,Ss,Cs;Object.defineProperty(ks,Symbol.hasInstance,{value:e=>e instanceof xs&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(vs||(vs={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Is||(Is={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Ns||(Ns={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ss||(Ss={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Cs||(Cs={}));const $s={float32:Ss,int32:Is,bool:Ns,complex64:Cs};function Ts(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return $s[e][t]}function As(e){return Ts(e,"int32")}function Es(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ts(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Rs(e,t){te(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and`+` second(${t.dtype}) input must match`)}function Fs(e,t){return t.some(t=>t.id===e.id)}function Ds(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof xs)return void n.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=t;for(const i in a){const t=a[i];r.has(t)||(r.add(t),e(t,n,r))}}(e,t,new Set),t}function _s(e){return null!=e.kernelName}class Os{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ms{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Os}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make `+"sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been `+"initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. `+"Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new es(this.backendInstance),!0}setupRegisteredKernels(){qr(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){qr(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof j||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>!(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message),1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>((n=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return Ms.nextTensorId++}nextVariableId(){return Ms.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype);return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>Ls.runKernel(mt,{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){if(null==Hr(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=r-t-s-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak `+`(${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const u=_s(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(_s(e)){const{kernelName:t,inputs:s,attrs:a}=e,u=Hr(t,this.backendName);te(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map(e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)});if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy(()=>t(this.backend,s));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=_s(e)?null:e.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,l,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()}),r&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(e=>null!=l[e]?l[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=jr(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(te(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>s[t]);return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");r=r||this.backend;let s=e;"string"===(n=n||"float32")&&Se(e[0])&&(s=e.map(e=>ps(e)));const a=r.write(s,t,n),i=new xs(t,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=Ne(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s=new xs(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new ks(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Ie(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof ks||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=jr(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=_e(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ds(e),n=new Set(t.map(e=>e.id));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(te(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));te(s instanceof xs,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(r[i.id]){n.outputs.forEach(e=>r[e.id]=!0),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let u=0;u<e.length;u++){const t=e[u];if(s[t.id]&&i[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=De(ae(e),"float32");return Ls.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error("Cannot compute gradient: gradient function not found "+`for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. `+`Available gradients found: ${Object.keys(o)}.`);const s=n(()=>o[t]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input `+`${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!oe(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input `+`'${t}' has shape '${s.shape}', which does not match `+`the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,e=>this.tidy(e),Ps);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return te(Ae(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;te(t.every(e=>e instanceof xs),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,s)=>(te((n=e(...t,s)).value instanceof xs,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),te(Ae(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];te(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),te(a.every(e=>e instanceof xs),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=hs(),n=await this.backend.time(e);return n.wallMs=hs()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Os;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function zs(){const e=He();if(null==e._tfengine){const t=new We(e);e._tfengine=new Ms(t)}return Ge=e._tfengine.ENV,gs=()=>e._tfengine,e._tfengine}Ms.nextTensorId=0,Ms.nextVariableId=0;const Ls=zs();function Ps(e,t){return Ls.runKernel(Ye,{a:e,b:t})}function Bs(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Ws(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Vs=Ve();function Us(e,t){let n=e;if(ve(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||ve(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Ve().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!ve(t))return void te(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, `+`but should be an array/TypedArray of ${n[0]} elements`);te(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, `+`but is an array of ${t.length} elements`),te(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} `+`elements, but has ${t.length} elements`);const s=n.slice(1);for(let a=0;a<t.length;++a)e(t[a],s,r.concat(a))}(e,r,[]),r}function Gs(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must `+`be ${e} tensor, but got ${t} tensor`)}}function Hs(e,t,n,r="numeric"){if(e instanceof xs)return Gs(r,e.dtype,t,n),e;let s=Te(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Gs(r,s,t,n),null==e||!ve(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a `+`Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=Us(e,s);ve(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?cs(e,s):se(e,[],!0);return Ls.makeTensor(i,a,s)}function js(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a `+"`Tensor[]` or `TensorLike[]`");return e.map((e,s)=>Hs(e,`${t}[${s}]`,n,r))}Vs.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Vs.registerFlag("IS_BROWSER",()=>Ws()),Vs.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Vs.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Vs.registerFlag("PROD",()=>!1),Vs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Vs.getBool("DEBUG")),Vs.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Vs.registerFlag("IS_TEST",()=>!1),Vs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);const qs="__op";function Ks(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+`${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=qs;const s=(...e)=>{Ls.startScope(n);try{const t=r(...e);return Pe(t)&&console.error("Cannot return a Promise inside of tidy."),Ls.endScope(t),t}catch(t){throw Ls.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Xs=Ks({complex_:function(e,t){const n=Hs(e,"real","complex"),r=Hs(t,"imag","complex");return ne(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, `+"must match in call to tf.complex()."),Ls.runKernel(bt,{real:n,imag:r})}});function Ys(e,t,n,r){if(null==r&&(r=Te(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!ve(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Me(t);const e=ae(t),r=ae(n);te(e===r,()=>`Based on the provided shape, [${t}], the tensor should have `+`${e} values but has ${r}`);for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==ae(t.slice(s));te(n[s]===t[s]||!r,()=>"Error creating a new Tensor. Inferred shape "+`(${n}) does not match the provided `+`shape (${t}). `)}}return ve(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?cs(e,r):se(e,[],!0),Ls.makeTensor(e,t,r)}function Zs(e,t,n){return Ys(e,t,Us(e,n),n)}const Js={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Qs=4;async function ea(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+Qs*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),r.set(e,s+=Qs),s+=e.length}e(r)});r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:na(await Promise.all(r)),specs:n}}function ta(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,u=ae(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n&&"scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} `+"doesn't have corresponding metadata min and scale.")}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown `+`quantization dtype ${n.dtype}. `+"Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.");if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} `+`which only supports weights of type float32 not ${i}.`)}const o=Js[n.dtype],c=e.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++)l[e]=h[e]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} `+"for weight type float32.");void 0===r&&(r=ua()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} `+"for weight type int32.");l=new Int32Array(h.length);for(let e=0;e<h.length;e++)l[e]=Math.round(h[e]*n.scale+n.min)}s+=u*o}else if("string"===i){const t=ae(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+Qs))[0];s+=Qs;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Js[i],a=e.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=Zs(e,o,"float32"),i=Zs(r,o,"float32");n[t]=Xs(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[t]=Zs(l,o,i))}return n}function na(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}const ra="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function sa(e){return ra?Buffer.byteLength(e):new Blob([e]).size}function aa(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function ia(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function oa(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:sa(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:sa(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function ua(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return(t&=-8388609)|n+947912704},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i];a[i]=e[n[s>>10]+(1023&s)]+t[s>>10]}return new Float32Array(s)}}class la{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==la.instance&&(la.instance=new la),la.instance}static registerSaveRouter(e){la.getInstance().saveRouters.push(e)}static registerLoadRouter(e){la.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return la.getHandlers(e,"save")}static getLoadHandlers(e,t){return la.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?la.getInstance().loadRouters:la.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}const ca=e=>la.registerSaveRouter(e),ha=e=>la.registerLoadRouter(e),da=e=>la.getSaveHandlers(e),pa=(e,t)=>la.getLoadHandlers(e,t),fa="tensorflowjs",ma=1,ga="models_store",ya="model_info_store";function ba(){if(!Ve().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function xa(e){const t=e.result;t.createObjectStore(ga,{keyPath:"modelPath"}),t.createObjectStore(ya,{keyPath:"modelPath"})}class wa{constructor(e){if(this.indexedDB=ba(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open(fa,ma);r.onupgradeneeded=()=>xa(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(ga,"readonly"),r=t.objectStore(ga).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' `+"in IndexedDB."));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=oa(t),a=s.transaction(ya,"readwrite");let i=a.objectStore(ya);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{const o=(u=s.transaction(ga,"readwrite")).objectStore(ga).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{const t=(i=a.objectStore(ya)).delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}wa.URL_SCHEME="indexeddb://";const ka=e=>Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(wa.URL_SCHEME)?function(e){return new wa(e)}(e.slice(wa.URL_SCHEME.length)):null;la.registerSaveRouter(ka),la.registerLoadRouter(ka);class va{constructor(){this.indexedDB=ba()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(fa,ma);n.onupgradeneeded=()=>xa(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(ya,"readonly"),a=s.objectStore(ya).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(wa.URL_SCHEME)?t.slice(wa.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open(fa,ma);r.onupgradeneeded=()=>xa(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(ya,"readwrite"),i=a.objectStore(ya),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' `+"in IndexedDB."));{const r=i.delete(e),a=()=>{const r=(u=s.transaction(ga,"readwrite")).objectStore(ga).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}const Ia="/",Na="tensorflowjs_models",Sa="info",Ca="model_topology",$a="weight_specs",Ta="weight_data",Aa="model_metadata";function Ea(e){return{info:[Na,e,Sa].join(Ia),topology:[Na,e,Ca].join(Ia),weightSpecs:[Na,e,$a].join(Ia),weightData:[Na,e,Ta].join(Ia),modelMetadata:[Na,e,Aa].join(Ia)}}function Ra(e){const t=e.split(Ia);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Ia)}class Fa{constructor(e){if(!Ve().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Ea(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=oa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(ra)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:s}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: `+"size quota being exceeded is a possible cause of this failure: "+`modelTopologyBytes=${s.modelTopologyBytes}, `+`weightSpecsBytes=${s.weightSpecsBytes}, `+`weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' `+"is missing.");t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' `+"are missing.");t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error("In local storage, the binary weight values of model "+`'${this.modelPath}' are missing.`);return t.weightData=function(e){if(ra){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(a),t}}Fa.URL_SCHEME="localstorage://";const Da=e=>Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Fa.URL_SCHEME)?function(e){return new Fa(e)}(e.slice(Fa.URL_SCHEME.length)):null;la.registerSaveRouter(Da),la.registerLoadRouter(Da);class _a{constructor(){te(Ve().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),te("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Na+Ia,n=Ia+Sa;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[Ra(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=Ea(e=(t=e).startsWith(Fa.URL_SCHEME)?t.slice(Fa.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const Oa="://";class Ma{constructor(){this.managers={}}static getInstance(){return null==Ma.instance&&(Ma.instance=new Ma),Ma.instance}static registerManager(e,t){te(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(Oa)&&(e=e.slice(0,e.indexOf(Oa))),te(e.length>0,()=>"scheme must not be an empty string.");const n=Ma.getInstance();te(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function za(e){if(-1===e.indexOf(Oa))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+`${Ma.getSchemes().join(",")}`);return{scheme:e.split(Oa)[0],path:e.split(Oa)[1]}}async function La(e,t,n=!1){te(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=la.getLoadHandlers(e);te(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),te(r.length<2,()=>`Copying failed because more than one (${r.length}) `+`load handlers for source URL ${e}.`);const s=r[0],a=la.getSaveHandlers(t);te(a.length>0,()=>"Copying failed because no save handler is found for destination "+`URL ${t}.`),te(a.length<2,()=>`Copying failed because more than one (${r.length}) `+`save handlers for destination URL ${t}.`);const i=a[0],o=za(e).scheme,u=za(e).path,l=o===za(e).scheme,c=await s.load();n&&l&&await Ma.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await Ma.getManager(o).removeModel(u),h.modelArtifactsInfo}async function Pa(){const e=Ma.getSchemes(),t={};for(const n of e){const e=await Ma.getManager(n).listModels();for(const r in e)t[n+Oa+r]=e[r]}return t}async function Ba(e){const t=za(e);return Ma.getManager(t.scheme).removeModel(t.path)}async function Wa(e,t){return La(e,t,!1)}async function Va(e,t){return La(e,t,!0)}class Ua{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Ve().get("IS_BROWSER")){Ve().setPlatform("browser",new Ua);try{Ma.registerManager(Fa.URL_SCHEME,new _a)}catch(LM){}try{Ma.registerManager(wa.URL_SCHEME,new va)}catch(LM){}}const Ga=()=>n(4);let Ha;function ja(e,t="float32",n){return t=t||"float32",Me(e),new ms(e,t,n)}Ve().get("IS_NODE")&&Ve().setPlatform("node",new class{constructor(){this.util=n(5),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Ve().global.fetch?Ve().global.fetch(e,t):(null==Ha&&(Ha=Ga()),Ha(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const qa=Ks({cast_:function(e,t){const n=Hs(e,"x","cast");if(!we(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return Ls.runKernel(mt,{x:n},{dtype:t})}}),Ka=Ks({clone_:function(e){const t=Hs(e,"x","clone","string_or_numeric");return Ls.runKernel(sn,{x:t})}});function Xa(e,t=!1){console.log(e.toString(t))}zs(),ys={buffer:ja,cast:qa,clone:Ka,print:Xa};const Ya="model",Za=".json",Ja=".weights.bin";function Qa(e){return new Promise(e=>setTimeout(e)).then(e)}class ei{constructor(e){if(!Ve().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ei.URL_SCHEME)&&(e=e.slice(ei.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Ya),this.modelTopologyFileName=e+Za,this.weightDataFileName=e+Ja}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=r,await Qa(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Qa(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:oa(e)}}}}ei.URL_SCHEME="downloads://";class ti{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, "+`but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error(`weightManifest field is missing from file ${e.name}`));let u;try{u=this.checkManifestAndWeightFiles(o,t)}catch(LM){return void r(LM)}const l=[],c=[],h=[];o.forEach(e=>{e.paths.forEach(e=>{c.push(e),h.push(null)}),l.push(...e.weights)}),o.forEach(e=>{e.paths.forEach(e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,s=c.indexOf(e);if(h[s]=r,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:l,weightData:aa(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])})})},s.onerror=t=>r("Failed to read model topology and weights manifest JSON "+`from file '${e.name}'. BrowserFiles supports loading `+"Keras-style tf.Model artifacts only."),s.readAsText(e)})}checkManifestAndWeightFiles(e,t){const n=[],r=t.map(e=>ia(e.name)),s={};for(const a of e)a.paths.forEach(e=>{const a=ia(e);if(-1!==n.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: "+`'${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=t[r.indexOf(a)]});if(n.length!==t.length)throw new Error("Mismatch in the number of files in weights manifest "+`(${n.length}) and the number of weight files provided `+`(${t.length}).`);return s}}function ni(e){return new ti(e)}function ri(e,t,n,r){!function(e){te(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){te(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but "+`got startFraction ${e}`),te(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but "+`got endFraction ${t}`),te(t>=e,()=>"startFraction must be no more than endFraction, but "+`got startFraction ${e} and endFraction `+`${t}`)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++s/e.length*(r-n);return t(i),a}),a)))}async function si(e,t){null==t&&(t={});const n=null==t.fetchFunc?Ve().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await ri(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await ri(s,t.onProgress,.5,1)}async function ai(e,t="",n,r){return ii(e=>si(e,{requestInit:r}))(e,t,n)}function ii(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u=Js["quantization"in e?e.quantization.dtype:e.dtype]*ae(e.shape),l=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((t,n)=>{t===e.name&&(l(),i[n]=!0)}):l(),o.push(e.name),n+=u})}),!i.every(e=>e)){const e=r.filter((e,t)=>!i[t]);throw new Error("Could not find weights in manifest with names: "+`${e.join(", ")}. \n`+"Manifest JSON has weights with names: "+`${o.join(", ")}.`)}const u=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const c=await e(l),h={};let d=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[d+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[d+t]);i.set(e,o),o+=e.byteLength}a[e].forEach(e=>{const t=ta(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]}),d+=n}),h}}la.registerSaveRouter(e=>Ve().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ei.URL_SCHEME)?function(e="model"){return new ei(e)}(e.slice(ei.URL_SCHEME.length)):null);const oi="application/octet-stream",ui="application/json";class li{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(te("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=Ve().platform.fetch,te(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&te(2===e.length,()=>"URL paths for http must have a length of 2, "+`(actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./model.weights.bin"],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(n)],{type:ui}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:oi}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:oa(e),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+`${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+`${e.status}. Please verify this URL points to `+"the model JSON of the model to load.");let t;try{t=await e.json()}catch(p){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,u=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model `+"topology or manifest for weights.");let l,c;if(null!=r){const e=await this.loadWeights(r);[l,c]=e}const h={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:s,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=u&&(h.userDefinedMetadata=u);const d=t.modelInitializer;return d&&(h.modelInitializer=d),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[];for(const u of e)a.push(...u.weights);const i=[],o=[];for(const u of e)for(const e of u.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,aa(await si(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ci(e){return null!=e.match(li.URL_SCHEME_REGEX)}li.URL_SCHEME_REGEX=/^https?:\/\//;const hi=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>ci(e)):ci(e))return di(e,t)}return null};function di(e,t){return new li(e,t)}function pi(e,t){return di(e,t)}la.registerSaveRouter(hi),la.registerLoadRouter(hi);class fi{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class mi{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function gi(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new fi(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fi({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new fi({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function yi(e){return new mi(e)}const bi=Ks({matMul_:function(e,t,n=!1,r=!1){let s=Hs(e,"a","matMul"),a=Hs(t,"b","matMul");return[s,a]=Es(s,a),Ls.runKernel(ht,{a:s,b:a},{transposeA:n,transposeB:r})}}),xi=Ks({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s=Hs(e,"indices","oneHot","int32");return Ls.runKernel(Un,{indices:s},{depth:t,onValue:n,offValue:r})}}),wi=Ks({transpose_:function(e,t){const n=Hs(e,"x","transpose");return null==t&&(t=n.shape.map((e,t)=>t).reverse()),te(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} `+`must match length of perm ${t}.`),t.forEach(e=>{te(e>=0&&e<n.rank,()=>`All entries in 'perm' must be between 0 and ${n.rank-1}`+` but got ${t}`)}),n.rank<=1?n.clone():Ls.runKernel(Fr,{x:n},{perm:t})}}),ki=Ks({confusionMatrix_:function(e,t,n){const r=Hs(e,"labels","confusionMatrix"),s=Hs(t,"predictions","confusionMatrix");te(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, "+`but got ${n}`),te(1===r.rank,()=>`Expected the rank of labels to be 1, but got ${r.rank}`),te(1===s.rank,()=>"Expected the rank of predictions to be 1, "+`but got ${s.rank}`),te(r.shape[0]===s.shape[0],()=>"Mismatch in the number of examples: "+`${r.shape[0]} vs. ${s.shape[0]}. `+"Labels and predictions should have the same number of elements."),te(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+`${n}`);const a=xi(qa(r,"int32"),n),i=xi(qa(s,"int32"),n),o=wi(a),u=bi(o,i);return qa(u,"int32")}});function vi(e,t,n){if(re(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Us(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ys(e,t,r,n)}let Ii;async function Ni(e,t){let n=Hs(e,"img","toPixels");if(!(e instanceof xs)){const e=n;n=qa(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size "+`1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}.`+" Please use float32 or int32 tensors.");const i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let l=0;l<r*s;++l){const e=[0,0,0,255];for(let r=0;r<a;r++){const t=i[l*a+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error("Tensor values for a float32 Tensor must be in the "+`range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error("Tensor values for a int32 Tensor must be in the "+`range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[r]=t*o}const t=4*l;u[t+0]=Math.round(e[0]),u[t+1]=Math.round(e[1]),u[t+2]=Math.round(e[2]),u[t+3]=Math.round(e[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const Si=Ks({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, "+`but was ${e.constructor.name}`);o=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Hr(Lr,Ls.backendName))return Ls.runKernel(Lr,{pixels:e},{numChannels:t});const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,u,l).data:r||n?c=e.data:(a||s||o)&&(null==Ii&&(Ii=document.createElement("canvas").getContext("2d")),Ii.canvas.width=u,Ii.canvas.height=l,Ii.drawImage(e,0,0,u,l),c=Ii.getImageData(0,0,u,l).data),4===t)h=new Int32Array(c);else{const e=u*l;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return vi(h,[l,u,t],"int32")}});function Ci(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher,"+` but the rank was ${n}.`);if(r<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher,"+` but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type,"+` but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+`${t.shape[r-1]} vs. ${n}`);if(0===ae(e.shape))throw new Error("Requested more than 0 entries, but input is empty."+` Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let h=0;h<s.length-1;++h)i*=s[h];const o=e.shape,u=s.slice();u.pop();let l=1;for(let h=a;h<n;++h)l*=o[h],u.push(o[h]);const c=[...Re(e.shape).map(e=>e/l),1].slice(0,a);return[u,i,l,c]}function $i(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + "+`shape[sliceDim:], got updates.shape: ${n.shape}`+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+` update.rank != ${s+e.length-r}`);for(let i=0;i<s;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==e[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${e[i+s]})`)}function Ti(e,t,n){if(t.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher,"+` but the rank was ${t.rank}.`);if(e.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher,"+` but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}$i(n,t,e)}function Ai(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let u=s;u<a;++u)i*=n[u];const o=s<1?1:s;return{sliceRank:s,numUpdates:ae(t.shape)/o,sliceSize:i,strides:[...Re(n.slice(0,s)),1],outputSize:ae(n)}}function Ei(e,t,n){const r=e.shape.length;te(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must `+`match the rank of the array (${r}).`),te(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must `+`match the rank of the array (${r}).`);for(let s=0;s<r;++s)te(t[s]+n[s]<=e.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] `+`(${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`)}function Ri(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Fi(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Di(e,t,n,r){const s=[...e];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<n;a++)0===a?s[t]=1:(s.splice(t,0,1),s.pop());return s}function _i(e,t,n){return n<=e?n:n-(t-1)}function Oi(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Mi(e,t,n,r,s,a,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),d=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=zi(i,u,l,r,e),h=Li(o,u,l,s,e),d=Di(a,u,l,e)}else for(let p=0;p<l;p++)c[p]=Bi(i,r,a,e,p,u),h[p]=Wi(o,s,a,e,p,u),d[p]=Pi(a,p,u);return{begin:c,end:h,strides:d}}function zi(e,t,n,r,s){const a=[...s],i=Oi(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const s=_i(t,n,o);let i=r[s];e&1<<s&&(i=0),a[o]=i}return a}function Li(e,t,n,r,s){const a=[...s],i=Oi(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const s=_i(t,n,o);let i=r[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=s[o];a[o]<0&&(a[o]+=e),a[o]=Y(0,a[o],s[o])}return a}function Pi(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Bi(e,t,n,r,s,a){let i=t[s];(e&1<<s||a&1<<s||null==i)&&(i=(n[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return i<0&&(i+=o),Y(0,i,o-1)}function Wi(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),o>0?Y(0,i,u):Y(-1,i,u-1)}function Vi(e,t,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Ui(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Gi(e,t,n){let r;const s=e.shape.length;let a;return(r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice()).forEach(e=>{te(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n).map((t,n)=>t>=0?t:(te(-1===t,()=>"Negative size values should be exactly -1 but got "+`${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function Hi(e,t,n,r,s,a,i,o,u){let l=t.slice(),c=n.slice(),h=r;null==r&&(h=new Array(l.length));const d=Ri(i);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=e.length-l.length,f=Ri(o),m=e.slice();f.forEach(e=>{l[e]=0,c[e]=1,m.splice(e,0,1)});const{begin:g,end:y,strides:b}=Mi(m,d,p,l,c,h,s,a,i);l=g,c=y,h=b;const x=Ri(u);x.forEach(e=>{c[e]=l[e]+1,h[e]=1});const w=Fi(l,c,h),k=w.filter((e,t)=>-1===x.indexOf(t));return{nonStrided:h.every(e=>1===e),$begin:l,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class ji{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class qi{constructor(){this.classNameMap={}}static getMap(){return null==qi.instance&&(qi.instance=new qi),qi.instance}static register(e){qi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ki(e){te(null!=e.className,()=>"Class being registered does not have the static className property defined."),te("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),te(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),qi.register(e)}const Xi=.001,Yi=.1;function Zi(e,t,n){return null==n&&(n=Ji()),Qi(e,t,(e,t)=>ro(e,t,n))}function Ji(){return 32===Ls.backend.floatPrecision()?Xi:Yi}function Qi(e,t,n){let r=!0;if((ve(e)||ve(t))&&(r=!1),ve(e)&&ve(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. `+`Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Us(e),r=Us(t);if(!oe(n,r))throw new Error("Arrays have different shapes. "+`Actual: [${n}]. Expected: [${r}]`)}const s=ve(e)?e:se(e),a=ve(t)?t:se(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs `+`expected: ${a.length}.\n`+`Actual:   ${s}.\n`+`Expected: ${a}.`);for(let i=0;i<a.length;++i){const e=s[i],t=a[i];if(!n(e,t))throw new Error(`Arrays differ: actual[${i}] = ${e}, expected[${i}] = ${t}.\n`+`Actual:   ${s}.\n`+`Expected: ${a}.`)}}function eo(e,t){e().then(()=>t.fail(),()=>t())}function to(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Se(e)||Se(e[0])||Se(t)||Se(t[0])?Qi(e,n,(e,t)=>e==t):Qi(e,t,(e,t)=>ro(e,t,0))}function no(e,t,n){if(null==n&&(n=Ji()),!ro(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function ro(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function so(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function ao(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function io(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?io(n):e[t]=ps(n)}return e}const oo="3.0.0";function uo(){Ve().set("PROD",!0)}function lo(){Ve().set("DEBUG",!0)}function co(){Ve().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ho(e){Ve().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function po(){Ls.disposeVariables()}function fo(){return Ls}function mo(){return Ls.memory()}function go(e){return Ls.profile(e)}function yo(e,t){return Ls.tidy(e,t)}function bo(e){Ds(e).forEach(e=>e.dispose())}function xo(e){return Ls.keep(e)}function wo(e){return Ls.time(e)}function ko(e){return Ls.setBackend(e)}function vo(){return Ls.ready()}function Io(){return Ls.backendName}function No(e){Ls.removeBackend(e)}function So(e){return Ls.findBackend(e)}function Co(e){return Ls.findBackendFactory(e)}function $o(e,t,n=1){return Ls.registerBackend(e,t,n)}function To(){return Ls.backend}function Ao(e,t){Ve().setPlatform(e,t)}bs=ho;const Eo=Ks({add_:function(e,t){let n=Hs(e,"a","add"),r=Hs(t,"b","add");return[n,r]=Es(n,r),Ls.runKernel(Ye,{a:n,b:r})}}),Ro=Ks({floorDiv_:function(e,t){let n=Hs(e,"a","floorDiv"),r=Hs(t,"b","floorDiv");return[n,r]=Es(n,r),Ls.runKernel(Jt,{a:n,b:r})}}),Fo=Ks({div_:function(e,t){let n=Hs(e,"a","div"),r=Hs(t,"b","div");return[n,r]=Es(n,r),"int32"===n.dtype&&"int32"===r.dtype?Ro(n,r):Ls.runKernel(Bt,{a:n,b:r},{})}}),Do=Ks({mul_:function(e,t){let n=Hs(e,"a","mul"),r=Hs(t,"b","mul");return[n,r]=Es(n,r),Ls.runKernel(Mn,{a:n,b:r})}}),_o=Ks({sqrt_:function(e){const t=Hs(e,"x","sqrt");return Ls.runKernel(br,{x:t})}}),Oo=Ks({square_:function(e){const t=Hs(e,"x","square");return Ls.runKernel("Square",{x:t},{})}}),Mo=Ks({zerosLike_:function(e){const t=Hs(e,"x","zerosLike");return Ls.runKernel(Mr,{x:t})}});function zo(e){return te(Ae(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{const r=Hs(t,"x","tf.grad","string_or_numeric"),s=null!=n?Hs(n,"dy","tf.grad"):null;return Ls.tidy(()=>{const{value:t,grads:n}=Ls.gradients(()=>e(r),[r],s);return null!=s&&ne(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Uo(n),n[0]})}}function Lo(e){return te(Ae(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{te(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=js(t,"args","tf.grads","string_or_numeric"),s=null!=n?Hs(n,"dy","tf.grads"):null;return Ls.tidy(()=>{const{value:t,grads:n}=Ls.gradients(()=>e(...r),r,s);return null!=s&&ne(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Uo(n),n})}}function Po(e){return te(Ae(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{te(t instanceof xs,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),te(null==n||n instanceof xs,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Ls.gradients(()=>e(t),[t],n);return Uo(r),{grad:r[0],value:s}}}function Bo(e){return te(Ae(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{te(Array.isArray(t)&&t.every(e=>e instanceof xs),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),te(null==n||n instanceof xs,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Ls.gradients(()=>e(...t),t,n);return null!=n&&ne(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Uo(r.grads),r}}function Wo(e,t){te(Ae(e),()=>"The f passed in variableGrads(f) must be a function"),te(null==t||Array.isArray(t)&&t.every(e=>e instanceof ks),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in Ls.registeredVariables)t.push(Ls.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,s=t.length;te((t=t.filter(e=>e.trainable)).length>0,()=>"variableGrads() expects at least one of the input variables to "+`be trainable, but none of the ${s} variables is `+"trainable.");const{value:a,grads:i}=Ls.gradients(e,t,null,!0);te(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),te(0===a.rank,()=>"The f passed in variableGrads(f) must return a scalar, but it "+`returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:a,grads:o}}function Vo(e){return Ls.customGrad(e)}function Uo(e){if(e.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Go(e,t){if((ve(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ve(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ys(e,[],[],t)}class Ho extends ji{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:s[e.name]}));this.applyGradients(e)}else this.applyGradients(s);return bo(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Wo(e,t)}dispose(){null!=this.iterations_&&bo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Go(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+`${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ho,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class jo extends Ho{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ls.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ls.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:yo(()=>Mo(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:yo(()=>Mo(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;yo(()=>{const e=Eo(Do(a,this.rho),Do(Oo(s),1-this.rho)),t=Do(Fo(_o(Eo(i,this.epsilon)),_o(Eo(a,this.epsilon))),s),n=Eo(Do(i,this.rho),Do(Oo(t),1-this.rho));a.assign(e),i.assign(n);const o=Eo(Do(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(bo(this.accumulatedGrads.map(e=>e.variable)),bo(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function qo(e,t,n){return Ls.runKernel(Xt,{},{shape:e,value:t,dtype:n})}jo.className="Adadelta",Ki(jo);class Ko extends Ho{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ls.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:yo(()=>qo(r.shape,this.initialAccumulatorValue).variable(e))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;yo(()=>{const e=Eo(a,Oo(s));a.assign(e);const t=Eo(Do(Fo(s,_o(Eo(e,Ls.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&bo(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ko.className="Adagrad",Ki(Ko);const Xo=Ks({pow_:function(e,t){let n=Hs(e,"base","pow"),r=Hs(t,"exp","pow");return[n,r]=Es(n,r),Ls.runKernel(qn,{a:n,b:r})}}),Yo=Ks({sub_:function(e,t){let n=Hs(e,"a","sub"),r=Hs(t,"b","sub");return[n,r]=Es(n,r),Ls.runKernel(Sr,{a:n,b:r})}});class Zo extends Ho{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],yo(()=>{this.accBeta1=Go(t).variable(),this.accBeta2=Go(n).variable()}),null==r&&(this.epsilon=Ls.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);yo(()=>{const n=Yo(1,this.accBeta1),r=Yo(1,this.accBeta2);t.forEach((t,s)=>{const a=Ls.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:yo(()=>Mo(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:yo(()=>Mo(a).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=Eo(Do(o,this.beta1),Do(i,1-this.beta1)),c=Eo(Do(u,this.beta2),Do(Oo(i),1-this.beta2)),h=Fo(l,n),d=Fo(c,r);o.assign(l),u.assign(c);const p=Eo(Do(Fo(h,Eo(_o(d),this.epsilon)),-this.learningRate),a);a.assign(p)}),this.accBeta1.assign(Do(this.accBeta1,this.beta1)),this.accBeta2.assign(Do(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&bo(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&bo(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),yo(()=>{this.accBeta1.assign(Xo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Xo(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Zo.className="Adam",Ki(Zo);const Jo=Ks({abs_:function(e){const t=Hs(e,"x","abs");return Ls.runKernel("complex64"===t.dtype?xt:qe,{x:t})}});function Qo(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function eu(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function tu(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error("Operands could not be broadcast together with shapes "+`${e} and ${t}.`);n.unshift(r)}}return n}const nu=Ks({maximum_:function(e,t){let n=Hs(e,"a","maximum"),r=Hs(t,"b","maximum");return[n,r]=Es(n,r),"bool"===n.dtype&&(n=qa(n,"int32"),r=qa(r,"int32")),tu(n.shape,r.shape),Ls.runKernel(Nn,{a:n,b:r})}});class ru extends Ho{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],yo(()=>{this.iteration=Go(0).variable(),this.accBeta1=Go(t).variable()}),null==r&&(this.epsilon=Ls.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);yo(()=>{const n=Yo(1,this.accBeta1),r=Fo(-this.learningRate,Eo(Do(this.iteration,this.decay),1));t.forEach((t,s)=>{const a=Ls.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Mo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:Mo(a).variable(!1)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=Eo(Do(o,this.beta1),Do(i,1-this.beta1)),c=Do(u,this.beta2),h=Jo(i),d=nu(c,h);o.assign(l),u.assign(d);const p=Eo(Do(Fo(r,n),Fo(l,Eo(d,this.epsilon))),a);a.assign(p)}),this.iteration.assign(Eo(this.iteration,1)),this.accBeta1.assign(Do(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&bo(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&bo(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}ru.className="Adamax",Ki(ru);class su extends Ho{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=Ls.registeredVariables[t];yo(()=>{const e=Eo(Do(this.c,r),s);s.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=xo(Go(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}su.className="SGD",Ki(su);class au extends su{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Go(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ls.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:yo(()=>Mo(r).variable(e))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&yo(()=>{let e;const t=Eo(Do(this.m,s),a);e=Eo(Do(this.c,this.useNesterov?Eo(a,Do(t,this.m)):t),r),s.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&bo(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}au.className="Momentum",Ki(au);class iu extends Ho{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Ls.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ls.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:yo(()=>Mo(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:yo(()=>Mo(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:yo(()=>Mo(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;yo(()=>{const e=Eo(Do(a,this.decay),Do(Oo(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,o=Eo(Do(t,this.decay),Do(s,1-this.decay)),u=Fo(Do(s,this.learningRate),_o(Yo(e,Eo(Oo(o),this.epsilon)))),l=Eo(Do(i,this.momentum),u);a.assign(e),t.assign(o),i.assign(l);const c=Yo(r,l);r.assign(c)}else{const e=Eo(Do(a,this.decay),Do(Oo(s),1-this.decay)),t=Eo(Do(i,this.momentum),Fo(Do(s,this.learningRate),_o(Eo(e,this.epsilon))));a.assign(e),i.assign(t);const n=Yo(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&bo(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&bo(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&bo(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}iu.className="RMSProp",Ki(iu);const ou=Ks({acos_:function(e){const t=Hs(e,"x","acos");return Ls.runKernel(Ke,{x:t})}}),uu=Ks({acosh_:function(e){const t=Hs(e,"x","acosh");return Ls.runKernel(Xe,{x:t})}}),lu=Ks({addN_:function(e){te(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),te(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+`${e.length}`);const t=e.map((e,t)=>Hs(e,`tensors${t}`,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!oe(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),Ls.runKernel(Ze,t)}}),cu=Ks({all_:function(e,t=null,n=!1){const r=Hs(e,"x","all","bool");return Ls.runKernel(Je,{x:r},{axis:t,keepDims:n})}}),hu=Ks({any_:function(e,t=null,n=!1){const r=Hs(e,"x","any","bool");return Ls.runKernel(Qe,{x:r},{axis:t,keepDims:n})}}),du=Ks({argMax_:function(e,t=0){const n=Hs(e,"x","argMax");return Ls.runKernel(et,{x:n},{axis:t})}}),pu=Ks({argMin_:function(e,t=0){const n=Hs(e,"x","argMin");return Ls.runKernel(tt,{x:n},{axis:t})}}),fu=Ks({asin_:function(e){const t=Hs(e,"x","asin");return Ls.runKernel(nt,{x:t})}}),mu=Ks({asinh_:function(e){const t=Hs(e,"x","asinh");return Ls.runKernel(rt,{x:t})}}),gu=Ks({atan_:function(e){const t=Hs(e,"x","atan");return Ls.runKernel(st,{x:t})}}),yu=Ks({atan2_:function(e,t){let n=Hs(e,"a","atan2"),r=Hs(t,"b","atan2");return[n,r]=Es(n,r),Ls.runKernel(it,{a:n,b:r})}}),bu=Ks({atanh_:function(e){const t=Hs(e,"x","atanh");return Ls.runKernel(at,{x:t})}});function xu(e,t,n,r,s="NHWC",a){return vu(e,[...t,e[3]],n,a,r,null,null,Ru(s))}function wu(e,t,n,r,s,a,i="channelsLast"){const[o,u]=Su(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,e[1],e[1]]}return vu(e,l,n,r,s,a,!1,i)}function ku(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=Cu(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return Iu(e,c,n,r,s,!1,h,a)}function vu(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=e}const[d,p,,f]=t,[m,g]=Su(n),[y,b]=Su(r),x=$u(d,y),w=$u(p,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Nu(e,t,n));const a=e[1];return[Tu((e[0]-t+2*r)/n+1,s),Tu((a-t+2*r)/n+1,s)]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),d=e-u,p=Math.floor(o/2);l={top:u,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===u?e[1][0]:e[2][0],p="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=Tu((t-a+d+p)/r+1,o),h=Tu((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[u,N,v,I]:"channelsLast"===o&&(S=[u,v,I,N]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Iu(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,d,l,c,h]=e}const[p,f,m,,g]=t,[y,b,x]=Cu(n),[w,k,v]=Cu(r),I=$u(p,w),N=$u(f,k),S=$u(m,v),{padInfo:C,outDepth:$,outHeight:T,outWidth:A}=function(e,t,n,r,s,a,i,o,u,l,c){let h,d,p,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Nu(e,t,r));const i=e[1],o=e[2];return[Tu((e[0]-t+2*s)/r+1,a),Tu((i-t+2*s)/r+1,a),Tu((o-t+2*s)/r+1,a),1]}([t,n,r,1],o,0,s,e,c);d=a[0],p=a[1],f=a[2]}else if("same"===e){const e=((d=Math.ceil(t/s))-1)*s+o-t,c=((p=Math.ceil(n/a))-1)*a+u-n,m=((f=Math.ceil(r/i))-1)*i+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-o+1)/s),p=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,l,c,h,y,b,x,I,N,S,o),E=a?g*d:g;let R;return"channelsFirst"===i?R=[u,E,$,T,A]:"channelsLast"===i&&(R=[u,$,T,A,E]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:d,outDepth:$,outHeight:T,outWidth:A,outChannels:E,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Nu(e,t,n,r=1){const s=$u(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Su(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Cu(e){return"number"==typeof e?[e,e,e]:e}function $u(e,t){return t<=1?e:e+(e-1)*(t-1)}function Tu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Au(e){const[t,n,r]=Su(e);return 1===t&&1===n&&1===r}function Eu(e,t){return Au(e)||Au(t)}function Ru(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Fu=Ks({reshape_:function(e,t){const n=Hs(e,"x","reshape","string_or_numeric");return Ls.runKernel(er,{x:n},{shape:t})}}),Du=Ks({avgPool_:function(e,t,n,r,s){const a=Hs(e,"x","avgPool","float32");te(Eu(n,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+`Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=Fu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),te(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&te(ue(r),()=>"Error in avgPool: pad must be an integer when using, "+`dimRoundingMode ${s} but got pad ${r}.`);let u=Ls.runKernel(ot,{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return u=qa(u,a.dtype),o?Fu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),_u=Ks({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=Hs(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),te(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),te("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, "+`but got dataFormat of ${a}`),null!=s&&te(ue(r),()=>"Error in avgPool3d: pad must be an integer when using, "+`dimRoundingMode ${s} but got pad ${r}.`);let l=Ls.runKernel(lt,{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return l=qa(l,o.dtype),u?Fu(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),Ou=Ks({concat_:function(e,t=0){te(e.length>=1,()=>"Pass at least one tensor to concat");const n=js(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?Ka(n[0]):Ls.runKernel(wt,n,{axis:t})}}),Mu=Ks({sigmoid_:function(e){const t=Hs(e,"x","sigmoid");return Ls.runKernel(gr,{x:t})}}),zu=Ks({slice_:function(e,t,n){const r=Hs(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");return Ls.runKernel(dr,{x:r},{begin:t,size:n})}}),Lu=Ks({tanh_:function(e){const t=Hs(e,"x","tanh");return Ls.runKernel(Ar,{x:t})}}),Pu=Ks({basicLSTMCell_:function(e,t,n,r,s,a){const i=Hs(e,"forgetBias","basicLSTMCell"),o=Hs(t,"lstmKernel","basicLSTMCell"),u=Hs(n,"lstmBias","basicLSTMCell"),l=Hs(r,"data","basicLSTMCell"),c=Hs(s,"c","basicLSTMCell"),h=Hs(a,"h","basicLSTMCell"),d=Ou([l,h],1),p=bi(d,o),f=Eo(p,u),m=f.shape[1]/4,g=[f.shape[0],m],y=zu(f,[0,0],g),b=zu(f,[0,m],g),x=zu(f,[0,2*m],g),w=zu(f,[0,3*m],g),k=Eo(Do(Mu(y),Lu(b)),Do(c,Mu(Eo(i,x))));return[k,Do(Lu(k),Mu(w))]}}),Bu=Ks({batchToSpaceND_:function(e,t,n){const r=Hs(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);return te(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),te(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),te(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of `+`the elements of blockShape ${t.join(" * ")} === ${s}`),Ls.runKernel(dt,{x:r},{blockShape:t,crops:n})}}),Wu=Ks({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=Hs(e,"x","batchNorm"),o=Hs(t,"mean","batchNorm"),u=Hs(n,"variance","batchNorm");let l,c;null!=s&&(l=Hs(s,"scale","batchNorm")),null!=r&&(c=Hs(r,"offset","batchNorm")),te(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),te(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),te(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){return 0===e.rank||1===e.rank?Fu(e,[1,1,1,e.size]):2===e.rank?Fu(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Fu(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e}(i),d=Ls.runKernel(Qt,{x:h,scale:l,offset:c,mean:o,variance:u},{varianceEpsilon:a});return Fu(d,i.shape)}}),Vu=Ks({batchNorm2d_:function(e,t,n,r,s,a){const i=Hs(e,"x","batchNorm"),o=Hs(t,"mean","batchNorm"),u=Hs(n,"variance","batchNorm");let l,c;return null!=s&&(l=Hs(s,"scale","batchNorm")),null!=r&&(c=Hs(r,"offset","batchNorm")),te(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+`${i.rank}.`),te(2===o.rank||1===o.rank,()=>"Error in batchNorm2D: mean must be rank 2 or rank 1 but "+`got rank ${o.rank}.`),te(2===u.rank||1===u.rank,()=>"Error in batchNorm2D: variance must be rank 2 or rank 1 "+`but got rank ${u.rank}.`),null!=l&&te(2===l.rank||1===l.rank,()=>"Error in batchNorm2D: scale must be rank 2 or rank 1 "+`but got rank ${l.rank}.`),null!=c&&te(2===c.rank||1===c.rank,()=>"Error in batchNorm2D: offset must be rank 2 or rank 1 "+`but got rank ${c.rank}.`),Wu(i,o,u,c,l,a)}}),Uu=Ks({batchNorm3d_:function(e,t,n,r,s,a){const i=Hs(e,"x","batchNorm"),o=Hs(t,"mean","batchNorm"),u=Hs(n,"variance","batchNorm");let l,c;return null!=s&&(l=Hs(s,"scale","batchNorm")),null!=r&&(c=Hs(r,"offset","batchNorm")),te(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+`${i.rank}.`),te(3===o.rank||1===o.rank,()=>"Error in batchNorm3D: mean must be rank 3 or rank 1 but "+`got rank ${o.rank}.`),te(3===u.rank||1===u.rank,()=>"Error in batchNorm3D: variance must be rank 3 or rank 1 "+`but got rank ${u.rank}.`),null!=l&&te(3===l.rank||1===l.rank,()=>"Error in batchNorm3D: scale must be rank 3 or rank 1 "+`but got rank ${l.rank}.`),null!=c&&te(3===c.rank||1===c.rank,()=>"Error in batchNorm3D: offset must be rank 3 or rank 1 "+`but got rank ${c.rank}.`),Wu(i,o,u,c,l,a)}}),Gu=Ks({batchNorm4d_:function(e,t,n,r,s,a){const i=Hs(e,"x","batchNorm"),o=Hs(t,"mean","batchNorm"),u=Hs(n,"variance","batchNorm");let l,c;return null!=s&&(l=Hs(s,"scale","batchNorm")),null!=r&&(c=Hs(r,"offset","batchNorm")),te(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+`${i.rank}.`),te(4===o.rank||1===o.rank,()=>"Error in batchNorm4D: mean must be rank 4 or rank 1 but "+`got rank ${o.rank}.`),te(4===u.rank||1===u.rank,()=>"Error in batchNorm4D: variance must be rank 4 or rank 1 "+`but got rank ${u.rank}.`),null!=l&&te(4===l.rank||1===l.rank,()=>"Error in batchNorm4D: scale must be rank 4 or rank 1 "+`but got rank ${l.rank}.`),null!=c&&te(4===c.rank||1===c.rank,()=>"Error in batchNorm4D: offset must be rank 4 or rank 1 "+`but got rank ${c.rank}.`),Wu(i,o,u,c,l,a)}}),Hu=Ks({bincount_:function(e,t,n){const r=Hs(e,"x","bincount"),s=Hs(t,"weights","bincount");return te("int32"===r.dtype,()=>"Error in bincount: input "+`dtype must be int32, but got ${r.dtype}`),te(n>=0,()=>`size must be non-negative, but got ${n}.`),te(s.size===r.size||0===s.size,()=>"Error in bincount: weights must have the same size as input or"+`0-length, but got input shape: ${r.shape}, weights shape: `+`${s.shape}.`),Ls.runKernel(pt,{x:r,weights:s},{size:n})}}),ju=Ks({broadcastTo_:function(e,t){let n=Hs(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Fu(n,e)}const s=n.shape,a=Array.from(t);for(let i=t.length-1;i>=0;i--)if(s[i]===t[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?Ka(n):Ls.runKernel(Er,{x:n},{reps:a})}}),qu=Ks({ceil_:function(e){const t=Hs(e,"x","ceil");return Ls.runKernel(gt,{x:t})}}),Ku=Ks({clipByValue_:function(e,t,n){const r=Hs(e,"x","clipByValue");return te(t<=n,()=>`Error in clip: min (${t}) must be `+`less than or equal to max (${n}).`),Ls.runKernel(yt,{x:r},{clipValueMin:t,clipValueMax:n})}}),Xu=Ks({concat1d_:function(e){return Ou(e,0)}}),Yu=Ks({concat2d_:function(e,t){return Ou(e,t)}}),Zu=Ks({concat3d_:function(e,t){return Ou(e,t)}}),Ju=Ks({concat4d_:function(e,t){return Ou(e,t)}}),Qu=Ks({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Hs(e,"x","conv2d"),u=Hs(t,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=Fu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),te(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),te(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+`${u.rank}.`),null!=i&&te(ue(r),()=>"Error in conv2d: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?l.shape[3]:l.shape[1];te(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match `+`input depth for filter ${u.shape[2]}.`),te(Eu(n,a),()=>"Error in conv2D: Either strides or dilations must be 1. "+`Got strides ${n} and dilations '${a}'`);const d=Ls.runKernel(kt,{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?Fu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),el=Ks({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=Hs(e,"x","conv1d"),u=Hs(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=Fu(o,[1,o.shape[0],o.shape[1]])),te(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),te(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+`${u.rank}.`),null!=i&&te(ue(r),()=>"Error in conv1d: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${r}.`),te(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match `+`input depth for filter ${u.shape[1]}.`),te(Eu(n,a),()=>"Error in conv1D: Either stride or dilation must be 1. "+`Got stride ${n} and dilation '${a}'`),te("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=Fu(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=Fu(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=Qu(d,h,[1,n],r,"NHWC",[1,a],i);return Fu(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),tl=Ks({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){te(e.length===t.rank,()=>"Length of inShape "+`(${e.length}) and rank of dy (${t.rank}) must match`);let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),te(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+`${o.length}.`),te(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got "+`rank ${u.rank}`),te(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got "+`rank ${n.rank}`);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];te(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must `+`match input depth for filter ${n.shape[2]}.`),te(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must `+`match output depth for filter ${n.shape[3]}.`),null!=i&&te(ue(s),()=>"Error in conv2dDerInput: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${s}.`);const d=Ls.runKernel(It,{dy:u,filter:n},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o});return l?Fu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),nl=Ks({conv2dTranspose_:function(e,t,n,r,s,a){const i=Hs(e,"x","conv2dTranspose"),o=Hs(t,"filter","conv2dTranspose");return tl(n,i,o,r,s,"NHWC",a)}}),rl=Ks({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=Hs(e,"x","conv3d"),o=Hs(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),te(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),te(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+`${o.rank}.`),te(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match `+`input depth for filter ${o.shape[3]}.`),te(Eu(n,a),()=>"Error in conv3D: Either strides or dilations must be 1. "+`Got strides ${n} and dilations '${a}'`),te("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c=Ls.runKernel(Nt,{x:u,filter:o},{strides:n,pad:r,dataFormat:s,dilations:a});return l?Fu(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),sl=Ks({conv3DBackpropInput_:function(e,t,n,r,s){te(e.length===t.rank,()=>"Length of inShape "+`(${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=i.shape[4];te(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+`${a.length}.`),te(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got "+`rank ${i.rank}`),te(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got "+`rank ${n.rank}`),te(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must `+`match input depth for filter ${n.shape[3]}.`),te(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must `+`match output depth for filter ${n.shape[4]}.`);const c=Ls.runKernel(Ct,{dy:i,filter:n},{pad:s,strides:r,inputShape:a});return o?Fu(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),al=Ks({conv3dTranspose_:function(e,t,n,r,s){const a=Hs(e,"x","conv3dTranspose"),i=Hs(t,"filter","conv3dTranspose");return sl(n,a,i,r,s)}}),il=Ks({cos_:function(e){const t=Hs(e,"x","cos");return Ls.runKernel($t,{x:t})}}),ol=Ks({cosh_:function(e){const t=Hs(e,"x","cosh");return Ls.runKernel(Tt,{x:t})}}),ul=Ks({cumsum_:function(e,t=0,n=!1,r=!1){const s=Hs(e,"x","cumsum");return Ls.runKernel(At,{x:s},{axis:t,exclusive:n,reverse:r})}}),ll=Ks({denseBincount_:function(e,t,n,r=!1){const s=Hs(e,"x","denseBincount"),a=Hs(t,"weights","denseBincount");return te("int32"===s.dtype,()=>"Error in denseBincount: input "+`dtype must be int32, but got ${s.dtype}`),te(s.rank<=2,()=>"Error in denseBincount: input must be at most rank 2, but got "+`rank ${s.rank}.`),te(n>=0,()=>`size must be non-negative, but got ${n}.`),te(a.size===s.size||0===a.size,()=>"Error in denseBincount: weights must have the same shape as x or "+`0-length, but got x shape: ${s.shape}, weights shape: `+`${a.shape}.`),Ls.runKernel(Rt,{x:s,weights:a},{size:n,binaryOutput:r})}}),cl=Ks({depthToSpace_:function(e,t,n="NHWC"){const r=Hs(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return te(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),te(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),te(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),Ls.runKernel(Ft,{x:r},{blockSize:t,dataFormat:n})}}),hl=Ks({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Hs(e,"x","depthwiseConv2d"),u=Hs(t,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=Fu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),te(4===l.rank,()=>"Error in depthwiseConv2d: input must be rank 4, but got "+`rank ${l.rank}.`),te(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+`${u.rank}.`),te(l.shape[3]===u.shape[2],()=>"Error in depthwiseConv2d: number of input channels "+`(${l.shape[3]}) must match the inChannels dimension in `+`filter ${u.shape[2]}.`),null!=i&&te(ue(r),()=>"Error in depthwiseConv2d: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${r}.`);const h=Ls.runKernel(Dt,{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?Fu(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),dl=Ks({diag_:function(e){const t=Hs(e,"x","diag");return Ls.runKernel(Mt,{x:t})}}),pl=Ks({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=Hs(e,"x","dilation2d"),o=Hs(t,"filter","dilation2d");te(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+`${i.rank}.`),te(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+`${o.rank}.`),te("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, "+`but got dataFormat of ${a}`);let u=i,l=!1;3===i.rank&&(u=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c=Ls.runKernel(zt,{x:u,filter:o},{strides:n,pad:r,dilations:s});return l?Fu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),fl=Ks({equal_:function(e,t){let n=Hs(e,"a","equal"),r=Hs(t,"b","equal");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(Gt,{a:n,b:r})}}),ml=Ks({where_:function(e,t,n){const r=Hs(t,"a","where"),s=Hs(n,"b","where"),a=Hs(e,"condition","where","bool"),i=tu(r.shape,s.shape),o=ju(r,i),u=ju(s,i);return 1===a.rank&&te(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&ne(a.shape,u.shape,"Error in where: "),Ls.runKernel(cr,{condition:a,t:o,e:u})}}),gl=Ks({divNoNan_:function(e,t){let n=Hs(e,"a","div"),r=Hs(t,"b","div");[n,r]=Es(n,r);const s=Fo(n,r),a=Mo(s),i=fl(r,a);return ml(i,a,s)}}),yl=Ks({dot_:function(e,t){const n=Hs(e,"t1","dot"),r=Hs(t,"t2","dot");te(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>"Error in dot: inputs must all be rank 1 or 2, but got ranks "+`${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(te(s===a,()=>"Error in dot: inner dimensions of inputs must match, but got "+`${s} and ${a}.`),1===n.rank&&1===r.rank){const e=Fu(n,[1,-1]),t=Fu(r,[-1,1]),s=bi(e,t);return Fu(s,[])}if(1===n.rank&&2===r.rank){const e=Fu(n,[1,-1]),t=Fu(r,[r.shape[0],r.shape[1]]),s=bi(e,t);return Fu(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Fu(r,[-1,1]),t=bi(n,e);return Fu(t,[t.size])}{const e=Fu(r,[r.shape[0],r.shape[1]]);return bi(n,e)}}}),bl=Ks({elu_:function(e){const t=Hs(e,"x","elu");return Ls.runKernel(Wt,{x:t})}}),xl=Ks({erf_:function(e){let t=Hs(e,"x","erf");return te("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=qa(t,"float32")),Ls.runKernel(Ut,{x:t})}}),wl=Ks({exp_:function(e){const t=Hs(e,"x","exp");return Ls.runKernel(Ht,{x:t})}}),kl=Ks({expandDims_:function(e,t=0){const n=Hs(e,"x","expandDims","string_or_numeric");return te(t<=n.rank,()=>"Axis must be <= rank of the tensor"),Ls.runKernel(jt,{input:n},{dim:t})}}),vl=Ks({expm1_:function(e){const t=Hs(e,"x","expm1");return Ls.runKernel(qt,{x:t})}}),Il=Ks({tile_:function(e,t){const n=Hs(e,"x","tile","string_or_numeric");return te(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} `+`must match length of reps ${t}.`),Ls.runKernel(Er,{x:n},{reps:t})}}),Nl=Ks({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=ja([e,t],r),a=e<=t?e:t;for(let o=0;o<a;++o)s.set(1,o,o);const i=Fu(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Il(kl(i,0),[n[0],1,1]);if(2===n.length)return Il(kl(kl(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Il(kl(kl(kl(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D "+`batchShapes, but received ${n.length}D.`)}}),Sl=Ks({floor_:function(e){const t=Hs(e,"x","floor");return Ls.runKernel(Zt,{x:t})}}),Cl=Ks({gather_:function(e,t,n=0,r=0){const s=Hs(e,"x","gather"),a=Hs(t,"indices","gather","int32");return Ls.runKernel(en,{x:s,indices:a},{axis:n,batchDims:r})}}),$l=Ks({greater_:function(e,t){let n=Hs(e,"a","greater"),r=Hs(t,"b","greater");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(nn,{a:n,b:r})}}),Tl=Ks({greaterEqual_:function(e,t){let n=Hs(e,"a","greaterEqual"),r=Hs(t,"b","greaterEqual");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(rn,{a:n,b:r})}}),Al=Ks({imag_:function(e){const t=Hs(e,"input","imag");return Ls.runKernel(on,{input:t})}}),El=Ks({isFinite_:function(e){const t=Hs(e,"x","isFinite");return Ls.runKernel(un,{x:t})}}),Rl=Ks({isInf_:function(e){const t=Hs(e,"x","isInf");return Ls.runKernel(ln,{x:t})}}),Fl=Ks({isNaN_:function(e){const t=Hs(e,"x","isNaN");return Ls.runKernel(cn,{x:t})}}),Dl=Ks({leakyRelu_:function(e,t=.2){const n=Hs(e,"x","leakyRelu");return Ls.runKernel(hn,{x:n},{alpha:t})}}),_l=Ks({less_:function(e,t){let n=Hs(e,"a","less"),r=Hs(t,"b","less");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(dn,{a:n,b:r})}}),Ol=Ks({lessEqual_:function(e,t){let n=Hs(e,"a","lessEqual"),r=Hs(t,"b","lessEqual");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(pn,{a:n,b:r})}});function Ml(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");return Ls.runKernel(fn,{},{start:e,stop:t,num:n})}const zl=Ks({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Hs(e,"x","localResponseNormalization");te(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),te(ue(t),()=>"Error in localResponseNormalization: depthRadius must be an "+`integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=Fu(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u=Ls.runKernel(kn,{x:i},{depthRadius:t,bias:n,alpha:r,beta:s});return o?Fu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Ll=Ks({log_:function(e){const t=Hs(e,"x","log");return Ls.runKernel(mn,{x:t})}}),Pl=Ks({log1p_:function(e){const t=Hs(e,"x","log1p");return Ls.runKernel(gn,{x:t})}}),Bl=Ks({neg_:function(e){const t=Hs(e,"x","neg");return Ls.runKernel(zn,{x:t})}}),Wl=Ks({softplus_:function(e){const t=Hs(e,"x","softplus");return Ls.runKernel(yr,{x:t})}}),Vl=Ks({logSigmoid_:function(e){const t=Hs(e,"x","logSigmoid");return Vo(e=>({value:Bl(Wl(Bl(e))),gradFunc:t=>Do(t,Mu(Bl(e)))}))(t)}}),Ul=Ks({max_:function(e,t=null,n=!1){const r=Hs(e,"x","max");return Ls.runKernel(In,{x:r},{reductionIndices:t,keepDims:n})}}),Gl=Ks({sum_:function(e,t=null,n=!1){let r=Hs(e,"x","sum");return"bool"===r.dtype&&(r=qa(r,"int32")),Ls.runKernel(xr,{x:r},{axis:t,keepDims:n})}}),Hl=Ks({logSoftmax_:function(e,t=-1){const n=Hs(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. "+`Logits was rank ${n.rank} and axis was ${t}`);return Vo((e,n)=>{const r=Ul(e,t,!0),s=Yo(e,r),a=Yo(qa(s,"float32"),Ll(Gl(wl(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=wl(r);return Yo(e,Do(Gl(e,t,!0),s))}}})(n)}});function jl(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ql(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function Kl(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map(t=>e[t])]}function Xl(e,t){return ql(e,t.map(e=>1),t)}function Yl(e,t,n){te(jl(t,n),()=>`${e} supports only inner-most axes for now. `+`Got axes ${t} and rank-${n} input.`)}function Zl(e,t){if(jl(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function Jl(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Ql(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const ec=Ks({logSumExp_:function(e,t=null,n=!1){const r=Hs(e,"x","logSumExp"),s=me(t,r.shape),a=Ul(r,s,!0),i=Yo(r,a),o=wl(i),u=Gl(o,s),l=Ll(u),c=Eo(Fu(a,l.shape),l);if(n){const e=Xl(c.shape,s);return Fu(c,e)}return c}}),tc=Ks({logicalAnd_:function(e,t){const n=Hs(e,"a","logicalAnd","bool"),r=Hs(t,"b","logicalAnd","bool");return tu(n.shape,r.shape),Ls.runKernel(yn,{a:n,b:r})}}),nc=Ks({logicalNot_:function(e){const t=Hs(e,"x","logicalNot","bool");return Ls.runKernel(bn,{x:t})}}),rc=Ks({logicalOr_:function(e,t){const n=Hs(e,"a","logicalOr","bool"),r=Hs(t,"b","logicalOr","bool");return tu(n.shape,r.shape),Ls.runKernel(xn,{a:n,b:r})}}),sc=Ks({logicalXor_:function(e,t){const n=Hs(e,"a","logicalXor","bool"),r=Hs(t,"b","logicalXor","bool");return tu(n.shape,r.shape),tc(rc(e,t),nc(tc(e,t)))}}),ac=Ks({maxPool_:function(e,t,n,r,s){const a=Hs(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Fu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),te(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),te(Eu(n,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+`Got strides ${n} and dilations '1'`),null!=s&&te(ue(r),()=>"Error in maxPool: pad must be an integer when using, "+`dimRoundingMode ${s} but got pad ${r}.`);const u=Ls.runKernel(Sn,{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return o?Fu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ic=Ks({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=Hs(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),te(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),te("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, "+`but got dataFormat of ${a}`),null!=s&&te(ue(r),()=>"Error in maxPool3d: pad must be an integer when using, "+`dimRoundingMode ${s} but got pad ${r}.`);const l=Ls.runKernel($n,{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return u?Fu(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),oc=Ks({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a=Hs(e,"x","maxPoolWithArgmax"),i=Ls.runKernel(An,{x:a},{filterSize:t,strides:n,pad:r,includeBatchInIndex:s});return{result:i[0],indexes:i[1]}}}),uc=Ks({mean_:function(e,t=null,n=!1){const r=Hs(e,"x","mean");return Ls.runKernel(En,{x:r},{axis:t,keepDims:n})}}),lc=Ks({min_:function(e,t=null,n=!1){const r=Hs(e,"x","min");return Ls.runKernel(Rn,{x:r},{axis:t,keepDims:n})}}),cc=Ks({minimum_:function(e,t){let n=Hs(e,"a","minimum"),r=Hs(t,"b","minimum");return[n,r]=Es(n,r),"bool"===n.dtype&&(n=qa(n,"int32"),r=qa(r,"int32")),tu(n.shape,r.shape),Ls.runKernel(Fn,{a:n,b:r})}}),hc=Ks({mirrorPad_:function(e,t,n){te("reflect"===n||"symmetric"===n,()=>"Invalid mode. Mode must be either reflect or symmetric. "+`Got ${n}.`);const r=Hs(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");te(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. `+`Got ${t.length}.`);const s="reflect"===n?1:0;for(let a=0;a<r.rank;a++)te(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),te(t[a][0]>=0&&t[a][0]<=r.shape[a]-s&&t[a][1]>=0&&t[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal `+`to ${r.shape[a]-s} or less than 0 for input of `+`shape ${r.shape}`);return Ls.runKernel(Dn,{x:r},{paddings:t,mode:n})}}),dc=Ks({mod_:function(e,t){let n=Hs(e,"a","mod"),r=Hs(t,"b","mod");return[n,r]=Es(n,r),Ls.runKernel(_n,{a:n,b:r})}}),pc=Ks({moments_:function(e,t=null,n=!1){const r=me(t,(e=Hs(e,"x","moments")).shape),s=uc(e,r,n);let a=s.shape;n||(a=Xl(s.shape,r));const i=Oo(Yo(qa(e,"float32"),Fu(s,a)));return{mean:s,variance:uc(i,r,n)}}}),fc=Ks({multiRNNCell_:function(e,t,n,r){const s=Hs(t,"data","multiRNNCell"),a=js(n,"c","multiRNNCell"),i=js(r,"h","multiRNNCell");let o=s;const u=[];for(let h=0;h<e.length;h++){const t=e[h](o,a[h],i[h]);u.push(t[0]),u.push(t[1]),o=t[1]}const l=[],c=[];for(let h=0;h<u.length;h+=2)l.push(u[h]),c.push(u[h+1]);return[l,c]}}),mc=Ks({multinomial_:function(e,t,n,r=!1){const s=Hs(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+`${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o=1===i?Fu(s,[1,-1]):s,u=Ls.runKernel(On,{logits:o},{numSamples:t,seed:n,normalized:r});return 1===i?Fu(u,[u.size]):u}}),gc=Ks({notEqual_:function(e,t){let n=Hs(e,"a","notEqual"),r=Hs(t,"b","notEqual");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(Ln,{a:n,b:r})}});function yc(e,t="float32"){if("complex64"===t){const t=yc(e,"float32"),n=yc(e,"float32");return Xs(t,n)}const n=_e(ae(e),t);return Ls.makeTensor(n,e,t)}function bc(e,t="float32"){if("complex64"===t){const t=bc(e,"float32"),n=yc(e,"float32");return Xs(t,n)}const n=De(ae(e),t);return Ls.makeTensor(n,e,t)}const xc=Ks({onesLike_:function(e){const t=Hs(e,"x","onesLike");return Ls.runKernel(Vn,{x:t})}}),wc=Ks({outerProduct_:function(e,t){const n=Hs(e,"v1","outerProduct"),r=Hs(t,"v2","outerProduct");te(1===n.rank&&1===r.rank,()=>"Error in outerProduct: inputs must be rank 1, but got ranks "+`${n.rank} and ${r.rank}.`);const s=Fu(n,[-1,1]),a=Fu(r,[1,-1]);return bi(s,a)}}),kc=Ks({pad_:function(e,t,n=0){const r=Hs(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return Ls.runKernel(Hn,{x:r},{paddings:t,constantValue:n})}}),vc=Ks({pad1d_:function(e,t,n=0){return te(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),kc(e,[t],n)}}),Ic=Ks({pad2d_:function(e,t,n=0){return te(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),kc(e,t,n)}}),Nc=Ks({pad3d_:function(e,t,n=0){return te(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),kc(e,t,n)}}),Sc=Ks({pad4d_:function(e,t,n=0){return te(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),kc(e,t,n)}}),Cc=Ks({spaceToBatchND_:function(e,t,n){const r=Hs(e,"x","spaceToBatchND");return te(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),te(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),te(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),Ls.runKernel(wr,{x:r},{blockShape:t,paddings:n})}}),$c=Ks({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Hs(e,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),te(Eu(a,s),()=>"Error in pool: Either strides or dilations must be 1. "+`Got strides ${a} and dilations '${s}'`);const l=wu(o.shape,t,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),i=t.map((e,t)=>(e-a[t]%e)%e),o=s.map((e,t)=>e+i[t]);return[t.map((e,t)=>[r[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([l.inHeight,l.inWidth],c,h),m=d?r:"valid",g=d?o:Cc(o,c,p),y=("avg"===n?()=>Du(g,t,a,m):()=>ac(g,t,a,m))(),b=d?y:Bu(y,c,f);return u?Fu(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),Tc=Ks({prelu_:function(e,t){const n=Hs(e,"x","prelu"),r=Hs(t,"alpha","prelu");return Ls.runKernel(Kn,{x:n,alpha:r})}}),Ac=Ks({prod_:function(e,t=null,n=!1){let r=Hs(e,"x","prod");return"bool"===r.dtype&&(r=qa(r,"int32")),Ls.runKernel(Xn,{x:r},{axis:t,keepDims:n})}}),Ec=Ks({rand_:function(e,t,n){const r=ae(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=t();return Ls.makeTensor(s,e,n)}});var Rc=n("YSVl");class Fc{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Rc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{a=(r=2*this.random()-1)*r+(s=2*this.random()-1)*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Dc{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Rc.alea(s.toString()),this.randn=new Fc(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(t=1-.331*(e=r*r)*e,n=.5*e+this.d*(1-(a*=a*a)+Math.log(a)),(s=this.randu())<t||Math.log(s)<n)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class _c{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Rc.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Oc=Ks({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Dc(t,n,r,s),i=ja(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Mc=Ks({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Fc(t,n,r,!1,s),i=ja(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),zc=Ks({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=ja(e,r),i=new _c(t,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});function Lc(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");return Ls.runKernel(Yn,{},{start:e,stop:t,step:n,dtype:r})}const Pc=Ks({real_:function(e){const t=Hs(e,"input","real");return Ls.runKernel(Zn,{input:t})}}),Bc=Ks({reciprocal_:function(e){const t=Hs(e,"x","reciprocal");return Ls.runKernel(Jn,{x:t})}}),Wc=Ks({relu_:function(e){const t=Hs(e,"x","relu");return Ls.runKernel(Qn,{x:t})}}),Vc=Ks({relu6_:function(e){const t=Hs(e,"x","relu6");return Ls.runKernel(ar,{x:t})}}),Uc=Ks({reverse_:function(e,t){const n=Hs(e,"x","reverse");return Ls.runKernel(ir,{x:n},{dims:t})}}),Gc=Ks({reverse1d_:function(e){const t=Hs(e,"x","reverse");return te(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Uc(t,0)}}),Hc=Ks({reverse2d_:function(e,t){const n=Hs(e,"x","reverse");return te(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Uc(n,t)}}),jc=Ks({reverse3d_:function(e,t){const n=Hs(e,"x","reverse");return te(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Uc(n,t)}}),qc=Ks({reverse4d_:function(e,t){const n=Hs(e,"x","reverse");return te(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Uc(n,t)}}),Kc=Ks({round_:function(e){const t=Hs(e,"x","round");return Ls.runKernel(or,{x:t})}}),Xc=Ks({rsqrt_:function(e){const t=Hs(e,"x","rsqrt");return Ls.runKernel(ur,{x:t})}}),Yc=Ks({selu_:function(e){const t=Hs(e,"x","selu");return Ls.runKernel(hr,{x:t})}}),Zc=Ks({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=Hs(e,"x","separableConv2d"),u=Hs(t,"depthwiseFilter","separableConv2d"),l=Hs(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Fu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");te(4===c.rank,()=>"Error in separableConv2d: input must be rank 4, but got "+`rank ${c.rank}.`),te(4===u.rank,()=>"Error in separableConv2d: depthwise filter must be rank 4, but "+`got rank ${u.rank}.`),te(4===l.rank,()=>"Error in separableConv2d: pointwise filter must be rank 4, but "+`got rank ${u.rank}.`),te(1===l.shape[0],()=>"Error in separableConv2d: the first dimension of pointwise filter "+` must be 1, but got ${l.shape[0]}.`),te(1===l.shape[1],()=>"Error in separableConv2d: the second dimension of pointwise "+`filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],p=u.shape[3];te(l.shape[2]===d*p,()=>"Error in separableConv2d: the third dimension of pointwise filter "+`must be ${d*p}, `+`but got ${l.shape[2]}.`);const f=hl(c,u,r,s,i,a),m=Qu(f,l,1,"valid",i);return h?Fu(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Jc=async function(e,t){const n=Hs(e,"x","setdiff1d"),r=Hs(t,"y","setdiff1d");te(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),te(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),te(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let c=0;c<s.length;c++)i.has(s[c])||o++;const u=new ms([o],n.dtype),l=new ms([o],"int32");for(let c=0,h=0;c<s.length;c++)i.has(s[c])||(u.values[h]=s[c],l.values[h]=c,h++);return[u.toTensor(),l.toTensor()]},Qc=Ks({sign_:function(e){const t=Hs(e,"x","sign");return Ls.runKernel(mr,{x:t})}}),eh=Ks({sin_:function(e){const t=Hs(e,"x","sin");return Ls.runKernel(pr,{x:t})}}),th=Ks({sinh_:function(e){const t=Hs(e,"x","sinh");return Ls.runKernel(fr,{x:t})}}),nh=Ks({slice1d_:function(e,t,n){const r=Hs(e,"x","slice1d");return te(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),zu(r,[t],[n])}}),rh=Ks({slice2d_:function(e,t,n){const r=Hs(e,"x","slice2d");return te(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),zu(r,t,n)}}),sh=Ks({slice3d_:function(e,t,n){const r=Hs(e,"x","slice3d");return te(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),zu(r,t,n)}}),ah=Ks({slice4d_:function(e,t,n){const r=Hs(e,"x","slice4d");return te(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),zu(r,t,n)}}),ih=Ks({softmax_:function(e,t=-1){const n=Hs(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. "+`Logits was rank ${n.rank} and dim was ${t}`);return Ls.runKernel(vr,{logits:n},{dim:t})}}),oh=Ks({fft_:function(e){return te("complex64"===e.dtype,()=>"The dtype for tf.spectral.fft() must be complex64 "+`but got ${e.dtype}.`),Ls.runKernel(Kt,{input:e})}}),uh=Ks({ifft_:function(e){return te("complex64"===e.dtype,()=>"The dtype for tf.spectral.ifft() must be complex64 "+`but got ${e.dtype}.`),Ls.runKernel(an,{input:e})}}),lh=Ks({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Fu(e,[n,t]);r=uh(s)}else{const s=[n,2*(t-1)],a=Fu(Pc(e),[n,t]),i=Fu(Al(e),[n,t]),o=Uc(zu(a,[0,1],[n,t-2]),1),u=Do(Uc(zu(i,[0,1],[n,t-2]),1),Go(-1)),l=Ou([a,o],1),c=Ou([i,u],1),h=Fu(Xs(l,c),[s[0],s[1]]);r=uh(h)}if(r=Pc(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Fu(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),ch=Ks({split_:function(e,t,n=0){const r=Hs(e,"x","split");return Ls.runKernel(kr,{x:r},{numOrSizeSplits:t,axis:n})}}),hh=Ks({rfft_:function(e,t){te("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=zu(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=Ou([e,yc(r)],e.shape.length-1),n=t}else s=e;const a=Mo(s),i=Fu(Xs(s,a),[r,n]),o=oh(i),u=Math.floor(n/2)+1,l=Pc(o),c=Al(o),h=ch(l,[u,n-u],l.shape.length-1),d=ch(c,[u,n-u],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=u,Fu(Xs(h[0],d[0]),p)}}),dh=Ks({squaredDifference_:function(e,t){let n=Hs(e,"a","squaredDifference"),r=Hs(t,"b","squaredDifference");return[n,r]=Es(n,r),tu(n.shape,r.shape),Ls.runKernel(Ir,{a:n,b:r},{})}}),ph=Ks({squeeze_:function(e,t){const n=Hs(e,"x","squeeze");return Fu(n,ge(n.shape,t).newShape)}}),fh=Ks({stack_:function(e,t=0){const n=js(e,"tensors","stack","string_or_numeric");return te(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&te(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),Ls.runKernel(Gn,n,{axis:t})}}),mh=Ks({step_:function(e,t=0){const n=Hs(e,"x","step");return Ls.runKernel(zr,{x:n},{alpha:t})}}),gh=Ks({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l=Hs(e,"x","stridedSlice");return Ls.runKernel($r,{x:l},{begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u})}}),yh=Ks({tan_:function(e){const t=Hs(e,"x","tan");return Ls.runKernel(Tr,{x:t})}});function bh(e,t){re(e);const n=Us(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ys(e,null,n,t)}function xh(e,t,n){if(re(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Us(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ys(e,t,r,n)}function wh(e,t,n){if(re(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Us(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ys(e,t,r,n)}function kh(e,t,n){if(re(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Us(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ys(e,t,r,n)}function vh(e,t,n){if(re(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Us(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ys(e,t=t||r,r,n)}const Ih=Ks({topk_:function(e,t=1,n=!0){const r=Hs(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) `+`but got ${t}`);const a={x:r},i={k:t,sorted:n},[o,u]=Ls.runKernel(Rr,a,i);return{values:o,indices:u}}}),Nh=Ks({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Fc(t,n,r,!0,s),i=ja(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Sh=Ks({unique_:function(e,t=0){const n=Hs(e,"x","unique","string_or_numeric");te(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},s={axis:t},[a,i]=Ls.runKernel(Dr,r,s);return{values:a,indices:i}}}),Ch=Ks({unsortedSegmentSum_:function(e,t,n){const r=Hs(e,"x","unsortedSegmentSum"),s=Hs(t,"segmentIds","unsortedSegmentSum","int32");return te(ue(n),()=>"numSegments must be of dtype int"),Ls.runKernel(Or,{x:r,segmentIds:s},{numSegments:n})}}),$h=Ks({unstack_:function(e,t=0){const n=Hs(e,"x","unstack","string_or_numeric");return te(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),Ls.runKernel(_r,{value:n},{axis:t})}});function Th(e,t=!0,n,r){return Ls.makeVariable(e,t,n,r)}function Ah(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const r=ja(e,"int32"),s=ja([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=r.indexToLoc(n[a]);s.values.set(t,a*e.length)}return s.toTensor()}const Eh=async function(e){const t=Hs(e,"condition","whereAsync","bool"),n=await t.data(),r=Ah(t.shape,n);return e!==t&&t.dispose(),r},Rh=async function(e,t,n){const r=Hs(e,"tensor","boolMask"),s=Hs(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;te(i>0,()=>"mask cannot be scalar"),ne(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let m=a;m<a+i;m++)u*=o[m];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=Fu(r,l),h=Fu(s,[-1]),d=await Eh(h),p=ph(d,[1]),f=Cl(c,p,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f},Fh=Ks({norm_:function(e,t="euclidean",n=null,r=!1){const s=function e(t,n,r=null){if(0===t.rank)return Jo(t);if(1!==t.rank&&null===r)return e(Fu(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return Gl(Jo(t),r);if(n===1/0)return Ul(Jo(t),r);if(n===-1/0)return lc(Jo(t),r);if("euclidean"===n||2===n)return _o(Gl(Xo(Jo(t),Go(2,"int32")),r));throw new Error(`Error in norm: invalid ord value: ${n}`)}if(Array.isArray(r)&&2===r.length){if(1===n)return Ul(Gl(Jo(t),r[0]),r[1]-1);if(n===1/0)return Ul(Gl(Jo(t),r[1]),r[0]);if(n===-1/0)return lc(Gl(Jo(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return _o(Gl(Oo(t),r));throw new Error(`Error in norm: invalid ord value: ${n}`)}throw new Error(`Error in norm: invalid axis: ${r}`)}(e=Hs(e,"x","norm"),t,n);let a=s.shape;if(r){const t=me(n,e.shape);a=Xl(s.shape,t)}return Fu(s,a)}}),Dh=Ks({movingAverage_:function(e,t,n,r,s=!0){const a=Hs(e,"v","movingAverage"),i=Hs(t,"x","movingAverage"),o=Hs(n,"decay","movingAverage");Rs(a,i),te(oe(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=Go(1),l=Yo(u,o);let c=Do(Yo(i,a),l);if(s){te(null!=r,()=>"When using zeroDebias: true, step is required.");const e=Hs(r,"step","movingAverage");c=Fo(c,Yo(u,Xo(o,e)))}return Eo(a,c)}}),_h=Ks({scatterND_:function(e,t,n){const r=Hs(e,"indices","scatterND","int32"),s=Hs(t,"updates","scatterND");return Ti(s,r,n),Ls.runKernel(lr,{indices:r,updates:s},{shape:n})}}),Oh=Ks({sparseToDense_:function(e,t,n,r=0){const s=Hs(e,"sparseIndices","sparseToDense","int32"),a=Hs(t,"sparseValues","sparseToDense"),i=Hs(r,"defaultValue","sparseToDense",a.dtype);return function(e,t,n,r){if("int32"!==e.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type,"+` but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix,"+` but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error("outputShape has incorrect number of elements:,"+` ${n.length}, should be: ${a}.`);if(0!==t.rank&&(1!==t.rank||t.size!==s))throw new Error("sparseValues has incorrect shape "+`${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),Ls.runKernel(Cr,{sparseIndices:s,sparseValues:a,defaultValue:i},{outputShape:n})}}),Mh=Ks({gatherND_:function(e,t){const n=Hs(t,"indices","gatherND","int32"),r=Hs(e,"x","gatherND");return Ls.runKernel(tn,{params:r,indices:n})}}),zh=Ks({dropout_:function(e,t,n,r){const s=Hs(e,"x","dropout");if(te("float32"===s.dtype,()=>"x has to be a floating point tensor since it's going to be "+`scaled, but got a ${s.dtype} tensor instead.`),te(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof xs?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(oe(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)n.push(null==t[r]&&null!=e.shape[r]?e.shape[r]:t[r]);return n}return t}(s,n),i=1-t,o=Fo(Sl(Eo(zc(a,0,1,"float32",r),i)),i);return Do(s,o)}});function Lh(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ph(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return bh(s,"float32")}const Bh=async function(e,t,n=1){const r=Hs(e,"predictions","inTopK"),s=Hs(t,"targets","inTopK");te(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, "+`but got ${r.rank}`),te(r.rank-1===s.rank,()=>"predictions rank should be 1 larger than targets rank, but got predictions rank "+`${r.rank} and targets rank ${s.rank}`),ne(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];te(n>0&&n<=a,()=>"'k' passed to inTopK() must be > 0 && <= the predictions last "+`dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=ye("bool",u);for(let h=0;h<u;h++){const e=h*l,t=i.subarray(e,e+l),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort((e,t)=>t.value-e.value),c[h]=0;for(let s=0;s<n;s++)if(r[s].index===o[h]){c[h]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Zs(c,s.shape,"bool")},Wh=Ks({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=Fu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2]])),te(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+`${o.shape}.`),te(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+`${u.shape}.`),te(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+`${n}.`);const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];return te(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must `+`match input depth in filter (${n[2]}.`),te(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must `+`match output depth for filter (${n[3]}).`),null!=i&&te(ue(s),()=>"Error in conv2dDerFilter: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${s}.`),Ls.runKernel(vt,{x:o,dy:u},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n})}});function Vh(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Do(e,mh(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Uh(e,t){let n=t;const r=eu(e.shape,t.shape);return r.length>0&&(n=Gl(n,r)),Fu(n,e.shape)}function Gh(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Wc(e);if("elu"===t)return bl(e);if("relu6"===t)return Vc(e);if("prelu"===t)return Tc(e,n);if("leakyrelu"===t)return Dl(e,r);throw new Error(`Unknown fused activation ${t}.`)}const Hh=(e,t)=>!(e>0)||"linear"===t,jh=Ks({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Hh(Ls.state.gradientDepth,u=u||"linear")){let h=Qu(e,t,n,r,s,a,i);return null!=o&&(h=Eo(h,o)),Gh(h,u,l,c)}const h=Hs(e,"x","conv2d"),d=Hs(t,"filter","conv2d");let p=h,f=!1;3===h.rank&&(f=!0,p=Fu(h,[1,h.shape[0],h.shape[1],h.shape[2]])),te(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+`${p.rank}.`),te(4===d.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+`${d.rank}.`),null!=i&&te(ue(r),()=>"Error in fused conv2d: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${r}.`),te(p.shape[3]===d.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match `+`input depth for filter ${d.shape[2]}.`),te(Eu(n,a),()=>"Error in conv2D: Either strides or dilations must be 1. "+`Got strides ${n} and dilations '${a}'`),te("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const m=vu(p.shape,d.shape,n,a,r,i);let g,y;null!=o&&(g=Hs(o,"bias","fused conv2d"),[g]=Es(g,h),tu(m.outShape,g.shape)),null!=l&&(y=Hs(l,"prelu weights","fused conv2d"));const b=(e,t)=>{const[s,i,o,l]=t,c=Vh(e,o,u);te(Au(a),()=>"Error in gradient of fused conv2D: dilation rates greater than 1 "+`are not yet supported in gradients. Got dilations '${a}'`);const h=[tl(i.shape,c,s,n,r),Wh(i,c,s.shape,n,r)];if(null!=l){const e=Uh(l,c);h.push(e)}return h},x={x:p,filter:d,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?Vo((e,t,n)=>{let r=Ls.runKernel(Wr,x,w);return n([t,e,r]),f&&(r=Fu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(p,d):Vo((e,t,n,r)=>{let s=Ls.runKernel(Wr,x,w);return r([t,e,s,n]),f&&(s=Fu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(p,d,g)}}),qh=Ks({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=Fu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;return 3===u.rank&&(u=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Ls.runKernel(_t,{x:o,dy:u},{strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n})}}),Kh=Ks({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l=Ls.runKernel(Ot,{dy:o,filter:n},{strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e});return u?Fu(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Xh=Ks({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Hh(Ls.state.gradientDepth,u)){let h=hl(e,t,n,r,s,a,i);return null!=o&&(h=Eo(h,o)),Gh(h,u,l,c)}const h=Hs(e,"x","depthwiseConv2d"),d=Hs(t,"filter","depthwiseConv2d");let p=h,f=!1;3===h.rank&&(f=!0,p=Fu(h,[1,h.shape[0],h.shape[1],h.shape[2]])),te(4===p.rank,()=>"Error in fused depthwiseConv2d: input must be rank 4, but got "+`rank ${p.rank}.`),te(4===d.rank,()=>"Error in fused depthwiseConv2d: filter must be rank 4, "+`but got rank ${d.rank}.`),te(p.shape[3]===d.shape[2],()=>"Error in fused depthwiseConv2d: number of input channels "+`(${p.shape[3]}) must match the inChannels dimension in `+`filter ${d.shape[2]}.`),null==a&&(a=[1,1]),te(Eu(n,a),()=>"Error in fused depthwiseConv2d: Either strides or dilations must "+`be 1. Got strides ${n} and dilations '${a}'`),null!=i&&te(ue(r),()=>"Error in fused depthwiseConv2d: pad must be an integer when "+`using dimRoundingMode ${i} but got pad ${r}.`);const m=vu(p.shape,d.shape,n,a,r,i,!0);let g,y;null!=o&&(g=Hs(o,"bias","fused conv2d"),[g]=Es(g,h),tu(m.outShape,g.shape)),null!=l&&(y=Hs(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{te(Au(a),()=>"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations "+`'${a}'`);const[s,o,l,c]=t,h=Vh(e,l,u),d=Kh(o.shape,h,s,n,r,a,i),p=qh(o,h,s.shape,n,r,a,i);return null!=c?[d,p,Uh(g,h)]:[d,p]},x={x:p,filter:d,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?Vo((e,t,n)=>{let r=Ls.runKernel(Vr,x,w);return n([t,e,r]),f&&(r=Fu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(p,d):Vo((e,t,n,r)=>{let s=Ls.runKernel(Vr,x,w);return r([t,e,s,n]),f&&(s=Fu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(p,d,g)}}),Yh=Ks({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Hh(Ls.state.gradientDepth,a)){let u=bi(e,t,n,r);return null!=s&&(u=Eo(u,s)),Gh(u,a,i,o)}let u=Hs(e,"a","fused matMul"),l=Hs(t,"b","fused matMul");[u,l]=Es(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],d=n?u.shape[u.rank-1]:u.shape[u.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=ae(f),y=ae(m);te(u.rank>=2&&l.rank>=2&&u.rank===l.rank,()=>"Error in fused matMul: inputs must have the same rank of at "+`least 2, got ranks ${u.rank} and ${l.rank}.`),te(oe(f,m),()=>`Error in fused matMul: outer dimensions (${f}) and (`+`${m}) of Tensors with shapes ${u.shape} and `+`${l.shape} must match.`),te(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (`+`${h}) of Tensors with shapes ${u.shape} and `+`${l.shape} and transposeA=${n}`+` and transposeB=${r} must match.`);const b=u.shape.slice(0,-2).concat([d,p]),x=Fu(u,n?[g,c,d]:[g,d,c]),w=Fu(l,r?[y,p,h]:[y,h,p]);let k,v;null!=s&&(k=Hs(s,"bias","fused matMul"),[k]=Es(k,u),tu(b,k.shape)),null!=i&&(v=Hs(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,u,l]=t,c=Vh(Fu(e,u.shape),u,a);let h,d;return n||r?!n&&r?(h=bi(c,o,!1,!1),d=bi(c,i,!0,!1)):n&&!r?(h=bi(o,c,!1,!0),d=bi(i,c,!1,!1)):(h=bi(o,c,!0,!0),d=bi(c,i,!0,!0)):(h=bi(c,o,!1,!0),d=bi(i,c,!0,!1)),null!=s?[h,d,Uh(l,c)]:[h,d]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};return null==s?Vo((e,t,n)=>{const r=Ls.runKernel(Br,N,S);return n([e,t,r]),{value:Fu(r,b),gradFunc:I}})(x,w):Vo((e,t,n,r)=>{const s=Ls.runKernel(Br,N,S);return r([e,t,s,n]),{value:Fu(s,b),gradFunc:I}})(x,w,k)}}),Zh=Ks({hammingWindow_:function(e){return Ph(e,.54,.46)}}),Jh=Ks({hannWindow_:function(e){return Ph(e,.5,.5)}}),Qh=Ks({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(zu(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=Ou([zu(e,a,t-r),qo([r],s)]);i.push(o),a+=n}return 0===i.length?xh([],[0,t]):Fu(Ou(i),[i.length,t])}}),ed=Ks({stft_:function(e,t,n,r,s=Jh){null==r&&(r=Lh(t));const a=Qh(e,t,n),i=Do(a,s(t)),o=[];for(let u=0;u<a.shape[0];u++)o.push(hh(zu(i,[u,0],[1,t]),r));return Ou(o)}}),td=Ks({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=Hs(e,"image","cropAndResize"),o=Hs(t,"boxes","cropAndResize","float32"),u=Hs(n,"boxInd","cropAndResize","int32"),l=o.shape[0];return te(4===i.rank,()=>"Error in cropAndResize: image must be rank 4,"+`but got rank ${i.rank}.`),te(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] `+`but had shape ${o.shape}.`),te(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] `+`but had shape ${o.shape}.`),te(2===r.length,()=>"Error in cropAndResize: cropSize must be of length 2, but got "+`length ${r.length}.`),te(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),te("bilinear"===s||"nearest"===s,()=>`method must be bilinear or nearest, but was ${s}`),Ls.runKernel(Et,{image:i,boxes:o,boxInd:u},{method:s,extrapolationValue:a,cropSize:r})}}),nd=Ks({flipLeftRight_:function(e){const t=Hs(e,"image","flipLeftRight","float32");return te(4===t.rank,()=>"Error in flipLeftRight: image must be rank 4,"+`but got rank ${t.rank}.`),Ls.runKernel(Yt,{image:t},{})}}),rd=Ks({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Hs(e,"image","rotateWithOffset","float32");return te(4===s.rank,()=>"Error in rotateWithOffset: image must be rank 4,"+`but got rank ${s.rank}.`),Ls.runKernel(Pr,{image:s},{radians:t,fillValue:n,center:r})}});function sd(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),te(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),te(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),te(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),te(1===t.rank,()=>"scores must be a 1D tensor"),te(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, `+`but was ${t.shape[0]}`),te(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ad=Ks({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Hs(e,"boxes","nonMaxSuppression"),i=Hs(t,"scores","nonMaxSuppression"),o=sd(a,i,n,r,s);return Ls.runKernel(Pn,{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold})}});function id(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){const o=n(t,e[a=r+(s-r>>>1)]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||od)}(e,t,n);e.splice(r<0?-(r+1):r,0,t)}function od(e,t){return e>t?1:e<t?-1:0}function ud(e,t,n,r,s){return hd(e,t,n,r,s,0)}function ld(e,t,n,r,s,a){return hd(e,t,n,r,s,0,!1,a,!0)}function cd(e,t,n,r,s,a){return hd(e,t,n,r,s,a,!0)}function hd(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let g=0;g<t.length;g++)t[g]>s&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(fd);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let u=h.length-1;u>=i;--u){const n=dd(e,a,h[u]);if(n>=r){o=!0;break}if(t.score=t.score*pd(r,c,n),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),d.push(t.score)):t.score>s&&id(l,t,fd))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=d),u&&(m.validOutputs=p),m}function dd(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-a)*(u-i),f=(h-l)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function pd(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function fd(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const md=Ks({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Hs(e,"boxes","nonMaxSuppression"),o=Hs(t,"scores","nonMaxSuppression"),u=sd(i,o,n,r,s,a),l=Ls.runKernel(Wn,{boxes:i,scores:o},{maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma});return{selectedIndices:l[0],selectedScores:l[1]}}}),gd=Ks({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Hs(e,"boxes","nonMaxSuppression"),o=Hs(t,"scores","nonMaxSuppression"),u=sd(i,o,n,r,s,null),l=Ls.runKernel(Bn,{boxes:i,scores:o},{maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:l[0],validOutputs:l[1]}}}),yd=Ks({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Hs(e,"images","resizeBilinear");te(3===s.rank||4===s.rank,()=>"Error in resizeBilinear: x must be rank 3 or 4, but got "+`rank ${s.rank}.`),te(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+`${t}.`),te(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=Fu(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=Ls.runKernel(rr,{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?Fu(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),bd=Ks({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Hs(e,"images","resizeNearestNeighbor");te(3===s.rank||4===s.rank,()=>"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got "+`rank ${s.rank}.`),te(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+`${t}.`),te("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),te(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=Fu(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=Ls.runKernel(tr,{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?Fu(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),xd=Ks({bandPart_:function(e,t,n){te(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),te(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Hs(e,"a","bandPart");te(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t})`+` must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n})`+` must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Fu(Lc(0,a,1,"int32"),[-1,1]),u=Lc(0,i,1,"int32"),l=Yo(o,u),c=tc(Ol(l,Go(+t,"int32")),Tl(l,Go(-n,"int32"))),h=yc([a,i],r.dtype);return Fu(fh($h(Fu(r,[-1,a,i])).map(e=>ml(c,e,h))),s)}}),wd=Ks({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,te(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)te(e[t].shape[0]===n,()=>"Gram-Schmidt: Non-unique lengths found in the input vectors: "+`(${e[t].shape[0]} vs. ${n})`)}else t=!0,e=ch(e,e.shape[0],0).map(e=>ph(e,[0]));te(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds `+`number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let s=0;s<e.length;++s)n.push(Ls.tidy(()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=Do(Gl(Do(n[t],e)),n[t]);e=Yo(e,r)}return Fo(e,Fh(e,"euclidean"))}));return t?fh(n,0):n}});function kd(e,t=!1){return Ls.tidy(()=>{te(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=Nl(n),a=Ka(e);const i=xh([[1]],[1,1]);let o=Ka(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=o,l=s;[o,a,s]=Ls.tidy(()=>{const t=zu(a,[e,e],[n-e,1]),u=Fh(t),l=zu(a,[e,e],[1,1]),c=ml($l(l,0),xh([[-1]]),xh([[1]])),h=Yo(l,Do(c,u)),d=Fo(t,h);o=1===d.shape[0]?Ka(i):Ou([i,zu(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Bl(Fo(bi(c,h),u)),f=zu(a,[e,0],[n-e,r]),m=Do(p,o),g=wi(o);if(0===e)a=Yo(f,bi(m,bi(g,f)));else{const t=Yo(f,bi(m,bi(g,f)));a=Ou([zu(a,[0,0],[e,r]),t],0)}const y=wi(m),b=zu(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Yo(b,bi(bi(b,o),y));else{const t=Yo(b,bi(bi(b,o),y));s=Ou([zu(s,[0,0],[n,e]),t],1)}return[o,a,s]}),bo([t,u,l])}return!t&&n>r&&(s=zu(s,[0,0],[n,r]),a=zu(a,[0,0],[r,r])),[s,a]})}const vd=Ks({qr_:function(e,t=!1){if(te(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return kd(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=$h(Fu(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach(e=>{const[n,r]=kd(e,t);s.push(n),a.push(r)}),[Fu(fh(s,0),e.shape),Fu(fh(a,0),e.shape)]}}});var Id;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Id||(Id={}));const Nd=Ks({computeWeightedLoss_:function(e,t,n=Id.SUM_BY_NONZERO_WEIGHTS){const r=Hs(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Hs(t,"weights","computeWeightedLoss"));const a=null==s?r:Do(r,s);if(n===Id.NONE)return a;if(n===Id.SUM)return Gl(a);if(n===Id.MEAN){if(null==s)return uc(a);{const e=r.size/s.size,t=Fo(Gl(a),Gl(s));return e>1?Fo(t,Go(e)):t}}if(n===Id.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Fo(Gl(a),Go(r.size));{const e=Do(s,bc(r.shape)),t=qa(Gl(gc(e,Go(0))),"float32");return Fo(Gl(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Sd=Ks({absoluteDifference_:function(e,t,n,r=Id.SUM_BY_NONZERO_WEIGHTS){const s=Hs(e,"labels","absoluteDifference"),a=Hs(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Hs(n,"weights","absoluteDifference")),ne(s.shape,a.shape,"Error in absoluteDifference: ");const o=Jo(Yo(s,a));return Nd(o,i,r)}}),Cd=Ks({cosineDistance_:function(e,t,n,r,s=Id.SUM_BY_NONZERO_WEIGHTS){const a=Hs(e,"labels","cosineDistance"),i=Hs(t,"predictions","cosineDistance");let o=null;null!=r&&(o=Hs(r,"weights","cosineDistance")),ne(a.shape,i.shape,"Error in cosineDistance: ");const u=Go(1),l=Yo(u,Gl(Do(a,i),n,!0));return Nd(l,o,s)}}),$d=Ks({hingeLoss_:function(e,t,n,r=Id.SUM_BY_NONZERO_WEIGHTS){let s=Hs(e,"labels","hingeLoss");const a=Hs(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Hs(n,"weights","hingeLoss")),ne(s.shape,a.shape,"Error in hingeLoss: ");const o=Go(1);s=Yo(Do(Go(2),s),o);const u=Wc(Yo(o,Do(s,a)));return Nd(u,i,r)}}),Td=Ks({huberLoss_:function(e,t,n,r=1,s=Id.SUM_BY_NONZERO_WEIGHTS){const a=Hs(e,"labels","huberLoss"),i=Hs(t,"predictions","huberLoss");let o=null;null!=n&&(o=Hs(n,"weights","huberLoss")),ne(a.shape,i.shape,"Error in huberLoss: ");const u=Go(r),l=Jo(Yo(i,a)),c=cc(l,u),h=Yo(l,c),d=Eo(Do(Go(.5),Oo(c)),Do(u,h));return Nd(d,o,s)}}),Ad=Ks({logLoss_:function(e,t,n,r=1e-7,s=Id.SUM_BY_NONZERO_WEIGHTS){const a=Hs(e,"labels","logLoss"),i=Hs(t,"predictions","logLoss");let o=null;null!=n&&(o=Hs(n,"weights","logLoss")),ne(a.shape,i.shape,"Error in logLoss: ");const u=Go(1),l=Go(r),c=Bl(Do(a,Ll(Eo(i,l)))),h=Do(Yo(u,a),Ll(Eo(Yo(u,i),l))),d=Yo(c,h);return Nd(d,o,s)}}),Ed=Ks({meanSquaredError_:function(e,t,n,r=Id.SUM_BY_NONZERO_WEIGHTS){const s=Hs(e,"labels","meanSquaredError"),a=Hs(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Hs(n,"weights","meanSquaredError")),ne(s.shape,a.shape,"Error in meanSquaredError: ");const o=dh(s,a);return Nd(o,i,r)}}),Rd=Ks({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Id.SUM_BY_NONZERO_WEIGHTS){let a=Hs(e,"multiClassLabels","sigmoidCrossEntropy");const i=Hs(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Hs(n,"weights","sigmoidCrossEntropy")),ne(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Go(r),t=Go(1),n=Go(.5);a=Eo(Do(a,Yo(t,e)),Do(n,e))}const u=function(e,t){const n=Hs(e,"labels","sigmoidCrossEntropyWithLogits"),r=Hs(t,"logits","sigmoidCrossEntropyWithLogits");ne(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Wc(r),a=Do(r,n),i=Pl(wl(Bl(Jo(r))));return Eo(Yo(s,a),i)}(a,i);return Nd(u,o,s)}}),Fd=Ks({softmaxCrossEntropy_:function(e,t,n,r=0,s=Id.SUM_BY_NONZERO_WEIGHTS){let a=Hs(e,"onehotLabels","softmaxCrossEntropy");const i=Hs(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Hs(n,"weights","softmaxCrossEntropy")),ne(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Go(r),t=Go(1),n=Go(a.shape[1]);a=Eo(Do(a,Yo(t,e)),Fo(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet "+`supported. Labels / logits was rank ${t.rank} `+`and dim was ${n}`);return Vo((e,t,r)=>{const s=ec(t,[n],!0),a=Yo(qa(t,"float32"),s);r([e,a]);const i=Bl(Do(a,e));return{value:Gl(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Xl(e.shape,[n]);return[Do(Fu(e,a),Yo(qa(r,"float32"),wl(s))),Do(Fu(e,a),Yo(wl(s),qa(r,"float32")))]}}})(e,t)}(a,i);return Nd(u,o,s)}}),Dd={fft:oh,ifft:uh,rfft:hh,irfft:lh},_d={hammingWindow:Zh,hannWindow:Jh,frame:Qh,stft:ed},Od={flipLeftRight:nd,resizeNearestNeighbor:bd,resizeBilinear:yd,rotateWithOffset:rd,cropAndResize:td,nonMaxSuppression:ad,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Hs(e,"boxes","nonMaxSuppressionAsync"),i=Hs(t,"scores","nonMaxSuppressionAsync"),o=sd(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=ud(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),bh(h,"int32")},nonMaxSuppressionWithScore:md,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Hs(e,"boxes","nonMaxSuppressionAsync"),o=Hs(t,"scores","nonMaxSuppressionAsync"),u=sd(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:d,selectedScores:p}=cd(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:bh(d,"int32"),selectedScores:bh(p)}},nonMaxSuppressionPadded:gd,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Hs(e,"boxes","nonMaxSuppressionAsync"),o=Hs(t,"scores","nonMaxSuppressionAsync"),u=sd(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=ld(d,p,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:bh(f,"int32"),validOutputs:Go(m,"int32")}}},Md={bandPart:xd,gramSchmidt:wd,qr:vd},zd={absoluteDifference:Sd,computeWeightedLoss:Nd,cosineDistance:Cd,hingeLoss:$d,huberLoss:Td,logLoss:Ad,meanSquaredError:Ed,sigmoidCrossEntropy:Rd,softmaxCrossEntropy:Fd};class Ld{static sgd(e){return new su(e)}static momentum(e,t,n=!1){return new au(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new iu(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Zo(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new jo(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new ru(e,t,n,r,s)}static adagrad(e,t=.1){return new Ko(e,t)}}const Pd={sgd:Ld.sgd,momentum:Ld.momentum,adadelta:Ld.adadelta,adagrad:Ld.adagrad,rmsprop:Ld.rmsprop,adamax:Ld.adamax,adam:Ld.adam},Bd=(()=>"undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e())();function Wd(){return new Promise(e=>Bd(()=>e()))}function Vd(e,t){const n=e[0].length;e.forEach((e,t)=>{te(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same `+`as the rank of the rest (${n})`)}),te(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,s)=>{for(let a=0;a<n;a++)te(a===t||e[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) `+`does not match the shape of the rest (${r}) `+`along the non-concatenated axis ${s}.`)})}function Ud(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}const Gd=30;function Hd(e){return e<=Gd?e:Ee(e,Math.floor(Math.sqrt(e)))}function jd(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function qd(e,t,n,r=!0){let s=[];if(r)(s=s.concat(t.slice(0))).push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Kd(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Xd(e,t,n,r=!0){const s=[];s.push(r?e[0]/n:e[0]*n);for(let a=1;a<e.length;++a)s.push(a<=t.length?r?t[a-1]*e[a]:e[a]/t[a-1]:e[a]);return s}function Yd(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Zd(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}const Jd=1.7580993408473768,Qd=1.0507009873554805,ep=.3275911,tp=.254829592,np=-.284496736,rp=1.421413741,sp=-1.453152027,ap=1.061405429;function ip(...e){Ve().getBool("IS_TEST")||console.warn(...e)}function op(...e){Ve().getBool("IS_TEST")||console.log(...e)}function up(e,t){if(e.length!==t.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+`${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function lp(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function cp(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function hp(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function dp(e,t){return{real:e[2*t],imag:e[2*t+1]}}function pp(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function fp(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function mp(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function gp(e,t,n=0){let r=[];if("number"==typeof t)te(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{te(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}te(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function yp(e,t){let n,r=!1;for(e<=Gd?(n=e,r=!0):n=Ee(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Ee(e,n+1);return n}function bp(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)r.push(a!==t?e[a]:n);return r}function xp(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let h=0;h<r;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let h=0;h<r;++h)o.push(e.shape[h]),u*=e.shape[h];for(let h=r;h<n;h++)o.push(e.shape[h]),l*=e.shape[h];for(let h=r;h<s;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function wp(e){try{return e.map(e=>fs(e))}catch(LM){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${LM}`)}}function kp(e){return e.map(e=>ps(e))}const vp={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,mh(qa(n,"float32"),-1))}}},Ip={kernelName:Ke,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Oo(qa(n,"float32")),r=_o(Yo(Go(1),t));return Bl(Fo(e,r))}}}},Np={kernelName:Xe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=_o(Yo(Oo(qa(n,"float32")),1));return Fo(e,t)}}}},Sp={kernelName:Ye,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{let t=e;const r=eu(n.shape,s);return r.length>0&&(t=Gl(t,r)),Fu(t,n.shape)},b:()=>{let t=e;const n=eu(r.shape,s);return n.length>0&&(t=Gl(t,n)),Fu(t,r.shape)}}}},Cp={kernelName:Ze,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}},$p={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Mo(n)}}},Tp={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Mo(n)}}},Ap={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,_o(Yo(Go(1),Oo(qa(n,"float32")))))}}},Ep={kernelName:rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=_o(Eo(Go(1),Oo(qa(n,"float32"))));return Fo(e,t)}}}},Rp={kernelName:it,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{const t=Eo(Oo(n),Oo(r));let a=Do(e,Fo(r,t));const i=eu(n.shape,s);return i.length>0&&(a=Gl(a,i)),Fu(a,n.shape)},b:()=>{const t=Eo(Oo(n),Oo(r));let a=Bl(Do(e,Fo(n,t)));const i=eu(r.shape,s);return i.length>0&&(a=Gl(a,i)),Fu(a,r.shape)}}}},Fp={kernelName:st,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Eo(Oo(qa(n,"float32")),1))}}},Dp={kernelName:at,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Yo(Go(1),Oo(qa(n,"float32"))))}}},_p=Ks({avgPool3dGrad_:function(e,t,n,r,s,a){const i=Hs(e,"dy","avgPool3dGrad"),o=Hs(t,"input","avgPool3dGrad");let u=i,l=o,c=!1;4===o.rank&&(c=!0,u=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),l=Fu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),te(5===u.rank,()=>"Error in avgPool3dGrad: dy must be rank 5 but got rank "+`${u.rank}.`),te(5===l.rank,()=>"Error in avgPool3dGrad: input must be rank 5 but got rank "+`${l.rank}.`),null!=a&&te(ue(s),()=>"Error in avgPool3dGrad: pad must be an integer when "+`using, dimRoundingMode ${a} but got pad ${s}.`);const h=Ls.runKernel(ct,{dy:u,input:l},{filterSize:n,strides:r,pad:s,dimRoundingMode:a});return c?Fu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Op={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>_p(e,r,s,a,i,o)}}},Mp=Ks({avgPoolGrad_:function(e,t,n,r,s){const a=Hs(e,"dy","avgPoolGrad"),i=Hs(t,"input","avgPoolGrad");te(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=Fu(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Fu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),te(4===u.rank,()=>"Error in avgPoolGrad: dy must be rank 4 but got rank "+`${u.rank}.`),te(4===o.rank,()=>"Error in avgPoolGrad: input must be rank 4 but got rank "+`${o.rank}.`);const c=Ls.runKernel(ut,{dy:u,input:o},{filterSize:n,strides:r,pad:s});return l?Fu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),zp={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Mp(e,r,s,a,i)}}},Lp={kernelName:ht,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>bi(e,s,!1,!1),b:()=>bi(e,r,!0,!1)}:a&&!i?{a:()=>bi(s,e,!1,!0),b:()=>bi(r,e,!1,!1)}:{a:()=>bi(s,e,!0,!0),b:()=>bi(e,r,!0,!0)}:{a:()=>bi(e,s,!1,!0),b:()=>bi(r,e,!0,!1)}}},Pp={kernelName:dt,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Cc(e,r,s)}}},Bp={kernelName:ft,gradFunc:(e,t,n)=>{const r=n.inputShape,s=n.shape,a=Array.from(s);for(let o=r.length-1;o>=0;o--)if(r[o]===s[o])a[o]=1;else if(1!==r[o])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);const i=[];for(let o=0;o<a.length;o++)a[o]>1&&i.push(o);return{x:()=>Gl(e,i,!0)}}},Wp={kernelName:mt,gradFunc:e=>({x:()=>e.clone()})},Vp={kernelName:gt,gradFunc:e=>({x:()=>Mo(e)})},Up={kernelName:yt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>ml(tc(Tl(r,s),Ol(r,a)),e,Mo(e))}}},Gp={kernelName:xt,inputsToSave:["x"],gradFunc:vp.gradFunc},Hp={kernelName:wt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map(e=>e.shape),{axis:s}=n,a=me(s,t[0].shape)[0],i=r.map(e=>e[a]);return ch(e,i,a).map(e=>()=>e)}},jp={kernelName:kt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return te(Au(a),()=>"Error in gradient of conv2D: dilation rates greater than 1 "+`are not yet supported in gradients. Got dilations '${a}'`),{x:()=>tl(r.shape,e,s,i,o,u),filter:()=>Wh(r,e,s.shape,i,o,u)}}},qp={kernelName:It,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Qu(e,s,a,i,o,1,u),filter:()=>Wh(e,r,s.shape,a,i,o,u)}}},Kp=Ks({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Fu(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;return 4===i.rank&&(i=Fu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),te(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+`${a.shape}.`),te(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+`${i.shape}.`),te(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+`${n}.`),te(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must `+`match input depth in filter (${n[3]}.`),te(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must `+`match output depth for filter (${n[4]}).`),Ls.runKernel(St,{x:a,dy:i},{strides:r,pad:s,filterShape:n})}}),Xp={kernelName:Nt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;te(Au(r),()=>"Error in gradient of conv3D: dilation rates greater than 1 are "+`not yet supported in gradients. Got dilations '${r}'`);const[i,o]=t;return{x:()=>sl(i.shape,e,o,s,a),filter:()=>Kp(i,e,o.shape,s,a)}}},Yp={kernelName:$t,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(Bl(eh(qa(n,"float32"))),e)}}},Zp={kernelName:Tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(th(qa(n,"float32")),e)}}},Jp={kernelName:At,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=Zl([s],r.rank);let n=ul(e,s,a,!i);return null!=t&&(n=wi(n,t)),n}}}},Qp={kernelName:Dt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;te(Au(o),()=>"Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations "+`'${o}'`);const[u,l]=t;return te(4===u.rank,()=>"Error in gradient of depthwiseConv2dNative: input must be "+`rank 4, but got rank ${u.rank}.`),te(4===l.rank,()=>"Error in gradient of depthwiseConv2dNative: filter must be "+`rank 4, but got rank ${l.rank}.`),te(u.shape[3]===l.shape[2],()=>"Error in gradient of depthwiseConv2d: number of input "+`channels (${u.shape[3]}) must match the inChannels dimension `+`in filter ${l.shape[2]}.`),te(Eu(s,o),()=>"Error in gradient of depthwiseConv2d: Either strides or "+`dilations must be  1. Got strides ${s} and dilations `+`'${o}'.`),null!=i&&te(ue(a),()=>"Error in depthwiseConv2d: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${a}.`),{x:()=>Kh(u.shape,e,l,s,a,r,i),filter:()=>qh(u,e,l.shape,s,a,r,i)}}},ef={kernelName:zt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>Ls.runKernel(Lt,a,n),filter:()=>Ls.runKernel(Pt,i,n)}}},tf={kernelName:Wt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>Ls.runKernel(Vt,r)}}},nf={kernelName:Ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Do(wl(Bl(Oo(n))),2/Math.sqrt(Math.PI));return{x:()=>Do(e,r)}}},rf={kernelName:Ht,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,n)}}},sf={kernelName:jt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Fu(e,n.shape)}}},af={kernelName:qt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,wl(n))}}},of={kernelName:Zt,gradFunc:e=>({x:()=>Mo(e)})},uf={kernelName:Jt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{const t=Fo(e,qa(r,"float32")),a=eu(n.shape,s);return a.length>0?Fu(Gl(t,a),n.shape):t},b:()=>{let t=Do(e,qa(n,"float32"));const a=eu(r.shape,s);a.length>0&&(t=Fu(Gl(t,a),r.shape));const i=Oo(r);return Bl(Fo(t,qa(i,"float32")))}}}},lf={kernelName:Qt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,u=null==o?Go(1):o,l=eu(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=Yo(s,a),d=Do(e,u),p=Xc(Eo(i,Go(r))),f=Do(Do(Do(p,p),p),Go(-.5));return{x:()=>Fu(Do(Do(e,1===a.rank?Il(Fu(p,[1,1,1,a.shape[0]]),c):p),u),s.shape),mean:()=>{let e=Do(Do(p,Go(-1)),d);return 1===a.rank&&(e=Gl(e,l)),Fu(e,a.shape)},variance:()=>{let e=Do(Do(f,h),d);return 1===a.rank&&(e=Gl(e,l)),Fu(e,a.shape)},scale:()=>{const t=Do(h,p);let n=Do(e,t);return 1===a.rank&&(n=Gl(n,l)),Fu(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Gl(t,l)),Fu(t,a.shape)}}}},cf={kernelName:en,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=me(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),u=o.length,l=t.slice(a,t.length).slice(1),c=l.length,h=hf(0,u),d=hf(u+1,u+1+c),p=df([o,[n],l]),f=Fu(e,p),m=Fu(s,[n]),g=df([[u],h,d]),y=wi(f,g);let b=Ch(y,m,r.shape[i]);const x=Jl(g);return wi(b,x)},indices:()=>s}}};function hf(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function df(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const pf={kernelName:rn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Mo(n),b:()=>Mo(r)}}},ff={kernelName:sn,gradFunc:e=>({x:()=>qa(e,"float32")})},mf={kernelName:un,gradFunc:e=>({x:()=>Mo(e)})},gf={kernelName:ln,gradFunc:e=>({x:()=>Mo(e)})},yf={kernelName:cn,gradFunc:e=>({x:()=>Mo(e)})},bf={kernelName:hn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=$l(r,0);return{x:()=>ml(a,e,Do(e,s))}}},xf={kernelName:gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Eo(n,1))}}},wf={kernelName:mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,qa(n,"float32"))}}},kf={kernelName:wn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=wl(r);return Yo(e,Do(Gl(e,s,!0),t))}}}},vf=Ks({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){return Ls.runKernel(vn,{x:e,y:t,dy:n},{depthRadius:r,bias:s,alpha:a,beta:i})}}),If={kernelName:kn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>vf(r,s,e,a,i,o,u)}}};function Nf(e,t,n,r){return t.rank<n.rank&&(t=Fu(t,Xl(t.shape,r))),e.rank<n.rank&&(e=Fu(e,Xl(e.shape,r))),{x:()=>Do(e,qa(fl(n,t),e.dtype))}}const Sf={kernelName:In,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=Nf(e,t[1],a,me(s,a.shape));return{x:()=>i.x()}}},Cf={kernelName:Nn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Do(e,qa(Tl(n,r),"float32")),b:()=>Do(e,qa(_l(n,r),"float32"))}}},$f=Ks({maxPool3dGrad_:function(e,t,n,r,s,a,i){const o=Hs(e,"dy","maxPool3dGrad"),u=Hs(t,"input","maxPool3dGrad"),l=Hs(n,"output","maxPool3dGrad");let c=o,h=u,d=l,p=!1;4===u.rank&&(p=!0,c=Fu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=Fu(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Fu(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),te(5===c.rank,()=>"Error in maxPool3dGrad: dy must be rank 5 but got rank "+`${c.rank}.`),te(5===h.rank,()=>"Error in maxPool3dGrad: input must be rank 5 but got rank "+`${h.rank}.`),te(5===d.rank,()=>"Error in maxPool3dGrad: output must be rank 5 but got rank "+`${d.rank}.`),null!=i&&te(ue(a),()=>"Error in maxPool3dGrad: pad must be an integer when "+`using, dimRoundingMode ${i} but got pad ${a}.`);const f=Ls.runKernel(Tn,{dy:c,input:h,output:d},{filterSize:r,strides:s,pad:a,dimRoundingMode:i});return p?Fu(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Tf={kernelName:$n,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>$f(e,r,s,a,i,o,u)}}},Af=Ks({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=Hs(e,"dy","maxPoolGrad"),u=Hs(t,"input","maxPoolGrad"),l=Hs(n,"output","maxPoolGrad");return te(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy `+`(${o.rank})`),te(4===o.rank,()=>"Error in maxPoolGrad: dy must be rank 4 but got rank "+`${o.rank}.`),te(4===u.rank,()=>"Error in maxPoolGrad: input must be rank 4 but got rank "+`${u.rank}.`),null!=i&&te(ue(a),()=>"Error in maxPoolGrad: pad must be an integer when using, "+`dimRoundingMode ${i} but got pad ${a}.`),Ls.runKernel(Cn,{dy:o,input:u,output:l},{filterSize:r,strides:s,pad:a,dimRoundingMode:i})}}),Ef={kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>zu(e,a,r.shape)}}},Rf={kernelName:wr,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Bu(e,r,s)}}},Ff={kernelName:kr,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Ou(e,r)}}},Df=[vp,Ip,Np,Sp,Cp,$p,Tp,Ap,Ep,Rp,Fp,Dp,Op,zp,Lp,Pp,Bp,Wp,Vp,Up,Gp,Hp,qp,jp,Xp,Yp,Zp,Jp,Qp,ef,{kernelName:Bt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{const t=Fo(e,qa(r,"float32")),a=eu(n.shape,s);return a.length>0?Fu(Gl(t,a),n.shape):t},b:()=>{let t=Do(e,qa(n,"float32"));const a=eu(r.shape,s);a.length>0&&(t=Fu(Gl(t,a),r.shape));const i=Oo(r);return Bl(Fo(t,qa(i,"float32")))}}}},tf,nf,rf,sf,af,uf,of,lf,cf,pf,ff,mf,gf,yf,bf,xf,wf,kf,If,Sf,Sf,Cf,Tf,{kernelName:Sn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Af(e,r,s,a,i,o)}}},{kernelName:En,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=me(s,r.shape),i=ae(Kl(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach(e=>{t[e]=1});const n=Fu(e,t);return Fo(Do(n,bc(r.shape,"float32")),i)}}}},{kernelName:Rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=Nf(e,i,a,me(s,a.shape));return{x:()=>o.x()}}},{kernelName:Fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Do(e,qa(Ol(n,r),"float32")),b:()=>Do(e,qa($l(n,r),"float32"))}}},{kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>zu(e,a,r.shape)}}},{kernelName:_n,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{const t=eu(n.shape,s);return t.length>0?Fu(Gl(e,t),n.shape):e},b:()=>{const t=Do(e,Bl(Sl(Fo(n,r)))),a=eu(r.shape,s);return a.length>0?Fu(Gl(t,a),r.shape):t}}}},{kernelName:Mn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{const t=Do(e,qa(r,"float32")),a=eu(n.shape,s);return a.length>0?Fu(Gl(t,a),n.shape):t},b:()=>{const t=Do(e,qa(n,"float32")),a=eu(r.shape,s);return a.length>0?Fu(Gl(t,a),r.shape):t}}}},{kernelName:zn,gradFunc:e=>({x:()=>Bl(e)})},{kernelName:Un,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>yc(n.shape,"float32")}}},{kernelName:Vn,gradFunc:e=>({x:()=>Mo(e)})},{kernelName:Gn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return $h(e,r).map(e=>()=>e)}},Ef,Ef,{kernelName:qn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=tu(a.shape,i.shape);return{a:()=>{const t=qa(i,"float32");let n=Do(e,Do(t,Xo(a,Yo(t,Go(1)))));const r=eu(a.shape,o);return r.length>0&&(n=Gl(n,r)),Fu(n,a.shape)},b:()=>{const t=$l(a,0),n=ml(t,Ll(a),Mo(a));let r=Do(e,Do(s,n));const u=eu(i.shape,o);return u.length>0&&(r=Gl(r,u)),Fu(r,i.shape)}}}},{kernelName:Kn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=$l(n,0);return{x:()=>ml(s,e,Do(e,r)),alpha:()=>{let t=ml(s,Mo(e),Do(e,n));const a=eu(r.shape,e.shape);return a.length>0&&(t=Gl(t,a)),Fu(t,r.shape)}}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Bl(Oo(n)))}}},{kernelName:ar,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Do(Ol(n,6),mh(n));return{x:()=>Do(e,qa(r,"float32"))}}},{kernelName:Qn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,qa(mh(n),"float32"))}}},{kernelName:er,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,n.shape)}}},{kernelName:rr,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Ls.runKernel(sr,s,n)}}},{kernelName:tr,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>Ls.runKernel(nr,s,n)}}},{kernelName:ir,gradFunc:(e,t,n)=>{const{dims:r}=n,s=me(r,e.shape);return{x:()=>Uc(e,s)}}},{kernelName:or,gradFunc:e=>({x:()=>Mo(e)})},{kernelName:ur,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Bl(Fo(e,Do(Xo(n,1.5),2)))}}},{kernelName:cr,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>qa(Mo(n),"float32"),t:()=>Do(e,qa(n,e.dtype)),e:()=>Do(e,qa(nc(n),e.dtype))}}},{kernelName:hr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=$l(n,Go(0)),r=Go(Jd),s=Go(Qd),a=Do(e,s),i=Do(Do(e,r),wl(qa(n,"float32")));return ml(t,a,i)}}}},{kernelName:gr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Do(n,Yo(Go(1),n)))}}},{kernelName:mr,gradFunc:e=>({x:()=>Mo(e)})},{kernelName:pr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(il(qa(n,"float32")),e)}}},{kernelName:fr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(ol(qa(n,"float32")),e)}}},{kernelName:dr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=Gi(r,s,a),l=[];for(let c=0;c<e.rank;c++)l.push([o[c],i[c]-o[c]-u[c]]);return{x:()=>kc(e,l)}}},{kernelName:vr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=Do(e,r);return{logits:()=>Yo(a,Do(Gl(a,[s],!0),r))}}},{kernelName:yr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Mu(n))}}},Rf,Rf,Ff,Ff,{kernelName:br,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Do(_o(qa(n,"float32")),2))}}},{kernelName:Ir,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Go(2);return{a:()=>Do(e,Do(s,Yo(n,r))),b:()=>Do(e,Do(s,Yo(r,n)))}}},{kernelName:Nr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(e,Do(qa(n,"float32"),2))}}},{kernelName:zr,gradFunc:e=>({x:()=>Mo(e)})},{kernelName:Sr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=tu(n.shape,r.shape);return{a:()=>{let t=e;const r=eu(n.shape,s);return r.length>0&&(t=Gl(t,r)),Fu(t,n.shape)},b:()=>{let t=e;const n=eu(r.shape,s);return n.length>0&&(t=Gl(t,n)),Fu(Bl(t),r.shape)}}}},{kernelName:xr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;me(a,r.shape).forEach(e=>{s[e]=1});const i=Fu(e,s),o=Do(i,bc(r.shape,"float32"));return{x:()=>o}}},{kernelName:Tr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fo(e,Oo(il(n)))}}},{kernelName:Ar,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Do(Yo(Go(1),Oo(n)),e)}}},{kernelName:Er,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Mo(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Eo(t,zu(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Eo(t,zu(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=Eo(t,zu(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+`${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=Eo(t,zu(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:Fr,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Jl(s);return{x:()=>wi(e,a)}}},{kernelName:_r,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>fh(e,s)}}},{kernelName:Or,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(function(e,t){const n=nu(t,Mo(t)),r=Cl(e,n);let s=Tl(t,Go(0,"int32"));const a=r.rank-s.rank;for(let o=0;o<a;++o)s=kl(s,o+1);s=tc(s,bc(r.shape,"bool"));const i=Mo(r);return ml(s,r,i)})(e,n)}}},{kernelName:Mr,gradFunc:e=>({x:()=>Mo(e)})}];for(const PM of Df)Xr(PM);let _f;function Of(){return null==_f&&(_f=To().epsilon()),_f}ws().prototype.abs=function(){return this.throwIfDisposed(),Jo(this)},ws().prototype.acos=function(){return this.throwIfDisposed(),ou(this)},ws().prototype.acosh=function(){return this.throwIfDisposed(),uu(this)},ws().prototype.add=function(e){return this.throwIfDisposed(),Eo(this,e)},ws().prototype.all=function(e,t){return this.throwIfDisposed(),cu(this,e,t)},ws().prototype.any=function(e,t){return this.throwIfDisposed(),hu(this,e,t)},ws().prototype.argMax=function(e){return this.throwIfDisposed(),du(this,e)},ws().prototype.argMin=function(e){return this.throwIfDisposed(),pu(this,e)},ws().prototype.asScalar=function(){return this.throwIfDisposed(),te(1===this.size,()=>"The array must have only 1 element."),Fu(this,[])},ws().prototype.asType=function(e){return this.throwIfDisposed(),qa(this,e)},ws().prototype.as1D=function(){return this.throwIfDisposed(),Fu(this,[this.size])},ws().prototype.as2D=function(e,t){return this.throwIfDisposed(),Fu(this,[e,t])},ws().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Fu(this,[e,t,n])},ws().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Fu(this,[e,t,n,r])},ws().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Fu(this,[e,t,n,r,s])},ws().prototype.asin=function(){return this.throwIfDisposed(),fu(this)},ws().prototype.asinh=function(){return this.throwIfDisposed(),mu(this)},ws().prototype.atan=function(){return this.throwIfDisposed(),gu(this)},ws().prototype.atan2=function(e){return this.throwIfDisposed(),yu(this,e)},ws().prototype.atanh=function(){return this.throwIfDisposed(),bu(this)},ws().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Du(this,e,t,n,r)},ws().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Bu(this,e,t)},ws().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),Wu(this,e,t,n,r,s)},ws().prototype.broadcastTo=function(e){return this.throwIfDisposed(),ju(this,e)},ws().prototype.cast=function(e){return this.throwIfDisposed(),qa(this,e)},ws().prototype.ceil=function(){return this.throwIfDisposed(),qu(this)},ws().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Ku(this,e,t)},ws().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof xs&&(e=[e]),Ou([this,...e],t)},ws().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),el(this,e,t,n,r,s,a)},ws().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),nl(this,e,t,n,r,s)},ws().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Qu(this,e,t,n,r,s,a)},ws().prototype.cos=function(){return this.throwIfDisposed(),il(this)},ws().prototype.cosh=function(){return this.throwIfDisposed(),ol(this)},ws().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),ul(this,e,t,n)},ws().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),cl(this,e,t)},ws().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),hl(this,e,t,n,r,s,a)},ws().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),pl(this,e,t,n,r,s)},ws().prototype.divNoNan=function(e){return this.throwIfDisposed(),gl(this,e)},ws().prototype.div=function(e){return this.throwIfDisposed(),Fo(this,e)},ws().prototype.dot=function(e){return this.throwIfDisposed(),yl(this,e)},ws().prototype.elu=function(){return this.throwIfDisposed(),bl(this)},ws().prototype.equal=function(e){return this.throwIfDisposed(),fl(this,e)},ws().prototype.erf=function(){return this.throwIfDisposed(),xl(this)},ws().prototype.exp=function(){return this.throwIfDisposed(),wl(this)},ws().prototype.expandDims=function(e){return this.throwIfDisposed(),kl(this,e)},ws().prototype.expm1=function(){return this.throwIfDisposed(),vl(this)},ws().prototype.fft=function(){return this.throwIfDisposed(),oh(this)},ws().prototype.flatten=function(){return this.throwIfDisposed(),Fu(this,[this.size])},ws().prototype.floor=function(){return this.throwIfDisposed(),Sl(this)},ws().prototype.floorDiv=function(e){return this.throwIfDisposed(),Ro(this,e)},ws().prototype.gather=function(e,t){return this.throwIfDisposed(),Cl(this,e,t)},ws().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Tl(this,e)},ws().prototype.greater=function(e){return this.throwIfDisposed(),$l(this,e)},ws().prototype.ifft=function(){return this.throwIfDisposed(),uh(this)},ws().prototype.irfft=function(){return this.throwIfDisposed(),lh(this)},ws().prototype.isFinite=function(){return this.throwIfDisposed(),El(this)},ws().prototype.isInf=function(){return this.throwIfDisposed(),Rl(this)},ws().prototype.isNaN=function(){return this.throwIfDisposed(),Fl(this)},ws().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Dl(this,e)},ws().prototype.lessEqual=function(e){return this.throwIfDisposed(),Ol(this,e)},ws().prototype.less=function(e){return this.throwIfDisposed(),_l(this,e)},ws().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),zl(this,e,t,n,r)},ws().prototype.logSigmoid=function(){return this.throwIfDisposed(),Vl(this)},ws().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Hl(this,e)},ws().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),ec(this,e,t)},ws().prototype.log=function(){return this.throwIfDisposed(),Ll(this)},ws().prototype.log1p=function(){return this.throwIfDisposed(),Pl(this)},ws().prototype.logicalAnd=function(e){return this.throwIfDisposed(),tc(this,e)},ws().prototype.logicalNot=function(){return this.throwIfDisposed(),nc(this)},ws().prototype.logicalOr=function(e){return this.throwIfDisposed(),rc(this,e)},ws().prototype.logicalXor=function(e){return this.throwIfDisposed(),sc(this,e)},ws().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),bi(this,e,t,n)},ws().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),ac(this,e,t,n,r)},ws().prototype.max=function(e,t){return this.throwIfDisposed(),Ul(this,e,t)},ws().prototype.maximum=function(e){return this.throwIfDisposed(),nu(this,e)},ws().prototype.mean=function(e,t){return this.throwIfDisposed(),uc(this,e,t)},ws().prototype.min=function(e,t){return this.throwIfDisposed(),lc(this,e,t)},ws().prototype.minimum=function(e){return this.throwIfDisposed(),cc(this,e)},ws().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),hc(this,e,t)},ws().prototype.mod=function(e){return this.throwIfDisposed(),dc(this,e)},ws().prototype.mul=function(e){return this.throwIfDisposed(),Do(this,e)},ws().prototype.neg=function(){return this.throwIfDisposed(),Bl(this)},ws().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Fh(this,e,t,n)},ws().prototype.notEqual=function(e){return this.throwIfDisposed(),gc(this,e)},ws().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),xi(this,e,t,n)},ws().prototype.onesLike=function(){return this.throwIfDisposed(),xc(this)},ws().prototype.pad=function(e,t){return this.throwIfDisposed(),kc(this,e,t)},ws().prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),$c(this,e,t,n,r,s)},ws().prototype.pow=function(e){return this.throwIfDisposed(),Xo(this,e)},ws().prototype.prelu=function(e){return this.throwIfDisposed(),Tc(this,e)},ws().prototype.prod=function(e,t){return this.throwIfDisposed(),Ac(this,e,t)},ws().prototype.reciprocal=function(){return this.throwIfDisposed(),Bc(this)},ws().prototype.relu=function(){return this.throwIfDisposed(),Wc(this)},ws().prototype.relu6=function(){return this.throwIfDisposed(),Vc(this)},ws().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Fu(this,e.shape)},ws().prototype.reshape=function(e){return this.throwIfDisposed(),Fu(this,e)},ws().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),yd(this,e,t,n)},ws().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),bd(this,e,t,n)},ws().prototype.reverse=function(e){return this.throwIfDisposed(),Uc(this,e)},ws().prototype.rfft=function(){return this.throwIfDisposed(),hh(this)},ws().prototype.round=function(){return this.throwIfDisposed(),Kc(this)},ws().prototype.rsqrt=function(){return this.throwIfDisposed(),Xc(this)},ws().prototype.selu=function(){return this.throwIfDisposed(),Yc(this)},ws().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Zc(this,e,t,n,r,s,a)},ws().prototype.sigmoid=function(){return this.throwIfDisposed(),Mu(this)},ws().prototype.sign=function(){return this.throwIfDisposed(),Qc(this)},ws().prototype.sin=function(){return this.throwIfDisposed(),eh(this)},ws().prototype.sinh=function(){return this.throwIfDisposed(),th(this)},ws().prototype.slice=function(e,t){return this.throwIfDisposed(),zu(this,e,t)},ws().prototype.softmax=function(e){return this.throwIfDisposed(),ih(this,e)},ws().prototype.softplus=function(){return this.throwIfDisposed(),Wl(this)},ws().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Cc(this,e,t)},ws().prototype.split=function(e,t){return this.throwIfDisposed(),ch(this,e,t)},ws().prototype.sqrt=function(){return this.throwIfDisposed(),_o(this)},ws().prototype.square=function(){return this.throwIfDisposed(),Oo(this)},ws().prototype.squaredDifference=function(e){return this.throwIfDisposed(),dh(this,e)},ws().prototype.squeeze=function(e){return this.throwIfDisposed(),ph(this,e)},ws().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof xs?[this,e]:[this,...e];return fh(n,t)},ws().prototype.step=function(e){return this.throwIfDisposed(),mh(this,e)},ws().prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),gh(this,e,t,n,r,s,a,i,o)},ws().prototype.sub=function(e){return this.throwIfDisposed(),Yo(this,e)},ws().prototype.sum=function(e,t){return this.throwIfDisposed(),Gl(this,e,t)},ws().prototype.tan=function(){return this.throwIfDisposed(),yh(this)},ws().prototype.tanh=function(){return this.throwIfDisposed(),Lu(this)},ws().prototype.tile=function(e){return this.throwIfDisposed(),Il(this,e)},ws().prototype.toBool=function(){return this.throwIfDisposed(),qa(this,"bool")},ws().prototype.toFloat=function(){return this.throwIfDisposed(),qa(this,"float32")},ws().prototype.toInt=function(){return this.throwIfDisposed(),qa(this,"int32")},ws().prototype.topk=function(e,t){return this.throwIfDisposed(),Ih(this,e,t)},ws().prototype.transpose=function(e){return this.throwIfDisposed(),wi(this,e)},ws().prototype.unique=function(e){return this.throwIfDisposed(),Sh(this,e)},ws().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Ch(this,e,t)},ws().prototype.unstack=function(e){return this.throwIfDisposed(),$h(this,e)},ws().prototype.where=function(e,t){return this.throwIfDisposed(),ml(e,this,t)},ws().prototype.zerosLike=function(){return this.throwIfDisposed(),Mo(this)};class Mf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Mf.prototype)}}class zf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,zf.prototype)}}class Lf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Lf.prototype)}}class Pf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Pf.prototype)}}class Bf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Bf.prototype)}}function Wf(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Vf(e,t){if(!e)throw new Bf(t)}function Uf(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Gf(e){return 1===e.length?e[0]:e}function Hf(e){return Array.isArray(e)?e:[e]}function jf(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function qf(e){return e.length<=1?e:-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}Error;let Kf={};function Xf(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Yf(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Kf)a=Kf[s];else if(null==(a=t[s]))throw new Lf(`Unknown ${r}: ${e}. `+"This may be due to one of the following reasons:\n"+`1. The ${r} is defined in Python, in which `+"case it needs to be ported to TensorFlow.js or your JavaScript code.\n"+`2. The custom ${r} is defined in JavaScript, `+"but is not registered properly with tf.serialization.registerClass().");return a}{const a=e;if(null==a.className||null==a.config)throw new Lf(`${r}: Improper config format: `+`${JSON.stringify(a)}.\n`+"'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Kf?[o,u]=Kf.className:i in t&&([o,u]=t[i]),null==o)throw new Lf(`Unknown ${r}: ${i}. `+"This may be due to one of the following reasons:\n"+`1. The ${r} is defined in Python, in which `+"case it needs to be ported to TensorFlow.js or your JavaScript code.\n"+`2. The custom ${r} is defined in JavaScript, `+"but is not registered properly with tf.serialization.registerClass().");if(null!=u){const e={};for(const n of Object.keys(Kf))e[n]=Kf[n];for(const s of Object.keys(n))e[s]=n[s];a.config.customObjects=e;const t=Object.assign({},Kf);for(const s of Object.keys(n))Kf[s]=n[s];!function e(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(t=>e(t));else{const n=Object.keys(t);for(const r of n){const n=t[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?e(n):t[r]=n.value)}}}(a.config);const r=u(o,a.config,n,s);return Kf=Object.assign({},t),r}{const e=Object.assign({},Kf);for(const r of Object.keys(n))Kf[r]=n[r];const t=new o(a.config);return Kf=Object.assign({},e),t}}}function Zf(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Jf(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Qf(e){if(null==e)throw new Lf(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function em(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Lf(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function tm(e,t,n=0,r=1/0){return Vf(n>=0),Vf(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(e=>typeof e===t)}function nm(e,t){Array.isArray(e)?(r.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>nm(e,`element ${n+1} of ${t}`))):r.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got `+`${function e(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>e(t)).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}(e)}.`)}function rm(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function sm(e,t){return yo(()=>_o(Gl(Do(e,e),t,!0)))}class am extends d.Serializable{getConfig(){return{}}}class im extends am{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return yo(()=>{const t=sm(e,this.axis),n=Ku(t,0,this.maxValue);return Do(e,Fo(n,Eo(Of(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}im.className="MaxNorm",d.registerClass(im);class om extends am{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return yo(()=>Fo(e,Eo(Of(),sm(e,this.axis))))}getConfig(){return{axis:this.axis}}}om.className="UnitNorm",d.registerClass(om);class um extends am{apply(e){return Wc(e)}}um.className="NonNeg",d.registerClass(um);class lm extends am{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return yo(()=>{const t=sm(e,this.axis),n=Eo(Do(this.rate,Ku(t,this.minValue,this.maxValue)),Do(1-this.rate,t));return Do(e,Fo(n,Eo(Of(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}lm.className="MinMaxNorm",d.registerClass(lm);const cm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function hm(e){return Xf(e)}function dm(e,t={}){return Yf(e,d.SerializationMap.getMap().classNameMap,t,"constraint")}function pm(e){return null==e?null:"string"==typeof e?dm({className:e in cm?cm[e]:e,config:{}}):e instanceof am?e:dm(e)}const fm=["channelsFirst","channelsLast"],mm=["nearest","bilinear"],gm=["valid","same","causal"],ym=["max","avg"],bm=["sum","mul","concat","ave"],xm=new Map;function wm(e){em(fm,"DataFormat",e)}function km(e){em(gm,"PaddingMode",e)}function vm(e){em(ym,"PoolMode",e)}const Im=[],Nm="/";function Sm(e,t){Im.push(e);try{const e=t();return Im.pop(),e}catch(n){throw Im.pop(),n}}function Cm(e){if(!Am(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Im.length?"":Im.join(Nm)+Nm)+e}function $m(e){if(!Am(e))throw new Error("Not a valid tensor name: '"+e+"'");xm.has(e)||xm.set(e,0);const t=xm.get(e);if(xm.set(e,xm.get(e)+1),t>0){const n=`${e}_${t}`;return xm.set(n,1),n}return e}const Tm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Am(e){return!!e.match(Tm)}function Em(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function Rm(e){return bh(e=Array.isArray(e)?new Float32Array(e):e)}function Fm(e){return lc(Rm(e)).dataSync()[0]}function Dm(e){return Ul(Rm(e)).dataSync()[0]}function _m(e,t){if(t<e)throw new Lf(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Om(e,t){return e.asType(t)}function Mm(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function zm(e,t,n){return yo(()=>{switch(e.rank){case 1:return nh(e,t,n);case 2:return rh(e,[t,0],[n,e.shape[1]]);case 3:return sh(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return ah(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return zu(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return zu(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Lf("sliceAlongFirstAxis() received an unsupported tensor rank: "+`${e.rank}`)}})}function Lm(e,t,n){return yo(()=>{switch(e.rank){case 1:return nh(e,t,n);case 2:return rh(e,[0,t],[e.shape[0],n]);case 3:return sh(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return ah(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Lf("sliceAlongLastAxis() received an unsupported tensor rank: "+`${e.rank}`)}})}function Pm(e,t,n,r){return yo(()=>{switch(e.rank){case 1:return nh(e,t,n);case 2:switch(r){case 1:return zm(e,t,n);case 2:return Lm(e,t,n);default:throw new Lf("The axis is not within the rank of the tensor "+`${r}`)}case 3:switch(r){case 1:return zm(e,t,n);case 2:return sh(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Lm(e,t,n);default:throw new Lf("The axis is not within the rank of the tensor "+`${r}`)}case 4:switch(r){case 1:return zm(e,t,n);case 2:return ah(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return ah(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Lm(e,t,n);default:throw new Lf("The axis is not within the rank of the tensor "+`${r}`)}default:throw new Lf("sliceAlongLastAxis() received an unsupported tensor rank: "+`${e.rank}`)}})}function Bm(e,t=-1){let n;return t<0&&(t=0!==(n=e[0].rank)?n:0),t===e[0].rank&&(t=-1),Ou(e,t)}function Wm(e,t){switch(e.rank){case 1:return Xu([e,t]);case 2:return Yu([e,t],0);case 3:return Zu([e,t],0);case 4:return Ju([e,t],0);default:throw new Lf("concatAlongFirstAxis() received an unsupported "+`tensor rank: ${e.rank}`)}}function Vm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Lf(`The length of input n (${t.length}) does not match `+`the number of dimensions in input x (${e.rank})`);return Il(e,t)}function Um(e,t=0,n=1,r,s){return Mc(e,t,n,r,s)}function Gm(e,t,n,r){if(e.rank<2||t.rank<2)throw new Pf("dot requires both inputs to be rank >= 2"+` but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Pf("If rank y >= 3, then the second last dim"+` of y must equal the last dim of x but got x shape = ${e.shape} and `+` y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return f.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?qm(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=t.transpose(c).reshape([u,-1]);const h=[...s,...l];return f.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?qm(e.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Hm(e,t,n){return yo(()=>(t=Array.isArray(t)?bh(t,"int32"):t.toInt(),Cl(e,t,n)))}function jm(e){return Do(e,e)}function qm(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new Lf(`Unexpected bias dimensions: ${t.rank}`+`; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1,1,1]:[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,1,1,r[0]]:[1].concat(r))}else if(4===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1,1]:[1,r[2],r[0],r[1]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,1,r[0]]:[1].concat(r))}else if(3===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1]:[1,r[1],r[0]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,r[0]]:[1].concat(r))}else if(e<3)return t;throw new Lf(`Unsupported input rank by biasAdd: ${t.rank}`)}function Km(e,t,n){return yo(()=>(null==n&&(n="channelsLast"),wm(n),e.add(qm(e.rank,t,n))))}function Xm(e,t,n,r){return yo(()=>zh(e,t,n,r))}function Ym(e,t,n=!1){return n?e():t()}const Zm=["fanIn","fanOut","fanAvg"],Jm=["normal","uniform","truncatedNormal"];class Qm extends d.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class eg extends Qm{apply(e,t){return yc(e,t)}}eg.className="Zeros",d.registerClass(eg);class tg extends Qm{apply(e,t){return bc(e,t)}}tg.className="Ones",d.registerClass(tg);class ng extends Qm{constructor(e){if(super(),"object"!=typeof e)throw new Lf(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Lf(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return yo(()=>Do(Go(this.value),bc(e,t)))}getConfig(){return{value:this.value}}}ng.className="Constant",d.registerClass(ng);class rg extends Qm{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return zc(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}rg.className="RandomUniform",d.registerClass(rg);class sg extends Qm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Pf(`randomNormal does not support dType ${t}.`);return Um(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}sg.className="RandomNormal",d.registerClass(sg);class ag extends Qm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Pf(`truncatedNormal does not support dType ${t}.`);return Nh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ag.className="TruncatedNormal",d.registerClass(ag);class ig extends Qm{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return yo(()=>{if(2!==e.length||e[0]!==e[1])throw new Lf("Identity matrix initializer can only be used for 2D square matrices.");return Do(this.gain,Nl(e[0]))})}getConfig(){return{gain:this.gain}}}ig.className="Identity",d.registerClass(ig);class og extends Qm{constructor(e){if(super(),e.scale<0)throw new Lf(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,em(Zm,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,em(Jm,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(wm(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Em(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=Em(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=Em(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,r):"fanOut"===this.mode?Math.max(1,s):Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Pf(`${this.getClassName()} does not support dType ${t}.`);return Nh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return zc(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}og.className="VarianceScaling",d.registerClass(og);class ug extends og{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return og.className}}ug.className="GlorotUniform",d.registerClass(ug);class lg extends og{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return og.className}}lg.className="GlorotNormal",d.registerClass(lg);class cg extends og{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return og.className}}cg.className="HeNormal",d.registerClass(cg);class hg extends og{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return og.className}}hg.className="HeUniform",d.registerClass(hg);class dg extends og{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return og.className}}dg.className="LeCunNormal",d.registerClass(dg);class pg extends og{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return og.className}}pg.className="LeCunNormal",d.registerClass(pg);class fg extends Qm{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Pf("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return yo(()=>{if(e.length<2)throw new Pf("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn("Orthogonal initializer is being called on a matrix with more "+`than 2000 (${e[0]*e[1]}) elements: `+"Slowness may result.");const t=Um(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Md.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),Do(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}fg.className="Orthogonal",d.registerClass(fg);const mg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function gg(e,t={}){return Yf(e,d.SerializationMap.getMap().classNameMap,t,"initializer")}function yg(e){return Xf(e)}function bg(e){if("string"==typeof e){const t=e in mg?mg[e]:e;if("GlorotNormal"===t)return new lg;if("GlorotUniform"===t)return new ug;if("HeNormal"===t)return new cg;if("HeUniform"===t)return new hg;if("LeCunNormal"===t)return new dg;if("LeCunUniform"===t)return new pg;{const e={};return e.className=t,e.config={},gg(e)}}return e instanceof Qm?e:gg(e)}let xg=0;function wg(){return xg++}const kg={};function vg(e=""){return e in kg||(kg[e]=0),kg[e]+=1,e+kg[e].toString()}function Ig(e){return Array.isArray(e)&&Array.isArray(e[0])}function Ng(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Sg(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Lf(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Cg(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Lf(`Expected exactly 1 Shape; got ${e.length}`)}return e}function $g(e){let t=0;for(const n of e)t+=0===n.shape.length?1:n.shape.reduce((e,t)=>e*t);return t}const Tg="Variable";class Ag{constructor(e,t="float32",n=Tg,r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=wg(),this.originalName=Cm(n=null==n?Tg:n),this.name=$m(this.originalName),this.trainable_=r,this.constraint=s,this.val=Th(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Eg(e){return e.map(e=>e.read())}function Rg(e){e.forEach(e=>{e[0].write(e[1])})}class Fg{constructor(e){this.dtype=e.dtype,this.shape=e.shape,this.ndim=null!=e.shape?e.shape.length:e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Dg{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=wg(),null!=a&&(this.originalName=Cm(a),this.name=$m(this.originalName)),this.rank=t.length}}let _g=0;class Og{constructor(e,t){this.callArgs=t,this.id=_g++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)e.push(null!=t?t.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Mg=0;class zg extends d.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Mg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=jf(e)+"_"+vg(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=e.weights?e.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new zf("The layer has never been called "+`and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Lf(`Asked to get ${t} at node ${e}, `+`but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Gf(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Gf(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Mf(`Layer ${this.name}`+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new Mf(`Layer ${this.name}`+" is not connected, no input to return.");return Gf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Mf(`Layer ${this.name}`+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new Mf(`Layer ${this.name}`+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Gf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Hf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Hf(this.inputSpec);if(e.length!==t.length)throw new Lf(`Layer ${this.name} expects ${t.length} inputs, `+`but it received ${e.length} input tensors. `+`Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Lf(`Input ${n} is incompatible with layer ${this.name}: `+`expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Lf(`Input ${n} is incompatible with layer ${this.name}`+`: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Lf(`Input ${n} is incompatible with layer ${this.name}`+`: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Lf(`Input ${n} is incompatible with layer ${this.name} `+`: expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Lf(`Input ${n} is incompatible with layer `+`${this.name}: expected axis ${r} of input shape to `+`have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new Lf(`Input ${n} is incompatible with layer `+`${this.name}: expected shape=${s.shape}, `+`found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Hf(e);let r=!0;for(const a of n)if(!(a instanceof Dg)){r=!1;break}let s=!0;for(const a of n)if(a instanceof Dg){s=!1;break}if(r===s)throw new Lf("Arguments to apply() must be all SymbolicTensors or all Tensors");return Sm(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Hf(e))t.push(n.shape);this.build(Gf(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=Hf(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Gf(a),null!=this.activityRegularizer)throw new Pf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=Hf(e);const t=[];for(const n of e)t.push(n.shape);return Gf(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new Dg(a,n,this,Hf(e),t,this.name,r)):new Dg(a,r,this,Hf(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new Pf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+`${JSON.stringify(e)}) does not match that of the `+`batchInputShape (${JSON.stringify(this.batchInputShape)}) `+`of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)}),t&&console.warn("The shape of the input tensor "+`(${JSON.stringify(e)}) does not `+`match the expectation of layer ${this.name}: `+`${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Mf(`The layer ${this.name} has never been called and thus has no `+"defined output shape.");const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Mf(`The layer ${this.name} has multiple inbound nodes with different `+'output shapes. Hence the notion of "output shape" is ill-defined for the layer.')}countParams(){if(!this.built)throw new zf(`You tried to call countParams() on ${this.name}, `+"but the layer is not built yet. Build it first by calling build(batchInputShape).");return $g(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Eg(e?this.trainableWeights:this.weights)}setWeights(e){yo(()=>{const t=this.weights;if(t.length!==e.length)throw new Lf(`You called setWeights(weights) on layer "${this.name}" `+`with a weight list of length ${e.length}, `+`but the layer was expecting ${t.length} weights. `+`Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=Eg(t);for(let a=0;a<s.length;++a){const i=s[a],o=t[a],u=e[a];if(!r.arraysEqual(i.shape,u.shape))throw new Lf(`Layer weight shape ${i.shape} `+`not compatible with provided weight shape ${u.shape}`);n.push([o,u])}Rg(n)})}addWeight(e,t,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Lf(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=bg("zeros"));const o=r.apply(t,n),u=new Ag(o,n,e,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Hf(e),null!=this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, `+"but was passed an inputMask.");t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, `+"but was passed an inputMask.")})}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=Hf(e);t=Hf(t),n=Hf(n),r=Hf(r),s=Ng(s),a=Ng(a);const u=[],l=[],c=[];for(const h of o)u.push(h.sourceLayer),l.push(h.nodeIndex),c.push(h.tensorIndex);new Og({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been `+"built yet.");if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used `+"yet.");this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}class Lg extends zg{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:vg("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Lf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Lf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Lf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new Dg(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Lf("Cannot pass any input to an "+`InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function Pg(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];bo(r)}}function Bg(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Wg;Lg.className="InputLayer",d.registerClass(Lg),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Wg||(Wg={}));const Vg=125;class Ug{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Gg{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Hg extends Ug{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const r in t){const e=t[r];if("number"==typeof e)this.totals.hasOwnProperty(r)||(this.totals[r]=0),this.totals[r]=this.totals[r]+e*n;else{let t;r in this.totals?t=this.totals[r]:this.totals[r]=0;const s=yo(()=>Eo(this.totals[r],Do(e,n)));this.totals[r]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:yo(()=>{const e=Do(Fo(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),xo(t[n])}))}}class jg extends Ug{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)"number"!=typeof r[a]&&(e.push(r[a].data()),t.push(s),n.push(a))}const r=await Promise.all(e);for(let s=0;s<r.length;++s)this.history[t[s]][n[s]].dispose(),this.history[t[s]][n[s]]=r[s][0]}}class qg extends Ug{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=Vg),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");r.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=r.now();return(...a)=>{const i=r.now();return i-s<t?n:(s=i,n=e(...a))}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await Pg(n),r.push(this.yield(e,t,n))),r.push(Wd()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Pg(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Pg(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Wd()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Pg(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Pg(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Wd()):r.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Pg(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Pg(e),await this.trainEnd(e))}}function Kg(e,t){return null==e&&(e={}),e instanceof Ug?[e]:Array.isArray(e)&&e[0]instanceof Ug?e:Hf(e).map(e=>new qg(e,t))}class Xg{constructor(){}static registerCallbackConstructor(e,t){r.assert(e>=0&&Number.isInteger(e),()=>"Verbosity level is expected to be an integer >= 0, "+`but got ${e}`),Xg.checkForDuplicate(t),null==Xg.constructors[e]&&(Xg.constructors[e]=[]),Xg.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Xg.constructors)Xg.constructors[+t].forEach(t=>{if(t===e)throw new Lf("Duplicate callback constructor.")})}static clear(){Xg.constructors={}}static createCallbacks(e){const t=[];for(const n in Xg.constructors){const r=+n;e>=r&&t.push(...Xg.constructors[r])}return t.map(e=>new e)}}function Yg(e,t,n,r,s,a,i,o,u){const l=new jg,c=[new Hg,...Xg.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new Gg(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function Zg(e,t={},n=!1){return Yf(e,d.SerializationMap.getMap().classNameMap,t,"layer",n)}function Jg(e,t){return yo(()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Gl(jm(e),t,!0),r=qo(n.shape,Of()),s=_o(nu(n,r));return Fo(e,s)})}function Qg(e,t){return yo(()=>uc(jm(Yo(t,e)),-1))}function ey(e,t){return yo(()=>uc(Jo(Yo(t,e)),-1))}function ty(e,t){return yo(()=>{const n=Yo(e,t),r=Ku(Jo(e),Of(),Number.MAX_VALUE),s=Jo(Fo(n,r));return Do(100,uc(s,-1))})}function ny(e,t,n=!1){return yo(()=>{if(n)t=ih(t);else{const e=Gl(t,t.shape.length-1,!0);t=Fo(t,e)}return t=Ku(t,Of(),1-Of()),Bl(Gl(Do(e.toFloat(),Ll(t)),t.shape.length-1))})}function ry(e,t,n=!1){return yo(()=>{const r=Sl(function(e){const t=[Em(e.shape)];return e.reshape(t)}(e)).toInt(),s=(t=Ku(t,Of(),1-Of())).shape;return ny(xi(r,s[s.length-1]).reshape(s),t,n)})}function sy(e,t){return yo(()=>{let n;return n=Ku(t,Of(),1-Of()),n=Ll(Fo(n,Yo(1,n))),uc(function(e,t){if(!r.arraysEqual(e.shape,t.shape))throw new Lf("logits and labels must have the same shape, but got shapes "+`${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return yo(()=>{const n=t.relu(),r=t.abs().neg();return n.sub(t.mul(e)).add(r.exp().log1p())})}(e,n),-1)})}function ay(e,t){return yo(()=>{const n=Jg(e,-1),r=Jg(t,-1),s=Do(n,r);return Bl(Gl(s,-1))})}Xg.constructors={};const iy={meanSquaredError:Qg,meanAbsoluteError:ey,meanAbsolutePercentageError:ty,meanSquaredLogarithmicError:function(e,t){return yo(()=>{const n=Ku(t,Of(),Number.MAX_VALUE),r=Ll(Eo(1,n)),s=Ku(e,Of(),Number.MAX_VALUE),a=Ll(Eo(1,s));return uc(jm(Yo(r,a)),-1)})},squaredHinge:function(e,t){return yo(()=>{const n=nu(0,Yo(1,Do(e,t)));return uc(jm(n),-1)})},hinge:function(e,t){return yo(()=>{const n=nu(0,Yo(1,Do(e,t)));return uc(n,-1)})},categoricalHinge:function(e,t){return yo(()=>{const n=Gl(Do(e,t),-1),r=Ul(Do(Yo(1,e),t),-1);return nu(0,Eo(1,Yo(r,n)))})},logcosh:function(e,t){return yo(()=>{const n=Math.log(2),r=Yo(t,e),s=Yo(Eo(r,Wl(Do(-2,r))),n);return uc(s,-1)})},categoricalCrossentropy:ny,sparseCategoricalCrossentropy:ry,binaryCrossentropy:sy,kullbackLeiblerDivergence:function(e,t){return yo(()=>{const n=Ku(e,Of(),1),r=Ku(t,Of(),1);return Gl(Do(e,Ll(Fo(n,r))),-1)})},poisson:function(e,t){return yo(()=>{const n=Ll(Eo(Of(),t));return uc(Yo(t,Do(e,n)),-1)})},cosineProximity:ay};function oy(e){if("string"==typeof e){if(e in iy)return iy[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. `+'Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'),new Lf(t)}return e}function uy(e,t){return yo(()=>{const n=Do(.5,xc(t)),r=Om($l(t,n),e.dtype);return uc(fl(e,r),-1)})}function ly(e,t){return yo(()=>Om(fl(du(e,-1),du(t,-1)),"float32"))}function cy(e,t){return sy(e,t)}function hy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),fl(e,t).asType("float32")}const dy=ny,py=ry,fy={binaryAccuracy:uy,categoricalAccuracy:ly,precision:function(e,t){return yo(()=>{const n=function(e,t){return yo(()=>tc(e.equal(1),t.equal(1)).sum().cast("float32"))}(e,t),r=function(e,t){return yo(()=>tc(e.equal(0),t.equal(1)).sum().cast("float32"))}(e,t),s=n.add(r);return ml($l(s,0),n.div(s),0).cast("float32")})},categoricalCrossentropy:dy,sparseCategoricalCrossentropy:py,mse:Qg,MSE:Qg,mae:ey,MAE:ey,mape:ty,MAPE:ty,cosine:ay};function my(e){if("string"==typeof e&&e in fy)return fy[e];if("string"!=typeof e&&null!=e)return e;throw new Lf(`Unknown metric ${e}`)}function gy(e){if(Vf(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(iy))if(iy[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(fy))if(fy[n]===e){t=n;break}return void 0!==t?t:e.name}}const yy=1048576;function by(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const n=Object.keys(t);for(const r of n){if("string"!=typeof r)return!1;if(!e(t[r]))return!1}return!0}if(Array.isArray(t)){for(const n of t)if(!e(n))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>yy&&console.warn(`User-defined metadata of model "${t}" is too large in `+`size (length=${n.length} when serialized). It is not `+"recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= "+`${yy}.`)}}function xy(e,t,n=console.log){let r="";for(let s=0;s<e.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r=(r+=e[s]).slice(0,t[s]),r+=" ".repeat(t[s]-r.length);n(r)}function wy(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(LM){r="multiple"}xy([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function ky(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(LM){s="multiple"}const a=[];for(const l of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(l)))for(let e=0;e<l.inboundLayers.length;++e)a.push(`${l.inboundLayers[e].name}[${l.nodeIndices[e]}][${l.tensorIndices[e]}]`);const i=e.name,o=e.getClassName(),u=0===a.length?"":a[0];xy([`${i} (${o})`,s,e.countParams().toString(),u],t,r);for(let l=1;l<a.length;++l)xy(["","","",a[l]],t,r)}function vy(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}const Iy="3.0.0";class Ny{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Ny)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Lf(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return qa(t,e.dtype)}catch(LM){throw new Lf(`The dtype of the feed (${t.dtype}) can not be cast to the dtype `+`of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Dg){if(null==this.id2Value[e.id])throw new Lf(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Lf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Dg){if(null==this.id2Value[e.id])throw new Lf(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Lf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&bo(this.id2Mask)}}const Sy={},Cy={};function $y(e,t,n,s){const a=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],u=o.map(e=>e.name),l=[],c=t.names();for(const r of u)-1!==c.indexOf(r)?l.push(t.getValue(r)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=u.join(",")+"|"+t.names().join(",");let d,p;if(null==Sy[h]){const e=function(e,t){r.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=Ay(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Ay(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:Ty(s)}}(o,t);p=e.recipientCounts,Sy[h]=d=e.sorted,Cy[h]=p}d=Sy[h],p={},a||Object.assign(p,Cy[h]);const f=new Ny(t);for(let r=0;r<d.length;++r){if(null!=s){const e=mo().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=d[r],i=e.sourceLayer;if(i instanceof Lg)continue;const o=[],c=[],h=[];let m=!1;for(const n of e.inputs){const e=f.getValue(n),r=f.getMask(n);o.push(e),c.push(r),null!=r&&(m=!0),a||(p[n.name]--,0!==p[n.name]||t.hasKey(n)||-1!==u.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||h.push(e))}m&&((n=n||{}).mask=c[0]);const g=Hf(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=Ey(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=u.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}a||bo(h)}return f.disposeMasks(),i?l:l[0]}function Ty(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Ay(e,t){const n=new Set,r=[],s={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function Ey(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Ry extends zg{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=vg(e)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],this.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],Jf(this.inputs).length!==this.inputs.length)throw new Lf("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+`${this.inputs.map(e=>e.name)}`);Jf(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+`${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.nodeIndex,t=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(t)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;Vf(0===t,"input layer has >1 nodes"),Vf(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof Lg))throw new TypeError("Input layers to a LayersModel must be InputLayer objects. "+`Received inputs: ${e.inputs}. `+`Input ${y} (0-based) originates `+`from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new zf(`The tensor ${e.name} at layer "${r.name}" `+"is part of a cycle.");if(-1!==t.indexOf(l))return;this.containerNodes.add(Ry.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let a=0;a<c;a++)o(l.inputTensors[a],t,n,l.inboundLayers[a],l.nodeIndices[a],l.tensorIndices[a]);for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const y of this.outputs)o(y,u,l);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];e=Math.max(e,null==r[y.outboundLayer.id]?0:r[y.outboundLayer.id]),r[y.outboundLayer.id]=e,s[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let r=0;r<y.inboundLayers.length;r++){const s=y.inboundLayers[r].inboundNodes[y.nodeIndices[r]];t[s.id]=Math.max(e+1,null==t[s.id]?0:t[s.id]),n[s.id]=s}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const d={};for(const y in r){const e=r[y];e in d||(d[e]=[]),d[e].push(s[y])}let p=Object.keys(d).map(e=>parseInt(e,10)).sort(Zf);this.layers=[];for(const y of p){const e=d[y];e.sort((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof Ry&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map(e=>parseInt(e,10)).sort(Zf);const f=this.inputs.slice(),m=[];for(const y of p)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new zf(`Graph disconnected: cannot obtain value for tensor ${n}`+` at layer "${t.name}". `+"The following previous layers were accessed without "+`issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(e=>e.name);for(const y of g){const e=g.filter(e=>e===y).length;if(1!==e)throw new zf(`The name "${y}" is used ${e} times `+"in the model. All layer names should be unique. Layer names: "+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Lf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const a of this.layers)for(const e of a.weights){if(null!=n[e.originalName])throw new Lf(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,r++}const s=[];for(const a in e){let r=a;if(null==n[a]){const e=a.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])s.push([n[r],e[a]]);else if(t)throw new Lf(`Provided weight data has no target variable: ${a}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Lf(`${e.length} of ${r} weights are not set: `+`${e}`)}Rg(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Iy}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=function e(t,n){if(null==t)return null;if("string"==typeof t)return jf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const r=[],s=t.length;for(let a=0;a<s;++a){const s=t[a];vy(n,a,s)?r.push(s):r.push(e(s,n))}return r}{const n={};for(const r of Object.keys(t)){const s=t[r];n[jf(r)]="name"!==r&&"className"!==r||"string"!=typeof s?e(s,r):s}return n}}(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return yo(()=>{e=Hf(e);const n=new Ny;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return $y(this.outputs,n,t)})}computeMask(e,t){return yo(()=>{let n;return e=Hf(e),n=null==t?Wf(null,e.length):Hf(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=Ng(e);if(t.length!==this.inputLayers.length)throw new Lf(`Invalid inputShape argument ${e}: `+`model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++)n[this.inputLayers[i].name+"_0_0"]=t[i];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Zf);if(r.length>1)for(const i of r){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;const r=[];for(let i=0;i<t.inboundLayers.length;i++)r.push(n[`${t.inboundLayers[i].name}_${t.nodeIndices[i]}_${t.tensorIndices[i]}`]);const s=Ng(e.computeOutputShape(Gf(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++)n[`${e.name}_${a}_${t}`]=s[t]}}const s=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const e=a[i];Vf(e in n),s.push(n[e])}return Gf(s)}runInternalGraph(e,t){null==t&&(t=Wf(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o)n[this.inputs[o].id]=[e[o],t[o]];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Zf);for(const o of r){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=Hf(e.call(t,l)),u=Hf(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(e=>e[0]),i=a.map(e=>e[1]),null==l.mask&&(l.mask=i),o=Hf(e.call(r,l)),u=Hf(e.computeMask(r,i));if(e.activityRegularizer)throw new Pf("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e)n[s[e].id]=[o[e],u[e]]}}}const s=[],a=[],i=[];for(const o of this.outputs){Vf(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),s.push(e),a.push(t)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const r of this.layers){n=r instanceof Ry?1:0;for(let e=0;e<r.inboundNodes.length;e++){const s=Ry.nodeKey(r,e);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Lf(`Was asked to retrieve layer at index ${t}, but model only `+`has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Lf("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===e)return n;throw new Lf(`No such layer: ${e}`)}calculateLosses(){return yo(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=Ry.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),r=a.getConfig(),s=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],r=Ry.nodeKey(a,n);let i={};if(this.containerNodes.has(r)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(LM){console.warn(`Layer ${a.name} was passed `+"non-serializable keyword arguments: "+`${e.callArgs}. They will not be included `+"in the serialized model (and thus will be missing at deserialization time)."),i={}}if(e.inboundLayers.length>0){const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],a=e.tensorIndices[r];let o=t[Ry.nodeKey(s,e.nodeIndices[r])];null==o&&(o=0),n.push([s.name,o,a,i])}s.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=r,i.inboundNodes=s,n.push(i)}e.layers=n;const r=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=Ry.nodeKey(e,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let s=t[n];null==s&&(s=0),r.push([e.name,s,this.inputLayersTensorIndices[a]])}e.inputLayers=r;const s=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=Ry.nodeKey(e,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let r=t[n];null==r&&(r=0),s.push([e.name,r,this.outputLayersTensorIndices[a]])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=u)return void i(e,t);n.push(c.inboundNodes[u].outputTensors[l])}n.length>0&&e.apply(Gf(n),r)}function u(e){const n=e.name,a=Zg(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new Lf(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)})}const l=t.name,c=t.layers;for(const m of c)u(m);for(;!Qf(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],d=[],p=t.inputLayers;for(const m of p){const e=m[0],t=m[1],n=m[2];Vf(e in s),h.push(s[e].inboundNodes[t].outputTensors[n])}const f=t.outputLayers;for(const m of f){const e=m[0],t=m[1],n=m[2];Vf(e in s),d.push(s[e].inboundNodes[t].outputTensors[n])}return new e({inputs:h,outputs:d,name:l})}get stateful(){if(this._stateful)throw new Lf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){yo(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function Fy(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided classWeight is an array of ${e.length} `+`element(s), but the model has ${r} outputs. `+"Make sure a set of weights is provided for each model output.");return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{n.push(t in e?e[t]:null)}),n}throw new Error(`The model has multiple (${r}) outputs, `+"so classWeight must be either an array with "+`${r} elements or an object with ${t} keys. `+`Provided classWeight not understood: ${JSON.stringify(e)}`)}(e,t)}async function Dy(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=yo(()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1)return e.argMax(1);if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) `+"during handling of class weights. The size is expected to be >= 1.")}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during `+"handling of class weights. The rank is expected to be 1 or 2.")}),r=Array.from(await t.data());bo(t);const s=[];return r.forEach(e=>{if(null==n[e])throw new Error("classWeight must contain all classes in the training data. "+`The class ${e} exists in the data but not in `+"classWeight");s.push(n[e])}),bh(s,"float32")}return null}function _y(e,t){return Do(e,t)}const Oy=32;function My(e,t){let n,s;s=t.ys,r.assert(null!=(n=t.xs)&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+`${t}`);const a=zy("input",e.inputNames,n),i=zy("output",e.outputNames,s),o=a[0].shape[0];r.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset `+`provides ${a.length} inputs.  (Expected input keys: `+`${JSON.stringify(e.inputNames)})`),r.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset `+`provides ${i.length} outputs.  (Expected output keys: `+`${JSON.stringify(e.outputNames)})`);for(let u=0;u<a.length;u++)r.assert(a[u].shape[0]===o,()=>"Batch size mismatch: input "+`${e.inputNames[u]} has ${a[u].shape[0]}; `+`expected  ${o} based on input ${e.inputNames[0]}.`);for(let u=0;u<i.length;u++)r.assert(i[u].shape[0]===o,()=>"Batch size mismatch: output "+`${e.outputNames[u]} has ${i[u].shape[0]}; `+`expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function zy(e,t,n){if(n instanceof xs)return[n];if(Array.isArray(n))return r.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const r=[];for(const s of t){if(null==n[s])throw new Lf("The feature data generated by the dataset lacks the required "+`${e} key '${s}'.`);r.push(n[s])}return r}}function Ly(e){return"function"==typeof e.iterator}function Py(e){r.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function By(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>zm(e,t,n-t)):zm(e,t,n-t)}function Wy(e,t){return yo(()=>null==e?null:Array.isArray(e)?e.map(e=>Wy(e,t)):Hm(e,"int32"===t.dtype?t:t.toInt()))}function Vy(e,t){const n=[];let r=0,s=null;for(;r<e;)(s=r+t)>=e&&(s=e),n.push([r,s]),r=s;return n}function Uy(e){const t=[];e instanceof xs&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(Mm(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function Gy(e,t){if(null==e)return;const n=[];if(t instanceof xs)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const s in t)n.push(t[s].id);const r=[];if(e instanceof xs)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&r.push(e)});else if(null!=e)for(const s in e){const t=e[s];-1===n.indexOf(t.id)&&r.push(t)}r.forEach(e=>{e.isDisposed||e.dispose()})}function Hy(e){return Array.isArray(e)}function jy(e){return!function(e){return e instanceof xs}(e)&&!Hy(e)}function qy(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Hy(e)&&e.length>0)t=!0;else if(jy(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Lf(`Error when checking model ${s} expected no data, `+`but got ${e}`)}return[]}if(null==e)return t.map(e=>null);let a;if(jy(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Lf(`No data provided for "${n}". Need data for each key in: `+`${t}`);a.push(e[n])}}else if(Hy(e)){if((e=e).length!==t.length)throw new Lf(`Error when checking model ${s}: the Array of `+"Tensors that you are passing to your model is not the size the "+`model expected. Expected to see ${t.length} Tensor(s), but `+`instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Lf(`The model ${s} expects ${t.length} Tensor(s), `+`but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Uy(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Lf(`Error when checking ${s}: expected ${t[i]} `+`to have ${n[i].length} dimension(s). but got array with `+`shape ${e.shape}`);for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=e.shape[a],u=n[i][a];if(null!=u&&u>=0&&o!==u)throw new Lf(`Error when checking ${s}: expected ${t[i]} `+`to have shape [${n[i]}], but got array with shape `+`[${e.shape}].`)}}return a}function Ky(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Lf(`Error when checking model ${s}: the Array of `+"Tensors that you are passing to your model is not the size the "+`the model expected. Expected to see ${t.length} Tensor(s),`+` but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Lf(`The model expects ${t.length} ${s} Tensors, `+"but only received one Tensor. Found: array with shape "+`${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Lf(`Error when checking ${s}: expected ${t[i]} `+`to have ${n[i].length} dimension(s), but got array with `+`shape ${JSON.stringify(e.shape)}`);for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=e.shape[a],u=n[i][a];if(null!=u&&u!==o)throw new Lf(`Error when checking ${s}: expected `+`${t[i]} to have shape ${JSON.stringify(n[i])} but `+`got array with shape ${JSON.stringify(e.shape)}.`)}}}const Xy="layers-model";class Yy extends Ry{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Lf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const s in e.nodesByDepth)n.push(e.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}r.push(...s)}if(t)for(const s of e.layers){let e=!1;for(const n of s.inboundNodes)if(-1!==r.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),xy(a,n,r),r("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)s?wy(o[c],n,r):ky(o[c],n,i,r),r((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){return $g(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights)}(e),l=$g(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Pd.adagrad(.01),Adadelta:()=>Pd.adadelta(1,.95,Of()),Adam:()=>Pd.adam(.001,.9,.999,Of()),Adamax:()=>Pd.adamax(.002,.9,.999,Of(),0),RMSProp:()=>Pd.rmsprop(.001,.9,0,Of()),SGD:()=>Pd.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Lf(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ho))throw new Lf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Lf("When passing an Array as loss, it should have one entry per "+`model output. The model has ${this.outputs.length} output(s), `+`but you passed loss=${e.loss}.`);t=e.loss.map(e=>oy(e))}else{const n=oy(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Lf(`Unknown entry in loss dictionary: "${t}". `+`Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume `+"this was done on purpose, and we will not be expecting data "+`to be passed to ${n} during training`),t.push(oy(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Sm("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,"+`function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Sm("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===sy?-1!==["accuracy","acc"].indexOf(i)?r=uy:-1!==["crossentropy","ce"].indexOf(i)&&(r=cy):this.lossFunctions[e]===ry?-1!==["accuracy","acc"].indexOf(i)?r=hy:-1!==["crossentropy","ce"].indexOf(i)&&(r=py):-1!==["accuracy","acc"].indexOf(i)?r=ly:-1!==["crossentropy","ce"].indexOf(i)&&(r=dy),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=my(i);a=e,n=""+gy(i)}let t;Sm(n,()=>{t=a}),s(e,n,t)}})(r[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;Py(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);return this.makeTestFunction(),Gf(this.testLoop(this.testFunction,a,r,n.verbose,n.steps))}finally{Gy(s[0],e),Gy(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let i=[];if(n.verbose>0)throw new Pf("Verbose mode is not implemented yet.");r.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but "+`received ${JSON.stringify(n.batches)}`);const o="function"==typeof t.next?t:await t.iterator();let u=0,l=0;for(;!s||l<n.batches;){const t=await o.next();if(i=yo(()=>{if(t.value){const{xs:n,ys:r}=My(e,t.value),s=n.concat(r),o=yo(()=>a(s));if(bo(s),0===l)for(let e=0;e<o.length;++e)i.push(Go(0));const c=s[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=i[e];i[e]=yo(()=>Eo(i[e],Do(c,t))),l>0&&bo(n)}bo(o),u+=c,++l}return i}),t.done){s&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` "+`batches (in this case, ${n.batches} batches). `+"You may need to use the repeat() function when building your dataset.");break}}for(let r=0;r<i.length;++r){const e=i[r];i[r]=Fo(i[r],u),bo(e)}return Gf(i)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new Lf(`If ${r} is set, batchSize must be null or undefined.`+`Got batchSize = ${t}`)}else{if(null==e)throw new Lf("Either the input data should have a defined shape, or "+`${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Lf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=this.retrieveSymbolicTensors(n?t:[t]),s=new Ny;if(e instanceof xs&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Lf(`The number of inputs provided (${e.length}) `+"does not match the number of inputs of this model "+`(${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(const i of this.inputs){const t=e[i.name];if(null==t)throw new Lf(`No value is provided for the model's input ${i.name}`);s.add(i,t)}const a=$y(r,s);return n?a:a[0]}retrieveSymbolicTensors(e){const t=Wf(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(e=>e.name);for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,r)=>{null==t&&n.push(e[r])}),new Lf("Cannot find SymbolicTensors for output name(s): "+`${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return yo(()=>{const r=this.checkNumSamples(e);if(n)throw new Pf("Verbose predictLoop() is not implemented yet.");const s=Vy(r,t),a=this.outputs.map(e=>[]);for(let t=0;t<s.length;++t)yo(()=>{const n=By(e,s[t][0],s[t][1]),r=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)r.push({key:this.inputs[e],value:n[e]});else r.push({key:this.inputs[0],value:n});const a=new Ny(r);return $y(this.outputs,a)}).forEach((e,t)=>a[t].push(e));return Gf(a.map(e=>Ou(e,0)))})}predict(e,t={}){const n=Uy(e);Ky(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return Py(r),this.predictLoop(n,r)}finally{Gy(n,e)}}predictOnBatch(e){Ky(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new zf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let r=0;r<this.feedOutputShapes.length;++r){const e=this.feedOutputShapes[r];a.push(this.feedLossFns[r]===ry?e.slice(0,e.length-1).concat([1]):e)}if(function(e,t,n){const s=Jf(e.map(e=>e.shape[0]));s.sort();const a=Jf(t.map(e=>e.shape[0]));if(a.sort(),s.length>1)throw new Lf("All input Tensors (x) should have the same number of samples. Got array shapes: "+`${JSON.stringify(e.map(e=>e.shape))}`);if(a.length>1)throw new Lf("All target Tensors (y) should have the same number of samples. Got array shapes: "+`${JSON.stringify(t.map(e=>e.shape))}`);if(s.length>0&&a.length>0&&!r.arraysEqual(s,a))throw new Lf("Input Tensors should have the same number of samples as target "+`Tensors. Found ${s[0]} input sample(s) and ${a[0]} target `+"sample(s).")}(e=qy(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=qy(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const r=[Qg,sy,ny];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===ny&&1===a.shape[a.shape.length-1])throw new Lf(`You are passing a target array of shape ${a.shape} while using `+"a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new Lf(`A target Tensor with shape ${a.shape} was passed for an `+`output of shape ${o}, while using a loss function that `+"expects targets to have the same shape as the output.")}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Lf("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+`${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=Fy(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await Dy(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,r=0,s){return yo(()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new Pf("Verbose mode is not implemented yet.");if(null!=s)throw new Pf("steps mode in testLoop() is not implemented yet");{const r=Vy(a,n),s=bh(_m(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=zm(s,a,o-a),l=Wy(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(Go(0));for(let e=0;e<c.length;++e)i[e]=Eo(i[e],Do(o-a,c[e]))}for(let e=0;e<i.length;++e)i[e]=Fo(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;Uf(e,r)>1&&(s+=`_${Uf(e.slice(0,n),r)}`),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Ny(e),o=$y(this.outputs,i,{training:!0});let u;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(r[n],o[n]);null!=s[n]&&(e=_y(e,s[n]));const a=uc(e);t.push(a),u=0===n?e:Eo(u,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][1];e=uc((0,this.metricsTensors[n][0])(r[t],o[t]))}xo(e),a.push(e)}return u=uc(u),this.calculateLosses().forEach(e=>{u=Eo(u,e)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>yo(()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new Ny(a),o=$y(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=uc((0,this.lossFunctions[e])(s[e],o[e]));n=0===e?r:Eo(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][1],r=uc((0,this.metricsTensors[e][0])(s[n],o[n]));t.push(r)}return t})}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,u,l,c,h;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;Py(d);const p=!1,f=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,d);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Pf("validationData including sample weights is not supported yet."):new Lf("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+`${s.validationData} is invalid.`);o=s.validationData[0],u=s.validationData[1];const t=!0,n=await e.standardizeUserData(o,u,null,null,t,d);m=(l=n[0]).concat(c=n[1])}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];l=By(a,e,t),a=By(a,0,e),c=By(i,e,t),i=By(i,0,e),m=l.concat(c)}else null!=s.validationSteps&&(g=!0);const y=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,k;g?(e.makeTestFunction(),w=e.testFunction,k=x.slice().concat(x.map(e=>"val_"+e))):(w=null,m=[],k=x.slice());const v=Kg(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,a,i,o,u,l,c,h,d,p,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==p&&(p=0);let g=!1;null!=l&&null!=c&&(g=!0);const y=e.checkNumSamples(n,a,null,"steps_per_epoch");let b;null!=y&&(b=_m(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Yg(u,o,i,p,y,null,a,g,d);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let k=p;k<i;++k){await x.onEpochBegin(k);const i={};{if("batch"===h)throw new Pf("batch shuffling is not implemneted yet");h&&r.shuffle(b);const o=bh(b),u=Vy(y,a);for(let r=0;r<u.length;++r){const h={};if(await x.onBatchBegin(r,h),yo(()=>{const d=u[r][0],p=u[r][1],f=zm(o,d,p-d);h.batch=r,h.size=p-d;const m=Wy(n,f),y=t(m);for(let e=0;e<s.length;++e){const t=y[e];h[s[e]]=t,xo(t)}if(r===u.length-1&&g){const t=e.testLoop(l,c,a);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];xo(r),i["val_"+n]=r}}}),await x.onBatchEnd(r,h),Bg(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(k,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,d,s.epochs,s.verbose,v,w,m,s.shuffle,k,s.initialEpoch)}finally{e.isTraining=!1,Gy(a,t),Gy(i,n),Gy(l,o),Gy(c,u),null!=h&&bo(h)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(r.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),r.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),r.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive "+`integer, but got ${n.epochs}`),r.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a "+`positive integer if specified, but got ${n.batchesPerEpoch}`),r.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if(Ly(n.validationData))r.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, "+`but got ${n.validationBatches}`);else{const e=function(e){if(3===e.length)throw new Pf("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}const u=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let c;c=a?l.slice().concat(l.map(e=>"val_"+e)):l.slice();const h=Kg(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Yg(h,d,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,c);p.setModel(e),e.history=f,await p.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const r={};await p.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn("You provided `batchesPerEpoch` as "+`${n.batchesPerEpoch}, `+"but your dataset iterator ran out of data after "+`${c} batches; `+"interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+`${n.batchesPerEpoch*n.epochs} batches). `+"You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=My(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Fy(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Dy(s[e],null,t[e]))}const o=r.concat(s).concat(i),d=u(o);bo(o);for(let e=0;e<l.length;++e){const t=d[e];a[l[e]]=t,xo(t)}await p.onBatchEnd(h,a),Bg(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=Ly(n.validationData)?Hf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Hf(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?Oy:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)r[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(m,r),m++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return bo(a),Gf(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let a=0;a<r.length;++a)n&&!r[a].trainable||t.push({name:r[a].originalName,tensor:s[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=mo().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-mo().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=jf(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>jf(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=jf(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[jf(gy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>jf(gy(e)));{const e={};for(const t in this.metrics)e[t]=jf(gy(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Zg(function e(t,n){if(null===t)return null;if("string"==typeof t)return qf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const r=[],s=t.length;for(let a=0;a<s;++a){const s=t[a];vy(n,a,s)?r.push(s):r.push(e(s,n))}return r}{const n={};for(const r of Object.keys(t)){const s=t[r];if("name"===r&&"string"==typeof s)n[r]=s;else{const t=qf(r);n[t]=e(s,t)}}return n}}(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=qf(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>qf(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=qf(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map(e=>qf(e));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=qf(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=i.getSaveHandlers(e);if(0===t.length)throw new Lf(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Lf(`Found more than one (${t.length}) save handlers for `+`URL '${e}'`);e=t[0]}if(null==e.save)throw new Lf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await i.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:Xy,generatedBy:`TensorFlow.js tfjs-layers v${Iy}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await i.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=i.concatenateArrayBuffers([n.data,t])}return null!=this.userDefinedMetadata&&(by(this.userDefinedMetadata,this.name,!0),r.userDefinedMetadata=this.userDefinedMetadata),r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){by(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Yy.className="Model",d.registerClass(Yy);class Zy extends Yy{}Zy.className="Functional",d.registerClass(Zy);class Jy extends Yy{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:vg("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new Lf("Negative dimension size caused by adding layer "+`${e.name} with input shape [`+`${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Jy||e instanceof Yy;let n;if(t){if(1!==(n=e).outputs.length)throw new Lf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Lf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Lf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Lf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Lg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Lf("A layer added to a Sequential model must not already be "+`connected somewhere else. LayersModel received layer ${e.name} `+`which has ${e.inboundNodes.length} pre-existing inbound `+"connections.");if(1!==e.inboundNodes[0].outputTensors.length)throw new Lf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,n,r){if((null==n||null!=r&&r>0)&&(n=t.sourceLayer,r=t.nodeIndex),0===n.inboundNodes.length)return[t];{const t=n.inboundNodes[r];if(0===t.inboundLayers.length)return t.inputTensors;{const n=[];for(let r=0;r<t.inboundLayers.length;r++){const s=e(t.inputTensors[r],t.inboundLayers[r],t.nodeIndices[r]);for(const e of s)-1===n.indexOf(e)&&n.push(e)}return n}}}(this.outputs[0])}this.inboundNodes=[],new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Wf(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Cg(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Yy({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new zf("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new zf("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new zf("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new zf("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Lf("Legacy serialization format not supported yet.");a=t}else r.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof Jy))throw new Pf(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const r of a){const e=Zg(r,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),o.add(e)}return o}set stopTraining(e){if(null==this.model)throw new Lf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Lf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Jy.className="Sequential",d.registerClass(Jy);class Qy extends d.Serializable{getConfig(){return{}}}class eb extends Qy{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Pf(`Support for alpha values other than 1 (${t}) is not implemented `+"yet.");return bl(e)}(e,t)}}eb.className="elu",d.registerClass(eb);class tb extends Qy{apply(e){return Yc(e)}}tb.className="selu",d.registerClass(tb);class nb extends Qy{apply(e){return Wc(e)}}nb.className="relu",d.registerClass(nb);class rb extends Qy{apply(e){return yo(()=>cc(6,Wc(e)))}}rb.className="relu6",d.registerClass(rb);class sb extends Qy{apply(e){return e}}sb.className="linear",d.registerClass(sb);class ab extends Qy{apply(e){return Mu(e)}}ab.className="sigmoid",d.registerClass(ab);class ib extends Qy{apply(e){return function(e){return yo(()=>{const t=Eo(.5,Do(.2,e));return Ku(t,0,1)})}(e)}}ib.className="hardSigmoid",d.registerClass(ib);class ob extends Qy{apply(e){return Wl(e)}}ob.className="softplus",d.registerClass(ob);class ub extends Qy{apply(e){return function(e){return yo(()=>Fo(e,Jo(e).add(1)))}(e)}}ub.className="softsign",d.registerClass(ub);class lb extends Qy{apply(e){return Lu(e)}}lb.className="tanh",d.registerClass(lb);class cb extends Qy{apply(e,t=-1){return ih(e,t)}}cb.className="softmax",d.registerClass(cb);class hb extends Qy{apply(e,t=-1){return Hl(e,t)}}hb.className="logSoftmax",d.registerClass(hb);class db extends Qy{apply(e,t=1){return yo(()=>Mu(e.mul(t)).mul(e))}}function pb(e){return e.getClassName()}function fb(e,t={}){return Yf(e,d.SerializationMap.getMap().classNameMap,t,"activation")}function mb(e){if(null==e)return fb({className:"linear",config:{}});if("string"==typeof e){const t={};return t.className=e,t.config={},fb(t)}return e instanceof Qy?e:fb(e)}db.className="swish",d.registerClass(db);class gb extends d.Serializable{}class yb extends gb{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an "+`object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return yo(()=>{let t=yc([1]);return this.hasL1&&(t=Eo(t,Gl(Do(this.l1,Jo(e))))),this.hasL2&&(t=Eo(t,Gl(Do(this.l2,jm(e))))),t.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}yb.className="L1L2",d.registerClass(yb);const bb={l1l2:"L1L2"};function xb(e){return Xf(e)}function wb(e,t={}){return Yf(e,d.SerializationMap.getMap().classNameMap,t,"regularizer")}function kb(e){return null==e?null:"string"==typeof e?wb({className:e in bb?bb[e]:e,config:{}}):e instanceof gb?e:wb(e)}class vb extends zg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Sg(e);let n=Wc(e);return null!=this.maxValue&&(n=Ku(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}vb.className="ReLU",d.registerClass(vb);class Ib extends zg{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Sg(e);return Dl(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Ib.className="LeakyReLU",d.registerClass(Ib);class Nb extends zg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=bg(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=kb(e.alphaRegularizer),this.alphaConstraint=pm(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Lf("Expected sharedAxes to be a number or an array of numbers, "+`but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Cg(e)).slice(1);if(null!=this.sharedAxes)for(const r of this.sharedAxes)t[r-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let r=1;r<e.length;++r)n[r]=e[r];this.inputSpec=[new Fg({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Sg(e),Tc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:yg(this.alphaInitializer),alphaRegularizer:xb(this.alphaRegularizer),alphaConstraint:hm(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Nb.className="PReLU",d.registerClass(Nb);class Sb extends zg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Pf(`Non-default alpha value (${e.alpha}) is not supported by the `+"ELU layer yet.");this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Sg(e);return bl(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Sb.className="ELU",d.registerClass(Sb);class Cb extends zg{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Sg(e);return n.mul(Om(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Cb.className="ThresholdedReLU",d.registerClass(Cb);class $b extends zg{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new cb).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Sg(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Tb(e,t,n){if("number"==typeof e)return Wf(e,t);if(e.length!==t)throw new Lf(`The ${n} argument must be an integer or tuple of ${t} integers.`+` Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new Lf(`The ${n} argument must be an integer or tuple of ${t}`+` integers. Received: ${JSON.stringify(e)} including a`+` non-integer number ${a}`)}return e;var r}function Ab(e,t,n,r,s=1){if(null==e)return e;let a;return Math.floor(((a="same"===n?e:e-(t+(t-1)*(s-1))+1)+r-1)/r)}function Eb(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+Dm([n-t,0]);else{if("same"!==r)throw new Lf(`Unsupport padding mode: ${r}.`);e*=t}return e}function Rb(e,t){return yo(()=>(wm(t),"channelsFirst"===t?wi(e,[0,2,3,1]):e))}function Fb(e,t){return yo(()=>(wm(t),"channelsFirst"===t?wi(e,[0,2,3,4,1]):e))}function Db(e,t,n,r=[1,1],s="valid",a,i,o=null){return yo(()=>{if(null==a&&(a="channelsLast"),wm(a),3!==e.rank&&4!==e.rank)throw new Lf("conv2dWithBiasActivation expects input to be of rank 3 or 4, "+`but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Lf("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, "+`but received ${e.rank}.`);let u=Rb(e,a);if("causal"===s)throw new Pf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=f.conv2d({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=wi(u,[0,3,1,2])),u})}$b.className="Softmax",d.registerClass($b);class _b extends zg{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",_b.verifyArgs(t),this.rank=e,nm(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Pf(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is `+"not implemented yet.");if(this.kernelSize=Tb(t.kernelSize,e,"kernelSize"),this.strides=Tb(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,km(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,wm(this.dataFormat),this.activation=mb(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=pm(t.biasConstraint),this.biasRegularizer=kb(t.biasRegularizer),this.activityRegularizer=kb(t.activityRegularizer),this.dilationRate=Tb(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Lf("dilationRate must be a number or an array of a single number for 1D convolution, but received "+`${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Lf("dilationRate must be a number or array of two numbers for 2D "+`convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Lf("dilationRate must be a number or array of three numbers for 3D "+`convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Vf("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!tm(e.kernelSize,"number",1,3))throw new Lf("BaseConv expects config.kernelSize to be number or number[] with "+`length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:pb(this.activation),useBias:this.useBias,biasInitializer:yg(this.biasInitializer),biasRegularizer:xb(this.biasRegularizer),activityRegularizer:xb(this.activityRegularizer),biasConstraint:hm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Ob extends _b{constructor(e,t){super(e,t),this.kernel=null,Ob.verifyArgs(t),this.filters=t.filters,nm(this.filters,"filters"),this.kernelInitializer=bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=pm(t.kernelConstraint),this.kernelRegularizer=kb(t.kernelRegularizer)}build(e){e=Cg(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Lf("The channel dimension of the input should be defined. "+`Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return yo(()=>{let t;e=Sg(e);const n=null==this.bias?null:this.bias.read(),r=rm(this.activation.getClassName());if(null!=r&&2===this.rank)t=Db(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return yo(()=>{if(null==a&&(a="channelsLast"),wm(a),3!==e.shape.length)throw new Lf("The input of a conv1dWithBias operation should be 3, but is "+`${e.shape.length} instead.`);if(3!==t.shape.length)throw new Lf("The kernel for a conv1dWithBias operation should be 3, but is "+`${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Lf("The bias for a conv1dWithBias operation should be 1, but is "+`${t.shape.length} instead`);if("channelsFirst"===a&&(e=wi(e,[0,2,1])),"causal"===s)throw new Pf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=el(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Km(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Db(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Pf("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return yo(()=>{if(null==a&&(a="channelsLast"),wm(a),4!==e.rank&&5!==e.rank)throw new Lf("conv3dWithBias expects input to be of rank 4 or 5, but received "+`${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Lf("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+`${e.rank}.`);let o=Fb(e,a);if("causal"===s)throw new Pf("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=rl(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Km(o,n)),"channelsFirst"===a&&(o=wi(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=Cg(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let s=0;s<n.length;++s){const e=Ab(n[s],this.kernelSize[s],this.padding,this.strides[s],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[s]);t.push(e)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t)).push(this.filters):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:yg(this.kernelInitializer),kernelRegularizer:xb(this.kernelRegularizer),kernelConstraint:hm(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Lf("Convolution layer expected config.filters to be a 'number' > 0 "+`but got ${JSON.stringify(e.filters)}`)}}class Mb extends Ob{constructor(e){super(2,e),Mb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!tm(e.kernelSize,"number",1,2))throw new Lf("Conv2D expects config.kernelSize to be number or number[] with "+`length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Mb.className="Conv2D",d.registerClass(Mb);class zb extends Ob{constructor(e){super(3,e),zb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Lf("Conv3D expects config.kernelSize to be number or"+` [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}zb.className="Conv3D",d.registerClass(zb);class Lb extends Mb{constructor(e){if(super(e),this.inputSpec=[new Fg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Lf("Conv2DTranspose currently supports only padding modes 'same' "+`and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Cg(e)).length)throw new Lf("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Lf("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Fg({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return yo(()=>{let t=Sg(e);if(4!==t.shape.length)throw new Lf("Conv2DTranspose.call() expects input tensor to be rank-4, but "+`received a tensor of rank-${t.shape.length}`);const n=t.shape;let r,s;"channelsFirst"===this.dataFormat?(r=2,s=3):(r=1,s=2);const a=n[s],i=this.kernelSize[1],o=this.strides[1],u=[n[0],Eb(n[r],this.strides[0],this.kernelSize[0],this.padding),Eb(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=wi(t,[0,2,3,1]));let l=nl(t,this.kernel.read(),u,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(l=wi(l,[0,3,1,2])),null!=this.bias&&(l=Km(l,this.bias.read(),this.dataFormat)),null!=this.activation&&(l=this.activation.apply(l)),l})}computeOutputShape(e){const t=(e=Cg(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=Eb(t[r],o,a,this.padding),t[s]=Eb(t[s],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Lb.className="Conv2DTranspose",d.registerClass(Lb);class Pb extends Ob{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Lf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Lf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Lf(`SeparableConv${this.rank}D supports only padding modes: `+`'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=bg(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=kb(t.depthwiseRegularizer),this.depthwiseConstraint=pm(t.depthwiseConstraint),this.pointwiseInitializer=bg(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=kb(t.pointwiseRegularizer),this.pointwiseConstraint=pm(t.pointwiseConstraint)}build(e){if((e=Cg(e)).length<this.rank+2)throw new Lf(`Inputs to SeparableConv${this.rank}D should have rank `+`${this.rank+2}, but received input shape: `+`${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Lf("The channel dimension of the inputs should be defined, "+`but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.inputSpec=[new Fg({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return yo(()=>{let t;if(e=Sg(e),1===this.rank)throw new Pf("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=wi(e,[0,2,3,1])),t=Zc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Km(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=wi(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=yg(this.depthwiseInitializer),e.pointwiseInitializer=yg(this.pointwiseInitializer),e.depthwiseRegularizer=xb(this.depthwiseRegularizer),e.pointwiseRegularizer=xb(this.pointwiseRegularizer),e.depthwiseConstraint=hm(this.depthwiseConstraint),e.pointwiseConstraint=hm(this.pointwiseConstraint),e}}Pb.className="SeparableConv";class Bb extends Pb{constructor(e){super(2,e)}}Bb.className="SeparableConv2D",d.registerClass(Bb);class Wb extends Ob{constructor(e){super(1,e),Wb.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!tm(e.kernelSize,"number",1,1))throw new Lf("Conv1D expects config.kernelSize to be number or number[] with "+`length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Wb.className="Conv1D",d.registerClass(Wb);class Vb extends zg{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return yo(()=>{if(e=Sg(e),"channelsLast"===this.dataFormat){const t=Pm(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Pm(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Pm(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Pm(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Vb.className="Cropping2D",d.registerClass(Vb);class Ub extends zg{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,em(mm,"InterpolationFormat",this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,t){return yo(()=>{let t=Sg(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=wi(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r]);return wi(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ub.className="UpSampling2D",d.registerClass(Ub);class Gb extends _b{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=bg(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=pm(e.depthwiseConstraint),this.depthwiseRegularizer=kb(e.depthwiseRegularizer)}build(e){if((e=Cg(e)).length<4)throw new Lf("Inputs to DepthwiseConv2D should have rank 4. "+`Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Lf("The channel dimension of the inputs to DepthwiseConv2D should "+`be defined, but is not (${e[t]}).`);const n=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return yo(()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return yo(()=>{null==s&&(s="channelsLast"),wm(s);let i=Rb(e,s);if(4!==e.rank)throw new Lf("Input for depthwiseConv2d is required to be 4-D, but is instead "+`${e.rank}-D`);if(4!==t.rank)throw new Lf("depthwiseKernel is required to be 4-D, but is instead "+`${t.rank}-D`);return i=hl(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=wi(i,[0,3,1,2])),i})}(e=Sg(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Km(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=Cg(e);const t="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Ab("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),s=Ab(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,r,s]:[e[0],r,s,n]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=yg(this.depthwiseInitializer),e.depthwiseRegularizer=xb(this.depthwiseRegularizer),e.depthwiseConstraint=hm(this.depthwiseRegularizer),e}}function Hb(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new Lf("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function jb(e,t,n,r=!1,s,a,i=!1,o=!1){return yo(()=>{const u=t.shape.length;if(u<3)throw new Lf(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(_m(2,u));if(t=wi(t,l),null!=a)throw new Pf("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=kl(s,-1)),s=wi(s,l)),r&&(t=Uc(t,0),null!=s&&(s=Uc(s,0)));const c=[];let h,d=n;const p=t.shape[0],f=$h(t);let m,g;null!=s&&(m=$h(s));for(let t=0;t<p;++t){const n=f[t],r=yo(()=>e(n,d));if(null==s)h=r[0],d=r[1];else{const e=yo(()=>{const e=m[t],n=xc(e).sub(e);return{output:r[0].mul(e).add(d[0].mul(n)),newStates:d.map((t,s)=>r[1][s].mul(e).add(t.mul(n)))}});h=e.output,d=e.newStates}o&&c.push(h)}return o&&(g=fh(c,1)),[h,g,d]})}Gb.className="DepthwiseConv2D",d.registerClass(Gb);class qb extends zg{constructor(e){let t;if(super(e),null==e.cell)throw new Lf("cell property is missing for the constructor of RNN.");if(null==(t=Array.isArray(e.cell)?new tx({cells:e.cell}):e.cell).stateSize)throw new Lf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Fg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?_m(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Ig(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return yo(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Pf("Constants support is not implemented in RNN yet.");Ig(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Fg({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),a))throw new Lf("An initialState was passed that is not compatible with "+`cell.stateSize. Received stateSpec=${this.stateSpec}; `+`However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map(e=>new Fg({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){yo(()=>{if(!this.stateful)throw new Mf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Lf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>yc([n,e])):[yc([n,this.cell.stateSize])];else if(null==e)bo(this.states_),null!=this.keptStates&&(bo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>yc([n,e])):this.states_[0]=yc([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Lf(`Layer ${this.name} expects ${this.states_.length} state(s), `+`but it received ${e.length} state value(s). Input `+`received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):bo(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,i=[n,a];if(!r.arraysEqual(s.shape,i))throw new Lf(`State ${t} is incompatible with layer ${this.name}: `+`expected shape=${i}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>xo(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Hb(e,n,r,this.numConstants);e=s.inputs,r=s.constants;let a=[],i=[];if(null!=(n=s.initialState)){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Fg({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof Dg){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return yo(()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=Sg(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Lf(`RNN Layer has ${a} state(s) but was passed `+`${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=jb((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h})}getInitialState(e){return yo(()=>{let t=yc(e.shape);return t=Mm(t=Gl(t,[1,2])),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?Vm(t,[1,e]):t):this.cell.stateSize>1?[Vm(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===qb.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=Zg(t.cell,n);return new e(Object.assign(t,{cell:r}))}}qb.className="RNN",d.registerClass(qb);class Kb extends zg{}class Xb extends Kb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,nm(this.units,"units"),this.activation=mb(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kb(e.kernelRegularizer),this.recurrentRegularizer=kb(e.recurrentRegularizer),this.biasRegularizer=kb(e.biasRegularizer),this.kernelConstraint=pm(e.kernelConstraint),this.recurrentConstraint=pm(e.recurrentConstraint),this.biasConstraint=pm(e.biasConstraint),this.dropout=Fm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Cg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return yo(()=>{if(2!==(e=e).length)throw new Lf(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nx({ones:()=>xc(e),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nx({ones:()=>xc(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Gm(null!=a?Do(e,a):e,this.kernel.read()),null!=this.bias&&(s=Km(s,this.bias.read())),null!=i&&(n=Do(n,i));let o=Eo(s,Gm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pb(this.activation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:xb(this.kernelRegularizer),recurrentRegularizer:xb(this.recurrentRegularizer),biasRegularizer:xb(this.biasRegularizer),activityRegularizer:xb(this.activityRegularizer),kernelConstraint:hm(this.kernelConstraint),recurrentConstraint:hm(this.recurrentConstraint),biasConstraint:hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Xb.className="SimpleRNNCell",d.registerClass(Xb);class Yb extends qb{constructor(e){e.cell=new Xb(e),super(e)}call(e,t){return yo(()=>(null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return new e(t)}}Yb.className="SimpleRNN",d.registerClass(Yb);class Zb extends Kb{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Lf("GRUCell does not support reset_after parameter set to true.");this.units=e.units,nm(this.units,"units"),this.activation=mb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=mb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kb(e.kernelRegularizer),this.recurrentRegularizer=kb(e.recurrentRegularizer),this.biasRegularizer=kb(e.biasRegularizer),this.kernelConstraint=pm(e.kernelConstraint),this.recurrentConstraint=pm(e.recurrentConstraint),this.biasConstraint=pm(e.biasConstraint),this.dropout=Fm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Cg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return yo(()=>{if(2!==(e=e).length)throw new Lf("GRUCell expects 2 input Tensors (inputs, h, c), got "+`${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nx({ones:()=>xc(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nx({ones:()=>xc(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(e=Do(e,this.dropoutMask[0]));let u=Gm(e,this.kernel.read());this.useBias&&(u=Km(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Do(r,s[0]));const l=this.recurrentKernel.read(),[c,h]=ch(l,[2*this.units,this.units],l.rank-1),d=Gm(r,c),[p,f,m]=ch(u,3,u.rank-1),[g,y]=ch(d,2,d.rank-1);a=this.recurrentActivation.apply(Eo(p,g)),i=this.recurrentActivation.apply(Eo(f,y));const b=Gm(Do(i,r),h);o=this.activation.apply(Eo(m,b));const x=Eo(Do(a,r),Do(Eo(1,Bl(a)),o));return[x,x]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pb(this.activation),recurrentActivation:pb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:xb(this.kernelRegularizer),recurrentRegularizer:xb(this.recurrentRegularizer),biasRegularizer:xb(this.biasRegularizer),activityRegularizer:xb(this.activityRegularizer),kernelConstraint:hm(this.kernelConstraint),recurrentConstraint:hm(this.recurrentConstraint),biasConstraint:hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Zb.className="GRUCell",d.registerClass(Zb);class Jb extends qb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Zb(e),super(e)}call(e,t){return yo(()=>(null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Jb.className="GRU",d.registerClass(Jb);class Qb extends Kb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,nm(this.units,"units"),this.activation=mb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=mb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=kb(e.kernelRegularizer),this.recurrentRegularizer=kb(e.recurrentRegularizer),this.biasRegularizer=kb(e.biasRegularizer),this.kernelConstraint=pm(e.kernelConstraint),this.recurrentConstraint=pm(e.recurrentConstraint),this.biasConstraint=pm(e.biasConstraint),this.dropout=Fm([1,Dm([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fm([1,Dm([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;if(e=Cg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,r=this.units;n=new((t=class extends Qm{apply(t,n){const s=e.apply([r]),a=(new tg).apply([r]),i=e.apply([2*r]);return Wm(Wm(s,a),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return yo(()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Lf("LSTMCell expects 3 input Tensors (inputs, h, c), got "+`${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nx({ones:()=>xc(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nx({ones:()=>xc(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.recurrentDropoutMask;let i,o,u,l;0<this.dropout&&this.dropout<1&&(e=Do(e,this.dropoutMask[0]));let c=Gm(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Do(r,a[0])),c=Eo(c,Gm(r,this.recurrentKernel.read())),this.useBias&&(c=Km(c,this.bias.read()));const[h,d,p,f]=ch(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(d),u=Eo(Do(o,s),Do(i,this.activation.apply(p))),l=this.recurrentActivation.apply(f);const m=Do(l,this.activation.apply(u));return[m,m,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pb(this.activation),recurrentActivation:pb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:xb(this.kernelRegularizer),recurrentRegularizer:xb(this.recurrentRegularizer),biasRegularizer:xb(this.biasRegularizer),activityRegularizer:xb(this.activityRegularizer),kernelConstraint:hm(this.kernelConstraint),recurrentConstraint:hm(this.recurrentConstraint),biasConstraint:hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Qb.className="LSTMCell",d.registerClass(Qb);class ex extends qb{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Qb(e),super(e)}call(e,t){return yo(()=>(null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}ex.className="LSTM",d.registerClass(ex);class tx extends Kb{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return yo(()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;Ig(e)&&(e=e[0]),e=e,this.cells.forEach((n,r)=>{Sm(`RNNCell_${r}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){const r=[];for(const s of t.cells)r.push(Zg(s,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Eg(e)}setWeights(e){const t=[];for(const n of this.cells){const r=e.splice(n.weights.length);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}Rg(t)}}function nx(e){const{ones:t,rate:n,training:r=!1,count:s=1}=e,a=()=>Xm(t(),n),i=()=>Ym(a,t,r);return!s||s<=1?xo(i().clone()):Array(s).fill(void 0).map(i).map(e=>xo(e.clone()))}tx.className="StackedRNNCells",d.registerClass(tx);var rx=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class sx extends qb{constructor(e){if(e.unroll)throw new Pf("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Pf("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Fg({ndim:5})]}call(e,t){return yo(()=>{if(null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Lf("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return yo(()=>{const{stateSize:t}=this.cell,n=this.computeSingleOutputShape(e.shape),r=yc([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]})}resetStates(e,t=!1){yo(()=>{if(!this.stateful)throw new Mf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new Lf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>yc(a)):[yc(a)];else if(null==e)bo(this.states_),null!=this.keptStates&&(bo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>yc(a)):this.states_[0]=yc(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Lf(`Layer ${this.name} expects ${this.states_.length} state(s), `+`but it received ${e.length} state value(s). Input `+`received: ${e}`);t?this.keptStates.push(this.states_.slice()):bo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!r.arraysEqual(n.shape,s))throw new Lf(`State ${t} is incompatible with layer ${this.name}: `+`expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>xo(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?4:3],l=Ab(e[o?3:2],r[0],s,a[0],i[0]),c=Ab(u,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,l,c]:[l,c,n]]}}sx.className="ConvRNN2D";class ax extends Qb{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,nm(this.filters,"filters"),this.kernelSize=Tb(n,2,"kernelSize"),this.kernelSize.forEach(e=>nm(e,"kernelSize")),this.strides=Tb(r||1,2,"strides"),this.strides.forEach(e=>nm(e,"strides")),this.padding=s||"valid",km(this.padding),this.dataFormat=a||"channelsLast",wm(this.dataFormat),this.dilationRate=Tb(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>nm(e,"dilationRate"))}build(e){var t;e=Cg(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Lf("The channel dimension of the input should be defined. "+`Found ${e[n]}`);const r=this.kernelSize.concat([e[n],4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Qm{apply(e,t){return Bm([n.apply([r]),bc([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return yo(()=>{if(3!==e.length)throw new Lf("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+`${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nx({ones:()=>xc(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Do(t[n],e):e;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nx({ones:()=>xc(s),rate:this.recurrentDropout,training:n,count:4}));const d=this.recurrentDropoutMask;let p=o(s,d,0),f=o(s,d,1),m=o(s,d,2),g=o(s,d,3);const[y,b,x,w]=ch(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?ch(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,k,this.padding),l=this.inputConv(l,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,$,T]=ch(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,$),g=this.recurrentConv(g,T);const A=this.recurrentActivation.apply(Eo(u,p)),E=this.recurrentActivation.apply(Eo(l,f)),R=Eo(Do(E,a),Do(A,this.activation.apply(Eo(c,m)))),F=Do(this.recurrentActivation.apply(Eo(h,g)),this.activation.apply(R));return[F,F,R]})}getConfig(){const e=super.getConfig(),t=rx(e,["units"]);return Object.assign({},t,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,r){const s=Qu(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Km(s,n,this.dataFormat):s}recurrentConv(e,t){return Qu(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}ax.className="ConvLSTM2DCell",d.registerClass(ax);class ix extends sx{constructor(e){const t=new ax(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}ix.className="ConvLSTM2D",d.registerClass(ix);class ox extends zg{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?t[r]:this.noiseShape[r]);return n}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Ym(()=>Xm(n,this.rate,r,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}ox.className="Dropout",d.registerClass(ox);class ux extends ox{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}ux.className="SpatialDropout1D",d.registerClass(ux);class lx extends zg{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,nm(this.units,"units"),this.activation=mb(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=pm(e.kernelConstraint),this.biasConstraint=pm(e.biasConstraint),this.kernelRegularizer=kb(e.kernelRegularizer),this.biasRegularizer=kb(e.biasRegularizer),this.activityRegularizer=kb(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Cg(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Cg(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e),r=rm(this.activation.getClassName());let s;return null!=r?s=Gm(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Gm(n,this.kernel.read()),null!=this.bias&&(s=Km(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const e={units:this.units,activation:pb(this.activation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:xb(this.kernelRegularizer),biasRegularizer:xb(this.biasRegularizer),activityRegularizer:xb(this.activityRegularizer),kernelConstraint:hm(this.kernelConstraint),biasConstraint:hm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}lx.className="Dense",d.registerClass(lx);class cx extends zg{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Cg(e);for(const t of e.slice(1))if(null==t)throw new Lf('The shape of the input to "Flatten" is not fully defined '+`(got ${e.slice(1)}). Make sure to pass a complete `+'"input_shape" or "batch_input_shape" argument to the first layer in your model.');return[e[0],Em(e,1)]}call(e,t){return yo(()=>{this.invokeCallHook(e,t);let n=Sg(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Lf(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Em(e.shape,1)];return e.reshape(t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}cx.className="Flatten",d.registerClass(cx);class hx extends zg{constructor(e){super(e),this.supportsMasking=!0,this.activation=mb(e.activation)}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e);return this.activation.apply(n)})}getConfig(){const e={activation:pb(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}hx.className="Activation",d.registerClass(hx);class dx extends zg{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return yo(()=>(function(e,t){return yo(()=>{if(2!==e.shape.length)throw new Lf("repeat() expects a rank-2 tensor, but received a "+`rank-${e.shape.length} tensor.`);return Vm(Mm(e,1),[1,t,1])})})(e=Sg(e),this.n))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}dx.className="RepeatVector",d.registerClass(dx);class px extends zg{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let o=0;o<r.length;++o){const e=r[o];if(this.isUnknown(e)){if(null!==a)throw new Lf("Can only specifiy one unknown dimension.");a=o}else s*=e}const i=Em(e);if(null!==a){if(0===s||i%s!=0)throw new Lf(n);r[a]=i/s}else if(i!==s)throw new Lf(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}px.className="Reshape",d.registerClass(px);class fx extends zg{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+`${e.dims} instead.`);const t=_m(1,e.dims.length+1);if(!r.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Fg({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Cg(e)).slice();return this.dims.forEach((n,r)=>{t[r+1]=e[n]}),t}call(e,t){return wi(Sg(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}fx.className="Permute",d.registerClass(fx);class mx extends zg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Sg(e);return hu(gc(n,this.maskValue),-1)}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e),r=hu(gc(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}mx.className="Masking",d.registerClass(mx);class gx extends zg{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=null==e.inputLength?[t,null]:[t].concat(Hf(e.inputLength))}this.inputDim=e.inputDim,nm(this.inputDim,"inputDim"),this.outputDim=e.outputDim,nm(this.outputDim,"outputDim"),this.embeddingsInitializer=bg(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=kb(e.embeddingsRegularizer),this.activityRegularizer=kb(e.activityRegularizer),this.embeddingsConstraint=pm(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return yo(()=>this.maskZero?(e=Sg(e),gc(e,Mo(e))):null)}computeOutputShape(e){if(e=Cg(e),null==this.inputLength)return[...e,this.outputDim];const t=Hf(this.inputLength);if(t.length!==e.length-1)throw new Lf(`"inputLength" is ${this.inputLength}, but received `+`input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new Lf(`"inputLength" is ${this.inputLength}, but received `+`input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return yo(()=>{this.invokeCallHook(e,t);let n=Sg(e);return"int32"!==n.dtype&&(n=Om(n,"int32")),Hm(this.embeddings.read(),n.as1D()).reshape(Cg(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:yg(this.embeddingsInitializer),embeddingsRegularizer:xb(this.embeddingsRegularizer),activityRegularizer:xb(this.activityRegularizer),embeddingsConstraint:hm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}gx.className="Embedding",d.registerClass(gx);class yx extends zg{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Pf}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Lf("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Cg(e)]),(e=e).length<2)throw new Lf("A merge layer should be called on an Array of at least 2 inputs."+` Got ${e.length} input(s).`);let t=[];for(const s of e)null!=s&&null!==s[0]&&t.push(s[0]);if((t=Jf(t)).length>1)throw new Lf("Can not merge tensors with different batch sizes. "+`Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const t=null==e[s]?null:e[s].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const r=e.map(e=>e.length);this.reshapeRequired=-1!==e.indexOf(null)||1!==Jf(r).length}call(e,t){return yo(()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const r=Dm(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=Mm(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,r=e[0],s=e.slice(1).concat([r]);let i=a.reshape([r].concat(Em(e.slice(1))));i=(i=wi(i,[1,0])).reshape(s),t.push(i),n=!0}else if(e>1){const r=_m(1,e).concat([0]);t.push(wi(a,r)),n=!0}else t.push(a)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=wi(r.reshape([-1,t]),[1,0]).reshape(n)}else if(s>1){const e=[s-1].concat(_m(0,s-1));r=wi(r,e)}return r}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const n=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const r of e)null!=r&&null!==r[0]&&n.push(r[0]);return 1===(n=Jf(n)).length?n.concat(t):[null].concat(t)}computeMask(e,t){return yo(()=>{if(null==t)return null;if(!Array.isArray(t))throw new Lf("`mask` should be an Array");if(!Array.isArray(e))throw new Lf("`inputs` should be an Array");if(t.length!==e.length)throw new Lf("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths "+`(${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:kl(e,0)))[0];for(let e=1;e<t.length-1;++e)n=tc(n,t[e]);return n})}}class bx extends yx{constructor(e){super(e)}mergeFunction(e){return yo(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Eo(t,e[n]);return t})}}bx.className="Add",d.registerClass(bx);class xx extends yx{constructor(e){super(e)}mergeFunction(e){return yo(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Do(t,e[n]);return t})}}xx.className="Multiply",d.registerClass(xx);class wx extends yx{constructor(e){super(e)}mergeFunction(e){return yo(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Eo(t,e[n]);return Do(1/e.length,t)})}}wx.className="Average",d.registerClass(wx);class kx extends yx{constructor(e){super(e)}mergeFunction(e){return yo(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=nu(t,e[n]);return t})}}kx.className="Maximum",d.registerClass(kx);class vx extends yx{constructor(e){super(e)}mergeFunction(e){return yo(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=cc(t,e[n]);return t})}}vx.className="Minimum",d.registerClass(vx);class Ix extends yx{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Lf("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const r of e)if(null!=r){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let a=!1;for(const e of n)if(r.arraysEqual(e,t)){a=!0;break}a||n.push(t)}if(n.length>1)throw new Lf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return yo(()=>Bm(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Lf("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const s of t.slice(1)){if(null==n[r]||null==s[r]){n[r]=null;break}n[r]+=s[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Lf("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Lf("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Lf(`Mismatch in the length of mask (${t.length}) `+`and the legnth of inputs (${e.length})`);return yo(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const r=[];for(let a=0;a<e.length;++a)r.push(null==t[a]?xc(e[a]).asType("bool"):t[a].rank<e[a].rank?kl(t[a],-1):t[a]);const s=Ou(r,this.axis);return cu(s,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Nx(e,t){for(;e<0;)e+=t;return e}Ix.className="Concatenate",d.registerClass(Ix);class Sx extends yx{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Pf("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Lf("Dimension incompatibility: "+`${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Lf("A `Dot` layer must be called on exactly 2 inputs, "+`but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>Nx(t,e[n].shape.length)):[Nx(this.axes,n.shape.length),Nx(this.axes,s.shape.length)],this.normalize&&(n=Jg(n,t[0]),s=Jg(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Pf("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.assert(e.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, "+`but got ${e.shape.length}`),r.assert(e.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, "+`but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Pf("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const i=n;return yo(()=>{let n,r;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(r=2===e.shape.length&&2===t.shape.length?i[0]===i[1]?e.mul(t).sum(i[0]):e.transpose([1,0]).mul(t).sum(i[1]):e.matMul(t,i[0]!==e.shape.length-1,i[1]===t.shape.length-1),n>0){let e;const t=[];for(let r=e=s>a?s+a-3:s-1;r<e+n;++r)t.push(r);r=r.squeeze(t)}return 1===r.shape.length&&(r=r.expandDims(1)),r})}(n,s,t)}interpretAxes(e,t){return Array.isArray(this.axes)?this.axes:[Nx(this.axes,e.length),Nx(this.axes,t.length)]}computeOutputShape(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Pf("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Sx.className="Dot",d.registerClass(Sx);class Cx extends zg{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e);return Ym(()=>Um(n.shape,0,this.stddev).add(n),()=>n,t.training||!1)})}}Cx.className="GaussianNoise",d.registerClass(Cx);class $x extends zg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return yo(()=>{this.invokeCallHook(e,t);const n=Sg(e);return this.rate>0&&this.rate<1?Ym(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Um(n.shape,1,e))},()=>n,t.training||!1):n})}}$x.className="GaussianDropout",d.registerClass($x);class Tx extends zg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Sg(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return yo(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Ym(()=>{const t=Sg(e),r=-1.7580993408473766;let s=Tl(zc(n),this.rate);s=Om(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return t.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>Sg(e),t.training||!1)}return e})}}function Ax(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=Vu(e,t,n,r,s,a);else if(3===e.rank)i=Uu(e,t,n,r,s,a);else{if(4!==e.rank)throw new Pf(`batchNormalization is not implemented for array of rank ${e.rank} `+"yet");i=Gu(e,t,n,r,s,a)}return i}Tx.className="AlphaDropout",d.registerClass(Tx);class Ex extends zg{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=bg(e.betaInitializer||"zeros"),this.gammaInitializer=bg(e.gammaInitializer||"ones"),this.movingMeanInitializer=bg(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=bg(e.movingVarianceInitializer||"ones"),this.betaConstraint=pm(e.betaConstraint),this.gammaConstraint=pm(e.gammaConstraint),this.betaRegularizer=kb(e.betaRegularizer),this.gammaRegularizer=kb(e.gammaRegularizer)}build(e){e=Cg(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Lf(`Axis ${t} of input tensor should have a defined dimension but `+"the layer received an input with shape "+`${JSON.stringify(e)}.`);this.inputSpec=[new Fg({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return yo(()=>{const n=null!=t.training&&t.training,s=Sg(e),a=s.shape,i=a.length,o=_m(0,i),u=this.axis>=0?this.axis:this.axis+i;o.splice(u,1);const l=Wf(1,i);l[u]=a[u];const c=o.slice();c.sort();const h=!r.arraysEqual(c,_m(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Ax(s,e,t,n,r,this.epsilon)}return Ax(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[d,p,f]=function(e,t,n,s,a=.001){return r.arraysEqual(s.slice().sort(),_m(0,e.rank-1))?function(e,t,n,r,s=.001){return yo(()=>{const a=pc(e,r),i=a.mean,o=a.variance;return[Ax(e,i,o,n,t,s),i,o]})}(e,t,n,s,a):function(e,t,n,r,s=.001){return yo(()=>{const a=pc(e,r),i=a.mean,o=a.variance,u=[];for(const t of _m(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=i.reshape(u),c=o.reshape(u),h=null==t?null:t.reshape(u),d=null==n?null:n.reshape(u);return[Ax(e,l,c,d,h,s),i,o]})}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,t,n)=>{yo(()=>{const r=1-n,s=e.read(),a=s.sub(t).mul(r);e.write(s.sub(a))})};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),d})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:yg(this.betaInitializer),gammaInitializer:yg(this.gammaInitializer),movingMeanInitializer:yg(this.movingMeanInitializer),movingVarianceInitializer:yg(this.movingVarianceInitializer),betaRegularizer:xb(this.betaRegularizer),gammaRegularizer:xb(this.gammaRegularizer),betaConstraint:hm(this.betaConstraint),gammaConstraint:hm(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Ex.className="BatchNormalization",d.registerClass(Ex);class Rx extends zg{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, "+`but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error("Expected axis to be an array of integers, "+`but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=bg(e.betaInitializer||"zeros"),this.gammaInitializer=bg(e.gammaInitializer||"ones"),this.betaRegularizer=kb(e.betaRegularizer),this.gammaRegularizer=kb(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Cg(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error(`Invalid axis: ${r}`);if(this.axis.length!==Jf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map(t=>e[t]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,t){const n=Sg(e),r=n.shape,s=r.length;return yo(()=>{let{mean:e,variance:t}=pc(n,this.axis,!0);const a=Wf(1,s);for(const n of this.axis)a[n]=r[n];const i=e=>null!=e&&e.shape.length!==s&&this.axis!==[s-1]?e.reshape(a):e;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let n=0;n<s;++n)-1!==this.axis.indexOf(n)?(l.push(r[n]),c.push(1)):(l.push(1),c.push(r[n]));return e=e.tile(l),t=t.tile(l),o=o.tile(c),u=u.tile(c),Ax(n,e,t,u,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:yg(this.betaInitializer),gammaInitializer:yg(this.gammaInitializer),betaRegularizer:xb(this.betaRegularizer),gammaRegularizer:xb(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Rx.className="LayerNormalization",d.registerClass(Rx);class Fx extends zg{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Lf("ZeroPadding2D expects padding to be a length-2 array, but "+`received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Lf("ZeroPadding2D expects height padding to be a length-2 array, "+`but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Lf("ZeroPadding2D expects width padding to be a length-2 array, "+`but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Fg({ndim:4})]}computeOutputShape(e){let t,n;return e=Cg(e),"channelsFirst"===this.dataFormat?[e[0],e[1],t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null]:[e[0],t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,e[3]]}call(e,t){return yo(()=>(function(e,t,n){return yo(()=>{if(4!==e.rank)throw new Lf("temporalPadding expects input tensor to be 4-D, but received a "+`${e.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new Lf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new Lf(`Unknown data format: ${n}. `+"Supported data formats are 'channelsLast' and 'channelsFirst.");let r;return kc(e,r="channelsFirst"===n?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]])})})(Sg(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Dx(e,t,n,r,s,a){return yo(()=>{let i;wm(s),vm(a),km(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Rb(e,s);const o="same"===r?"same":"valid";return i="max"===a?ac(e,t,n,o):Du(e,t,n,o),"channelsFirst"===s&&(i=wi(i,[0,3,1,2])),i})}function _x(e,t,n,r,s,a){return yo(()=>{let i;wm(s),vm(a),km(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Fb(e,s);const o="same"===r?"same":"valid";return i="max"===a?ic(e,t,n,o):_u(e,t,n,o),"channelsFirst"===s&&(i=wi(i,[0,4,1,2,3])),i})}Fx.className="ZeroPadding2D",d.registerClass(Fx);class Ox extends zg{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Lf("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+`${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(nm(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Lf("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+`${JSON.stringify(e.strides)}`);this.strides=e.strides}nm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,km(this.padding),this.inputSpec=[new Fg({ndim:3})]}computeOutputShape(e){const t=Ab((e=Cg(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return yo(()=>{this.invokeCallHook(e,t),e=Mm(Sg(e),2);const n=this.poolingFunction(Sg(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ph(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Mx extends Ox{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),Dx(e,t,n,r,s,"max")}}Mx.className="MaxPooling1D",d.registerClass(Mx);class zx extends Ox{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),Dx(e,t,n,r,s,"avg")}}zx.className="AveragePooling1D",d.registerClass(zx);class Lx extends zg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Lf("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+`${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];nm(this.poolSize,"poolSize"),nm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),km(this.padding),this.inputSpec=[new Fg({ndim:4})]}computeOutputShape(e){e=Cg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Ab(t,this.poolSize[0],this.padding,this.strides[0]),n=Ab(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return yo(()=>(this.invokeCallHook(e,t),this.poolingFunction(Sg(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Px extends Lx{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),Dx(e,t,n,r,s,"max")}}Px.className="MaxPooling2D",d.registerClass(Px);class Bx extends Lx{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),Dx(e,t,n,r,s,"avg")}}Bx.className="AveragePooling2D",d.registerClass(Bx);class Wx extends zg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Lf("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+`${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];nm(this.poolSize,"poolSize"),nm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),km(this.padding),this.inputSpec=[new Fg({ndim:5})]}computeOutputShape(e){e=Cg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Ab(t,this.poolSize[0],this.padding,this.strides[0]),n=Ab(n,this.poolSize[1],this.padding,this.strides[1]),r=Ab(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return yo(()=>(this.invokeCallHook(e,t),this.poolingFunction(Sg(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Vx extends Wx{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),_x(e,t,n,r,s,"max")}}Vx.className="MaxPooling3D",d.registerClass(Vx);class Ux extends Wx{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return wm(s),km(r),_x(e,t,n,r,s,"avg")}}Ux.className="AveragePooling3D",d.registerClass(Ux);class Gx extends zg{constructor(e){super(e),this.inputSpec=[new Fg({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Pf}}class Hx extends Gx{constructor(e){super(e||{})}call(e,t){return yo(()=>{const t=Sg(e);return uc(t,1)})}}Hx.className="GlobalAveragePooling1D",d.registerClass(Hx);class jx extends Gx{constructor(e){super(e||{})}call(e,t){return yo(()=>{const t=Sg(e);return Ul(t,1)})}}jx.className="GlobalMaxPooling1D",d.registerClass(jx);class qx extends zg{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,wm(this.dataFormat),this.inputSpec=[new Fg({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Pf}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Kx extends qx{call(e,t){return yo(()=>{const t=Sg(e);return uc(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Kx.className="GlobalAveragePooling2D",d.registerClass(Kx);class Xx extends qx{call(e,t){return yo(()=>{const t=Sg(e);return Ul(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Xx.className="GlobalMaxPooling2D",d.registerClass(Xx);class Yx extends zg{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=Zg(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class Zx extends Yx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Cg(e)).length<3)throw new Lf("TimeDistributed layer expects an input shape >= 3D, but received "+`input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Cg(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t);return[n[0],e[1]].concat(n.slice(1))}call(e,t){return yo(()=>jb((e,n)=>[Sg(this.layer.call(e,t)),[]],e=Sg(e),[],!1,null,null,!1,!0)[1])}}Zx.className="TimeDistributed",d.registerClass(Zx);const Jx="concat";class Qx extends Yx{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Zg(n),t.goBackwards=!0!==t.goBackwards;const r={};if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=Zg(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?Jx:e.mergeMode,em(bm,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new Pf("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Gf(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Hb(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Lf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map(e=>new Fg({shape:e.shape}));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new Pf("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Dg;for(const u of a)if(u instanceof Dg!==o)throw new Lf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return yo(()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Uc(s,1)),"concat"===this.mergeMode?i=Bm([r,s]):"sum"===this.mergeMode?i=Eo(r,s):"ave"===this.mergeMode?i=Do(.5,Eo(r,s)):"mul"===this.mergeMode?i=Do(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Sm(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Sm(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Zg(t.layer);if(delete t.layer,null!=t.numConstants)throw new Pf("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}var ew,tw;Qx.className="Bidirectional",d.registerClass(Qx),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(ew||(ew={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(tw||(tw={}));const nw={};function rw(e){return nw[e]}function sw(e,t,n,s,a){const i=t.inputParams[e];if(i&&void 0!==i.inputIndexStart){const e=i.inputIndexStart,o=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?e+1:i.inputIndexEnd;if("tensor"===i.type)return aw(t.inputNames[i.inputIndexStart],n,s,a);if("tensors"===i.type)return t.inputNames.slice(e,o).map(e=>aw(e,n,s,a));const u=aw(t.inputNames.slice(e)[0],n,s,a),l=u.dataSync();return"number"===i.type?l[0]:r.toNestedArray(u.shape,l)}const o=t.attrParams[e];return o&&o.value}function aw(e,t,n,r){const[s,a]=uw(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find(e=>!!t[ow(s,e)]);return void 0!==i?t[ow(s,i)][a]:void 0}function iw(e,t){const[n,r]=uw(e);return[ow(n,t&&t.currentContextId),r]}function ow(e,t){return t?`${e}-${t}`:e}function uw(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function lw(e,t,n){let r=sw("pad",e,t,n);if("explicit"===r){r=sw("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function cw(e){return e.kept?e:Ka(e)}const hw=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dw=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],pw=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],fw=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],mw=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],gw=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],yw=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],bw=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],xw=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],ww=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],kw=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vw=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Iw=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Nw=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Sw=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Cw=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],$w=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Tw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[x,w,k,v,I,N,S,A,T,C,E,R,F,D,_,O,$].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=[],r=[],s=[],a=e.node.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e),{});let i=[];const o=[];let u={},l={};null!=t&&(u=this.mapSignatureEntries(t.inputs),l=this.mapSignatureEntries(t.outputs));const c=Object.keys(a);c.forEach(e=>{const t=a[e];t.inputNames.forEach(e=>{const[n]=iw(e);t.inputs.push(a[n]),a[n].children.push(t)})}),0===Object.keys(l).length?c.forEach(e=>{const t=a[e];0===t.children.length&&o.push(t)}):Object.keys(l).forEach(e=>{const[t]=iw(e),n=a[t];null!=n&&(n.signatureKey=l[e],o.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{const[t]=iw(e),n=a[t];n&&(n.signatureKey=u[e],i.push(n))}):i=n;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const d={nodes:a,inputs:i,outputs:o,weights:r,placeholders:n,signature:t,functions:h};return s.length>0&&(d.initNodes=s),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=rw(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.substr(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":void 0===(s=Ew(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Ew(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":void 0===(s=Bw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Bw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":void 0===(s=Fw(e.attr,n.tfName,n.defaultValue||0))&&n.tfDeprecatedName&&(s=Fw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":void 0===(s=Pw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Pw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":void 0===(s=Rw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Rw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":void 0===(s=Vw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Vw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":void 0===(s=Lw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Lw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":void 0===(s=Ww(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Ww(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":void 0===(s=Ow(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Ow(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":void 0===(s=Mw(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=Mw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":void 0===(s=_w(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=_w(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const s=[],a=[];e.signature.inputArg.forEach(e=>{const[t]=iw(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Dw(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}),Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach(e=>{const[n]=iw(e);t.inputs.push(r[n]),r[n].children.push(t)})});const i=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=iw(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))});const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Aw(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Ve().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Ew(e,t,n,r=!1){const s=e[t];return null!=s?Aw(s.s,r):n}function Rw(e,t,n){const r=e[t];return r?r.b:n}function Fw(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Dw(e){switch("string"==typeof e&&(e=ew[e]),e){case ew.DT_FLOAT:return"float32";case ew.DT_INT32:case ew.DT_INT64:case ew.DT_INT8:case ew.DT_UINT8:return"int32";case ew.DT_BOOL:return"bool";case ew.DT_DOUBLE:return"float32";case ew.DT_STRING:return"string";default:return null}}function _w(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Ow(e,t,n){const r=e[t];return r&&r.type?Dw(r.type):n}function Mw(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>Dw(e)):n}function zw(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function Lw(e,t,n){const r=e[t];return r&&r.shape?zw(r.shape):n}function Pw(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function Bw(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>Aw(e,r)):n}function Ww(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>zw(e)):n}function Vw(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Uw{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return aw(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return aw(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Fw(this.node.rawAttrs,e,t);if(null!=n.s)return Ew(this.node.rawAttrs,e,t);if(null!=n.b)return Rw(this.node.rawAttrs,e,t);if(null!=n.shape)return Lw(this.node.rawAttrs,e,t);if(null!=n.type)return Ow(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Pw(this.node.rawAttrs,e,t);if(null!=n.list.s)return Bw(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Ww(this.node.rawAttrs,e,t);if(null!=n.list.b)return Vw(this.node.rawAttrs,e,t);if(null!=n.list.type)return Mw(this.node.rawAttrs,e,t)}return t}}const Gw=(e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Eo(sw("a",e,t,n),sw("b",e,t,n))];case"AddN":return[lu(sw("tensors",e,t,n))];case"FloorMod":case"Mod":return[dc(sw("a",e,t,n),sw("b",e,t,n))];case"Mul":return[Do(sw("a",e,t,n),sw("b",e,t,n))];case"RealDiv":case"Div":return[Fo(sw("a",e,t,n),sw("b",e,t,n))];case"DivNoNan":return[gl(sw("a",e,t,n),sw("b",e,t,n))];case"FloorDiv":return[Ro(sw("a",e,t,n),sw("b",e,t,n))];case"Sub":return[Yo(sw("a",e,t,n),sw("b",e,t,n))];case"Minimum":return[cc(sw("a",e,t,n),sw("b",e,t,n))];case"Maximum":return[nu(sw("a",e,t,n),sw("b",e,t,n))];case"Pow":return[Xo(sw("a",e,t,n),sw("b",e,t,n))];case"SquaredDifference":return[dh(sw("a",e,t,n),sw("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},Hw=(e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Jo(sw("x",e,t,n))];case"Acos":return[ou(sw("x",e,t,n))];case"Acosh":return[uu(sw("x",e,t,n))];case"Asin":return[fu(sw("x",e,t,n))];case"Asinh":return[mu(sw("x",e,t,n))];case"Atan":return[gu(sw("x",e,t,n))];case"Atan2":return[yu(sw("x",e,t,n),sw("y",e,t,n))];case"Atanh":return[bu(sw("x",e,t,n))];case"Ceil":return[qu(sw("x",e,t,n))];case"Complex":return[Xs(sw("real",e,t,n),sw("imag",e,t,n))];case"Cos":return[il(sw("x",e,t,n))];case"Cosh":return[ol(sw("x",e,t,n))];case"Elu":return[bl(sw("x",e,t,n))];case"Erf":return[xl(sw("x",e,t,n))];case"Exp":return[wl(sw("x",e,t,n))];case"Expm1":return[vl(sw("x",e,t,n))];case"Floor":return[Sl(sw("x",e,t,n))];case"Log":return[Ll(sw("x",e,t,n))];case"Log1p":return[Pl(sw("x",e,t,n))];case"Imag":return[Al(sw("x",e,t,n))];case"Neg":return[Bl(sw("x",e,t,n))];case"Reciprocal":return[Bc(sw("x",e,t,n))];case"Real":return[Pc(sw("x",e,t,n))];case"Relu":return[Wc(sw("x",e,t,n))];case"Round":return[Kc(sw("x",e,t,n))];case"Selu":return[Yc(sw("x",e,t,n))];case"Sigmoid":return[Mu(sw("x",e,t,n))];case"Sin":return[eh(sw("x",e,t,n))];case"Sign":return[Qc(sw("x",e,t,n))];case"Sinh":return[th(sw("x",e,t,n))];case"Softplus":return[Wl(sw("x",e,t,n))];case"Sqrt":return[_o(sw("x",e,t,n))];case"Square":return[Oo(sw("x",e,t,n))];case"Tanh":return[Lu(sw("x",e,t,n))];case"Tan":return[yh(sw("x",e,t,n))];case"ClipByValue":return[Ku(sw("x",e,t,n),sw("clipValueMin",e,t,n),sw("clipValueMax",e,t,n))];case"Relu6":return[Vc(sw("x",e,t,n))];case"Rsqrt":return[Xc(aw(e.inputNames[0],t,n))];case"Prod":return[Ac(sw("x",e,t,n),sw("axes",e,t,n))];case"LeakyRelu":return[Dl(sw("x",e,t,n),sw("alpha",e,t,n))];case"Prelu":return[Tc(sw("x",e,t,n),sw("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function jw(e,t,n=""){r.assert(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),()=>n+` Shapes ${e} and ${t} must match`)}class qw{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Go(0),xo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read `+"(perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),jw(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,xo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,`+`because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Zs([],[0].concat(this.elementShape));const n=this.readMany(e);return jw(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),fh(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Zs([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return jw(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Ou(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,$h(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map(e=>n+=e);if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), `+"and the TensorArray is not marked as dynamically resizeable");const s=0===n?0:t.size/n,a=[];yo(()=>{t=Fu(t,[1,n,s]);for(let n=0;n<e.length;++n)a[n]=Fu(zu(t,[0,0===n?0:r[n-1],0],[1,e[n],s]),this.elementShape);return a});const i=[];for(let o=0;o<e.length;o++)i[o]=o;this.writeMany(i,a)}}class Kw{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);jw(t,e.shape,"TensorList shape mismatch: "),xo(e)}),this.idTensor=Go(0),this.maxNumElements=r,xo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Kw([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return jw(e,this.elementShape,"TensorList shape mismatch: "),yo(()=>{const t=this.tensors.map(t=>Fu(t,e));return fh(t,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return jw(n.shape,e,"TensorList shape mismatch: "),Fu(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(jw(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");xo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return jw(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);jw(this.elementShape,t.shape,"TensorList shape mismatch: "),xo(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return jw(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?Zs([],[0].concat(this.elementShape)):yo(()=>{const t=e.map(e=>Fu(this.tensors[e],n));return fh(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return jw(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?Zs([],[0].concat(this.elementShape)):yo(()=>{const e=this.tensors.map(e=>Fu(e,t));return Ou(e,0)})}}const Xw=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=sw("thenBranch",e,t,n),s=sw("elseBranch",e,t,n),a=sw("cond",e,t,n),i=sw("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=sw("body",e,t,n),s=sw("cond",e,t,n),a=sw("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(e=>e.id);let u=await i[0].data();i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let l=a;for(;u[0];){const e=l,t=(l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap)).map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return l}case"LoopCond":return[cw(sw("pred",e,t,n))];case"Switch":{const r=sw("pred",e,t,n);let s=sw("data",e,t,n);return s.kept||(s=cw(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==aw(e,t,n));return r?[cw(aw(r,t,n))]:void 0}case"Enter":{const r=sw("frameName",e,t,n),s=sw("tensor",e,t,n);return n.enterFrame(r),[cw(s)]}case"Exit":{const r=sw("tensor",e,t,n);return n.exitFrame(),[cw(r)]}case"NextIteration":{const r=sw("tensor",e,t,n);return n.nextIteration(),[cw(r)]}case"TensorArrayV3":{const r=sw("size",e,t,n),s=sw("dtype",e,t,n),a=sw("elementShape",e,t,n),i=sw("dynamicSize",e,t,n),o=sw("clearAfterRead",e,t,n),u=sw("identicalElementShapes",e,t,n),l=sw("name",e,t,n),c=new qw(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,Go(1)]}case"TensorArrayWriteV3":{const r=sw("tensorArrayId",e,t,n),s=sw("index",e,t,n),a=sw("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=sw("tensorArrayId",e,t,n),s=sw("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=sw("tensorArrayId",e,t,n),s=sw("indices",e,t,n),a=sw("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=sw("tensorArrayId",e,t,n),s=sw("indices",e,t,n),a=sw("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=sw("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=sw("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=sw("tensorArrayId",e,t,n),s=sw("tensor",e,t,n),a=sw("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=sw("tensorArrayId",e,t,n);return[Go(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=sw("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=sw("tensorListId",e,t,n),s=sw("index",e,t,n),a=sw("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=sw("tensorListId",e,t,n),s=sw("index",e,t,n),a=sw("elementShape",e,t,n),i=sw("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=sw("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Kw([],n,e.dtype,r),i=$h(e,0);return t.forEach((e,t)=>{a.setItem(e,i[t])}),a}(sw("tensor",e,t,n),r,sw("elementShape",e,t,n),sw("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let r;const s=function(e,t,n){return new Kw([],e,t,n)}(sw("elementShape",e,t,n),sw("elementDType",e,t,n),sw(r="TensorListReserve"===e.op?"numElements":"maxNumElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListGather":{const r=sw("tensorListId",e,t,n),s=sw("indices",e,t,n),a=sw("elementShape",e,t,n),i=sw("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=sw("tensorListId",e,t,n),s=sw("elementShape",e,t,n),a=sw("elementDType",e,t,n),i=sw("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);jw(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=$h(e);return new Kw(s,t,r)}(sw("tensor",e,t,n),sw("elementShape",e,t,n),sw("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=sw("tensorListId",e,t,n),s=n.getTensorList(r.id),a=sw("dtype",e,t,n),i=sw("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=sw("tensorListId",e,t,n),s=sw("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=sw("tensorListId",e,t,n),s=sw("elementShape",e,t,n),a=sw("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=sw("tensor",e,t,n),s=sw("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map(e=>r+=e);if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=0===r?0:e.size/r,i=yo(()=>{const i=[];e=Fu(e,[1,r,a]);for(let r=0;r<t.length;++r)i[r]=Fu(zu(e,[0,0===r?0:s[r-1],0],[1,t[r],a]),n);return e.dispose(),i}),o=new Kw([],n,e.dtype,t.length);for(let u=0;u<i.length;u++)o.setItem(u,i[u]);return o}(r,sw("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Yw(e,t,n){const[r,s]=sw("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=sw("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=sw("strides",e,t,n),c=lw(e,t,n),h=sw("dataFormat",e,t,n).toUpperCase(),d=sw("dilations",e,t,n),[p,f]=sw("args",e,t,n);return{stride:l,pad:c,dataFormat:h,dilations:d,biasArg:p,preluArg:f,activationFunc:s,leakyreluAlpha:sw("leakyreluAlpha",e,t,n)}}const Zw=(e,t,n)=>{switch(e.op){case"Conv1D":{const r=sw("stride",e,t,n),s=sw("pad",e,t,n),a=sw("dataFormat",e,t,n).toUpperCase(),i=sw("dilation",e,t,n);return[el(sw("x",e,t,n),sw("filter",e,t,n),r,s,a,i)]}case"Conv2D":{const r=sw("strides",e,t,n),s=lw(e,t,n),a=sw("dataFormat",e,t,n).toUpperCase(),i=sw("dilations",e,t,n);return[Qu(sw("x",e,t,n),sw("filter",e,t,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Yw(e,t,n);return[f.conv2d({x:sw("x",e,t,n),filter:sw("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Yw(e,t,n);return[f.depthwiseConv2d({x:sw("x",e,t,n),filter:sw("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=sw("outputShape",e,t,n),s=sw("strides",e,t,n),a=lw(e,t,n);return[nl(sw("x",e,t,n),sw("filter",e,t,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=sw("strides",e,t,n),s=lw(e,t,n),a=sw("dilations",e,t,n),i=sw("dataFormat",e,t,n).toUpperCase();return[hl(sw("input",e,t,n),sw("filter",e,t,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("dataFormat",e,t,n).toUpperCase(),i=sw("dilations",e,t,n);return[rl(sw("x",e,t,n),sw("filter",e,t,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("kernelSize",e,t,n);return[Du(sw("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("kernelSize",e,t,n);return[ac(sw("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("kernelSize",e,t,n),i=sw("includeBatchInIndex",e,t,n),{result:o,indexes:u}=oc(sw("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("kernelSize",e,t,n);return[_u(sw("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("kernelSize",e,t,n);return[ic(sw("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=sw("strides",e,t,n),s=sw("pad",e,t,n),a=sw("dilations",e,t,n),i=r[1],o=r[2],u=a[1],l=a[2];return[pl(sw("x",e,t,n),sw("filter",e,t,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Jw=(e,t,n)=>{switch(e.op){case"Fill":{const r=sw("shape",e,t,n),s=sw("dtype",e,t,n);return[qo(r,sw("value",e,t,n),s)]}case"LinSpace":return[Ml(sw("start",e,t,n),sw("stop",e,t,n),sw("num",e,t,n))];case"Multinomial":{const r=sw("logits",e,t,n),s=sw("numSamples",e,t,n),a=sw("seed",e,t,n);return[mc(r,s,a)]}case"OneHot":{const r=sw("indices",e,t,n),s=sw("depth",e,t,n),a=sw("onValue",e,t,n),i=sw("offValue",e,t,n);return[xi(r,s,a,i)]}case"Ones":return[bc(sw("shape",e,t,n),sw("dtype",e,t,n))];case"OnesLike":return[xc(sw("x",e,t,n))];case"RandomUniform":return[zc(sw("shape",e,t,n),sw("minval",e,t,n),sw("maxval",e,t,n),sw("dtype",e,t,n))];case"Range":return[Lc(sw("start",e,t,n),sw("stop",e,t,n),sw("step",e,t,n),sw("dtype",e,t,n))];case"TruncatedNormal":{const r=sw("shape",e,t,n),s=sw("mean",e,t,n),a=sw("stdDev",e,t,n),i=sw("seed",e,t,n);return[Nh(r,s,a,sw("dtype",e,t,n),i)]}case"Zeros":return[yc(sw("shape",e,t,n),sw("dtype",e,t,n))];case"ZerosLike":return[Mo(sw("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Qw(e,t,n){return{boxes:sw("boxes",e,t,n),scores:sw("scores",e,t,n),maxOutputSize:sw("maxOutputSize",e,t,n),iouThreshold:sw("iouThreshold",e,t,n),scoreThreshold:sw("scoreThreshold",e,t,n),softNmsSigma:sw("softNmsSigma",e,t,n)}}const ek=async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=Qw(e,t,n),l=await Od.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Qw(e,t,n),u=sw("padToMaxOutputSize",e,t,n),l=await Od.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Qw(e,t,n);return[await Od.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=qa(sw("condition",e,t,n),"bool"),s=[await Eh(r)];return r.dispose(),s}case"ListDiff":return Jc(sw("x",e,t,n),sw("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}},tk=(e,t,n)=>{switch(e.op){case"TopKV2":{const r=sw("x",e,t,n),s=sw("k",e,t,n),a=sw("sorted",e,t,n),i=Ih(r,s,a);return[i.values,i.indices]}case"Unique":{const r=sw("x",e,t,n),s=Sh(r);return[s.values,s.indices]}case"UniqueV2":{const r=sw("x",e,t,n),s=sw("axis",e,t,n),a=Sh(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},nk=(e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=sw("default",e,t,n);return[aw(e.name,t,n)||r];case"Placeholder":return[aw(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[cw(sw("x",e,t,n))];case"IdentityN":return sw("x",e,t,n).map(e=>cw(e));case"Snapshot":return[cw(sw("x",e,t,n))];case"Shape":return[bh(sw("x",e,t,n).shape,"int32")];case"ShapeN":return sw("x",e,t,n).map(e=>bh(e.shape));case"Size":return[Go(sw("x",e,t,n).size,"int32")];case"Rank":return[Go(sw("x",e,t,n).rank,"int32")];case"NoOp":return[Go(1)];case"Print":const s=sw("x",e,t,n),a=sw("data",e,t,n),i=sw("message",e,t,n),o=sw("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}};class rk{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Go(0),this.tensorMap=new Map,xo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),yo(()=>{const e=$h(t),s=n.length,a=e.length;r.assert(s===a,()=>"The number of elements doesn't match, keys has "+`${s} elements, the values has ${a} `+"elements.");for(let t=0;t<s;t++){const r=n[t],s=e[t];xo(s),this.tensorMap.set(r,s)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return yo(()=>{const e=[];for(let r=0;r<n.length;r++){const s=this.findWithDefault(n[r],t);e.push(s)}return fh(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+`${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+`${t.dtype}`)}}const sk=async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=sw("keyDType",e,t,n),a=sw("valueDType",e,t,n),i=new rk(s,a);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=sw("tableHandle",e,t,n,r),a=sw("keys",e,t,n),i=sw("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=sw("tableHandle",e,t,n,r),a=sw("keys",e,t,n),i=sw("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ak=(e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=sw("images",e,t,n),s=sw("size",e,t,n),a=sw("alignCorners",e,t,n),i=sw("halfPixelCenters",e,t,n);return[Od.resizeBilinear(r,[s[0],s[1]],a,i)]}case"ResizeNearestNeighbor":{const r=sw("images",e,t,n),s=sw("size",e,t,n),a=sw("alignCorners",e,t,n),i=sw("halfPixelCenters",e,t,n);return[Od.resizeNearestNeighbor(r,[s[0],s[1]],a,i)]}case"CropAndResize":{const r=sw("image",e,t,n),s=sw("boxes",e,t,n),a=sw("boxInd",e,t,n),i=sw("cropSize",e,t,n),o=sw("method",e,t,n),u=sw("extrapolationValue",e,t,n);return[Od.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ik=(e,t,n)=>{switch(e.op){case"Equal":return[fl(sw("a",e,t,n),sw("b",e,t,n))];case"NotEqual":return[gc(sw("a",e,t,n),sw("b",e,t,n))];case"Greater":return[$l(sw("a",e,t,n),sw("b",e,t,n))];case"GreaterEqual":return[Tl(sw("a",e,t,n),sw("b",e,t,n))];case"Less":return[_l(sw("a",e,t,n),sw("b",e,t,n))];case"LessEqual":return[Ol(sw("a",e,t,n),sw("b",e,t,n))];case"LogicalAnd":return[tc(sw("a",e,t,n),sw("b",e,t,n))];case"LogicalNot":return[nc(sw("a",e,t,n))];case"LogicalOr":return[rc(sw("a",e,t,n),sw("b",e,t,n))];case"Select":case"SelectV2":return[ml(sw("condition",e,t,n),sw("a",e,t,n),sw("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},ok=(e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[bi(sw("a",e,t,n),sw("b",e,t,n),sw("transposeA",e,t,n),sw("transposeB",e,t,n))];case"Transpose":return[wi(sw("x",e,t,n),sw("perm",e,t,n))];case"_FusedMatMul":const[r,s]=sw("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o=sw("numArgs",e,t,n),u=sw("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=sw("args",e,t,n);return[f.matMul({a:sw("a",e,t,n),b:sw("b",e,t,n),transposeA:sw("transposeA",e,t,n),transposeB:sw("transposeB",e,t,n),bias:l,activation:s,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}},uk=(e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Wu(sw("x",e,t,n),sw("mean",e,t,n),sw("variance",e,t,n),sw("offset",e,t,n),sw("scale",e,t,n),sw("epsilon",e,t,n))];case"LRN":return[zl(sw("x",e,t,n),sw("radius",e,t,n),sw("bias",e,t,n),sw("alpha",e,t,n),sw("beta",e,t,n))];case"Softmax":return[ih(sw("x",e,t,n))];case"LogSoftmax":return[Hl(sw("x",e,t,n))];case"SparseToDense":return[Oh(sw("sparseIndices",e,t,n),sw("outputShape",e,t,n),sw("sparseValues",e,t,n),sw("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},lk=(e,t,n)=>{switch(e.op){case"Max":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[Ul(sw("x",e,t,n),r,s)]}case"Mean":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[uc(sw("x",e,t,n),r,s)]}case"Min":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[lc(sw("x",e,t,n),r,s)]}case"Sum":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[Gl(sw("x",e,t,n),r,s)]}case"All":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[cu(sw("x",e,t,n),r,s)]}case"Any":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[hu(sw("x",e,t,n),r,s)]}case"ArgMax":{const r=sw("axis",e,t,n);return[du(sw("x",e,t,n),r)]}case"ArgMin":{const r=sw("axis",e,t,n);return[pu(sw("x",e,t,n),r)]}case"Prod":{const r=sw("axis",e,t,n),s=sw("keepDims",e,t,n);return[Ac(sw("x",e,t,n),r,s)]}case"Cumsum":{const r=sw("axis",e,t,n),s=sw("exclusive",e,t,n),a=sw("reverse",e,t,n);return[ul(sw("x",e,t,n),r,s,a)]}case"Bincount":const r=sw("x",e,t,n),s=sw("weights",e,t,n),a=sw("size",e,t,n);return[Hu(r,s,a)];case"DenseBincount":{const r=sw("x",e,t,n),s=sw("weights",e,t,n),a=sw("size",e,t,n),i=sw("binaryOutput",e,t,n);return[ll(r,s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ck=(e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=sw("n",e,t,n),s=sw("axis",e,t,n);let a=sw("tensors",e,t,n);return a=a.slice(0,r),[Ou(a,s)]}case"Gather":{const r=sw("x",e,t,n),s=sw("indices",e,t,n);return[Cl(r,qa(s,"int32"),0)]}case"GatherV2":{const r=sw("axis",e,t,n),s=sw("batchDims",e,t,n),a=sw("x",e,t,n),i=sw("indices",e,t,n);return[Cl(a,qa(i,"int32"),r,s)]}case"Reverse":{const r=sw("dims",e,t,n),s=[];for(let e=0;e<r.length;e++)r[e]&&s.push(e);const a=sw("x",e,t,n);return[Uc(a,s)]}case"ReverseV2":{const r=sw("axis",e,t,n),s=sw("x",e,t,n);return[Uc(s,r)]}case"Slice":{const r=sw("begin",e,t,n),s=sw("size",e,t,n);return[zu(sw("x",e,t,n),r,s)]}case"StridedSlice":{const r=sw("begin",e,t,n),s=sw("end",e,t,n),a=sw("strides",e,t,n),i=sw("beginMask",e,t,n),o=sw("endMask",e,t,n),u=sw("ellipsisMask",e,t,n),l=sw("newAxisMask",e,t,n),c=sw("shrinkAxisMask",e,t,n),h=sw("x",e,t,n);return[gh(h,r,s,a,i,o,u,l,c)]}case"Pack":return yo(()=>{const s=sw("axis",e,t,n),a=sw("tensors",e,t,n),i=a[0].shape,o=ph(a[0]).shape,u=a.map(e=>{const t=r.arraysEqual(e.shape,i);if(!t&&!r.arraysEqual(ph(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:Fu(e,i)});return[fh(u,s)]});case"Unpack":{const r=sw("axis",e,t,n),s=sw("tensor",e,t,n);return $h(s,r)}case"Tile":{const r=sw("reps",e,t,n);return[Il(sw("x",e,t,n),r)]}case"Split":case"SplitV":{const r=sw("axis",e,t,n),s=sw("numOrSizeSplits",e,t,n),a=sw("x",e,t,n);return ch(a,s,r)}case"ScatterNd":{const r=sw("indices",e,t,n),s=sw("values",e,t,n),a=sw("shape",e,t,n);return[_h(r,s,a)]}case"GatherNd":{const r=sw("x",e,t,n),s=sw("indices",e,t,n);return[Mh(r,s)]}case"SparseToDense":{const r=sw("sparseIndices",e,t,n),s=sw("outputShape",e,t,n),a=sw("sparseValues",e,t,n),i=sw("defaultValue",e,t,n);return[Oh(r,a,s,a.dtype===i.dtype?i:qa(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},hk=(e,t,n)=>{switch(e.op){case"FFT":return[oh(sw("x",e,t,n))];case"IFFT":return[uh(sw("x",e,t,n))];case"RFFT":return[hh(sw("x",e,t,n))];case"IRFFT":return[lh(sw("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},dk=(e,t,n)=>{switch(e.op){case"Cast":return[qa(sw("x",e,t,n),sw("dtype",e,t,n))];case"ExpandDims":{const r=sw("axis",e,t,n);return[kl(sw("x",e,t,n),r)]}case"Squeeze":{const r=sw("axis",e,t,n);return[ph(sw("x",e,t,n),r)]}case"Reshape":return[Fu(sw("x",e,t,n),sw("shape",e,t,n))];case"MirrorPad":return[hc(sw("x",e,t,n),sw("padding",e,t,n),sw("mode",e,t,n))];case"PadV2":case"Pad":return[kc(sw("x",e,t,n),sw("padding",e,t,n),sw("constantValue",e,t,n))];case"SpaceToBatchND":{const r=sw("blockShape",e,t,n),s=sw("paddings",e,t,n);return[Cc(sw("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=sw("blockShape",e,t,n),s=sw("crops",e,t,n);return[Bu(sw("x",e,t,n),r,s)]}case"DepthToSpace":{const r=sw("blockSize",e,t,n),s=sw("dataFormat",e,t,n).toUpperCase();return[cl(sw("x",e,t,n),r,s)]}case"BroadcastTo":return[ju(sw("x",e,t,n),sw("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function pk(e,t,n,s){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return yo(()=>Gw(e,t,n));case"basic_math":return yo(()=>Hw(e,t,n));case"control":return Xw(e,t,n);case"convolution":return yo(()=>Zw(e,t,n));case"creation":return yo(()=>Jw(e,t,n));case"dynamic":return ek(e,t,n);case"evaluation":return yo(()=>tk(e,t,n));case"image":return yo(()=>ak(e,t,n));case"graph":return yo(()=>nk(e,t,n));case"logical":return yo(()=>ik(e,t,n));case"matrices":return yo(()=>ok(e,t,n));case"normalization":return yo(()=>uk(e,t,n));case"reduction":return yo(()=>lk(e,t,n));case"slice_join":return yo(()=>ck(e,t,n));case"spectral":return yo(()=>hk(e,t,n));case"transformation":return yo(()=>dk(e,t,n));case"hash_table":return sk(e,t,n,s);case"custom":const r=rw(e.op);if(r&&r.customExecutor)return r.customExecutor(new Uw(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at `+"https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}})(e,t,n);return r.isPromise(a)?a.then(e=>[].concat(e)):[].concat(a)}class fk{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function mk(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(e).map(e=>uw(e)[0]);let c=[];null!=r&&(c=r.map(e=>uw(e.name)[0]));const h=[...t];for(;h.length>0;){const e=h.pop();(xk(e)||wk(e)||kk(e))&&null==i&&(o=(i=e).children.map(e=>e.name).filter(e=>s.has(e))),s.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{u.has(e.name)||(u.add(e.name),h.push(e))}):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const gk=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],yk=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],bk=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function xk(e){return gk.indexOf(e.op)>=0}function wk(e){return yk.indexOf(e.op)>=0}function kk(e){return bk.indexOf(e.op)>=0}class vk{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new vk(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=mk(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has `+`the dynamic op '${s.op}'. Please use `+"model.executeAsync() instead. Alternatively, to avoid the "+`dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs `+`[${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map(e=>uw(e)[0]).map(t=>e.nodes[t]),o=e.initNodes;i.forEach(e=>{r.has(e.name)&&a.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&a.push(e)}),null!=o&&o.forEach(e=>{r.has(e.name)&&a.push(e)});const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach(e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>u.has(e.name))&&a.push(e)})}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map(e=>this.graph.nodes[uw(e)[0]]),a=t.map(e=>uw(e)[0]);let i=a.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const o=this.getCompilationKey(s,i);let u=this.compiledMap.get(o);null==u&&(u=this.compile(e,i),this.compiledMap.set(o,u));const l={},c={};return yo(()=>{const n=new fk(this.weightMap,l,c,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=uw(t),a=[];a[r]=e[t],s[n]=a});const i=this.getFrozenTensorIds(s),o={};for(let e=0;e<u.length;e++){const t=u[e];if(!s[t.name]){const e=pk(t,s,n,this._resourceManager);if(r.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. `+"Please use model.executeAsync() instead.");s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,i,a,o)}}return null==this.parent&&n.dispose(i),t.map(e=>aw(e,s,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const t=function(e,t,n){return t[ow(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach(e=>{if(e&&!s.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new fk(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map(e=>aw(e,i,a)),u=o.map(e=>e.id),l=Object.keys(e).map(t=>e[t].id),c=new Set([...u,...l,...this.weightIds]);return Object.keys(i).forEach(e=>{i[e].forEach(e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map(e=>this.graph.nodes[uw(e)[0]]),i=n.map(e=>uw(e)[0]);let o=i.map(e=>this.graph.nodes[e]);0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=mk(e,o,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),p=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=uw(t),s=[];s[r]=e[t],p[n]=s});const f={},m=this.getFrozenTensorIds(p),g={};for(;d.length>0;){const e=this.processStack(a,d,t,p,g,m,i,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter(e=>!xk(e)&&!aw(e.name,p,t)).map(e=>e.name);if(y.length>0){let e="";throw null!=c&&(e="Alternatively, to avoid the dynamic ops, use model.execute() "+`and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided `+`inputs [${s}]. Consider providing the following inputs: `+`[${l}]. ${e}`)}return p}processStack(e,t,n,s,a,i,o,u,l){const c=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let h="";if("Enter"===e.node.op&&sw("isConstant",e.node,s,n)&&([h]=iw(e.node.name,n)),null==s[e.node.name]){const d=pk(e.node,s,n,this._resourceManager);h||([h]=iw(e.node.name,n));const p=n.currentContext;r.isPromise(d)?c.push(d.then(r=>(s[h]=r,n.currentContext=p,this.checkTensorForDisposal(h,e.node,s,n,i,o,u),this.processChildNodes(e.node,t,n,s,a,l),r))):(s[h]=d,this.checkTensorForDisposal(h,e.node,s,n,i,o,u),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return c}processChildNodes(e,t,n,r,s,a){e.children.forEach(e=>{const[i]=iw(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!aw(e,r,n))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!aw(e,r,n))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[s]=uw(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);r.assert(t,()=>`The shape of dict['${a.name}'] provided in `+`model.execute(dict) must be [${e}], but was `+`[${n.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&r.assert(n.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in `+"model.execute(dict) must be "+`${a.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=uw(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error("The dict provided in model.execute(dict) has "+`keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(e){e.forEach(e=>{const[t]=uw(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class Ik{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const Nk="?tfjs-format=file",Sk="model.json";class Ck{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new Ik}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=i.browserHTTPRequest(e,this.loadOptions);else{const t=i.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(i.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for `+`URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;this.signature=n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=i.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new vk(Tw.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Tw.Instance.transformGraph(e.modelInitializer);this.initializer=new vk(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=i.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for `+`URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof xs||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,"+`the graph model has ${this.inputNodes.length} placeholders, `+`while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function $k(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}${Sk}${Nk}`);const n=new Ck(e,t);return await n.load(),n}function Tk(e,t,n=new Map,r=new Set){if(null==e)return null;if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(Rk(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=Tk(e[a],t,n,r);s[a]=i}return r.delete(e),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function Ak(e){return null===e?null:Rk(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function Ek(e,t){const n=new Map;Tk(e,t,n);for(const s of Array.from(n.keys())){const e=n.get(s);if(r.isPromise(e)){const t=await e;n.set(s,t)}}return Tk(e,t,n)}function Rk(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof xs))}function Fk(e){return e instanceof xs?{value:e.clone(),recurse:!1}:Rk(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Dk{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class _k extends Dk{constructor(){super(_k.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let r=0;r<n;r++)t[r]=this.get(this.wrap(this.begin+r));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Ok(e){return new Lk(e)}function Mk(e){return new Pk(e)}_k.INITIAL_CAPACITY=32;class zk{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)n=e((t=await this.next()).value)}handleErrors(e){return new jk(this,e)}filter(e){return new Gk(this,e)}map(e){return new Hk(this,e)}mapAsync(e){return new qk(this,e)}serialMapAsync(e){return new qk(this,e).serial()}flatmap(e){return new Xk(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Uk(this,e,t)}columnMajorBatch(e,t=!0,n=Ak){return this.rowMajorBatch(e,t).map(e=>(function(e,t=Ak){return function e(t,n,r=new Set){const s=t[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(t);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(Rk(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e(t.map(e=>e[i]),n,r);a[i]=s}return r.delete(s),a}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}(e,t)})(e,n))}concatenate(e,t){return new Yk(Ok([this,e]),t)}take(e){return e<0||null==e?this:new Vk(this,e)}skip(e){return e<0||null==e?this:new Wk(this,e)}prefetch(e){return new Qk(this,e)}shuffle(e,t){return new ev(this,e,t)}serial(){return new Bk(this)}}class Lk extends zk{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,Tk(t,Fk)),done:!1};var t}}class Pk extends zk{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Bk extends zk{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Wk extends zk{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;bo(e.value)}return this.upstream.next()}}class Vk extends zk{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Uk extends zk{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Gk extends zk{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;bo(e.value)}}}class Hk extends zk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class jk extends zk{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class qk extends zk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=await this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Kk extends zk{constructor(){super(),this.outputQueue=new _k,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!(await this.pump()))return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Xk extends Kk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return!0}}class Yk extends zk{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Zk;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Zk||(Zk={}));class Jk extends zk{constructor(e,t=Zk.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await Ek(this.iterators,(function(e){return e instanceof zk?{value:e.next().then(e=>(t++,e.done&&n++,e.value)),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Zk.FAIL:throw new Error("Zipped streams should have the same length. "+`Mismatched at element ${this.count}.`);case Zk.SHORTEST:return{value:null,done:!0}}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Qk extends zk{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Dk(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class ev extends Qk{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Rc.alea(n||r.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class tv{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return r.assert(e>0,()=>`batchSize needs to be positive, but it is\n      ${e}`),nv(async()=>(await n.iterator()).columnMajorBatch(e,t,av),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e))}concatenate(e){const t=this;let n;return nv(async()=>(await t.iterator()).concatenate(await e.iterator()),n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null)}filter(e){const t=this;let n;return nv(async()=>(await t.iterator()).filter(t=>yo(()=>e(t))),n=this.size===1/0?1/0:null)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return nv(async()=>(await t.iterator()).map(t=>yo(()=>e(t))),this.size)}mapAsync(e){const t=this;return nv(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return nv(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return nv(async()=>(function(e,t){return new Yk(e,void 0)})(Mk(async()=>({value:await t.iterator(),done:!1})).take(e)),n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null)}skip(e){const t=this;let n;return nv(async()=>(await t.iterator()).skip(e),n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting "+`bufferSize to the dataset size (${this.size} elements)`);const s=this,a=Rc.alea(t||r.now().toString());return nv(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return nv(async()=>(await t.iterator()).take(e),n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function nv(e,t=null){return new class extends tv{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function rv(e){return nv(async()=>Ok(e),e.length)}function sv(e){if(!Rk(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return nv(async()=>(function(e,t=Zk.FAIL){return new Jk(e,t)})(await Ek(e,e=>{if(e instanceof tv)return{value:e.iterator(),recurse:!1};if(Rk(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Zk.SHORTEST),t)}function av(e){return null===e?null:null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof xs||r.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof xs?fh(e):Zs(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}tv.MAX_BUFFER_SIZE=1e4;class iv extends tv{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}const ov='"',uv=Symbol("out"),lv=Symbol("field"),cv=Symbol("quote"),hv=Symbol("quoteafterquote"),dv=Symbol("quoteinquote");class pv extends tv{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new iv(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(r.assert(null==t.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&r.assert(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),n=Object.keys(t).filter(e=>t[e]>1);if(r.assert(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const r of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(r))throw new Error('The key "'+r+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");return this.parseRow(t.value,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[s];let u=null;if(""===o)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);u=void 0}else{const e=Number(o);if(isNaN(e))u=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":u=e;break;case"int32":u=Math.floor(e);break;case"bool":u=this.getBoolean(o);break;default:u=e}else u=e}i&&i.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=uv;for(let i=0;i<s;i++)switch(a){case uv:switch(e.charAt(i)){case ov:r=i+1,a=cv;break;case this.delimiter:if(r=i+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=uv;break;default:a=lv,r=i}break;case lv:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(r,i)),a=uv,r=i+1}break;case cv:switch(e.charAt(i)){case ov:a=hv}break;case hv:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(r,i-1)),a=uv,r=i+1;break;case ov:a=cv;break;default:a=dv}break;case dv:switch(e.charAt(i)){case ov:a=cv}}if(n.push(a===hv?e.substring(r,s-1):e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class fv extends zk{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error("Invalid fftSize: it must be a power of 2 between "+`2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(Ve().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new fv(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(n){throw new Error(`Error thrown while initializing video stream: ${n.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error("Mismatch in sampling rate: "+`Expected: ${this.sampleRateHz}; `+`Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise(r=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach((e,r)=>n.set(e,r*t)),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(r.sizeFromShape(t));return n.set(e,n.length-e.length),Zs(n,t)}}class mv extends zk{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=bh([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2;this.cropBox=xh([r,n,t+r,n+e],[1,4])}else this.cropBox=xh([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(Ve().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new mv(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&r.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. `+"Please provide 'user' or 'environment'");try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=u.fromPixels(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return yo(()=>{const t=kl(qa(e,"float32"),0);let n;return n=Od.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear"),Fu(n,n.shape.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class gv{}class yv extends zk{split(e){return new bv(this,e)}}class bv extends yv{constructor(e,t){super(),this.upstream=e,this.impl=new xv(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class xv extends Kk{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const n of t.slice(0,-1))this.outputQueue.push(n);return this.carryover=t[t.length-1],!0}}class wv extends zk{decodeUTF8(){return new kv(this)}}class kv extends yv{constructor(e){super(),this.upstream=e,this.impl=new vv(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class vv extends Kk{constructor(e){if(super(),this.upstream=e,Ve().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(7);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Ve().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class Iv extends wv{constructor(e,t={}){super(),this.file=e,this.options=t,r.assert(e instanceof Uint8Array||!!Ve().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n});return{value:await e,done:!1}}}const Nv=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function Sv(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class Cv extends gv{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(Sv(this.input)&&Ve().get("IS_NODE")){const e=n(8);this.input=e.readFileSync(this.input.substr(7))}return new Iv(this.input,this.options)}}class $v extends gv{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return Sv(this.url)?new Cv(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;"string"==typeof e?n=e:(n=e.url,s=Nv(e));const a=await r.fetch(n,s);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new Iv(e,t)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function Tv(e,t={}){return new pv(new $v(e),t)}function Av(e){const t=Mk(e);return nv(async()=>t)}function Ev(e){return nv(async()=>{const t=await e();return Mk(()=>t.next())})}async function Rv(e,t){return mv.create(e,t)}async function Fv(e){return fv.create(e)}const Dv="3.0.0";function _v(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}const Ov=y.whereImpl;class Mv extends j{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new H(this,fo())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Ve().get("IS_NODE")&&g.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r){this.data.set(e,{values:t,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return g.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>r.decodeString(e))}catch(s){throw new Error("Failed to decode encoded string bytes into utf-8")}return ja(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return fo().makeTensorFromDataId(r,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=r.now();return e(),{kernelMs:r.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){_v([e],"where");const t=this.readSync(e.dataId);return Ov(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function zv(e,t,n){return({inputs:s,attrs:a,backend:i})=>{const{x:o}=s;if(_v(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=i,l=u.data.get(o.dataId).values,c=r.sizeFromShape(o.shape),h=n||o.dtype,d=r.getArrayFromDType(h,c);for(let e=0;e<c;++e)d[e]=t(l[e],a);return u.makeTensorInfo(o.shape,h,d)}}function Lv(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(_v(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}$o("cpu",()=>new Mv,1);const Pv=zv(Wt,e=>e>=0?e:Math.exp(e)-1),Bv={kernelName:Wt,backendName:"cpu",kernelFunc:Pv};function Wv(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Vv={kernelName:sn,backendName:"cpu",kernelFunc:Wv};function Uv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s;_v([a],"leakyRelu");const o=r.sizeFromShape(a.shape),u=n.data.get(a.dataId).values,l=r.getTypedArrayFromDType("float32",o);for(let r=0;r<u.length;r++)l[r]=u[r]<0?i*u[r]:u[r];return n.makeTensorInfo(a.shape,"float32",l)}const Gv={kernelName:hn,backendName:"cpu",kernelFunc:Uv};function Hv(e){return(t,n,s,a,i)=>{const o=g.assertAndGetBroadcastShape(t,n),u=o.length,l=r.computeStrides(o),c=r.sizeFromShape(o),h=r.getTypedArrayFromDType(i,c),d=t.length,p=n.length,f=r.computeStrides(t),m=r.computeStrides(n),y=g.getBroadcastDims(t,o),b=g.getBroadcastDims(n,o);if(y.length+b.length===0)for(let r=0;r<h.length;++r)h[r]=e(s[r%s.length],a[r%a.length]);else for(let g=0;g<h.length;++g){const t=r.indexToLoc(g,u,l),n=t.slice(-d);y.forEach(e=>n[e]=0);const i=r.locToIndex(n,d,f),o=t.slice(-p);b.forEach(e=>o[e]=0);const c=r.locToIndex(o,p,m);h[g]=e(s[i],a[c])}return[h,o]}}const jv=Hv((e,t)=>e<0?t*e:e);function qv(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;_v([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=jv(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}const Kv={kernelName:Kn,backendName:"cpu",kernelFunc:qv},Xv=zv(Qn,e=>Math.max(0,e)),Yv={kernelName:Qn,backendName:"cpu",kernelFunc:Xv},Zv=zv(ar,e=>Math.min(Math.max(0,e),6)),Jv={kernelName:ar,backendName:"cpu",kernelFunc:Zv};function Qv(e,t,n,r,s){if("linear"===n)return Wv({inputs:{x:t},backend:e});if("relu"===n)return Xv({inputs:{x:t},backend:e});if("elu"===n)return Pv({inputs:{x:t},backend:e});if("relu6"===n)return Zv({inputs:{x:t},backend:e});if("prelu"===n)return qv({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return Uv({inputs:{x:t},backend:e,attrs:{alpha:s}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function eI(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const tI={kernelName:bt,backendName:"cpu",kernelFunc:eI};function nI(e,t,n="float32"){if("complex64"===n)return eI({inputs:{real:nI(e,t,"float32"),imag:nI(e,t,"float32")},backend:e});const s=r.makeZerosTypedArray(r.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function rI(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const sI={kernelName:Zn,backendName:"cpu",kernelFunc:rI};function aI(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return Wv({inputs:{x:a},backend:n});const e=nI(n,a.shape,a.dtype),t=aI({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=eI({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=rI({inputs:{input:a},backend:n}),t=aI({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!r.hasEncodingLoss(a.dtype,i)){const e=Wv({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===i){const e=n.data.get(a.dataId).values,t=r.toTypedArray([0],a.dtype),[s,i]=Hv((e,t)=>e!==t?1:0)(a.shape,[],e,t,"bool");return n.makeTensorInfo(i,"bool",s)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}const iI={kernelName:mt,backendName:"cpu",kernelFunc:aI};function oI(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;_v([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c=r||a.dtype,[h,d]=t(a.shape,i.shape,u,l,c);return o.makeTensorInfo(d,c,h)}:({inputs:e,backend:s})=>{const{a:a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=aI({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.imag,s=o.data.get(t.complexTensorInfos.real.dataId).values,u=o.data.get(r.dataId).values,l=aI({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(l.dataId),h=c.complexTensorInfos.imag,d=o.data.get(c.complexTensorInfos.real.dataId).values,p=o.data.get(h.dataId).values,[f,m,g]=n(a.shape,i.shape,s,u,d,p),y=o.makeTensorInfo(g,"float32",f),b=o.makeTensorInfo(g,"float32",m),x=eI({inputs:{real:y,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(b),x}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function uI(e){return(t,n,s,a,i,o)=>{const u=g.assertAndGetBroadcastShape(t,n),l=r.sizeFromShape(u),c=u.length,h=r.computeStrides(u),d=r.getTypedArrayFromDType("float32",l),p=r.getTypedArrayFromDType("float32",l),f=g.getBroadcastDims(t,u),m=g.getBroadcastDims(n,u),y=g.mergeRealAndImagArrays(s,a),b=g.mergeRealAndImagArrays(i,o),x=t.length,w=r.computeStrides(t),k=n.length,v=r.computeStrides(n);if(f.length+m.length===0)for(let r=0;r<d.length;r++){const t=r%y.length,n=r%b.length,s=e(y[2*t],y[2*t+1],b[2*n],b[2*n+1]);d[r]=s.real,p[r]=s.imag}else for(let g=0;g<d.length;g++){const t=r.indexToLoc(g,c,h),n=t.slice(-x);f.forEach(e=>n[e]=0);const s=r.locToIndex(n,x,w),a=t.slice(-k);m.forEach(e=>a[e]=0);const i=r.locToIndex(a,k,v),o=e(y[2*s],y[2*s+1],b[2*i],b[2*i+1]);d[g]=o.real,p[g]=o.imag}return[d,p,u]}}const lI=Hv((e,t)=>e+t),cI=uI((e,t,n,r)=>({real:e+n,imag:t+r})),hI=oI(Ye,lI,cI),dI={kernelName:Ye,backendName:"cpu",kernelFunc:hI};function pI(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=r.sizeFromShape(a.shape),u=r.inferFromImplicitShape(i,o),l=r.sizeFromShape(u);r.assert(o===l,()=>`The new shape (${u}) has ${l} elements and the old `+`shape (${a.shape}) has ${o} elements. The new shape and old `+"shape must have the same number of elements."),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=u,e.shape=u}return{dataId:a.dataId,shape:u,dtype:a.dtype}}const fI={kernelName:er,backendName:"cpu",kernelFunc:pI};function mI(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:i}=t,{transposeA:o,transposeB:u}=s;_v([a,i],"matMul");const l=a.shape.length,c=i.shape.length,h=o?a.shape[l-2]:a.shape[l-1],d=u?i.shape[c-1]:i.shape[c-2],p=o?a.shape[l-1]:a.shape[l-2],f=u?i.shape[c-2]:i.shape[c-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=r.sizeFromShape(m),b=r.sizeFromShape(g);r.assert(l>=2&&c>=2&&(y===b||1===y||1===b),()=>"Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input "+`batch dimensions of (${m}) and (${g}).`);const x=(y>b?a.shape.slice(0,-2):i.shape.slice(0,-2)).concat([p,f]);r.assert(h===d,()=>`Error in matMul: inner shapes (${h}) and (`+`${d}) of Tensors with shapes ${a.shape} and `+`${i.shape} and transposeA=${o}`+` and transposeB=${u} must match.`);const w=u?[b,f,d]:[b,d,f],k=pI({inputs:{x:a},backend:n,attrs:{shape:o?[y,h,p]:[y,p,h]}}),v=pI({inputs:{x:i},backend:n,attrs:{shape:w}}),I=o?k.shape[1]:k.shape[2],N=o?k.shape[2]:k.shape[1],S=u?v.shape[1]:v.shape[2],C=Math.max(y,b),$=n.data.get(k.dataId).values,T=n.data.get(v.dataId).values,A=r.computeStrides(k.shape),E=r.computeStrides(v.shape),[R,F,D]=o?[A[0],1,A[1]]:[A[0],A[1],1],[_,O,M]=u?[1,E[1],E[0]]:[E[1],1,E[0]],z=N*S,L=ja([C,N,S],k.dtype),P=L.values,B=n.blockSize;for(let r=0;r<C;r++)for(let e=0;e<N;e+=B)for(let t=0;t<S;t+=B)for(let n=0;n<I;n+=B){const s=Math.min(e+B,N),a=Math.min(t+B,S),i=Math.min(n+B,I);for(let o=e;o<s;o++)for(let e=t;e<a;e++){let t=0;for(let s=n;s<i;s++){const n=Math.min(r,y-1)*R,a=Math.min(r,b-1)*M;t+=$[n+o*F+s*D]*T[s*_+e*O+a]}P[r*z+(o*S+e)]+=t}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(x,L.dtype,L.values)}const gI={kernelName:ht,backendName:"cpu",kernelFunc:mI},yI={kernelName:Br,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;let d,p,f;const m=[];d=mI({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(p=hI({inputs:{a:d,b:i},backend:n}),m.push(d),d=p),c&&(f=Qv(n,d,c,o,h),m.push(d),d=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return d}};function bI(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const xI={kernelName:qe,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;_v(t,"abs");let s=new Float32Array(r.sizeFromShape(t.shape));return s=bI(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},wI=zv(Ke,e=>Math.acos(e)),kI={kernelName:Ke,backendName:"cpu",kernelFunc:wI},vI=zv(Xe,e=>Math.acosh(e)),II={kernelName:Xe,backendName:"cpu",kernelFunc:vI},NI={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;_v(t,"addN");const s=r.map(e=>n.data.get(e.dataId).values),a=ja(r[0].shape,r[0].dtype),i=a.values;for(let o=0;o<r.length;o++){const e=s[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function SI(e,t,n,s,a){const i=t.length,o=r.sizeFromShape(t),u=r.computeStrides(t),l=r.computeStrides(a),c=r.getTypedArrayFromDType(n,r.sizeFromShape(a));for(let h=0;h<o;++h){const t=r.indexToLoc(h,i,u),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];c[r.locToIndex(n,i,l)]=e[h]}return c}function CI(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;_v(s,"transpose");const i=new Array(s.shape.length);for(let u=0;u<i.length;u++)i[u]=s.shape[a[u]];const o=SI(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(o,i,s.dtype),shape:i,dtype:s.dtype}}const $I={kernelName:Fr,backendName:"cpu",kernelFunc:CI},TI={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;_v(a,"all");const u=r.parseAxisParam(i,a.shape);let l=u;const c=g.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=CI({inputs:{x:a},backend:n,attrs:{perm:c}}),l=g.getInnerMostAxes(l.length,a.shape.length)),g.assertAxesAreInnerMostDims("all",l,h.shape.length);const[d,p]=g.computeOutAndReduceShapes(h.shape,l),f=r.sizeFromShape(p),m=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<m.length;++r){const e=r*f;let t=y[e];for(let n=0;n<f;++n){const r=y[e+n];t=t&&r}m[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,m);if(o){const e=pI({inputs:{x:b},backend:n,attrs:{shape:g.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},AI={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;_v(a,"any");const u=r.parseAxisParam(i,a.shape);let l=u;const c=g.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=CI({inputs:{x:a},backend:n,attrs:{perm:c}}),l=g.getInnerMostAxes(l.length,a.shape.length)),g.assertAxesAreInnerMostDims("any",l,h.shape.length);const[d,p]=g.computeOutAndReduceShapes(h.shape,l),f=r.sizeFromShape(p),m=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<m.length;++r){const e=r*f;let t=y[e];for(let n=0;n<f;++n){const r=y[e+n];t=t||r}m[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,m);if(o){const e=pI({inputs:{x:b},backend:n,attrs:{shape:g.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},EI={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;_v(a,"argMax");let o=r.parseAxisParam(i,a.shape);const u=g.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=CI({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=g.getInnerMostAxes(o.length,l.shape.length)),g.assertAxesAreInnerMostDims("argMax",o=[o[0]],l.shape.length);const[h,d]=g.computeOutAndReduceShapes(l.shape,o),p=r.sizeFromShape(h),f=r.makeZerosTypedArray(p,"int32"),m=r.sizeFromShape(d),y=n.data.get(l.dataId).values;for(let r=0;r<f.length;++r){const e=r*m;let t=y[e],n=0;for(let r=0;r<m;++r){const s=y[e+r];s>t&&(t=s,n=r)}f[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",f)}},RI={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;_v(a,"argMin");let o=r.parseAxisParam(i,a.shape);const u=g.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=CI({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=g.getInnerMostAxes(o.length,l.shape.length)),g.assertAxesAreInnerMostDims("argMin",o=[o[0]],l.shape.length);const[h,d]=g.computeOutAndReduceShapes(l.shape,o),p=r.sizeFromShape(h),f=r.makeZerosTypedArray(p,"int32"),m=r.sizeFromShape(d),y=n.data.get(l.dataId).values;for(let r=0;r<f.length;++r){const e=r*m;let t=y[e],n=0;for(let r=0;r<m;++r){const s=y[e+r];s<t&&(t=s,n=r)}f[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",f)}},FI=zv(nt,e=>Math.asin(e)),DI={kernelName:nt,backendName:"cpu",kernelFunc:FI},_I=zv(rt,e=>Math.asinh(e)),OI={kernelName:rt,backendName:"cpu",kernelFunc:_I},MI=zv(st,e=>Math.atan(e)),zI={kernelName:st,backendName:"cpu",kernelFunc:MI},LI=Hv((e,t)=>Math.atan2(e,t)),PI=oI(it,LI),BI={kernelName:it,backendName:"cpu",kernelFunc:PI},WI=zv(at,e=>Math.atanh(e)),VI={kernelName:at,backendName:"cpu",kernelFunc:WI};function UI(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=ja(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const t=w*y,n=w*r[0];for(let m=0;m<s.inChannels;++m)for(let y=0;y<s.outHeight;++y){const w=y*i-d,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),I=t+y*b;for(let t=0;t<s.outWidth;++t){const i=t*o-p,c=Math.max(0,i),d=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let t=k;t<v;t+=u){const s=n+t*r[1];for(let t=c;t<d;t+=l){const n=e[s+t*r[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[I+t*x+m]="avg"===a?b/w:y}}}return m}function GI(e,t,n,r,s=!1,a=!1){const i=ja(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=ja(t,n,e);for(let g=0;g<r.batchSize;++g)for(let e=0;e<r.inChannels;++e)for(let t=0;t<r.outHeight;++t){const n=t*o-p;let y=n;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+n);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let p=h;for(;p<0;)p+=c;const x=Math.min(r.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let t=y;t<b;t+=l){const i=t-n;for(let n=p;n<x;n+=c){const o=n-h,u=m.get(g,t,n,e);u>w&&(w=u,k=s?a?((g*r.inHeight+t)*r.inWidth+n)*r.inChannels+e:(t*r.inWidth+n)*r.inChannels+e:i*d+o)}}i.set(k,g,t,o,e)}}return i}function HI(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,p=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=ja(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let S=0;S<s.batchSize;++S){const t=S*k,n=S*r[0];for(let x=0;x<s.inChannels;++x)for(let k=0;k<s.outDepth;++k){const S=k*i-m;let C=S;for(;C<0;)C+=l;const $=Math.min(s.inDepth,d+S),T=t+k*v;for(let t=0;t<s.outHeight;++t){const i=t*o-g;let d=i;for(;d<0;)d+=c;const m=Math.min(s.inHeight,p+i),k=T+t*I;for(let t=0;t<s.outWidth;++t){const i=t*u-y;let o=i;for(;o<0;)o+=h;const p=Math.min(s.inWidth,f+i),g=k+t*N;let v=b,I=0,S=0;for(let t=C;t<$;t+=l){const s=n+t*r[1];for(let t=d;t<m;t+=c){const n=s+t*r[2];for(let t=o;t<p;t+=h){const s=e[n+t*r[3]+x];if("max"===a&&s>v?v=s:"avg"===a&&(I+=s,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+x]="avg"===a?I/S:v}}}}return x}const jI={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;_v(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(g.eitherStridesOrDilationsAreOne(o,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+`Got strides ${o} and dilations '1'`);const c=g.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=Wv({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=UI(e,0,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},qI={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=s;_v(a,"avgPool3d");const h=g.computePool3DInfo(a.shape,i,o,1,u,l,c),d=HI(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),h,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},KI={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;_v([s,a],"avgPool3DGrad");const c=g.computePool3DInfo(a.shape,i,o,1,u,l),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,y=c.filterWidth,b=c.dilationDepth,x=c.dilationHeight,w=c.dilationWidth,k=c.effectiveFilterDepth,v=c.effectiveFilterHeight,I=c.effectiveFilterWidth,N=k-1-c.padInfo.front,S=I-1-c.padInfo.left,C=v-1-c.padInfo.top,$=ja(a.shape,"float32"),T=1/(f*m*y),A=n.bufferSync(s);for(let g=0;g<c.batchSize;++g)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=t-N,a=n-C,i=r-S;let o=0;for(let t=0;t<k;t+=b){const n=(s+t)/h;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let t=0;t<v;t+=x){const r=(a+t)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let t=0;t<I;t+=w){const s=(i+t)/p;s<0||s>=c.outWidth||Math.floor(s)!==s||(o+=A.get(g,n,r,s,e))}}}$.set(o*T,g,t,n,r,e)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},XI={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;_v([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=g.computePool2DInfo(i.shape,o,u,1,l),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,w=x-1-c.padInfo.left,k=b-1-c.padInfo.top,v=ja(i.shape,"float32"),I=1/(p*f),N=n.data.get(s.dataId).values,S=ja(s.shape,"float32",N);for(let g=0;g<c.batchSize;++g)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const r=t-k,s=n-w;let a=0;for(let t=0;t<b;t+=m){const n=(r+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=y){const r=(s+t)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(a+=S.get(g,n,r,e))}}v.set(a*I,g,t,n,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},YI={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:i,offset:o,mean:u,variance:l}=t;r.assert(u.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||u.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==i||u.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),_v([a,u,l,i,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,d=n.data.get(u.dataId).values,p=n.data.get(l.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=p.length,w=d.length;let k=0,v=0,I=0,N=0;for(let r=0;r<h.length;++r)g[r]=m[k++]+(h[r]-d[v++])*f[I++]/Math.sqrt(p[N++]+c),k>=y&&(k=0),v>=w&&(v=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};function ZI(e,t,n,s,a){const i=h.isSliceContinous(s,t,n),o=r.sizeFromShape(n),u=r.computeStrides(s);if(i){const n=h.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const l=ja(s,a,"string"===a?g.fromUint8ToStringArray(e):e),c=ja(n,a);for(let r=0;r<c.size;++r){const e=c.indexToLoc(r),n=e.map((e,n)=>e+t[n]);c.set(l.get(...n),...e)}return"string"===a?g.fromStringArrayToUint8(c.values):c.values}function JI(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;_v(s,"slice");const[o,u]=h.parseSliceParams(s,a,i);h.assertParamsValid(s,o,u);const l=ZI(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const QI={kernelName:dr,backendName:"cpu",kernelFunc:JI},eN={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;_v([s],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),u=g.getReshaped(s.shape,a,o),l=g.getPermuted(u.length,a.length),c=g.getReshapedPermuted(s.shape,a,o),h=g.getSliceBeginCoords(i,a.length),d=g.getSliceSize(c,i,a.length),p=pI({inputs:{x:s},backend:n,attrs:{shape:u}}),f=CI({inputs:{x:p},backend:n,attrs:{perm:l}}),m=pI({inputs:{x:f},backend:n,attrs:{shape:c}}),y=JI({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),y}};function tN(e,t,n,s,a){const i=r.sizeFromShape(s),o=r.makeZerosTypedArray(a,n);for(let r=0;r<e.length;r++){const n=e[r];if(n<0)throw new Error("Input x must be non-negative!");n>=a||(o[n]+=i>0?t[r]:1)}return o}function nN(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=ja([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(r?1:t.size>0?i.get(o,a)+t.get(o,s):i.get(o,a)+1,o,a)}return i}const rN={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=tN(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function sN(e){return(t,n,s)=>{const a=r.getTypedArrayFromDType(n,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],s);return a}}const aN=sN(e=>Math.ceil(e)),iN=Lv(gt,aN),oN={kernelName:gt,backendName:"cpu",kernelFunc:iN},uN=zv(yt,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e),lN={kernelName:yt,backendName:"cpu",kernelFunc:uN},cN={kernelName:xt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(r.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.imag,o=n.data.get(a.complexTensorInfos.real.dataId).values,u=n.data.get(i.dataId).values;for(let r=0;r<o.length;r++)s[r]=Math.hypot(o[r],u[r]);return n.makeOutput(s,t.shape,"float32")}};function hN(e,t,n,s){const a=r.getArrayFromDType(n,r.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=r.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{const s="string"===n?g.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]})}return a}function dN(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const pN={kernelName:on,backendName:"cpu",kernelFunc:dN};function fN(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0];let o=g.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const u=t.filter(e=>r.sizeFromShape(e.shape)>0);if(1===u.length)return Wv({inputs:{x:u[0]},backend:n});const l=u.map(e=>e.shape);if(g.assertParamsConsistent(l,i),"complex64"===u[0].dtype){const e=u.map(e=>rI({inputs:{input:e},backend:n})),t=u.map(e=>dN({inputs:{input:e},backend:n})),r=fN({inputs:e,backend:n,attrs:{axis:i}}),s=fN({inputs:t,backend:n,attrs:{axis:i}}),a=eI({inputs:{real:r,imag:s},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),a}const c=u.map(e=>{const t=r.sizeFromShape(e.shape.slice(i));return pI({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=hN(c.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape})),o=g.computeOutShape(c.map(e=>e.shape),1),t[0].dtype,1===c[0].shape[0]),d=g.computeOutShape(u.map(e=>e.shape),i),p=n.makeTensorInfo(d,t[0].dtype,h);return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}const mN={kernelName:wt,backendName:"cpu",kernelFunc:fN};function gN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dataFormat:l,dilations:c,dimRoundingMode:h}=s;_v([a,i],"conv2d");const d=g.convertConv2DDataFormat(l),p=g.computeConv2DInfo(a.shape,i.shape,o,c,u,h,!1,d),f=p.filterHeight,m=p.filterWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.padInfo.left,w=p.padInfo.top,k="channelsLast"===p.dataFormat,v=new ms(p.outShape,a.dtype),I=r.computeStrides(a.shape),N=r.computeStrides(i.shape),S=I[0],C=k?I[1]:I[2],$=k?I[2]:1,T=k?1:I[1],A=v.strides[0],E=k?v.strides[1]:v.strides[2],R=k?v.strides[2]:1,F=k?1:v.strides[1],D=n.data.get(a.dataId).values,_=n.data.get(i.dataId).values,O=v.values;for(let r=0;r<p.batchSize;++r){const e=r*S,t=r*A;for(let n=0;n<p.outHeight;++n){const r=t+n*E,s=n*p.strideHeight-w;for(let t=0;t<f;++t){const n=s+t*y;if(n<0||n>=p.inHeight)continue;const a=t*N[0],i=e+n*C;for(let e=0;e<p.outWidth;++e){const t=r+e*R,n=e*p.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*b;if(r<0||r>=p.inWidth)continue;const s=i+r*$;let o=a+e*N[1];for(let e=0;e<p.inChannels;++e){const n=D[s+e*T];for(let e=0;e<p.outChannels;++e)O[t+e*F]+=n*_[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,O)}const yN={kernelName:kt,backendName:"cpu",kernelFunc:gN},bN={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;_v([s,a],"conv2dBackpropFilter");const h=g.convertConv2DDataFormat(u),d=g.computeConv2DInfo(s.shape,c,i,1,o,l,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:y}=d,b="channelsLast"===d.dataFormat,x=new ms(d.filterShape,"float32"),w=d.padInfo.left,k=d.padInfo.top,v=n.data.get(s.dataId).values,I=n.data.get(a.dataId).values,N=new ms(s.shape,s.dtype,v),S=new ms(a.shape,a.dtype,I);for(let g=0;g<m;++g){const e=Math.max(0,Math.ceil((k-g)/p)),t=Math.min(d.outHeight,(d.inHeight+k-g)/p);for(let n=0;n<y;++n){const r=Math.max(0,Math.ceil((w-n)/f)),s=Math.min(d.outWidth,(d.inWidth+w-n)/f);for(let a=0;a<d.inChannels;++a)for(let i=0;i<d.outChannels;++i){let o=0;for(let u=0;u<d.batchSize;++u)for(let l=e;l<t;++l){const e=g+l*p-k;for(let t=r;t<s;++t){const r=n+t*f-w;o+=b?N.get(u,e,r,a)*S.get(u,l,t,i):N.get(u,a,e,r)*S.get(u,i,l,t)}}x.set(o,g,n,a,i)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},xN={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:u,pad:l,dataFormat:c,dimRoundingMode:h}=s;_v([a,i],"conv2dBackpropInput");const d=r.computeStrides(i.shape),p=r.computeStrides(a.shape);let f=g.convertConv2DDataFormat(c);const m=g.computeConv2DInfo(o,i.shape,u,1,l,h,!1,f),y=new ms(m.inShape,"float32"),b=y.values,x=n.data.get(a.dataId).values,w=n.data.get(i.dataId).values,[k,v,I]=d,{batchSize:N,filterHeight:S,filterWidth:C,inChannels:$,inHeight:T,inWidth:A,outChannels:E,outHeight:R,outWidth:F,strideHeight:D,strideWidth:_}=m,O=S-1-m.padInfo.top,M=C-1-m.padInfo.left,z="channelsLast"===(f=m.dataFormat),L=y.strides[0],P=z?y.strides[1]:y.strides[2],B=z?y.strides[2]:1,W=z?1:y.strides[1],V=p[0],U=z?p[1]:p[2],G=z?p[2]:1,H=z?1:p[1];for(let r=0;r<N;++r)for(let e=0;e<$;++e)for(let t=0;t<T;++t){const n=t-O,s=Math.max(0,Math.ceil(n/D)),a=Math.min(R,(S+n)/D);for(let i=0;i<A;++i){const o=i-M,u=Math.max(0,Math.ceil(o/_)),l=Math.min(F,(C+o)/_);let c=0;for(let t=s;t<a;++t){const s=t*D-n;for(let n=u;n<l;++n){const a=V*r+U*t+G*n,i=k*(S-1-s)+v*(C-1-(n*_-o))+I*e;for(let e=0;e<E;++e)c+=x[a+H*e]*w[i+e]}}b[L*r+P*t+B*i+W*e]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},wN={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l}=s;_v([a,i],"conv3d");const c=g.computeConv3DInfo(a.shape,i.shape,o,l,u),{filterDepth:h,filterHeight:d,filterWidth:p,dilationDepth:f,dilationHeight:m,dilationWidth:y,padInfo:b}=c,x=b.front,w=b.left,k=b.top,v=new ms(c.outShape,a.dtype),I=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,S=v.values,C=r.computeStrides(a.shape),$=r.computeStrides(i.shape);for(let r=0;r<c.batchSize;++r){const e=r*C[0],t=r*v.strides[0];for(let n=0;n<c.outDepth;++n){const r=t+n*v.strides[1],s=n*c.strideDepth-x;for(let t=0;t<h;++t){const n=s+t*f;if(n<0||n>=c.inDepth)continue;const a=t*$[0],i=e+n*C[1];for(let e=0;e<c.outHeight;++e){const t=r+e*v.strides[2],n=e*c.strideHeight-k;for(let e=0;e<d;++e){const r=n+e*m;if(r<0||r>=c.inHeight)continue;const s=a+e*$[1],o=i+r*C[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,r=e*c.strideWidth-w;for(let e=0;e<p;++e){const t=r+e*y;if(t<0||t>=c.inWidth)continue;const a=o+t*c.inChannels;let i=s+e*$[2];for(let e=0;e<c.inChannels;++e){const t=I[a+e];for(let e=0;e<c.outChannels;++e)S[n+e]+=t*N[i+e];i+=c.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},kN={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:u,filterShape:l}=s;_v([a,i],"conv3dBackpropFilterV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),d=g.computeConv3DInfo(a.shape,l,o,1,u),p=d.strideDepth,f=d.strideHeight,m=d.strideWidth,y=d.filterDepth,b=d.filterHeight,x=d.filterWidth,w=new ms(d.filterShape,"float32"),k=w.values,[v,I,N,S]=w.strides,C=n.data.get(i.dataId).values,[$,T,A,E]=h,R=n.data.get(a.dataId).values,[F,D,_,O]=c,M=d.padInfo.front,z=d.padInfo.left,L=d.padInfo.top;for(let r=0;r<y;++r){const e=Math.max(0,Math.ceil((M-r)/p)),t=Math.min(d.outDepth,(d.inDepth+M-r)/p),n=r*v;for(let s=0;s<b;++s){const a=Math.max(0,Math.ceil((L-s)/f)),i=Math.min(d.outHeight,(d.inHeight+L-s)/f),o=s*I+n;for(let n=0;n<x;++n){const u=Math.max(0,Math.ceil((z-n)/m)),l=Math.min(d.outWidth,(d.inWidth+z-n)/m),c=n*N+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let g=0;for(let h=0;h<d.batchSize;++h){const d=h*F,y=h*$;for(let h=e;h<t;++h){const e=(r+h*p-M)*D+d,t=h*T+y;for(let r=a;r<i;++r){const a=(s+r*f-L)*_+e,i=r*A+t;for(let e=u;e<l;++e)g+=R[(n+e*m-z)*O+a+o]*C[e*E+i+c]}}}k[h+c]=g}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},vN={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:u,inputShape:l}=s;_v([a],"conv3dBackpropInputV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),d=g.computeConv3DInfo(l,i.shape,u,1,o),p=new ms(d.inShape,"float32"),f=p.values,[m,y,b,x]=p.strides,w=n.data.get(a.dataId).values,[k,v,I,N]=c,S=n.data.get(i.dataId).values,[C,$,T,A]=h,{batchSize:E,filterDepth:R,filterHeight:F,filterWidth:D,inChannels:_,inDepth:O,inHeight:M,inWidth:z,outChannels:L,outDepth:P,outHeight:B,outWidth:W,strideDepth:V,strideHeight:U,strideWidth:G}=d,H=R-1-d.padInfo.front,j=F-1-d.padInfo.top,q=D-1-d.padInfo.left;for(let r=0;r<E;++r)for(let e=0;e<_;++e)for(let t=0;t<O;++t){const n=t-H,s=Math.max(0,Math.ceil(n/V)),a=Math.min(P,(R+n)/V);for(let i=0;i<M;++i){const o=i-j,u=Math.max(0,Math.ceil(o/U)),l=Math.min(B,(F+o)/U);for(let c=0;c<z;++c){const h=c-q,d=Math.max(0,Math.ceil(h/G)),p=Math.min(W,(D+h)/G);let g=0;for(let t=s;t<a;++t){const s=t*V-n;for(let n=u;n<l;++n){const a=n*U-o;for(let i=d;i<p;++i){const o=k*r+v*t+I*n+N*i,u=C*(R-1-s)+$*(F-1-a)+T*(D-1-(i*G-h))+A*e;for(let e=0;e<L;++e)g+=w[o+e]*S[u+e]}}}f[m*r+y*t+b*i+x*c+e]=g}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},IN=zv($t,e=>Math.cos(e)),NN={kernelName:$t,backendName:"cpu",kernelFunc:IN},SN=zv(Tt,e=>Math.cosh(e)),CN={kernelName:Tt,backendName:"cpu",kernelFunc:SN},$N={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:u,method:l,extrapolationValue:c}=s,[h,d,p,f]=a.shape,m=i.shape[0],[g,y]=u,b=ja([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,w=n.data.get(o.dataId).values,k=n.data.get(a.dataId).values,v=r.computeStrides(a.shape),I=r.computeStrides(b.shape);for(let r=0;r<m;r++){const e=4*r,t=x[e],n=x[e+1],s=x[e+2],a=x[e+3],i=w[r];if(i>=h)continue;const o=g>1?(s-t)*(d-1)/(g-1):0,u=y>1?(a-n)*(p-1)/(y-1):0;for(let h=0;h<g;h++){const e=g>1?t*(d-1)+h*o:.5*(t+s)*(d-1);if(e<0||e>d-1)for(let t=0;t<y;t++)for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=c;else if("bilinear"===l){const t=Math.floor(e),s=Math.ceil(e),o=e-t;for(let e=0;e<y;e++){const l=y>1?n*(p-1)+e*u:.5*(n+a)*(p-1);if(l<0||l>p-1){for(let t=0;t<f;t++)b.values[t+e*I[2]+h*I[1]+r*I[0]]=c;continue}const d=Math.floor(l),m=Math.ceil(l),g=l-d;for(let n=0;n<f;n++){let a=n+d*v[2]+t*v[1]+i*v[0];const u=k[a],l=k[a=n+m*v[2]+t*v[1]+i*v[0]],c=k[a=n+d*v[2]+s*v[1]+i*v[0]],p=k[a=n+m*v[2]+s*v[1]+i*v[0]],f=u+(l-u)*g;b.values[a=n+e*I[2]+h*I[1]+r*I[0]]=f+(c+(p-c)*g-f)*o}}}else for(let t=0;t<y;++t){const s=y>1?n*(p-1)+t*u:.5*(n+a)*(p-1);if(s<0||s>p-1){for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=c;continue}const o=Math.round(s),l=Math.round(e);for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=k[e+o*v[2]+l*v[1]+i*v[0]]}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},TN={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:u}=s;_v(a,"cumsum");const l=g.getAxesPermutation([i],a.shape.length);let c=a;null!=l&&(c=CI({inputs:{x:a},backend:n,attrs:{perm:l}}));const h=g.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error("backend.cumsum in CPU expects an inner-most "+`axis=${c.shape.length-1} but got axis=${h}`);const d=Ts(c.dtype,"int32"),p=r.makeZerosTypedArray(r.sizeFromShape(c.shape),d),f=n.data.get(c.dataId).values,m=c.shape[c.shape.length-1],y=u?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let r=0;r<f.length;r+=m)for(let e=0;e<m;e++){const t=y(r,e);if(0===e)p[t]=o?0:f[t];else{const n=y(r,e-1);p[t]=o?f[n]+p[n]:f[t]+p[n]}}const b=n.makeTensorInfo(c.shape,d,p);if(null!=l){const e=CI({inputs:{x:b},backend:n,attrs:{perm:g.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),e}return b}},AN={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=tN(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=nN(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+`${s.shape.length}.`)}},EN={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.assert("NHWC"===o,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`),r.assert(i>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`);const u=a.shape[0],l=a.shape[1],c=a.shape[2],h=a.shape[3],d=l*i,p=c*i,f=h/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(u*d*p*f);let y=0;for(let r=0;r<u;++r)for(let e=0;e<d;++e){const t=Math.floor(e/i),n=e%i;for(let e=0;e<p;++e){const s=Math.floor(e/i),a=(n*i+e%i)*f;for(let e=0;e<f;++e)g[y++]=m[e+a+h*(s+c*(t+l*r))]}}return n.makeTensorInfo([u,d,p,f],a.dtype,g)}};function RN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=s;_v([a,i],"depthwiseConv2DNative");const h=r.computeStrides(a.shape),d=r.computeStrides(i.shape);let p=l;null==p&&(p=[1,1]),r.assert(g.eitherStridesOrDilationsAreOne(o,p),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+`1. Got strides ${o} and dilations '${p}'`);const f=g.computeConv2DInfo(a.shape,i.shape,o,p,u,c,!0),{filterHeight:m,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:w}=f,k=w.left,v=w.top,I=f.outChannels/f.inChannels,N=new ms(f.outShape,a.dtype),S=n.data.get(a.dataId).values,C=n.data.get(i.dataId).values,$=N.values;for(let r=0;r<f.batchSize;++r){const e=r*h[0],t=r*N.strides[0];for(let n=0;n<f.outHeight;++n){const r=t+n*N.strides[1],s=n*f.strideHeight-k;for(let t=0;t<m;++t){const n=s+t*b;if(n<0||n>=f.inHeight)continue;const a=t*d[0],i=e+n*h[1];for(let e=0;e<f.outWidth;++e){const t=r+e*N.strides[2],n=e*f.strideWidth-v;for(let e=0;e<y;++e){const r=n+e*x;if(r<0||r>=f.inWidth)continue;const s=i+r*f.inChannels;let o=t,u=a+e*d[1];for(let e=0;e<f.inChannels;++e){const t=S[s+e];for(let e=0;e<I;++e)$[o+e]+=t*C[u+e];o+=I,u+=I}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const FN={kernelName:Dt,backendName:"cpu",kernelFunc:RN},DN={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;_v([s,a],"depthwiseConv2dNativeBackpropFilter");const h=g.computeConv2DInfo(s.shape,c,i,o,u,l,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,y=new ms(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,w=h.outChannels/h.inChannels,k=n.data.get(s.dataId).values,v=new ms(s.shape,s.dtype,k),I=n.data.get(a.dataId).values,N=new ms(a.shape,a.dtype,I);for(let g=0;g<f;++g){const e=Math.max(0,Math.ceil((x-g)/d)),t=Math.min(h.outHeight,(h.inHeight+x-g)/d);for(let n=0;n<m;++n){const r=Math.max(0,Math.ceil((b-n)/p)),s=Math.min(h.outWidth,(h.inWidth+b-n)/p);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/w),o=a%w;let u=0;for(let l=0;l<h.batchSize;++l)for(let o=e;o<t;++o){const e=g+o*d-x;for(let t=r;t<s;++t)u+=v.get(l,e,n+t*p-b,i)*N.get(l,o,t,a)}y.set(u,g,n,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},_N={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:u,pad:l,dimRoundingMode:c,inputShape:h}=s;_v([a,i],"depthwiseConv2DNativeBackpropInput");const d=r.computeStrides(a.shape),p=r.computeStrides(i.shape),f=g.computeConv2DInfo(h,i.shape,o,u,l,c,!0),m=new ms(f.inShape,"float32"),y=m.values,[b,x,w]=m.strides,k=n.data.get(a.dataId).values,[v,I,N]=d,S=n.data.get(i.dataId).values,[C,$,T]=p,{batchSize:A,filterHeight:E,filterWidth:R,inChannels:F,inHeight:D,inWidth:_,outChannels:O,outHeight:M,outWidth:z,strideHeight:L,strideWidth:P}=f,B=E-1-f.padInfo.top,W=R-1-f.padInfo.left,V=O/F;for(let r=0;r<A;++r)for(let e=0;e<F;++e)for(let t=0;t<D;++t){const n=t-B,s=Math.max(0,Math.ceil(n/L)),a=Math.min(M,(E+n)/L);for(let i=0;i<_;++i){const o=i-W,u=Math.max(0,Math.ceil(o/P)),l=Math.min(z,(R+o)/P);let c=0;for(let t=s;t<a;++t){const s=t*L-n;for(let n=u;n<l;++n){const a=v*r+I*t+N*n,i=C*(E-1-s)+$*(R-1-(n*P-o))+T*e;for(let t=0;t<V;++t)c+=k[a+(e*V+t)]*S[i+t]}}y[b*r+x*t+w*i+e]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},ON={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=r.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,o=ja([a,a],s.dtype),u=o.values;for(let r=0;r<i.length;r++)u[r*a+r]=i[r];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},MN={kernelName:zt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=l.data.get(s.dataId).values,h=s.shape.length,d=l.data.get(a.dataId).values,p=a.shape.length,{batchSize:f,inHeight:m,inWidth:y,inChannels:b,outHeight:x,outWidth:w,padInfo:k,strideHeight:v,strideWidth:I,filterHeight:N,filterWidth:S,dilationHeight:C,dilationWidth:$,outShape:T}=g.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",u),A=r.sizeFromShape(T),E=T.length,R=r.getArrayFromDType(s.dtype,A);for(let g=0;g<f;++g)for(let e=0;e<x;++e){const t=e*v-k.top;for(let n=0;n<w;++n){const i=n*I-k.left;for(let o=0;o<b;++o){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<N;++e){const n=t+e*C;if(n>=0&&n<m)for(let t=0;t<S;++t){const l=i+t*$;if(l>=0&&l<y){const i=r.locToIndex([g,n,l,o],h,r.computeStrides(s.shape)),f=r.locToIndex([e,t,o],p,r.computeStrides(a.shape)),m=c[i]+d[f];m>u&&(u=m)}}}R[r.locToIndex([g,e,n,o],E,r.computeStrides(T))]=u}}}return{dataId:l.write(r.toTypedArray(R,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},zN={kernelName:Pt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),d=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:$}=g.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l);r.assert(i.rank===$.length,()=>`Error in ${Pt}, dy `+`must have the same rank as output ${$.length}, but got `+`${i.rank}`);const T=r.toNestedArray($,c.data.get(i.dataId).values),A=r.makeZerosNestedTypedArray(a.shape,a.dtype);for(let r=0;r<p;++r)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const s=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<f)for(let t=0;t<N;++t){const l=s+t*C;if(l>=0&&l<m){const s=h[r][n][l][a]+d[e][t][a];s>i&&(i=s,o=e,u=t)}}}A[o][u][a]+=T[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(A,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},LN={kernelName:Lt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),d=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:$}=g.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l);r.assert(i.rank===$.length,()=>`Error in ${Lt}, dy `+`must have the same rank as output ${$.length}, but got `+`${i.rank}`);const T=r.toNestedArray($,c.data.get(i.dataId).values),A=r.makeZerosNestedTypedArray(s.shape,s.dtype);for(let r=0;r<p;++r)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const s=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=t<0?0:t,u=s<0?0:s;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<f)for(let t=0;t<N;++t){const l=s+t*C;if(l>=0&&l<m){const s=h[r][n][l][a]+d[e][t][a];s>i&&(i=s,o=n,u=l)}}}A[r][o][u][a]+=T[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(A,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},PN={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;_v([s,a],"eluGrad");const i=new Float32Array(r.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values;for(let r=0;r<o.length;++r){const e=o[r];i[r]=e>=1?u[r]:u[r]*(e+1)}return n.makeTensorInfo(a.shape,"float32",i)}},BN=Hv((e,t)=>e===t?1:0),WN=oI(Gt,BN,null,"bool"),VN={kernelName:Gt,backendName:"cpu",kernelFunc:WN},UN=g.ERF_P,GN=g.ERF_A1,HN=g.ERF_A2,jN=g.ERF_A3,qN=g.ERF_A4,KN=g.ERF_A5,XN=zv(Ut,e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+UN*n);return t*(1-((((KN*r+qN)*r+jN)*r+HN)*r+GN)*r*Math.exp(-n*n))}),YN={kernelName:Ut,backendName:"cpu",kernelFunc:XN},ZN=sN(e=>Math.exp(e)),JN=Lv(Ht,ZN),QN={kernelName:Ht,backendName:"cpu",kernelFunc:JN};function eS(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:i}=s,o=a.shape.length,u=a.shape.slice();let l=i;return i<0&&(r.assert(-(o+1)<=i,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+i+1),u.splice(l,0,1),pI({inputs:{x:a},backend:n,attrs:{shape:u}})}const tS={kernelName:jt,backendName:"cpu",kernelFunc:eS},nS=sN(e=>Math.expm1(e)),rS=Lv(qt,nS),sS={kernelName:qt,backendName:"cpu",kernelFunc:rS},aS=Hv((e,t)=>e*t),iS=uI((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),oS=oI(Mn,aS,iS),uS={kernelName:Mn,backendName:"cpu",kernelFunc:oS},lS=Hv((e,t)=>e/t),cS=oI(Bt,lS),hS={kernelName:Bt,backendName:"cpu",kernelFunc:cS},dS=Hv((e,t)=>e-t),pS=uI((e,t,n,r)=>({real:e-n,imag:t-r})),fS=oI(Sr,dS,pS),mS={kernelName:Sr,backendName:"cpu",kernelFunc:fS};function gS(e,t,n){const s=e.shape,a=s[0],i=s[1],o=n.data.get(e.dataId),u=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,c=[a,i],h=r.sizeFromShape(c),d=r.getTypedArrayFromDType("float32",h),p=r.getTypedArrayFromDType("float32",h);for(let r=0;r<a;r++){const e=JI({inputs:{x:u},backend:n,attrs:{begin:[r,0],size:[1,i]}}),s=JI({inputs:{x:l},backend:n,attrs:{begin:[r,0],size:[1,i]}}),a=eI({inputs:{real:e,imag:s},backend:n}),{real:o,imag:c}=yS(a,t,n),h=g.mergeRealAndImagArrays(o,c);for(let t=0;t<i;t++){const e=g.getComplexWithIndex(h,t);d[r*i+t]=e.real,p[r*i+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a)}const f=n.makeTensorInfo(c,"float32",d),m=n.makeTensorInfo(c,"float32",p),y=eI({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),y}function yS(e,t,n){const s=r.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((u=s)&u-1)){const a=function e(t,n,r,s,a){if(1===r)return{real:t,imag:n};const i=g.mergeRealAndImagArrays(t,n),o=r/2,u=g.complexWithEvenIndex(i),l=u.real,c=u.imag,h=[l.length],d=a.makeTensorInfo(h,"float32",l),p=a.makeTensorInfo(h,"float32",c),f=eI({inputs:{real:d,imag:p},backend:a}),m=g.complexWithOddIndex(i),y=m.real,b=m.imag,x=[y.length],w=a.makeTensorInfo(x,"float32",y),k=a.makeTensorInfo(x,"float32",b),v=eI({inputs:{real:w,imag:k},backend:a}),I=e(l,c,o,s,a),N=I.real,S=I.imag,C=[N.length],$=a.makeTensorInfo(C,"float32",N),T=a.makeTensorInfo(C,"float32",S),A=eI({inputs:{real:$,imag:T},backend:a}),E=e(y,b,o,s,a),R=E.real,F=E.imag,D=[R.length],_=a.makeTensorInfo(D,"float32",R),O=a.makeTensorInfo(D,"float32",F),M=eI({inputs:{real:_,imag:O},backend:a}),z=g.exponents(r,s),L=[z.real.length],P=a.makeTensorInfo(L,"float32",z.real),B=a.makeTensorInfo(L,"float32",z.imag),W=eI({inputs:{real:P,imag:B},backend:a}),V=oS({inputs:{a:W,b:M},backend:a}),U=hI({inputs:{a:A,b:V},backend:a}),G=fS({inputs:{a:A,b:V},backend:a}),H=rI({inputs:{input:U},backend:a}),j=rI({inputs:{input:G},backend:a}),q=dN({inputs:{input:U},backend:a}),K=dN({inputs:{input:G},backend:a}),X=fN({inputs:[H,j],backend:a,attrs:{axis:0}}),Y=fN({inputs:[q,K],backend:a,attrs:{axis:0}}),Z=a.data.get(X.dataId).values,J=a.data.get(Y.dataId).values;return a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(k),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(A),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(M),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(Y),{real:Z,imag:J}}(i,o,s,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",a.real),t=n.makeTensorInfo(u,"float32",a.imag),i=n.makeTensorInfo([],"float32",r.createScalarValue(s,"float32")),o=Wv({inputs:{x:i},backend:n}),l=hS.kernelFunc({inputs:{a:e,b:i},backend:n}),c=hS.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(l.dataId).values,d=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),{real:h,imag:d}}return a}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=g.exponent(s*r,t,n),u=g.getComplexWithIndex(e,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=t,i/=t),g.assignToTypedArray(r,a,i,s)}return r}(g.mergeRealAndImagArrays(i,o),s,t);return g.splitRealAndImagArrays(e)}var u}const bS={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=pI({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),u=gS(o,!1,n),l=pI({inputs:{x:u},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};function xS(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:i}=n,o=i||r.inferDtype(a),u=r.getArrayFromDType(o,r.sizeFromShape(s));return function(e,t,n){e.fill(t)}(u,a),t.makeTensorInfo(s,o,u)}const wS={kernelName:Xt,backendName:"cpu",kernelFunc:xS},kS={kernelName:Yt,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=r.getTypedArrayFromDType(n.dtype,r.sizeFromShape(n.shape)),[i,o,u,l]=n.shape,c=s.data.get(n.dataId).values;for(let r=0;r<i;r++){const e=r*u*o*l;for(let t=0;t<o;t++){const n=t*(u*l);for(let r=0;r<u;r++){const s=r*l;for(let o=0;o<l;o++){const h=Math.round(u-[i,t,r,o][2]),d=e+n+s+o;let p=c[d];h>=0&&h<u&&(p=c[e+n+h*l+o]),a[d]=p}}}}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},vS=sN(e=>Math.floor(e)),IS=Lv(Zt,vS),NS={kernelName:Zt,backendName:"cpu",kernelFunc:IS},SS=Hv((e,t)=>Math.floor(e/t)),CS=oI(Jt,SS,null,"int32"),$S={kernelName:Jt,backendName:"cpu",kernelFunc:CS},TS={kernelName:Wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=gN({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=hI({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=Qv(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}},AS={kernelName:Vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=RN({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=hI({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=Qv(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}},ES={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=r.sizeFromShape(s.shape),o=a.shape,u=o[o.length-1],[l,c,h,d]=g.prepareAndValidate(s,a);if(0===c)return n.makeTensorInfo(l,s.dtype,[]);const p=ja([c,h],s.dtype),f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values;for(let r=0;r<c;r++){const e=[];let t=0;for(let n=0;n<u;n++){const s=f[r*u+n];t+=s*d[n],e.push(s)}if(t<0||t>=i/h)throw new Error(`Invalid indices: ${e} does not index into ${s.shape}`);for(let n=0;n<h;n++)p.values[r*h+n]=m[t*h+n]}return n.makeTensorInfo(l,p.dtype,p.values)}};function RS(e,t,n){const r=ja(n,e.dtype);for(let s=0;s<r.size;++s){const n=r.indexToLoc(s).slice(),a=t.locToIndex([n[0],n[2]]);n[2]=t.values[a];const i=e.locToIndex(n);r.values[s]=e.values[i]}return r}const FS={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=s;_v([a,i],"gatherV2");let l=u;null==u&&(l=0);const c=r.sizeFromShape(i.shape),h=r.parseAxisParam(o,a.shape)[0],d=g.segment_util.collectGatherOpShapeInfo(a,i,h,l),p=pI({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),f=pI({inputs:{x:i},backend:n,attrs:{shape:[d.batchSize,c/d.batchSize]}}),m=[d.batchSize,d.outerSize,c/d.batchSize,d.sliceSize],y=n.bufferSync(f),b=RS(n.bufferSync(p),y,m);return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},DS=Hv((e,t)=>e>t?1:0),_S=oI(nn,DS,null,"bool"),OS={kernelName:nn,backendName:"cpu",kernelFunc:_S},MS=Hv((e,t)=>e>=t?1:0),zS=oI(rn,MS,null,"bool"),LS={kernelName:rn,backendName:"cpu",kernelFunc:zS},PS={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=pI({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),u=gS(o,!0,n),l=pI({inputs:{x:u},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}},BS=zv(un,e=>Number.isFinite(e)?1:0,"bool"),WS={kernelName:un,backendName:"cpu",kernelFunc:BS},VS=zv(ln,e=>Math.abs(e)===1/0?1:0,"bool"),US={kernelName:ln,backendName:"cpu",kernelFunc:VS},GS=zv(cn,e=>Number.isNaN(e)?1:0,"bool"),HS={kernelName:cn,backendName:"cpu",kernelFunc:GS},jS=Hv((e,t)=>e<t?1:0),qS=oI(dn,jS,null,"bool"),KS={kernelName:dn,backendName:"cpu",kernelFunc:qS},XS=Hv((e,t)=>e<=t?1:0),YS=oI(pn,XS,null,"bool"),ZS={kernelName:pn,backendName:"cpu",kernelFunc:YS};function JS(e,t,n){const s=(t-e)/(n-1),a=r.makeZerosTypedArray(n,"float32");a[0]=e;for(let r=1;r<a.length;r++)a[r]=a[r-1]+s;return a}const QS={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=JS(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},eC=sN(e=>Math.log(e)),tC=Lv(mn,eC),nC={kernelName:mn,backendName:"cpu",kernelFunc:tC},rC=zv(gn,e=>Math.log1p(e)),sC={kernelName:gn,backendName:"cpu",kernelFunc:rC},aC=Hv((e,t)=>e&&t),iC=oI(yn,aC,null,"bool"),oC={kernelName:yn,backendName:"cpu",kernelFunc:iC},uC=zv(bn,e=>e?0:1,"bool"),lC={kernelName:bn,backendName:"cpu",kernelFunc:uC},cC=Hv((e,t)=>e||t),hC=oI(xn,cC,null,"bool"),dC={kernelName:xn,backendName:"cpu",kernelFunc:hC},pC={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:u,beta:l}=s;_v(a,"LRN");const c=a.shape[3],h=c-1,d=n.data.get(a.dataId).values,p=r.sizeFromShape(a.shape),f=new Float32Array(p);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,h);let s=0;for(;n<=r;n++){const e=d[n];s+=e*e}return s}for(let r=0;r<p;r++){const e=m(r),t=d[r]*Math.pow(o+u*e,-l);f[r]=t}return n.makeTensorInfo(a.shape,a.dtype,f)}},fC={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:i,dy:o}=t,{depthRadius:u,bias:l,alpha:c,beta:h}=s;_v(o,"LRNGrad");const d=r.sizeFromShape(o.shape),p=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(d),b=d;for(let r=0;r<b;r++){const e=r%p,t=r-e+Math.max(0,e-u),n=r-e+Math.min(p,e+u+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(m[r],2);s=c*s+l;for(let a=t;a<n;a++){let e=-2*c*h*m[a]*g[r]/s;r===a&&(e+=Math.pow(s,-h)),y[a]+=e*=f[r]}}return n.makeTensorInfo(o.shape,a.dtype,y)}};function mC(e,t,n,s){const a=r.getTypedArrayFromDType(s,r.sizeFromShape(n));for(let r=0;r<a.length;++r){const n=r*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];t>s&&(s=t)}a[r]=s}return a}function gC(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,u=n;let l=a.shape;const c=l.length,h=r.parseAxisParam(i,l);let d=h;const p=g.getAxesPermutation(d,c);let f=u.data.get(a.dataId).values;if(null!=p){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=l[p[t]];f=SI(f,l,a.dtype,p,e),d=g.getInnerMostAxes(d.length,c),l=e}_v(a,"max"),g.assertAxesAreInnerMostDims("max",d,c);const[m,y]=g.computeOutAndReduceShapes(l,d),b=mC(f,r.sizeFromShape(y),m,a.dtype),x=u.write(b,m,a.dtype);let w=m;return o&&(w=g.expandShapeToKeepDim(m,h)),{dataId:x,shape:w,dtype:a.dtype}}const yC={kernelName:In,backendName:"cpu",kernelFunc:gC},bC=Hv((e,t)=>Math.max(e,t)),xC=oI(Nn,bC),wC={kernelName:Nn,backendName:"cpu",kernelFunc:xC},kC={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;_v(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(g.eitherStridesOrDilationsAreOne(o,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+`Got strides ${o} and dilations '1'`);const c=g.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=Wv({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=UI(e,0,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},vC={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=s;_v(a,"maxPool3d");const h=g.computePool3DInfo(a.shape,i,o,1,u,l,c),d=HI(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),h,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},IC={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;_v([s,a],"maxPool3DGrad");const c=g.computePool3DInfo(a.shape,i,o,1,u,l),h=function(e,t){const n=ja(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-d;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-p;let d=l;for(;d<0;)d+=o;const k=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const p=s*a-f;let v=p;for(;v<0;)v+=u;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=d;r<k;r+=o){const s=r-l;for(let a=v;a<I;a+=u){const i=a-p,o=e.get(m,t,r,a,g);o>=N&&(N=o,S=n*c*h+s*c+i)}}}n.set(S,m,y,r,s,g)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,b=c.dilationWidth,x=c.effectiveFilterDepth,w=c.effectiveFilterHeight,k=c.effectiveFilterWidth,v=x-1-c.padInfo.front,I=k-1-c.padInfo.left,N=w-1-c.padInfo.top,S=ja(a.shape,"float32"),C=n.bufferSync(s);for(let g=0;g<c.batchSize;++g)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=t-v,a=n-N,i=r-I;let o=0;for(let t=0;t<x;t+=m){const n=(s+t)/d;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let r=0;r<w;r+=y){const s=(a+r)/p;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let a=0;a<k;a+=b){const u=(i+a)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const l=x*w*k-1-h.get(g,n,s,u,e)===t*w*k+r*k+a?1:0;0!==l&&(o+=C.get(g,n,s,u,e)*l)}}}S.set(o,g,t,n,r,e)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},NC={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;_v([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,d=g.computePool2DInfo(o.shape,u,l,1,c,h),p=n.data.get(o.dataId).values,f=ja(d.outShape,o.dtype,GI(p,o.shape,o.dtype,d).values),m=d.strideHeight,y=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,w=d.effectiveFilterHeight,k=d.effectiveFilterWidth,v=k-1-d.padInfo.left,I=w-1-d.padInfo.top,N=ja(o.shape,"float32"),S=n.data.get(s.dataId).values,C=ja(s.shape,"float32",S);for(let g=0;g<d.batchSize;++g)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const r=t-I,s=n-v;let a=0;for(let t=0;t<w;t+=b){const n=(r+t)/m;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let r=0;r<k;r+=x){const i=(s+r)/y;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const o=w*k-1-f.get(g,n,i,e)===t*k+r?1:0;0!==o&&(a+=C.get(g,n,i,e)*o)}}N.set(a,g,t,n,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},SC={kernelName:An,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,l=n;_v(s,"MaxPoolWithArgmax");const c=l.data.get(s.dataId).values,h=g.computePool2DInfo(s.shape,a,i,[1,1],o),[d,p]=function(e,t,n,s,a){const i=UI(e,0,n,r.computeStrides(t),a,"max"),o=GI(e,t,n,a,!0,s);return[i.values,o.values]}(c,s.shape,s.dtype,u,h),f=l.write(d,h.outShape,s.dtype),m=l.write(p,h.outShape,s.dtype);return[{dataId:f,shape:h.outShape,dtype:s.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}};function CC(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;let u;_v(a,"sum");const l=(u="bool"===a.dtype?aI({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):Wv({inputs:{x:a},backend:n})).shape.length,c=r.parseAxisParam(i,u.shape),h=g.getAxesPermutation(c,l);let d=c,p=u;null!=h&&(p=CI({inputs:{x:u},backend:n,attrs:{perm:h}}),d=g.getInnerMostAxes(d.length,l)),g.assertAxesAreInnerMostDims("sum",d,p.shape.length);const[f,m]=g.computeOutAndReduceShapes(p.shape,d);let y=nI(n,f,g.upcastType(p.dtype,"int32"));const b=r.sizeFromShape(m),x=n.data.get(y.dataId).values,w=n.data.get(p.dataId).values;for(let r=0;r<x.length;++r){const e=r*b;let t=0;for(let n=0;n<b;++n)t+=w[e+n];x[r]=t}if(o){const e=y;y=pI({inputs:{x:y},backend:n,attrs:{shape:g.expandShapeToKeepDim(y.shape,c)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(u),null!=h&&n.disposeIntermediateTensorInfo(p),y}const $C={kernelName:xr,backendName:"cpu",kernelFunc:CC},TC={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=r.parseAxisParam(i,a.shape),l=g.computeOutAndReduceShapes(a.shape,u),c=r.sizeFromShape(l[1]),h=[],d=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=aI({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(p);const f=cS({inputs:{a:p,b:d},backend:n});h.push(f);const m=CC({inputs:{x:f},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}},AC={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;_v(a,"min");const u=r.parseAxisParam(i,a.shape);let l=u;const c=g.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=CI({inputs:{x:a},backend:n,attrs:{perm:c}}),l=g.getInnerMostAxes(l.length,a.shape.length)),g.assertAxesAreInnerMostDims("min",l,h.shape.length);const[d,p]=g.computeOutAndReduceShapes(h.shape,l),f=r.sizeFromShape(p),m=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<m.length;++r){const e=r*f;let t=y[e];for(let n=0;n<f;++n){const r=y[e+n];r<t&&(t=r)}m[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,m);if(o){const e=pI({inputs:{x:b},backend:n,attrs:{shape:g.expandShapeToKeepDim(d,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},EC=Hv((e,t)=>Math.min(e,t)),RC=oI(Fn,EC),FC={kernelName:Fn,backendName:"cpu",kernelFunc:RC},DC={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,mode:o}=s;_v(a,"mirrorPad");const u=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),c=i.map((e,t)=>e[0]+a.shape[t]),h="reflect"===o?0:1,d=n.data.get(a.dataId).values,p=a.shape.length,f=r.computeStrides(a.shape),m=r.sizeFromShape(u),g=u.length,y=r.computeStrides(u),b=r.getTypedArrayFromDType(a.dtype,m);for(let x=0;x<m;x++){let e=r.indexToLoc(x,g,y);for(let n=0;n<g;n++)e[n]<l[n]?e[n]=2*l[n]-e[n]-h:e[n]>=c[n]&&(e[n]=2*(c[n]-1)-e[n]+h);e=e.map((e,t)=>e-l[t]);const t=r.locToIndex(e,p,f);b[x]=d[t]}return{dataId:n.write(b,u,a.dtype),shape:u,dtype:a.dtype}}},_C=Hv((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),OC=oI(_n,_C),MC={kernelName:_n,backendName:"cpu",kernelFunc:OC};function zC(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=a.shape.length;let u=i;if(-1===u&&(u=o-1),u!==o-1)throw Error("Softmax along a non-last dimension is not yet supported. "+`Logits was rank ${o} and dim was ${u}`);const l=r.parseAxisParam([u],a.shape),c=gC({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),h=g.expandShapeToKeepDim(c.shape,l),d=pI({inputs:{x:c},backend:n,attrs:{shape:h}}),p=fS({inputs:{a:a,b:d},backend:n}),f=JN({inputs:{x:p},backend:n}),m=CC({inputs:{x:f},backend:n,attrs:{axis:l,keepDims:!1}}),y=pI({inputs:{x:m},backend:n,attrs:{shape:h}}),b=cS({inputs:{a:f,b:y},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}const LC={kernelName:vr,backendName:"cpu",kernelFunc:zC},PC={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:u}=s;_v(a,"multinomial");const l=u?a:zC({inputs:{logits:a},backend:n,attrs:{dim:-1}}),c=l.shape[0],h=l.shape[1],d=n.data.get(l.dataId).values,p=[c,i],f=r.makeZerosTypedArray(r.sizeFromShape(p),"int32");for(let r=0;r<c;++r){const e=r*h,t=new Float32Array(h-1);t[0]=d[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+d[e+r];const n=Rc.alea(o.toString()),s=r*i;for(let r=0;r<i;++r){const e=n();f[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){f[s+r]=n;break}}}return u||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",f)}};function BC(e,t,n){const s=r.createScalarValue(-1,n);return aS([],t,s,e,n)}const WC={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;_v(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=BC(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},VC=y.nonMaxSuppressionV3Impl,UC={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;_v(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=VC(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},GC=y.nonMaxSuppressionV4Impl,HC={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r;_v(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=GC(c,h,i,o,u,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},jC=y.nonMaxSuppressionV5Impl,qC={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r;_v(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,d=i,p=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=jC(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},KC=Hv((e,t)=>e!==t?1:0),XC=oI(Ln,KC,null,"bool"),YC={kernelName:Ln,backendName:"cpu",kernelFunc:XC},ZC={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:i,onValue:o,offValue:u}=s;_v(a,"oneHot");const l=r.sizeFromShape(a.shape),c=new Float32Array(l*i);c.fill(u);const h=n.data.get(a.dataId).values;for(let r=0;r<l;++r)h[r]>=0&&h[r]<i&&(c[r*i+h[r]]=o);return n.makeTensorInfo([...a.shape,i],"int32",c)}};function JC(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=rI({inputs:{input:r},backend:n}),t=JC({inputs:{x:e},backend:n}),s=dN({inputs:{input:r},backend:n}),a=JC({inputs:{x:s},backend:n}),i=eI({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return xS({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const QC={kernelName:Mr,backendName:"cpu",kernelFunc:JC},e$={kernelName:Vn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=rI({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=dN({inputs:{input:s},backend:r}),i=JC({inputs:{x:a},backend:r}),o=eI({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return xS({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function t$(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return eS({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],l=fN({inputs:t.map(e=>{const t=eS({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t}),backend:n,attrs:{axis:a}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}const n$={kernelName:Gn,backendName:"cpu",kernelFunc:t$},r$={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;_v(a,"pad");const u=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),c=n.data.get(a.dataId).values,h=r.sizeFromShape(a.shape),d=a.shape.length,p=r.computeStrides(a.shape),f=r.sizeFromShape(u),m=u.length,g=r.computeStrides(u),y=r.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let b=0;b<h;b++){const e=r.indexToLoc(b,d,p).map((e,t)=>e+l[t]);y[r.locToIndex(e,m,g)]=c[b]}return{dataId:n.write(y,u,a.dtype),shape:u,dtype:a.dtype}}},s$=Hv((e,t)=>Math.pow(e,t)),a$=oI(qn,s$),i$={kernelName:qn,backendName:"cpu",kernelFunc:a$};function o$(e,t,n,s){const[a,i]=g.computeOutAndReduceShapes(e,s),o=Ts(t,"int32"),u=r.makeZerosTypedArray(r.sizeFromShape(a),o),l=r.sizeFromShape(i);for(let r=0;r<u.length;++r){const e=r*l;let t=1;for(let r=0;r<l;++r)t*=n[e+r];u[r]=t}return{outVals:u,outShape:a,outDtype:o}}const u$={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;_v(a,"prod");const u=a.shape.length,l=r.parseAxisParam(i,a.shape),c=g.getAxesPermutation(l,u);let h=l,d=a;const p=[];null!=c&&(d=CI({inputs:{x:a},backend:n,attrs:{perm:c}}),p.push(d),h=g.getInnerMostAxes(h.length,u));const f=n.data.get(d.dataId).values,{outVals:m,outShape:y,outDtype:b}=o$(d.shape,d.dtype,f,h);let x=y;return o&&(x=g.expandShapeToKeepDim(y,l)),p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(x,b,m)}};function l$(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return r.makeZerosTypedArray(0,s);const a=Math.abs(Math.ceil((t-e)/n)),i=r.makeZerosTypedArray(a,s);t<e&&1===n&&(n=-1),i[0]=e;for(let r=1;r<i.length;r++)i[r]=i[r-1]+n;return i}const c$={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=l$(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},h$=zv(Jn,e=>1/e),d$={kernelName:Jn,backendName:"cpu",kernelFunc:h$},p$={kernelName:rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=s;_v(a,"resizeBilinear");const l=r.computeStrides(a.shape),[c,h]=u,[d,p,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(r.sizeFromShape([d,c,h,m])),b=[i&&c>1?p-1:p,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let w=0;const k=b[0]/x[0],v=b[1]/x[1];for(let r=0;r<d;r++)for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(p-1,Math.ceil(t)),i=r*l[0]+n*l[1],u=r*l[0]+a*l[1];for(let e=0;e<h;e++){let t;t=o?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(f-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],d=i+a*l[2],p=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[d+e]-t)*r;y[w++]=a+(n+(g[p+e]-n)*r-a)*s}}}return n.makeTensorInfo([d,c,h,m],"float32",y)}},f$={kernelName:sr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;_v([i,a],"resizeBilinearGrad");const u=r.computeStrides(a.shape),[l,c,h,d]=a.shape,[,p,f]=i.shape,m=new Float32Array(l*c*h*d),g=[o&&p>1?c-1:c,o&&f>1?h-1:h],y=[o&&p>1?p-1:p,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],w=n.data.get(i.dataId).values;let k=0;for(let r=0;r<l;r++){const e=r*u[0];for(let t=0;t<p;t++){const n=t*b,r=Math.floor(n),s=Math.min(Math.ceil(n),c-1),a=e+r*u[1],i=e+s*u[1],o=n-r,l=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),s=t-n,c=1-s,p=a+n*u[2],f=a+r*u[2],g=i+n*u[2],y=i+r*u[2],b=l*c,v=l*s,I=o*c,N=o*s;for(let e=0;e<d;e++){const t=w[k++];m[p+e]+=t*b,m[f+e]+=t*v,m[g+e]+=t*I,m[y+e]+=t*N}}}}return n.makeTensorInfo([l,h,c,d],"float32",m)}},m$={kernelName:tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=s;_v(a,"resizeNearestNeighbor");const l=r.computeStrides(a.shape),[c,h]=u,[d,p,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(d*c*h*m),b=[i&&c>1?p-1:p,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],w=b[0]/x[0],k=b[1]/x[1];let v=0;for(let r=0;r<d;r++){const e=r*l[0];for(let t=0;t<c;t++){const n=o?w*(t+.5):w*t;let r=Math.min(p-1,i?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=e+r*l[1];for(let e=0;e<h;e++){const t=o?k*(e+.5):k*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*l[2];for(let e=0;e<m;e++)y[v++]=g[r+e]}}}return n.makeTensorInfo([d,c,h,m],a.dtype,y)}},g$={kernelName:nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;_v([i,a],"resizeNearestNeighborGrad");const u=r.computeStrides(a.shape),l=r.computeStrides(i.shape),[c,h,d,p]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*d*p),y=n.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?d-1:d],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],w=b[0]/x[0],k=b[1]/x[1],v=1/w,I=1/k,N=2*Math.ceil(v)+2,S=2*Math.ceil(I)+2;for(let r=0;r<c;r++){const e=r*u[0];for(let t=0;t<h;t++){const n=e+t*u[1],r=Math.floor(t*v),s=Math.floor(r-N/2);for(let a=0;a<d;a++){const r=n+a*u[2],i=Math.floor(a*I),c=Math.floor(i-S/2);for(let n=0;n<p;n++){let i=0;for(let r=0;r<N;r++){const u=r+s;if(u<0||u>=f)continue;const p=e+u*l[1],g=u*w;if(t===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<S;e++){const t=e+c;if(t<0||t>=m)continue;const r=p+t*l[2],s=t*k;a===Math.min(d-1,o?Math.round(s):Math.floor(s))&&(i+=y[r+n])}}g[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},y$={kernelName:ir,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s;_v(a,"reverse");const o=a.shape.length,u=r.parseAxisParam(i,a.shape);if(0===o)return Wv({inputs:{x:a},backend:n});const l=new ms(a.shape,a.dtype),c=n.bufferSync(a);for(let r=0;r<l.size;r++){const e=l.indexToLoc(r),t=e.slice();u.forEach(e=>t[e]=a.shape[e]-1-t[e]),l.set(c.get(...t),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},b$={kernelName:Pr,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,u=n,l=r.getTypedArrayFromDType(s.dtype,r.sizeFromShape(s.shape)),[c,h,d,p]=s.shape,[f,m]=g.getImageCenter(o,h,d),y=Math.sin(a),b=Math.cos(a),x=u.data.get(s.dataId).values;for(let r=0;r<c;r++){const e=r*d*h*p;for(let t=0;t<h;t++){const n=t*(d*p);for(let r=0;r<d;r++){const s=r*p;for(let a=0;a<p;a++){const o=[c,t,r,a],u=o[2],g=o[1];let w=(u-f)*b-(g-m)*y,k=(u-f)*y+(g-m)*b;w=Math.round(w+f),k=Math.round(k+m);let v=i;"number"!=typeof i&&(v=3===a?255:i[a]),w>=0&&w<d&&k>=0&&k<h&&(v=x[e+k*(d*p)+w*p+a]),l[e+n+s+a]=v}}}}return{dataId:u.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},x$=zv(or,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),w$={kernelName:or,backendName:"cpu",kernelFunc:x$},k$=sN(e=>1/Math.sqrt(e)),v$=Lv(ur,k$),I$={kernelName:ur,backendName:"cpu",kernelFunc:v$};function N$(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,d=t.values;if(0===r)return ja(n,t.dtype);const p=ja(c,t.dtype);p.values.fill(u);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=r/s)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<s;n++)l?p.values[a*s+n]+=d[f*s+n]:p.values[a*s+n]=0===t.rank?d[0]:d[f*s+n]}return p}const S$={kernelName:lr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=g.calculateShapes(a,s,i),d=N$(n.bufferSync(s),n.bufferSync(a),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}},C$={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t;_v([s,a,i],"select");const o=s.shape.length,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,h=Ts(a.dtype,i.dtype),d=r.makeZerosTypedArray(r.sizeFromShape(a.shape),h);let p=0;const f=0===o||o>1||1===a.shape.length?1:r.sizeFromShape(a.shape.slice(1));for(let r=0;r<u.length;r++)for(let e=0;e<f;e++)d[p++]=1===u[r]?l[r]:c[r];return n.makeTensorInfo(a.shape,h,d)}},$$=g.SELU_SCALEALPHA,T$=g.SELU_SCALE,A$=zv(hr,e=>e>=0?T$*e:$$*(Math.exp(e)-1)),E$={kernelName:hr,backendName:"cpu",kernelFunc:A$},R$=zv(gr,e=>1/(1+Math.exp(-e))),F$={kernelName:gr,backendName:"cpu",kernelFunc:R$},D$=zv(mr,e=>e<0?-1:e>0?1:0),_$={kernelName:mr,backendName:"cpu",kernelFunc:D$},O$=zv(pr,e=>Math.sin(e)),M$={kernelName:pr,backendName:"cpu",kernelFunc:O$},z$=zv(fr,e=>Math.sinh(e)),L$={kernelName:fr,backendName:"cpu",kernelFunc:z$},P$=Math.log(1.1920928955078125e-7)+2,B$=zv(yr,e=>{const t=e>-P$,n=e<P$,r=Math.exp(e);return n?r:t?e:Math.log(1+r)}),W$={kernelName:yr,backendName:"cpu",kernelFunc:B$},V$={kernelName:wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;_v([a],"spaceToBatchND");const u=r.sizeFromShape(i),l=[[0,0]];l.push(...o);for(let r=1+i.length;r<a.shape.length;++r)l.push([0,0]);const c=r$.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=g.getReshaped(c.shape,i,u,!1),d=g.getPermuted(h.length,i.length,!1),p=g.getReshapedPermuted(c.shape,i,u,!1),f=pI({inputs:{x:c},backend:n,attrs:{shape:h}}),m=CI({inputs:{x:f},backend:n,attrs:{perm:d}}),y=pI({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),y}},U$={kernelName:Cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:d}=g.calculateShapes(a,s,o),p=N$(n.bufferSync(s),n.bufferSync(a),o,d,c,l,u,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,p.dtype,p.values)}},G$={kernelName:kr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,u=r.parseAxisParam(o,a.shape)[0],l=g.prepareSplitSize(a,i,u),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{const t=[...h];t[u]=e;const r=JI({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r})}},H$=zv(br,e=>Math.sqrt(e)),j$={kernelName:br,backendName:"cpu",kernelFunc:H$},q$={kernelName:Nr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;_v(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let i=0;i<s.length;++i){const e=s[i];a[i]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},K$=Hv((e,t)=>{const n=e-t;return n*n}),X$=oI(Ir,K$),Y$={kernelName:Ir,backendName:"cpu",kernelFunc:X$},Z$=zv(zr,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),J$={kernelName:zr,backendName:"cpu",kernelFunc:Z$};function Q$(e,t,n,r){const s=ja(e,t.dtype);for(let a=0;a<s.size;a++){const e=s.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+r[t];s.set(t.get(...i),...e)}return s}const eT={kernelName:$r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=r;_v(s,"stridedSlice");const{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=h.sliceInfo(s.shape,a,i,o,u,l,c,d,p),w=pI({inputs:{x:s},backend:n,attrs:{shape:b}});let k;if(f){const e=JI({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=pI({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,s.dtype,[]);else{const e=Q$(x,n.bufferSync(w),g,m);k=n.makeTensorInfo(e.shape,e.dtype,e.values)}const v=pI({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},tT=zv(Tr,e=>Math.tan(e)),nT={kernelName:Tr,backendName:"cpu",kernelFunc:tT},rT=zv(Ar,e=>Math.tanh(e));function sT(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const r=ja(n,e.dtype);for(let s=0;s<r.values.length;++s){const t=r.indexToLoc(s),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const a=e.locToIndex(n);r.values[s]=e.values[a]}return r}function aT(e,t,n,s,a){const i=t[t.length-1],[o,u]=[e.length/i,i],l=r.getTypedArrayFromDType(n,o*s),c=r.getTypedArrayFromDType("int32",o*s);for(let r=0;r<o;r++){const t=r*u,n=e.subarray(t,t+u),a=[];for(let e=0;e<n.length;e++)a.push({value:n[e],index:e});a.sort((e,t)=>t.value-e.value);const i=r*s,o=l.subarray(i,i+s),h=c.subarray(i,i+s);for(let e=0;e<s;e++)o[e]=a[e].value,h[e]=a[e].index}const h=t.slice();return h[h.length-1]=s,[ja(h,n,l),ja(h,"int32",c)]}function iT(e,t,n,s){const a=r.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let r=0;r<a;r++)i[0]*=n[r];i[1]=n[a];for(let r=a+1;r<n.length;r++)i[2]*=n[r];const o={},u=new Int32Array(n[a]),l=new ms(i,s,e),c=[],h=1===i[0]&&1===i[2];for(let r=0;r<n[a];r++){let t;if(h)t=e[r].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let n=0;n<i[2];n++)e.push(l.get(t,r,n));t=e.join(",")}if(void 0!==o[t])u[r]=o[t];else{const e=Object.keys(o).length;o[t]=e,u[r]=e,c.push(r)}}const d=i.slice();d[1]=Object.keys(o).length;const p=new ms(d,s);c.forEach((e,t)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)p.set(l.get(n,e,r),n,t,r)});const f=n.slice();return f[a]=d[1],{outputValues:p.values,outputShape:f,indices:u}}const oT=[yI,xI,kI,II,dI,NI,TI,AI,EI,RI,DI,OI,zI,BI,VI,jI,qI,KI,XI,gI,YI,eN,rN,iI,oN,lN,tI,cN,mN,bN,xN,yN,kN,vN,wN,NN,CN,$N,TN,AN,EN,FN,DN,_N,ON,MN,LN,zN,hS,Bv,PN,VN,YN,QN,tS,sS,bS,wS,kS,NS,$S,TS,AS,ES,FS,OS,LS,Vv,PS,pN,WS,US,HS,Gv,KS,ZS,QS,nC,sC,oC,lC,dC,pC,fC,wC,kC,vC,IC,NC,SC,yC,TC,AC,FC,DC,MC,PC,uS,WC,UC,HC,qC,YC,ZC,e$,n$,r$,i$,Kv,u$,c$,sI,d$,Yv,Jv,fI,p$,f$,m$,g$,y$,b$,w$,I$,S$,C$,E$,F$,_$,M$,L$,QI,LC,W$,V$,U$,G$,j$,q$,Y$,J$,eT,mS,$C,nT,{kernelName:Ar,backendName:"cpu",kernelFunc:rT},{kernelName:Er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;_v(s,"tile");const i=sT(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a}=r;_v(s,"topk");const i=n.data.get(s.dataId).values,[o,u]=aT(i,s.shape,s.dtype,a);return[n.makeTensorInfo(o.shape,o.dtype,o.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},$I,{kernelName:Dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;_v(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=iT(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:_r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let l=0;for(let p=0;p<i;p++)p!==a&&(u[l++]=s.shape[p]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const d=new Array(o);for(let p=0;p<d.length;p++){c[a]=p;const e=JI({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});d[p]=pI({inputs:{x:e},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(e)}return d}},{kernelName:Or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s;_v(a,"unsortedSegmentSum");const u=[],l=[],c=a.shape.length-i.shape.length;let h=i;for(let r=0;r<c;++r){const e=eS({inputs:{input:h},backend:n,attrs:{dim:r+1}});h=e,l.push(e)}for(let p=0;p<o;++p){const e=r.createScalarValue(p,"int32"),t=n.makeTensorInfo([],"int32",e),s=WN({inputs:{a:t,b:h},backend:n}),i=aI({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),o=oS({inputs:{a:i,b:a},backend:n}),c=CC({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});u.push(c),l.push(t),l.push(s),l.push(i),l.push(o),l.push(c)}const d=t$({inputs:u,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),d}},QC];for(const PM of oT)Kr(PM);const uT={},lT={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function cT(e){if(!(e in uT)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete uT[e]},!1),1===e?t.getContext("webgl",lT)||t.getContext("experimental-webgl",lT):t.getContext("webgl2",lT)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;uT[e]=t}const t=uT[e];return t.isContextLost()?(delete uT[e],cT(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),uT[e])}var hT,dT,pT;function fT(e,t){return[t,e]}function mT(e){const t=r.sizeFromShape(e),n=Math.ceil(t/4);return r.sizeToSquarishShape(n)}function gT(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function yT(e,t){const n=e;let r,s,a,i,o,u,l,c,h,d;return 2===Ve().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u=e.RGBA,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function bT(e,t){const n=t();return Ve().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(hT||(hT={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(dT||(dT={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(pT||(pT={}));const xT=5.96e-8,wT=65504;function kT(e){return!!(Ve().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||xT<Math.abs(e)&&Math.abs(e)<wT)}function vT(e,t){return AT(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const IT=/ERROR: [0-9]+:([0-9]+):/g;function NT(e,t){if(bT(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function ST(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(bT(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),bT(e,()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i)),bT(e,()=>e.enableVertexAttribArray(o)),!0)}function CT(e,t,n){bT(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),bT(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function $T(e,t){bT(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),bT(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function TT(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function AT(e,t,n){const r=bT(e,()=>t());if(null==r)throw new Error(n);return r}function ET(e,t=2){return r.sizeFromShape(e.slice(0,e.length-t))}function RT(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function FT(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[ET(e),...RT(e)]),t}function DT(e){return e%2==0}function _T(e,t){if(e=e.slice(-2),t=t.slice(-2),r.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(DT(n)&&DT(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&DT(e[0])&&DT(t[0])}let OT,MT;function zT(e,t){return null!=e.getExtension(t)}function LT(e){try{if(null!=cT(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function PT(e){const t=yT(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function BT(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors `+"in the WebGL backend.")})}const WT=Ve();function VT(){let e,t,n,r,s,a,i,o,u,l;return 2===Ve().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function UT(e,t,n="index"){const s=r.computeStrides(t);return s.map((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function GT(e){const t=r.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}WT.registerFlag("HAS_WEBGL",()=>WT.getNumber("WEBGL_VERSION")>0),WT.registerFlag("WEBGL_VERSION",()=>LT(2)?2:LT(1)?1:0),WT.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),WT.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===WT.get("WEBGL_VERSION")),WT.registerFlag("WEBGL_CPU_FORWARD",()=>!0),WT.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),WT.registerFlag("WEBGL_PACK",()=>WT.getBool("HAS_WEBGL")),WT.registerFlag("WEBGL_PACK_NORMALIZATION",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_CLIP",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),WT.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_PACK_REDUCE",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_LAZILY_UNPACK",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_CONV_IM2COL",()=>WT.getBool("WEBGL_PACK")),WT.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(function(e){if(null==OT){const t=cT(e);OT=t.getParameter(t.MAX_TEXTURE_SIZE)}return OT})(WT.getNumber("WEBGL_VERSION"))),WT.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(function(e){if(null==MT){const t=cT(e);MT=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MT)})(WT.getNumber("WEBGL_VERSION"))),WT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=WT.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;const t=cT(e);return zT(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:zT(t,"EXT_disjoint_timer_query")?1:0}(e)}),WT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>WT.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.isMobile()),WT.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(function(e){if(0===e)return!1;const t=cT(e);if(1===e){if(!zT(t,"OES_texture_float"))return!1}else if(!zT(t,"EXT_color_buffer_float"))return!1;return PT(t)})(WT.getNumber("WEBGL_VERSION"))),WT.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!WT.getBool("WEBGL_FORCE_F16_TEXTURES")&&WT.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),WT.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(function(e){if(0===e)return!1;const t=cT(e);if(1!==e){if(zT(t,"EXT_color_buffer_float"))return PT(t);const e="EXT_color_buffer_half_float";if(zT(t,e)){const n=t.getExtension(e);return function(e,t){const n=yT(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!zT(t,"OES_texture_float")&&!!zT(t,"WEBGL_color_buffer_float")&&PT(t)})(WT.getNumber("WEBGL_VERSION"))),WT.registerFlag("WEBGL_FENCE_API_ENABLED",()=>(function(e){return 2===e&&null!=cT(e).fenceSync})(WT.getNumber("WEBGL_VERSION"))),WT.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>WT.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),WT.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never "+`delete) or at least 0, but got ${e}.`)});const HT="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class jT{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=hT.DENSE;const t=mT(e),n=VT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${UT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class qT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=hT.DENSE;const t=mT(e),n=VT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${UT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class KT{constructor(e){this.variableNames=["A"],this.outTexUsage=dT.DOWNLOAD;const t=VT();this.outputShape=e,this.userCode=`\n      ${HT}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class XT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=dT.DOWNLOAD;const t=VT();this.outputShape=e,this.userCode=`\n      ${HT}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class YT{constructor(e,t,n=!1){this.variableNames=["A"];const r=VT(),[s,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${GT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class ZT{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=VT(),[s,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let u=0;u<=1;u++)for(let t=0;t<=1;t++){const n=2*u+t;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${e[2]}) {\n            localCoords[2] += ${t};\n            if(localCoords[1] + ${u} < ${e[1]}) {\n              localCoords[1] += ${u};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${n}] = values[0];\n              } else if(offset == 1) {\n                result[${n}] = values[1];\n              } else if(offset == 2) {\n                result[${n}] = values[2];\n              } else {\n                result[${n}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${GT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}function JT(e,t,n,r,s,a){!function(e,t){const n=Ve().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.");if(e>n||t>n)throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}(t,n);const i=function(e){return AT(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return bT(e,()=>e.bindTexture(o,i)),bT(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),bT(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),bT(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),bT(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),bT(e,()=>e.texImage2D(o,0,r,t,n,0,s,a,null)),bT(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function QT(e){return e.internalFormatFloat}function eA(e){return e.internalFormatHalfFloat}function tA(e){return e.downloadTextureFormat}function nA(e){return e.internalFormatPackedFloat}function rA(e){return e.internalFormatPackedHalfFloat}class sA{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Ve().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){uT[e]=t}(t,e)):this.gl=cT(t);let n="WEBGL_color_buffer_float";if(1===Ve().getNumber("WEBGL_VERSION")){const e="OES_texture_half_float";if(this.textureFloatExtension=vT(this.gl,"OES_texture_float"),zT(this.gl,e))this.textureHalfFloatExtension=vT(this.gl,e);else if(Ve().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),zT(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=vT(this.gl,"EXT_color_buffer_half_float");else if(Ve().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(zT(this.gl,n="EXT_color_buffer_float"))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!zT(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=function(e){return function(e,t){const n=AT(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return bT(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),bT(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=AT(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return bT(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),bT(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return AT(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=yT(this.gl,this.textureHalfFloatExtension)}get debug(){return Ve().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;bT(e,()=>e.finish()),bT(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),bT(e,()=>e.deleteFramebuffer(this.framebuffer)),bT(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),bT(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),bT(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=fT(t,n);return JT(e,s,a,QT(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=fT(t,n);return JT(e,s,a,eA(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=fT(t,n);return JT(e,s,a,tA(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){bT(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?bT(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):bT(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),bT(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,u;bT(e,()=>e.bindTexture(e.TEXTURE_2D,t)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,u=a.internalFormatPackedFloat),i.set(s),bT(e,()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,o,i)),bT(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=gT(t,n);return JT(e,s,a,rA(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=gT(t,n);return JT(e,s,a,nA(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&($T(this.gl,this.framebuffer),this.outputTexture=null),bT(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n,r){const[s,a]=fT(t,n),i=new Uint8Array(t*n*4);return bT(e,()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)})(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,i,o){const u=e,l=new Float32Array(function(e,t){const[n,r]=gT(e,t);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,s,a)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();bT(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const a=16*t*n;return bT(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),bT(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),bT(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Ve().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n){const r=new Float32Array(t*n*4);return bT(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r})(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=AT(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(bT(e,()=>e.shaderSource(n,t)),bT(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=IT.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map((e,t)=>r.rightPad((t+1).toString(),i)+e);let u=0;for(let r=0;r<o.length;r++)u=Math.max(o[r].length,u);const l=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${r.rightPad(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=VT();return function(e,t){const n=AT(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(bT(e,()=>e.shaderSource(n,t)),bT(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),a=function(e){return AT(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return bT(t,()=>t.attachShader(a,s)),bT(t,()=>t.attachShader(a,n)),function(e,t){if(bT(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&NT(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(e,t,n){return bT(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),ST(e,t,"clipSpacePos",n,3,20,0)&&ST(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&bT(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&NT(this.gl,this.program),bT(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return AT(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),bT(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){bT(e,()=>(function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)})(e,n),bT(e,()=>e.activeTexture(e.TEXTURE0+n)),bT(e,()=>e.bindTexture(e.TEXTURE_2D,t))})(e,t,r)),bT(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=gT(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&NT(this.gl,this.program),TT(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),bT(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),bT(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=vT(this.gl,2===Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||r.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),CT(this.gl,e,this.framebuffer),this.debug&&TT(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(CT(this.gl,this.outputTexture,this.framebuffer),this.debug&&TT(this.gl)):$T(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;CT(r,e,this.framebuffer),this.debug&&TT(r),this.outputTexture=e,bT(r,()=>r.viewport(0,0,t,n)),bT(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),bT(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:aA}=g;const iA="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oA="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",uA="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",lA="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function cA(e){return`offset${e}`}function hA(e){const t=e.name,n=r.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function dA(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function pA(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function fA(e,t){return t.map(t=>e[t]).join(", ")}function mA(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but `+`was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.arraysEqual(s,i))throw Error("Binary was compiled with different shapes than "+`the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!r.arraysEqual(o,u))throw Error("Binary was compiled with different texture shapes than the"+` current args. Shape ${o} and ${u} must match`)})}const{addImpl:gA,bincountImpl:yA,bincountReduceImpl:bA,ceilImpl:xA,concatImpl:wA,expImpl:kA,expm1Impl:vA,floorImpl:IA,gatherV2Impl:NA,greaterImpl:SA,lessImpl:CA,linSpaceImpl:$A,logImpl:TA,maxImpl:AA,maximumImpl:EA,minimumImpl:RA,multiplyImpl:FA,negImpl:DA,prodImpl:_A,rangeImpl:OA,rsqrtImpl:MA,simpleAbsImpl:zA,sliceImpl:LA,stridedSliceImpl:PA,subImpl:BA,tileImpl:WA,topKImpl:VA,transposeImpl:UA,uniqueImpl:GA}=z;function HA(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function jA(e,t){return 1===t?[e]:HA(e,t)}class qA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=jA("rc",t),r=dA(t),s=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class KA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let s=0;s<4;s++){let e="thisRC = rc;";s%2==1&&(e+="thisRC.z += 1;"),s>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${s}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${s>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${UT(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${GT(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class XA{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=ZA(t,n),s=JA(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=YA(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===pT.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===pT.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===pT.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===pT.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===pT.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=ZA(n,r),a=JA(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=YA(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=Ve().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function YA(e,t,n,r,s){const a=function(e,t){switch(e){case pT.PACKED_2X2_FLOAT32:return nA(t);case pT.PACKED_2X2_FLOAT16:return rA(t);case pT.UNPACKED_FLOAT32:return QT(t);case pT.UNPACKED_FLOAT16:return eA(t);case pT.PACKED_4X1_UNSIGNED_BYTE:return tA(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let i;if(s){const[t,n]=gT(e[0],e[1]);i=t*n}else{const[t,n]=fT(e[0],e[1]);i=t*n}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function ZA(e,t){if(e===dT.UPLOAD)return pT.PACKED_2X2_FLOAT32;if(e===dT.RENDER||null==e)return function(e){return Ve().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?pT.PACKED_2X2_FLOAT32:pT.UNPACKED_FLOAT32:e?pT.PACKED_2X2_FLOAT16:pT.UNPACKED_FLOAT16}(t);if(e===dT.DOWNLOAD||e===dT.PIXELS)return pT.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function JA(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class QA{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const eE="if (isnan(x)) return x;",tE="return x;",nE="return abs(x);",rE="return (x >= 0.0) ? x : (exp(x) - 1.0);",sE=eE+"\n  return (x < 0.0) ? 0.0 : x;\n",aE=eE+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",iE="return x;",oE="return x;",uE="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",lE="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cE="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";class hE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class dE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=jA("rc",t),r=dA(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const pE=y.whereImpl,fE=1e-7,mE=1e-4,gE={},yE=128,bE=600;class xE extends j{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Ve().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=cT(Ve().getNumber("WEBGL_VERSION"));this.binaryCache=(t=Ve().getNumber("WEBGL_VERSION"))in gE?gE[t]:(gE[t]={},gE[t]),this.gpgpu=new sA(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new XA(this.gpgpu),this.numMBBeforeWarning=null==Ve().global.screen?1024:Ve().global.screen.height*Ve().global.screen.width*window.devicePixelRatio*bE/1024/1024,this.texData=new H(this,fo())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((Ve().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Ve().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:dT.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}decComplexRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.complexParentRefCount>0&&t.refCount--}}move(e,t,n,r){if(Ve().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:dT.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:i,shape:o,isPacked:u}=t;if(null!=i){let t;t=u?new hE(o,iE):new QA(o,iE);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let c,h;if(l&&(c=r.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=g.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=r.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,complexTensorInfos:o,isPacked:u}=t;if(null!=a){let t;t=u?new hE(s,iE):new QA(s,iE);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Ve().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Ve().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==i&&Ve().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...mT(s))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);c=g.mergeRealAndImagArrays(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=r.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const d=this.convertAndCacheOnCPU(e,c),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>r.decodeString(e))}catch(s){throw new Error("Failed to decode encoded string bytes into utf-8")}return ja(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!kT(n)){if(Ve().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your `+"current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=r.sizeFromShape(t);if(Ve().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...mT(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const i=Ve().getBool("WEBGL_PACK")&&!0===s,o=i?FT(t):t,u=i?new XT(o):new KT(o),l=this.runWebGLProgram(u,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=r.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=r.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=r.sum(e),o.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.now(),endMs:null}}endTimer(e){return Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.now(),e)}async getQueryTime(e){return Ve().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return Ve().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=fo().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=yE){const n=this.getCPUBackend();return Ve().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every(e=>null==this.texData.get(e.dataId).texture&&r.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){g.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return pE(e.shape,t)}packedUnaryOp(e,t,n){const r=new hE(e.shape,t);return this.compileAndRun(r,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=zA(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Ve().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,nE,e.dtype);const t=new QA(e.shape,nE);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return fo().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new dE(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new qA(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[ET(e.shape),...RT(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[ET(t),...RT(t)],a=new KA(s,n),i=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=FT(r);let i;return i=n?new qT(a):new jT(a),{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,s,a=!1){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===hT.DENSE){const t=mT(e.outputShape);o.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===r.sizeFromShape(i.shape))return o.values=r.getTypedArrayFromDType(i.dtype,0),i;const u=[],l=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&r.sizeFromShape(t.shape)<=Ve().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!_T(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let r="";return t.concat(n).forEach(e=>{r+=`${e.shape}_${e.isUniform?"uniform":e.texData.texShape}_${null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0}`}),e.constructor.name+"_"+r+"_"+e.userCode}(e,l,c),d=this.getAndSaveBinary(h,()=>(function(e,t,n,s){const a=t.userCode,i=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),o=i.map(e=>e.shapeInfo),u={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=function(e,t,n,s){const a=[];e.forEach(e=>{const t=r.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))});const i=a.join("\n"),o=e.map(e=>(function(e,t,n=!1){let s="";return s+=n?function e(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${VT().texture2D}(${t}, halfCR);\n    }\n  `}(t);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=VT();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(t);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],u=VT();if(null!=a&&r.arraysEqual(t,a))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${u.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const n=t.shapeInfo.logicalShape,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=pA(t,n.slice(1)),i=["b","row","col"];return`\n        ${e(a)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${fA(i,r)});\n        }\n      `}const o=i[0],u=i[1],l=Math.ceil(n[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${u}, ${l*Math.ceil(n[1]/2)}, ${l}, b, row, col);\n      return ${VT().texture2D}(${r}, uv);\n    }\n  `}(t);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let p=2;p<n-1;p++)h=`int b${p}, `+h,d=`b${p} * ${c*=t[n-p-1]} + `+d;return`\n    vec4 ${s}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${VT().texture2D}(${r}, uv);\n    }\n  `}(t)}}(e):function e(t){const n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${cA(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(t);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${hA(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=cA(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(t);case 2:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=t.shapeInfo.texShape;if(null!=i&&r.arraysEqual(n,i))return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${i[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:o,keptDims:u}=r.squeezeShape(n);if(o.length<n.length){const n=pA(t,o),r=["row","col"];return`\n      ${e(n)}\n      float ${a}(int row, int col) {\n        return ${a}(${fA(r,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${hA(t)}\n      }\n    `;const l=i[0],c=i[1],h=cA(s);return 1===c?`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===l?`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(t);case 3:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[1]*n[2],o=n[2],{newShape:u,keptDims:l}=r.squeezeShape(n);if(u.length<n.length){const n=pA(t,u),r=["row","col","depth"];return`\n        ${e(n)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${fA(r,l)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${i}, ${o}, 1)));\n        ${hA(t)}\n      }\n    `;const c=t.shapeInfo.texShape,h=c[0],d=c[1],p=t.shapeInfo.flatOffset;return d===i&&null==p?`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `:d===o&&null==p?`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${i} + col * ${o} + depth + ${cA(s)};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(t);case 4:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[3],o=n[2]*i,u=n[1]*o,{newShape:l,keptDims:c}=r.squeezeShape(n);if(l.length<n.length){const n=pA(t,l),r=["row","col","depth","depth2"];return`\n      ${e(n)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${fA(r,c)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${o}, ${i}, 1)));\n        ${hA(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];return f===u&&null==h?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:f===i&&null==h?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${o} +\n          depth * ${i} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${f}, index + ${cA(s)});\n      return sampleTexture(${s}, uv);\n    }\n  `}(t);case 5:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[4],o=n[3]*i,u=n[2]*o,l=n[1]*u,{newShape:c,keptDims:h}=r.squeezeShape(n);if(c.length<n.length){const n=pA(t,c),r=["row","col","depth","depth2","depth3"];return`\n      ${e(n)}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${fA(r,h)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n          depth3;\n        ${hA(t)}\n      }\n    `;const d=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,f=p[0],m=p[1];return m===l&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${u}, ${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:m===i&&null==d?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${u} + depth * ${o} +\n          depth2 * ${i} + depth3 + ${cA(s)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(t);case 6:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),{newShape:i,keptDims:o}=r.squeezeShape(n);if(i.length<n.length){const n=pA(t,i),r=["row","col","depth","depth2","depth3","depth4"];return`\n      ${e(n)}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${fA(r,o)});\n      }\n    `}const u=n[5],l=n[4]*u,c=n[3]*l,h=n[2]*c,d=n[1]*h;if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${h}, ${c}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${u}, 1)));\n        ${hA(t)}\n      }\n    `;const p=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,m=f[0],g=f[1];return g===d&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${h}, ${c}, ${l}, ${u})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:g===u&&null==p?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${h} + depth * ${c} +\n          depth2 * ${l} + depth3 * ${u} + depth4 + ${cA(s)};\n      vec2 uv = uvFromFlat(${m}, ${g}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(t);default:throw new Error(`${n.length}-D input sampling`+" is not yet supported")}}(e),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,u=aA(e.shapeInfo.logicalShape,t.logicalShape),l=dA(o),c=o-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${d[e+c]} = 0;`).join("\n");let p="";p=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+c]}`).join(", ");let f="return outputValue;";const m=1===r.sizeFromShape(e.shapeInfo.logicalShape),g=1===r.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=i-2,t=i-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===o&&null==e.shapeInfo.flatOffset&&r.arraysEqual(e.shapeInfo.texShape,t.texShape))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=dA(o),l=aA(e.shapeInfo.logicalShape,t.logicalShape),c=o-i;let h;const d=["x","y","z","w","u","v"];let p="";return`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map(e=>`coords.${d[e+c]} = 0;`).join("\n")}\n      return get${s}(${p=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+c]}`).join(", ")});\n    }\n  `}(e,t)),s})(e,t,s)).join("\n"),u=t.texShape,l=VT(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let h,d,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${iA}\n    ${oA}\n    ${uA}\n  `}(l);return t.isPacked?(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.arraysEqual(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let a=s,i="",o="b, r, c";for(let u=2;u<e.length-1;u++)i=`\n      int b${u} = index / ${a*=e[e.length-u-1]};\n      index -= b${u} * ${a};\n    `+i,o=`b${u}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,u),d=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return r.arraysEqual(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=UT(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=UT(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=UT(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=UT(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,u),d=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=lA),[p,c,d,i,h,o,n].join("\n")}(i,u,a,t.packedInputs),c=e.createProgram(l);let h=null;const d=e.getUniformLocation(c,"NAN",!1);1===Ve().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(c,"INFINITY",!1));const p={};for(let r=0;r<t.variableNames.length;r++){const n=t.variableNames[r],s=!1;p[n]=e.getUniformLocation(c,n,s),p[`offset${n}`]=e.getUniformLocation(c,`offset${n}`,s)}return{program:t,source:l,webGLProgram:c,uniformLocations:p,inShapeInfos:o,outShapeInfo:u,infLoc:h,nanLoc:d}})(this.gpgpu,e,l,c)),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(e,t,n,s,a){mA(t.inShapeInfos,n),mA([t.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i,o[0],o[1]):e.setOutputMatrixTexture(i,o[0],o[1]),e.setProgram(t.webGLProgram),1===Ve().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,s)=>{const a=t.program.variableNames[s],i=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`];if(null!=i)if(n.isUniform)if(r.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,i,s)}),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,d,l,c,s),u.forEach(e=>this.disposeIntermediateTensorInfo(e)),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!Ve().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r,s=!1){const a=this.runWebGLProgram(e,t,n=n||t[0].dtype,r,s);return fo().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Ve().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=yo(()=>{if(!Ve().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Ve().getBool("DEBUG");Ve().set("DEBUG",!1);const t=this.abs(Go(1e-8)).dataSync()[0];if(Ve().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?fE:mE}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:u}=t;if(null!=i)return;const l=null!=this.activeTimers;let c;l&&(c=r.now());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=Ve().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?r.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=r.squeezeShape(e);e=t.newShape}let s=r.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=ET(e);let n=2,a=2;return e.length&&([n,a]=RT(e)),r.sizeToSquarishShape(s=t*(n/2)*(a/2)).map(e=>2*e)}return r.sizeToSquarishShape(s)}(n,u),t.texShape=h),null!=a){const e=FT(n);let i,o=h[1],d=h[0];const p=a instanceof Uint8Array;u?([o,d]=gT(h[0],h[1]),i=new ZT(e,[d,o],p)):i=new YT(e,[d,o],p);const f=this.makeTensorInfo([d,o],s);this.texData.get(f.dataId).usage=p?dT.PIXELS:dT.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,d,a);const m=this.runWebGLProgram(i,[f],s,null,!0),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=r.now()-c)}else{const e=this.acquireTexture(h,o,s,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, `+"most likely due to a memory leak")}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*r.bytesPerElement(t)}}a.isBrowser()&&$o("webgl",()=>new xE,2);class wE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=g.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class kE{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=g.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;let i="";if(s)if(0===a||1===r.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${dA(a)} coords = getOutputCoords();\n        `,1===a)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=jA("coords",a);i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function vE(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const IE={kernelName:sn,backendName:"webgl",kernelFunc:vE};function NE(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=vE({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const u=vE({inputs:{x:s},backend:n});return n.texData.get(u.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:u},a}const SE={kernelName:bt,backendName:"webgl",kernelFunc:NE},CE="return (a < 0.) ? b * a : a;",$E="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",TE={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s,o=n.makeTensorInfo([],"float32",r.createScalarValue(i,"float32")),u=Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kE($E,a.shape,o.shape):new wE(CE,a.shape,o.shape),l=n.runWebGLProgram(u,[a,o],a.dtype);return n.disposeIntermediateTensorInfo(o),l}},AE="return (a < 0.) ? b * a : a;",EE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",RE={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kE(EE,r.shape,s.shape):new wE(AE,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}};function FE({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,u=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=Ve().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new hE(i.shape,t):new QA(i.shape,e),o.runWebGLProgram(l,[i],u)}}function DE({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new wE(e,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],Ts(n.dtype,r.dtype))}),a=NE({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||Ts(u.dtype,l.dtype);if(c.shouldExecuteOnCPU([u,l])&&null!=s){const e=c.texData.get(u.dataId),t=c.texData.get(l.dataId),[n,r]=s(u.shape,l.shape,e.values,t.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let d;return d=Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new kE(t,u.shape,l.shape,n):new wE(e,u.shape,l.shape),c.runWebGLProgram(d,[u,l],h)}}function _E(e,t=!1){if("linear"===e)return t?oE:tE;if("relu"===e)return t?lE:sE;if("elu"===e)return t?uE:rE;if("relu6"===e)return t?cE:aE;if("prelu"===e)return t?EE:AE;if("leakyrelu"===e)return t?$E:CE;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class OE{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=Math.ceil((r?e[1]:e[2])/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${p[0]});\n          result += (${d[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}const ME={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class zE{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=g.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const LE="return a * b;";function PE(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=g.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new zE(ME.REAL,r.shape,s.shape),i=new zE(ME.IMAG,r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=NE({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=FA(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kE(LE,r.shape,s.shape):new wE(LE,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const BE={kernelName:Mn,backendName:"webgl",kernelFunc:PE};function WE(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=n,u=r.sizeFromShape(a.shape),l=r.inferFromImplicitShape(i,u),c=r.sizeFromShape(l);r.assert(u===c,()=>`The new shape (${l}) has ${c} elements and the old `+`shape (${a.shape}) has ${u} elements. The new shape and old `+"shape must have the same number of elements.");const h=o.texData.get(a.dataId);return!h.isPacked||_T(a.shape,l)||null!==h.texture&&_T(h.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[ET(e.shape),...RT(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[ET(t),...RT(t)],i=new KA(a,r),o=n.runWebGLProgram(i,[s],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,l,o)}const VE={kernelName:er,backendName:"webgl",kernelFunc:WE};class UE{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const o=4*Math.floor(n/4),u=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${r.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class GE{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(`+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function HE(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=g.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new UE({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new UE({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new GE({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class jE{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const r=dA(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let s=0;s<e.length;s++)r[e[s]]=n[s];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class qE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let l=0;l<n.length;l++)n[l]=e[t[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=dA(this.rank),s=HA("rc",this.rank),a=new Array(this.rank);for(let l=0;l<t.length;l++)a[t[l]]=s[l];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function KE(e,t,n){const r=Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qE(e.shape,t):new jE(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function XE(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;return function(e,t,n,s){const a=e.shape.length,i=r.parseAxisParam(t,e.shape);let o=i;const u=g.getAxesPermutation(o,a),l=null!=u;let c=e;l&&(c=KE(e,u,s),o=g.getInnerMostAxes(o.length,a)),g.assertAxesAreInnerMostDims("sum",o,a);const[h,d]=g.computeOutAndReduceShapes(c.shape,o);let p=h;n&&(p=g.expandShapeToKeepDim(h,i));const f=r.sizeFromShape(d),m=WE({inputs:{x:c},attrs:{shape:[r.sizeFromShape(e.shape)/f,f]},backend:s}),y=HE(m,As(e.dtype),"sum",s),b=WE({inputs:{x:y},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(y),l&&s.disposeIntermediateTensorInfo(c),b}(a,i,o,n)}const YE={kernelName:xr,backendName:"webgl",kernelFunc:XE};function ZE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=new Array(s.shape.length);for(let l=0;l<o.length;l++)o[l]=s.shape[a[l]];let u;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId),t=UA(e.values,s.shape,s.dtype,a,o);u=i.makeTensorInfo(o,s.dtype),i.texData.get(u.dataId).values=t}else u=KE(s,a,i);return u}const JE={kernelName:Fr,backendName:"webgl",kernelFunc:ZE},QE=1e3;function eR({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,h=t.shape.length,d=n?e.shape[c-2]:e.shape[c-1],p=s?t.shape[h-1]:t.shape[h-2],f=n?e.shape[c-1]:e.shape[c-2],m=s?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=r.sizeFromShape(g),x=r.sizeFromShape(y);r.assert(c>=2&&h>=2&&(b===x||1===b||1===x),()=>"Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input "+`batch dimensions of (${g}) and (${y}).`);const w=(b>x?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);r.assert(d===p,()=>`Error in matMul: inner shapes (${d}) and (`+`${p}) of Tensors with shapes ${e.shape} and `+`${t.shape} and transposeA=${n}`+` and transposeB=${s} must match.`);const k=n?[b,d,f]:[b,f,d],v=s?[x,m,p]:[x,p,m],I=WE({inputs:{x:e},backend:a,attrs:{shape:k}}),N=WE({inputs:{x:t},backend:a,attrs:{shape:v}}),S=[I,N],C=Math.max(b,x),$=n?I.shape[1]:I.shape[2],T=null!=i,A=null!=o,E="leakyrelu"===l,R=null!=l?_E(l,!0):null;let F;if((1===f||1===m)&&$>QE&&!1===(T||A||E||null!=R)){let e=I,t=N;n&&(e=ZE({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=ZE({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const r=1===m;let i=e;1!==m&&(i=WE({inputs:{x:e},backend:a,attrs:{shape:[C,$,1]}}),S.push(i));const o=1===m?2:1;let u=t;r&&(u=WE({inputs:{x:t},backend:a,attrs:{shape:[C,1,$]}}),S.push(u));const l=PE({inputs:{a:i,b:u},backend:a});F=XE({inputs:{x:l},backend:a,attrs:{axis:o,keepDims:!0}}),S.push(l)}else{const l=Ts(e.dtype,t.dtype),c=new OE(k,v,[C,f,m],n,s,T,R,A,E),h=[I,N];if(null!=i&&h.push(i),A&&h.push(o),E){const e=a.makeTensorInfo([],"float32",r.createScalarValue(u,"float32"));h.push(e),S.push(e)}F=a.runWebGLProgram(c,h,l)}const D=WE({inputs:{x:F},backend:a,attrs:{shape:w}});S.push(F);for(const r of S)a.disposeIntermediateTensorInfo(r);return D}const tR={kernelName:Br,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return eR({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},nR={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=zA(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=Ve().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new hE(r.shape,"return abs(x);"):new QA(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},rR=FE({opSnippet:eE+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),sR={kernelName:Ke,backendName:"webgl",kernelFunc:rR},aR=FE({opSnippet:eE+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),iR={kernelName:Xe,backendName:"webgl",kernelFunc:aR},oR="return a + b;",uR=DE({opSnippet:oR,packedOpSnippet:oR,supportsComplex:!0,cpuKernelImpl:gA}),lR={kernelName:Ye,backendName:"webgl",kernelFunc:uR};class cR{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class hR{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const dR={kernelName:Ze,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return vE({inputs:{x:s[0]},backend:r});if(s.length>Ve().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map(e=>e.dtype).reduce((e,t)=>Ts(e,t)),i=s.map(e=>e.shape),o=Ve().getBool("WEBGL_PACK")?new hR(s[0].shape,i):new cR(s[0].shape,i);return r.runWebGLProgram(o,s,a)}},pR={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=g.getAxesPermutation(c,u);let d=a;null!=h&&(d=ZE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=g.getInnerMostAxes(c.length,u)),g.assertAxesAreInnerMostDims("all",c,u);const[p,f]=g.computeOutAndReduceShapes(d.shape,c),m=WE({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(f)]}}),y=HE(m,m.dtype,"all",n);let b;return b=WE(o?{inputs:{x:y},backend:n,attrs:{shape:g.expandShapeToKeepDim(p,l)}}:{inputs:{x:y},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},fR={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=g.getAxesPermutation(c,u);let d=a;null!=h&&(d=ZE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=g.getInnerMostAxes(c.length,u)),g.assertAxesAreInnerMostDims("any",c,u);const[p,f]=g.computeOutAndReduceShapes(d.shape,c),m=WE({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(f)]}}),y=HE(m,m.dtype,"any",n);let b;return b=WE(o?{inputs:{x:y},backend:n,attrs:{shape:g.expandShapeToKeepDim(p,l)}}:{inputs:{x:y},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}};class mR{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===t?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class gR{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=dA(o),l=jA("coords",o);let c,h;if(1===a){const e=dA(h=o+1);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[o-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(e=>"int "+e),m=jA("sourceLocR",h-1).concat("inIdx.r"),g=jA("sourceLocG",h-1).concat("inIdx.g"),y=jA("sourceLocB",h-1).concat("inIdx.b"),b=jA("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function yR(e,t,n,s){const a=[n];if(g.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!Ve().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[i,o]=g.computeOutAndReduceShapes(t.shape,a),u=r.sizeFromShape(o),l=WE({inputs:{x:t},backend:e,attrs:{shape:[-1,u]}});n.push(l);const c=function e(t,n,r,s=null){let a=n.shape[0],i=n.shape[1];null!=s&&(a=s.shape[0],i=s.shape[1]);const o=g.computeOptimalWindowSize(i),u={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},l=new mR(u,r,null==s),c=[n];null!=s&&c.push(s);const h=t.runWebGLProgram(l,c,"int32");if(1===h.shape[1])return h;const d=e(t,n,r,h);return t.disposeIntermediateTensorInfo(h),d}(e,l,s);n.push(c);const h=WE({inputs:{x:c},backend:e,attrs:{shape:i}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),h}return function e(t,n,r,s=null){const a=null!=s?s.shape:n.shape,i=g.computeOptimalWindowSize(a[a.length-1]),o=new gR(a,i,r,null==s),u=t.runWebGLProgram(o,null==s?[n]:[n,s],"int32");if(u.shape.length===n.shape.length){const s=e(t,n,r,u);return t.disposeIntermediateTensorInfo(u),s}return u}(e,t,s)}const bR={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const u=g.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=ZE({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=g.getInnerMostAxes(o.length,l.shape.length)),g.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const h=yR(n,l,o[0],"max");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},xR={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const u=g.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=ZE({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=g.getInnerMostAxes(o.length,l.shape.length)),g.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const h=yR(n,l,o[0],"min");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},wR=FE({opSnippet:eE+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),kR={kernelName:nt,backendName:"webgl",kernelFunc:wR},vR=FE({opSnippet:eE+"return log(x + sqrt(x * x + 1.0));"}),IR={kernelName:rt,backendName:"webgl",kernelFunc:vR},NR=FE({opSnippet:eE+"\n  return atan(x);\n"}),SR={kernelName:st,backendName:"webgl",kernelFunc:NR},CR=DE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),$R={kernelName:it,backendName:"webgl",kernelFunc:CR},TR=FE({opSnippet:eE+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),AR={kernelName:at,backendName:"webgl",kernelFunc:TR};class ER{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t;let m="0.0";if(f||(m="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`:`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let g=`${t}(${t}(${t}(`+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(g="avgValue / count");const y=4*Math.floor(a/4),b=a%4,x=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${x}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${x}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class RR{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${t}(${t}(${t}(`+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const FR={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;BT(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(g.eitherStridesOrDilationsAreOne(o,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+`Got strides ${o} and dilations '1'`);const c=g.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return vE({inputs:{x:a},backend:n});const h=new ER(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},DR={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r,c=g.computePool3DInfo(s.shape,a,i,[1,1,1],o,u,l),h=new RR(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class _R{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n            wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${e.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OR{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterDepth*e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n            wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const MR={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=g.computePool3DInfo(i.shape,o,u,[1,1,1],l,c),d=new OR(h);return n.runWebGLProgram(d,[s],i.dtype)}},zR={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;BT([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=g.computePool2DInfo(i.shape,o,u,1,l),h=new _R(c);return n.runWebGLProgram(h,[s],i.dtype)}},LR={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return eR({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class PR{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],g.assertAndGetBroadcastShape(e,t),g.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(g.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(g.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class BR{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],g.assertAndGetBroadcastShape(e,t),g.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(g.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(g.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const WR={kernelName:Qt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:i,offset:o,scale:u}=e;r.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==u||a.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[s,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let d=null;null!=u&&(d=u.shape,c.push(u));const p=Ve().getBool("WEBGL_PACK_NORMALIZATION")?new BR(s.shape,a.shape,i.shape,h,d,l):new PR(s.shape,a.shape,i.shape,h,d,l);return t.runWebGLProgram(p,c,c[0].dtype)}};class VR{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=dA(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return UR.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${UR[t]} = start[${t}] + coords.${UR[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the `+`length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const UR=["x","y","z","w","u","v"];class GR{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=dA(this.rank),n=jA("coords",this.rank),r=jA("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the `+`length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function HR(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s,[u,l]=h.parseSliceParams(a,i,o);if(h.assertParamsValid(a,u,l),0===r.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=LA(e.values,u,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:c}=n.texData.get(a.dataId),d=h.isSliceContinous(a.shape,u,l);if(c||!d){const e=Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new GR(l):new VR(l),t=e.getCustomSetupFunc(u);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),i=s.makeTensorInfo(n,e.dtype),o=s.texData.get(i.dataId);Object.assign(o,a),o.complexParentRefCount=0,o.refCount=1,o.shape=n,o.dtype=e.dtype;let u=h.computeFlatOffset(t,r.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),i}(a,u,l,n)}const jR={kernelName:dr,backendName:"webgl",kernelFunc:HR},qR={kernelName:dt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;r.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const u=i.reduce((e,t)=>e*t),l=g.getReshaped(a.shape,i,u),c=g.getPermuted(l.length,i.length),h=g.getReshapedPermuted(a.shape,i,u),d=g.getSliceBeginCoords(o,i.length),p=g.getSliceSize(h,o,i.length),f=[],m=WE({inputs:{x:a},backend:n,attrs:{shape:l}}),y=ZE({inputs:{x:m},backend:n,attrs:{perm:c}}),b=WE({inputs:{x:y},backend:n,attrs:{shape:h}}),x=HR({inputs:{x:b},backend:n,attrs:{begin:d,size:p}});return f.push(m),f.push(y),f.push(b),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},KR={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),u=n.readSync(a.dataId),l=yA(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,l)}},XR=DE({opSnippet:"return float(a != b);",dtype:"bool"}),YR={kernelName:Ln,backendName:"webgl",kernelFunc:XR};function ZR(e){const{inputs:t,backend:n}=e,{input:r}=t;return vE({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const JR={kernelName:Zn,backendName:"webgl",kernelFunc:ZR},QR={kernelName:mt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return vE({inputs:{x:i},backend:s});const t=yc(i.shape),n=e({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),r=NE({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===i.dtype){const t=ZR({inputs:{input:i},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!r.hasEncodingLoss(i.dtype,o)){const e=vE({inputs:{x:i},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new QA(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",r.getTypedArrayFromDType("bool",1)),t=XR({inputs:{a:i,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},eF="return ceil(x);",tF=FE({opSnippet:eF,packedOpSnippet:eF,cpuKernelImpl:xA}),nF={kernelName:gt,backendName:"webgl",kernelFunc:tF};class rF{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class sF{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const aF={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;const u=(o=Ve().getBool("WEBGL_PACK_CLIP")?new sF(s.shape):new rF(s.shape)).getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[s],s.dtype,u)}};class iF{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function oF(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const uF={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new iF(r.shape),i=[oF(r,s.complexTensorInfos.real),oF(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class lF{constructor(e){this.outputShape=[],this.outputShape=g.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let r=1;r<t.length;r++)n.push(`else if (yC < ${t[r]}) `+`setOutput(getT${r}(yR, yC-${t[r-1]}));`);n.push(`else setOutput(getT${t.length}(yR, yC-${t[t.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class cF{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=g.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=dA(r),a=jA("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>`T${t}`);const o=new Array(e.length-1);o[0]=e[0][t];for(let p=1;p<o.length;p++)o[p]=o[p-1]+e[p][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let p=1;p<o.length;p++){const e=o[p-1];h+=`\n        if (${u} < ${o[p]}  && ${u} >= ${o[p-1]}) {\n          return getChannel(\n            getT${p}(${hF(i,u,e)}),\n            vec2(${hF(l,u,e)}));\n        }`}const d=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${hF(i,u,d)}),\n          vec2(${hF(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function hF(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}function dF(e){const{inputs:t,backend:n}=e,{input:r}=t;return vE({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const pF={kernelName:on,backendName:"webgl",kernelFunc:dF};function fF(e,t,n){const s=g.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>WE({inputs:{x:e},attrs:{shape:[-1,r.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:s}}function mF(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0],o=g.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const u=t.filter(e=>r.sizeFromShape(e.shape)>0);if(1===u.length)return vE({inputs:{x:u[0]},backend:n});const l=u.map(e=>e.shape);return g.assertParamsConsistent(l,i),function e(t,n,r){const s=t[0].dtype;if("complex64"===s){const s=t.map(e=>ZR({inputs:{input:e},backend:r})),a=t.map(e=>dF({inputs:{input:e},backend:r})),i=e(s,n,r),o=e(a,n,r),u=NE({inputs:{real:i,imag:o},backend:r});return s.forEach(e=>r.disposeIntermediateTensorInfo(e)),a.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),u}if("string"===s){const{tensors2D:e,outShape:a}=fF(t,n,r),i=e.map(e=>({vals:r.readSync(e.dataId),shape:e.shape})),o=wA(i,a,s,1===e[0].shape[0]),u=g.computeOutShape(t.map(e=>e.shape),n),l=r.makeTensorInfo(u,s,o);return e.forEach(e=>r.disposeIntermediateTensorInfo(e)),l}if(t.length>Ve().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(t.length/2),a=e(t.slice(0,s),n,r),i=e(t.slice(s),n,r),o=e([a,i],n,r);return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}if(Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){const e=new cF(t.map(e=>e.shape),n);return r.runWebGLProgram(e,t,s)}const{tensors2D:a,outShape:i}=fF(t,n,r),o=new lF(a.map(e=>e.shape)),u=r.runWebGLProgram(o,a,s);a.forEach(e=>r.disposeIntermediateTensorInfo(e));const l=WE({inputs:{x:u},attrs:{shape:i},backend:r});return r.disposeIntermediateTensorInfo(u),l}(u,i,n)}const gF={kernelName:wt,backendName:"webgl",kernelFunc:mF};class yF{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class bF{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xF{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=s*r,m=VT(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let w=0;w<=1;w++)for(let n=0;n<=1;n++)x+=`\n          blockIndex = rc.y + ${n};\n          pos = rc.x + ${w};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*w+n}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*w+n}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function wF({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape,c=s.texData.get(e.dataId),h="channelsLast"===n.dataFormat;let d;const p=[],f=l[2]%2!=0&&!!c.isPacked;if((1!=l[0]*l[1]*l[2]&&1!==n.outChannels||!(n.inChannels>QE))&&Ve().getBool("WEBGL_LAZILY_UNPACK")&&Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&f){const f={dataId:e.dataId,shape:[1,h?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),n.inChannels],dtype:e.dtype},m=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,r.assert(_T(c.shape,f.shape),()=>`packed reshape ${c.shape} to ${f.shape} isn't free`);const g=WE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});p.push(g);const y=eR({a:f,b:g,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o}),b=s.texData.get(y.dataId);r.assert(b.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=m,b.shape=n.outShape,(d=vE({inputs:{x:y},backend:s})).shape=n.outShape,p.push(y)}else{const r=WE({inputs:{x:e},backend:s,attrs:{shape:[1,h?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=WE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),f=eR({a:r,b:c,transposeA:!1,transposeB:!1,backend:s,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o});d=WE({inputs:{x:f},backend:s,attrs:{shape:n.outShape}}),p.push(r),p.push(c),p.push(f)}for(const r of p)s.disposeIntermediateTensorInfo(r);return d}function kF({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:h,outWidth:d,outHeight:p,dataFormat:f}=n,m="channelsLast"===f,g=l*c*h,y=p*d,b=[g,y],x=[],w=WE({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),k=WE({inputs:{x:t},backend:s,attrs:{shape:[1,g,r.sizeFromShape(t.shape)/g]}});x.push(w),x.push(k);const v=new xF(b,w.shape,n),I=s.runWebGLProgram(v,[w],"float32"),N=WE({inputs:{x:I},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const S=null!=a,C=null!=i,$="leakyrelu"===u,T=u?_E(u,!0):null,A=new OE(N.shape,k.shape,[1,y,n.outChannels],!0,!1,S,T,C,$),E=[N,k];if(a&&E.push(a),C&&E.push(i),$){const e=s.makeTensorInfo([],"float32",r.createScalarValue(o,"float32"));E.push(e),x.push(e)}const R=s.runWebGLProgram(A,E,"float32"),F=WE({inputs:{x:R},backend:s,attrs:{shape:m?[1,p,d,n.outChannels]:[1,n.outChannels,p,d]}});x.push(R);for(const r of x)s.disposeIntermediateTensorInfo(r);return F}const vF={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=g.convertConv2DDataFormat(u),d=g.computeConv2DInfo(s.shape,a.shape,i,l,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(Ve().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])p=kF({x:s,filter:a,convInfo:d,backend:n});else{const e=new yF(d);p=n.runWebGLProgram(e,[s,a],"float32")}else p=wF({x:s,filter:a,convInfo:d,backend:n});const f=WE({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class IF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===e.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r="channelsLast"===e.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${r?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${r?1:2}], coords[${r?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${e.strideDepth} - ${e.padInfo.front};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class CF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${e.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const $F={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=g.convertConv2DDataFormat(u),d=g.computeConv2DInfo(s.shape,c,i,1,o,l,!1,h),p=new IF(d);return n.runWebGLProgram(p,[s,a],"float32")}},TF={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=g.convertConv2DDataFormat(l),d=g.computeConv2DInfo(i,a.shape,o,1,u,c,!1,h),p=new NF(d);return n.runWebGLProgram(p,[s,a],"float32")}},AF={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=g.computeConv3DInfo(s.shape,a.shape,i,u,o),c=new bF(l);return n.runWebGLProgram(c,[s,a],"float32")}},EF={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=g.computeConv3DInfo(s.shape,u,i,1,o),c=new SF(l);return n.runWebGLProgram(c,[s,a],"float32")}},RF={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r,l=g.computeConv3DInfo(u,a.shape,o,1,i),c=new CF(l);return n.runWebGLProgram(c,[s,a],"float32")}},FF=FE({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),DF={kernelName:$t,backendName:"webgl",kernelFunc:FF},_F=FE({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),OF={kernelName:Tt,backendName:"webgl",kernelFunc:_F};class MF{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[`${i-1}.0`,`${o-1}.0`],[m,g,y]=c>1?[`${(i-1)/(c-1)}`,"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,x,w]=h>1?[`${(o-1)/(h-1)}`,"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const zF={kernelName:Et,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new MF(s.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[s,a,i],"float32")}};class LF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${PF(r,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?`end != ${a-1}`:"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${dA(r)} coords = getOutputCoords();\n        int end = ${BF(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${BF(r,"coords")} = idx;\n          val += getX(${PF(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function PF(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function BF(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const WF={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r,u=s.shape.length,l=g.getAxesPermutation([a],u);let c=s;null!=l&&(c=ZE({inputs:{x:s},backend:n,attrs:{perm:l}}));const h=g.getInnerMostAxes(1,u)[0];if(h!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} `+`but got axis=${a}`);const d=s.shape[h];let p=vE({inputs:{x:c},backend:n});for(let f=0;f<=Math.ceil(Math.log2(d))-1;f++){const e=new LF(c.shape,!1,o),t=e.getCustomSetupFunc(f),r=p;p=n.runWebGLProgram(e,[p],p.dtype,t),n.disposeIntermediateTensorInfo(r)}if(i){const e=new LF(c.shape,i,o),t=p;p=n.runWebGLProgram(e,[p],p.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=l){const e=ZE({inputs:{x:p},backend:n,attrs:{perm:g.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),e}return p}},VF={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=yA(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=bA(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+`${s.shape.length}.`)}};class UF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const GF={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.assert(i>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`);const u=a.shape[0],l=("NHWC"===o?a.shape[1]:a.shape[2])*i,c=("NHWC"===o?a.shape[2]:a.shape[3])*i,h=("NHWC"===o?a.shape[3]:a.shape[1])/(i*i),d=new UF("NHWC"===o?[u,l,c,h]:[u,h,l,c],i,o);return n.runWebGLProgram(d,[a],a.dtype)}};class HF{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,d=e.dilationWidth,p=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${o}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class jF{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.inHeight,o=e.inWidth,u=e.padInfo.top,l=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,d=e.dilationHeight,p=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let r=0;r<f;r++)for(let e=0;e<m;e++)y+=`\n          vec4 xTexelR${r}C${2*e} = vec4(0.);\n          vec4 wR${r}C${e} = vec4(0.);\n          vec4 xR${r}C${e} = vec4(0.);`;for(let k=0;k<f;k++)for(let e=0;e<g;e++){const t=2*e;if(y+=`\n          xR = xRCorner + ${k*d};\n          xC = xCCorner + ${t*p};\n        `,1===h){if(t<m&&(y+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${k}C${t}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${k}C${t} = vec4(previous.zw, xTexelR${k}C${t}.xy);\n                } else {\n                  xR${k}C${t} = vec4(0, 0, xTexelR${k}C${t}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xR${k}C${t} = xTexelR${k}C${t};\n              `,t+1<m)){const e=l%2==0?r.nearestLargerEven(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(y+=`\n                  xCOffset = xC + ${l%2} + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${k}C${t} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${k}C${t+1} = xTexelR${k}C${t+2};\n                `}}else t<m&&(y+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,l%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n              `,t+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${k}C${t+1} = vec4(xTexelR${k}C${t+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.xy, xTexelR${k}C${t+2}.xy);\n              `,t+1<m&&(y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n                `)),y+="}");t<m&&(y+=`\n            vec4 wTexelR${k}C${t} = getW(${k}, ${t}, d1, q);\n            wR${k}C${t} = vec4(wTexelR${k}C${t}.xz, wTexelR${k}C${t}.xz);\n          `,t+1<m&&(y+=`\n              vec4 wTexelR${k}C${t+1} = getW(${k}, ${t+1}, d1, q);\n              wR${k}C${t+1} =\n                vec4(wTexelR${k}C${t+1}.xz, wTexelR${k}C${t+1}.xz);`))}for(let r=0;r<f;r++)for(let e=0;e<m;e++)y+=`dotProd += xR${r}C${e} * wR${r}C${e};`;let b="",x="";n&&(b=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${u}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}const qF={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=s;let h=l;null==h&&(h=[1,1]),r.assert(g.eitherStridesOrDilationsAreOne(o,h),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+`1. Got strides ${o} and dilations '${h}'`);const d=g.computeConv2DInfo(a.shape,i.shape,o,h,u,c,!0);let p;return p=Ve().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new jF(d):new HF(d),n.runWebGLProgram(p,[a,i],"float32")}};class KF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${e.outChannels/e.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${r}; dm++) {\n              int d2 = d1 * ${r} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const YF={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=g.computeConv2DInfo(s.shape,c,i,o,u,l,!0),d=new KF(h);return n.runWebGLProgram(d,[s,a],"float32")}},ZF={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=g.computeConv2DInfo(c,a.shape,i,o,u,l,!0),d=new XF(h);return n.runWebGLProgram(d,[s,a],"float32")}};class JF{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const QF={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],i=r.sizeFromShape(s.shape),o=WE({inputs:{x:s},backend:n,attrs:{shape:[i]}}),u=new JF(i),l=n.runWebGLProgram(u,[o],o.dtype),c=WE({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),c}};class eD{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const tD={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=g.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",u);let c;const h=new eD(l),d=WE({inputs:{x:c=n.runWebGLProgram(h,[s,a],"float32")},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),d}},nD=FE({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),rD={kernelName:Wt,backendName:"webgl",kernelFunc:nD},sD={kernelName:Vt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=Ve().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new wE("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},aD=DE({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),iD={kernelName:Gt,backendName:"webgl",kernelFunc:aD},oD=FE({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${g.ERF_P};\n  float a1 = ${g.ERF_A1};\n  float a2 = ${g.ERF_A2};\n  float a3 = ${g.ERF_A3};\n  float a4 = ${g.ERF_A4};\n  float a5 = ${g.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),uD={kernelName:Ut,backendName:"webgl",kernelFunc:oD},lD="return exp(x);",cD=FE({opSnippet:lD,packedOpSnippet:lD,cpuKernelImpl:kA}),hD={kernelName:Ht,backendName:"webgl",kernelFunc:cD};function dD(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,u=i.shape.slice();let l=a;return a<0&&(r.assert(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+a+1),u.splice(l,0,1),WE({inputs:{x:i},backend:s,attrs:{shape:u}})}const pD={kernelName:jt,backendName:"webgl",kernelFunc:dD},fD="return exp(x) - 1.0;",mD=FE({opSnippet:fD,packedOpSnippet:fD,cpuKernelImpl:vA}),gD={kernelName:qt,backendName:"webgl",kernelFunc:mD};class yD{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function bD(e,t,n){const s=n.texData.get(e.dataId),a=r.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=WE({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),u=o.shape,l=new yD("real",u,t),c=new yD("imag",u,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:u},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:u}],d=n.runWebGLProgram(l,h,"float32"),p=n.runWebGLProgram(c,h,"float32"),f=NE({inputs:{real:d,imag:p},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p);const m=WE({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const xD={kernelName:Kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return bD(r,!1,n)}};class wD{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function kD(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:i}=n;if("string"===(i=i||r.inferDtype(a))){const e=r.getArrayFromDType(i,r.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,i,e)}{const e=new wD(s,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],i,n)}}const vD={kernelName:Xt,backendName:"webgl",kernelFunc:kD};class ID{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const ND={kernelName:Yt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new ID(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},SD="return floor(x);",CD=FE({opSnippet:SD,packedOpSnippet:SD,cpuKernelImpl:IA}),$D={kernelName:Zt,backendName:"webgl",kernelFunc:CD},TD=DE({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),AD={kernelName:Jt,backendName:"webgl",kernelFunc:TD};class ED{constructor(e){this.variableNames=["A"];const t=VT(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class RD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=VT(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const FD={kernelName:Lr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,u="undefined"!=typeof ImageBitmap&&s instanceof ImageBitmap,[l,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[c,l],d=[c,l,a];(o||i||u)&&(null==DD&&(DD=document.createElement("canvas").getContext("2d")),DD.canvas.width=l,DD.canvas.height=c,DD.drawImage(s,0,0,l,c),s=DD.canvas);const p=n.makeTensorInfo(h,"int32");n.texData.get(p.dataId).usage=dT.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const f=Ve().getBool("WEBGL_PACK")?new RD(d):new ED(d),m=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),m}};let DD;const _D={kernelName:Wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:h,dilations:d,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,y=g.convertConv2DDataFormat(h),b=g.computeConv2DInfo(a.shape,i.shape,l,d,c,p,!1,y);let x;const w=[];if(1!==b.filterHeight||1!==b.filterWidth||1!==b.dilationHeight||1!==b.dilationWidth||1!==b.strideHeight||1!==b.strideWidth||"SAME"!==b.padInfo.type&&"VALID"!==b.padInfo.type)if(Ve().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])x=kF({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=null!=o,t=null!=u,s="leakyrelu"===f,l=f?_E(f,!1):null,c=new yF(b,e,l,t,s),h=[a,i];if(o&&h.push(o),u&&h.push(u),s){const e=n.makeTensorInfo([],"float32",r.createScalarValue(m,"float32"));h.push(e),w.push(e)}x=n.runWebGLProgram(c,h,"float32")}else x=wF({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const k=WE({inputs:{x:x},backend:n,attrs:{shape:b.outShape}});return w.push(x),w.forEach(e=>n.disposeIntermediateTensorInfo(e)),k}},OD={kernelName:Vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=[];let y=h;null==y&&(y=[1,1]),r.assert(g.eitherStridesOrDilationsAreOne(l,y),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+`1. Got strides ${l} and dilations '${y}'`);const b=g.computeConv2DInfo(a.shape,i.shape,l,y,c,d,!0),x=Ve().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,w=p?_E(p,x):null,k=[a,i],v=null!=o,I=null!=u,N="leakyrelu"===p;if(v&&k.push(o),I&&k.push(u),N){const e=n.makeTensorInfo([],"float32",r.createScalarValue(f,"float32"));k.push(e),m.push(e)}let S;S=x?new jF(b,v,w,I,N):new HF(b,v,w,I,N);const C=n.runWebGLProgram(S,k,"float32");return m.forEach(e=>n.disposeIntermediateTensorInfo(e)),C}};class MD{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=dA(t.length),s=dA(n.length);this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const zD={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=a.shape,o=i[i.length-1],[u,l,c,h]=g.prepareAndValidate(s,a),d=WE({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),p=WE({inputs:{x:s},backend:n,attrs:{shape:[r.sizeFromShape(s.shape)/c,c]}}),f=new MD(o,h,[l,c]),m=n.runWebGLProgram(f,[p,d],p.dtype),y=WE({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),y}};class LD{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=dA(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e.length;s++)r.push(2===s?"int(getIndices(resRC.x, resRC.z))":`${n[s]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const PD={kernelName:en,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=s,l=r.parseAxisParam(o,a.shape)[0],c=g.segment_util.collectGatherOpShapeInfo(a,i,l,u),h=r.sizeFromShape(i.shape),d=[],p=WE({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=WE({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});d.push(p),d.push(f);const m=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(p),r=NA(t,e,m);return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const y=new LD(p.shape,m),b=n.runWebGLProgram(y,[p,f],p.dtype);d.push(b);const x=WE({inputs:{x:b},backend:n,attrs:{shape:c.outputShape}});return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},BD=DE({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:SA,dtype:"bool"}),WD={kernelName:nn,backendName:"webgl",kernelFunc:BD},VD=DE({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),UD={kernelName:rn,backendName:"webgl",kernelFunc:VD},GD={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return bD(r,!0,n)}},HD=FE({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),jD={kernelName:un,backendName:"webgl",kernelFunc:HD},qD=FE({opSnippet:"return float(isinf(x));",dtype:"bool"}),KD={kernelName:ln,backendName:"webgl",kernelFunc:qD},XD=FE({opSnippet:"return float(isnan(x));",dtype:"bool"}),YD={kernelName:cn,backendName:"webgl",kernelFunc:XD},ZD=DE({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:CA,dtype:"bool"}),JD={kernelName:dn,backendName:"webgl",kernelFunc:ZD},QD=DE({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),e_={kernelName:pn,backendName:"webgl",kernelFunc:QD},t_={kernelName:fn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=$A(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},n_=FE({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:TA}),r_={kernelName:mn,backendName:"webgl",kernelFunc:n_},s_=FE({opSnippet:"return log(1.0 + x);"}),a_={kernelName:gn,backendName:"webgl",kernelFunc:s_},i_=DE({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),o_={kernelName:yn,backendName:"webgl",kernelFunc:i_},u_=FE({opSnippet:"return float(!(x >= 1.0));"}),l_={kernelName:bn,backendName:"webgl",kernelFunc:u_},c_=DE({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),h_={kernelName:xn,backendName:"webgl",kernelFunc:c_};class d_{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`};\n        setOutput(val);\n      }\n    `}}class p_{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`};\n        setOutput(result);\n      }\n    `}}const f_={kernelName:kn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r,l=Ve().getBool("WEBGL_PACK_NORMALIZATION")?new p_(s.shape,a,i,o,u):new d_(s.shape,a,i,o,u);return n.runWebGLProgram(l,[s],s.dtype)}};class m_{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const g_={kernelName:vn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new m_(s.shape,o,u,l,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function y_(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=g.getAxesPermutation(c,u),d=null!=h,p=n.shouldExecuteOnCPU([a]);let f=a;if(d){if(p){const e=n.texData.get(f.dataId).values,t=new Array(u);for(let n=0;n<t.length;n++)t[n]=a.shape[h[n]];const r=UA(e,a.shape,a.dtype,h,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=r}else f=KE(a,h,n);c=g.getInnerMostAxes(c.length,u)}g.assertAxesAreInnerMostDims("max",c,u);const[m,y]=g.computeOutAndReduceShapes(f.shape,c);let b,x=m;if(o&&(x=g.expandShapeToKeepDim(m,l)),p){const e=n.texData.get(f.dataId),t=AA(e.values,r.sizeFromShape(y),x,a.dtype);b=n.makeTensorInfo(x,a.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const a=r.sizeFromShape(t),i=WE({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=HE(i,e.dtype,"max",s),u=WE({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),u}(f,y,x,n);return d&&n.disposeIntermediateTensorInfo(f),b}const b_={kernelName:In,backendName:"webgl",kernelFunc:y_},x_=DE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:EA}),w_={kernelName:Nn,backendName:"webgl",kernelFunc:x_},k_={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;BT(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(g.eitherStridesOrDilationsAreOne(o,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+`Got strides ${o} and dilations '1'`);const c=g.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return vE({inputs:{x:a},backend:n});const h=new ER(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},v_={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=g.computePool3DInfo(s.shape,a,i,[1,1,1],o,l,u),h=new RR(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class I_{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n          wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${t*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class N_{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n           wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${t*n*r-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${r} +\n                  wR * ${r} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const S_={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=g.computePool3DInfo(i.shape,o,u,[1,1,1],l,c),d=new RR(h,"max",!0),p=n.runWebGLProgram(d,[i],i.dtype),f=new N_(h),m=n.runWebGLProgram(f,[s,p],i.dtype);return n.disposeIntermediateTensorInfo(p),m}},C_={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;BT([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,d=g.computePool2DInfo(o.shape,u,l,1,c,h),p=new ER(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),m=new I_(d),y=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),y}},$_={kernelName:An,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,l=n;r.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];r.assert(g.eitherStridesOrDilationsAreOne(i,c),()=>"Error in maxPool: Either strides or dilations must be 1. "+`Got strides ${i} and dilations '${c}'`);const h=g.computePool2DInfo(s.shape,a,i,c,o),[d,p]=function(e,t,n,r){let s=new ER(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new ER(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(s,u,h,l);return[d,p]}},T_={kernelName:En,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:i}=t,o=n,u=s.shape.length,l=r.parseAxisParam(i,s.shape);let c=l;const h=g.getAxesPermutation(c,u),d=null!=h,p=o.shouldExecuteOnCPU([s]),f=[];let m=s;if(d){if(p){const e=o.texData.get(m.dataId).values,t=new Array(u);for(let r=0;r<t.length;r++)t[r]=s.shape[h[r]];const n=UA(e,s.shape,s.dtype,h,t);m=o.makeTensorInfo(t,s.dtype),o.texData.get(m.dataId).values=n}else m=KE(s,h,o);f.push(m),c=g.getInnerMostAxes(c.length,u)}g.assertAxesAreInnerMostDims("sum",c,u);const[y,b]=g.computeOutAndReduceShapes(m.shape,c);let x=y;a&&(x=g.expandShapeToKeepDim(y,l));const w=function(e,t,n,s){const a=r.sizeFromShape(t),i=WE({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=HE(i,"float32","mean",s),u=WE({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),u}(m,b,x,o);for(const r of f)o.disposeIntermediateTensorInfo(r);return w}},A_={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=g.getAxesPermutation(c,u);let d=a;null!=h&&(d=ZE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=g.getInnerMostAxes(c.length,a.shape.length)),g.assertAxesAreInnerMostDims("min",c,u);const[p,f]=g.computeOutAndReduceShapes(d.shape,c),m=WE({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(f)]}}),y=HE(m,m.dtype,"min",n);let b;return b=WE(o?{inputs:{x:y},backend:n,attrs:{shape:g.expandShapeToKeepDim(p,l)}}:{inputs:{x:y},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},E_=DE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:RA}),R_={kernelName:Fn,backendName:"webgl",kernelFunc:E_};class F_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=dA(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class D_{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=dA(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=jA("rc",r),u=jA("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const __={kernelName:Dn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new D_(r.shape,s,a):new F_(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},O_=DE({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),M_={kernelName:_n,backendName:"webgl",kernelFunc:O_};class z_{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const L_=DE({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),P_={kernelName:Bt,backendName:"webgl",kernelFunc:L_},B_="return a - b;",W_=DE({opSnippet:B_,packedOpSnippet:B_,supportsComplex:!0,cpuKernelImpl:BA}),V_={kernelName:Sr,backendName:"webgl",kernelFunc:W_};function U_(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=r.parseAxisParam([i],a.shape),u=y_({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=g.expandShapeToKeepDim(u.shape,o),c=WE({inputs:{x:u},backend:n,attrs:{shape:l}}),h=W_({inputs:{a:a,b:c},backend:n}),d=cD({inputs:{x:h},backend:n}),p=XE({inputs:{x:d},backend:n,attrs:{axis:o,keepDims:!1}}),f=WE({inputs:{x:p},backend:n,attrs:{shape:l}}),m=L_({inputs:{a:d,b:f},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}const G_={kernelName:vr,backendName:"webgl",kernelFunc:U_},H_={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:U_({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=new z_(u.shape[0],u.shape[1],a),c=l.getCustomSetupFunc(i),h=n.runWebGLProgram(l,[u],"int32",c);return o||n.disposeIntermediateTensorInfo(u),h}},j_="return -x;",q_={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=DA(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=Ve().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new hE(r.shape,j_):new QA(r.shape,j_),n.runWebGLProgram(s,[r],r.dtype)}},K_=y.nonMaxSuppressionV3Impl,X_={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=K_(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Y_=y.nonMaxSuppressionV4Impl,Z_={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=Y_(c,h,i,o,u,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},J_=y.nonMaxSuppressionV5Impl,Q_={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){g.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),d=i,p=o,f=u,m=l,{selectedIndices:y,selectedScores:b}=J_(c,h,d,p,f,m);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class eO{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const tO={kernelName:Un,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:i,onValue:o,offValue:u}=s,l=r.sizeFromShape(a.shape),c=new eO(l,i,o,u),h=WE({inputs:{x:a},backend:n,attrs:{shape:[l]}}),d=n.runWebGLProgram(c,[h],a.dtype);n.disposeIntermediateTensorInfo(h);const p=WE({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(d),p}};function nO(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=ZR({inputs:{input:r},backend:n}),t=nO({inputs:{x:e},backend:n}),s=dF({inputs:{input:r},backend:n}),a=nO({inputs:{x:s},backend:n}),i=NE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return kD({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const rO={kernelName:Mr,backendName:"webgl",kernelFunc:nO},sO={kernelName:Vn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=ZR({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=dF({inputs:{input:s},backend:r}),i=nO({inputs:{x:a},backend:r}),o=NE({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return kD({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},aO={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return dD({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],l=mF({inputs:t.map(e=>{const t=dD({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t}),backend:n,attrs:{axis:a}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}};class iO{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=dA(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class oO{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=dA(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=jA("rc",r),u=jA("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let f=0,m=1===r?2:4;f<m;f++)p+=`\n        ${h[f]}\n        if (${d}) {\n          result[${f}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${f}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p+=1===r?"} ":"}}"}\n        setOutput(result);\n      }\n    `}}const uO=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r,o=Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oO(s.shape,a,i):new iO(s.shape,a,i);return n.runWebGLProgram(o,[s],s.dtype)},lO={kernelName:Hn,backendName:"webgl",kernelFunc:uO},cO=DE({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),hO={kernelName:qn,backendName:"webgl",kernelFunc:cO},dO={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=[],c=r.parseAxisParam(i,a.shape);let h=c;const d=g.getAxesPermutation(h,u);let p,f=a;if(null!=d&&(f=ZE({inputs:{x:a},backend:n,attrs:{perm:d}}),h=g.getInnerMostAxes(h.length,u),l.push(f)),g.assertAxesAreInnerMostDims("prod",h,u),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:s}=_A(f.shape,f.dtype,e,h);p=n.makeTensorInfo(r,s,t)}else{const[e,t]=g.computeOutAndReduceShapes(f.shape,h),s=r.sizeFromShape(t),i=WE({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),o=HE(i,As(a.dtype),"prod",n);p=WE({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(i),l.push(o)}if(o){l.push(p);const e=g.expandShapeToKeepDim(p.shape,c);p=WE({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},pO=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=OA(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},fO={kernelName:Yn,backendName:"webgl",kernelFunc:pO},mO=FE({opSnippet:"return 1.0 / x;"}),gO={kernelName:Jn,backendName:"webgl",kernelFunc:mO},yO=FE({opSnippet:eE+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),bO={kernelName:Qn,backendName:"webgl",kernelFunc:yO},xO=FE({opSnippet:eE+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),wO={kernelName:ar,backendName:"webgl",kernelFunc:xO};class kO{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class vO{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const IO={kernelName:rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=Ve().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new vO(s.shape,u,l,a,i):new kO(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],"float32")}};class NO{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const SO={kernelName:sr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new NO(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class CO{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const $O={kernelName:tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=new CO(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class TO{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const AO={kernelName:nr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new TO(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class EO{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=dA(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class RO{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=jA("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=dA(n);function o(n){const r=e.map((r,s)=>(function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`})(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const FO={kernelName:ir,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s,o=a.shape.length,u=r.parseAxisParam(i,a.shape);if(0===o)return vE({inputs:{x:a},backend:n});const l=Ve().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new RO(a.shape,u):new EO(a.shape,u);return n.runWebGLProgram(l,[a],a.dtype)}};class DO{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const s=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[u,l]=g.getImageCenter(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const _O={kernelName:Pr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new DO(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},OO=FE({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),MO={kernelName:or,backendName:"webgl",kernelFunc:OO},zO=FE({opSnippet:"return inversesqrt(x);",cpuKernelImpl:MA}),LO={kernelName:ur,backendName:"webgl",kernelFunc:zO};class PO{constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=dA(s.length),u=dA(a.length);let l="";1===n?l="i":2===n&&(l="i, j");let c="";1===r?c="i":2===r&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${`getIndices(${l})`});\n              flattenedIndex += index * ${t>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${`getUpdates(${c})`};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const BO={kernelName:lr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=g.calculateShapes(a,s,i),d=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const p=WE({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),f=WE({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new PO(u,o,p.shape.length,f.shape.length,c,d),b=n.runWebGLProgram(y,[f,p,m],f.dtype),x=WE({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(m),x}};class WO{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=dA(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const VO={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new WO(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],Ts(s.dtype,a.dtype))}},UO=FE({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${g.SELU_SCALEALPHA};\n  float scale = ${g.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),GO={kernelName:hr,backendName:"webgl",kernelFunc:UO},HO=FE({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),jO={kernelName:gr,backendName:"webgl",kernelFunc:HO},qO=FE({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),KO={kernelName:mr,backendName:"webgl",kernelFunc:qO},XO=FE({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),YO={kernelName:pr,backendName:"webgl",kernelFunc:XO},ZO=FE({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),JO={kernelName:fr,backendName:"webgl",kernelFunc:ZO},QO=FE({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),eM={kernelName:yr,backendName:"webgl",kernelFunc:QO},tM={kernelName:wr,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;r.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const u=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...o);for(let r=1+i.length;r<a.shape.length;++r)l.push([0,0]);const c=[],h=uO({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),d=g.getReshaped(h.shape,i,u,!1),p=g.getPermuted(d.length,i.length,!1),f=g.getReshapedPermuted(h.shape,i,u,!1),m=WE({inputs:{x:h},backend:n,attrs:{shape:d}}),y=ZE({inputs:{x:m},backend:n,attrs:{perm:p}}),b=WE({inputs:{x:y},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(y),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},nM={kernelName:Cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,strides:c,outputSize:h}=g.calculateShapes(a,s,o),d=new PO(l,u,s.shape.length,a.shape.length,c,[h,1],!1),p=n.runWebGLProgram(d,[a,s,i],a.dtype),f=WE({inputs:{x:p},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),f}},rM={kernelName:kr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,u=r.parseAxisParam(o,a.shape)[0],l=g.prepareSplitSize(a,i,u),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{const t=[...h];t[u]=e;const r=HR({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r})}},sM=FE({opSnippet:"return sqrt(x);"}),aM={kernelName:br,backendName:"webgl",kernelFunc:sM},iM=FE({opSnippet:"return x * x;"}),oM={kernelName:Nr,backendName:"webgl",kernelFunc:iM},uM=DE({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"}),lM={kernelName:Ir,backendName:"webgl",kernelFunc:uM},cM={kernelName:zr,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=new QA(r.shape,eE+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return n.runWebGLProgram(s,[r],r.dtype)}};class hM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=dA(n.length),a=dA(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const dM={kernelName:$r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=r,{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=h.sliceInfo(s.shape,a,i,o,u,l,c,d,p),w=WE({inputs:{x:s},backend:n,attrs:{shape:b}});let k;if(f){const e=HR({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=WE({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,s.dtype,[]);else if(n.shouldExecuteOnCPU([w])){const e=n.texData.get(w.dataId),t=ja(w.shape,w.dtype,e.values),r=PA(x,t,g,m);k=n.makeTensorInfo(x,w.dtype,r.values)}else{const e=new hM(m,g,x);k=n.runWebGLProgram(e,[w],w.dtype)}const v=WE({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},pM=FE({opSnippet:"return tan(x);"}),fM={kernelName:Tr,backendName:"webgl",kernelFunc:pM},mM=FE({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"});class gM{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const r=dA(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<e.length;s++)r.push(`imod(${n[s]}, ${e[s]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function yM(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:i}=s;if("string"===a.dtype){const e=n.readSync(a.dataId).map(e=>r.decodeString(e)),t=ja(a.shape,a.dtype,e),s=WA(t,i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const o=new gM(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}class bM{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const xM=[f_,g_,tR,nR,sR,iR,lR,dR,pR,fR,bR,xR,kR,IR,$R,SR,AR,DR,FR,MR,zR,LR,WR,qR,KR,QR,nF,aF,uF,SE,gF,$F,TF,vF,EF,RF,AF,DF,OF,zF,WF,VF,GF,YF,ZF,qF,QF,tD,rD,sD,iD,uD,hD,pD,gD,xD,vD,ND,$D,AD,FD,_D,OD,zD,PD,WD,UD,IE,GD,pF,jD,KD,YD,TE,JD,e_,t_,a_,r_,o_,l_,h_,b_,v_,k_,S_,C_,$_,w_,T_,A_,R_,__,M_,H_,BE,q_,X_,Z_,Q_,YR,tO,sO,aO,lO,hO,RE,dO,fO,JR,P_,gO,wO,bO,VE,IO,SO,$O,AO,FO,_O,MO,LO,BO,VO,GO,jO,KO,YO,JO,jR,G_,eM,tM,nM,rM,aM,oM,lM,cM,dM,V_,YE,fM,{kernelName:Ar,backendName:"webgl",kernelFunc:mM},{kernelName:Er,backendName:"webgl",kernelFunc:yM},{kernelName:Rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=n.readSync(s.dataId),[u,l]=VA(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},JE,{kernelName:Dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;BT(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=GA(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:_r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(l[c++]=i.shape[m]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(u);for(let m=0;m<f.length;m++){d[a]=m;const e=HR({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),t=WE({inputs:{x:e},backend:n,attrs:{shape:l}});f[m]=t,h.push(e)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},{kernelName:Or,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s,u=a.shape.length,l=[];let c=0;const h=g.getAxesPermutation([c],u);let d=a;null!=h&&(d=ZE({inputs:{x:a},backend:n,attrs:{perm:h}}),l.push(d),c=g.getInnerMostAxes(1,u)[0]);const p=g.segment_util.computeOutShape(d.shape,c,o),f=r.sizeFromShape([d.shape[c]]),m=WE({inputs:{x:d},backend:n,attrs:{shape:[-1,f]}});l.push(m);const y=As(a.dtype),b=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],u=g.segment_util.segOpComputeOptimalWindowSize(o,a),c=new bM({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(l.push(h),h.shape[1]===a)return h;const d=pO({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=yM({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});return l.push(d),l.push(p),b(h,t,p,s,a)},x=WE({inputs:{x:b(m,"unsortedSegmentSum",i,y,o)},backend:n,attrs:{shape:p}});let w=x;if(null!=h){l.push(x);const e=g.getUndoAxesPermutation(h);w=ZE({inputs:{x:w},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),w}},rO];for(const PM of xM)Kr(PM);function wM(e,t,n,r){return new(n||(n=Promise))((function(s,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function o(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){e.done?s(e.value):new n((function(t){t(e.value)})).then(i,o)}u((r=r.apply(e,t||[])).next())}))}function kM(e,t){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}var vM={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},IM={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},NM={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};function SM(e){return void 0===e&&(e={version:1,alpha:1}),wM(this,void 0,void 0,(function(){var t,n,r,s,a,i,o;return kM(this,(function(u){switch(u.label){case 0:if(null==b)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(r=e.version.toFixed(2),s=e.alpha?e.alpha.toFixed(2):"",a=-1,i=1,null==e.modelUrl){if(!(r in NM))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(NM));if(!(s in NM[r]))throw new Error("MobileNet constructed with invalid alpha "+e.alpha+". Valid multipliers for this version are: "+Object.keys(NM[r])+".");a=(t=NM[r][s].inputRange)[0],i=t[1]}return null!=e.inputRange&&(a=(n=e.inputRange)[0],i=n[1]),[4,(o=new CM(r,s,e.modelUrl,a,i)).load()];case 1:return u.sent(),[2,o]}}))}))}var CM=function(){function e(e,t,n,r,s){void 0===r&&(r=-1),void 0===s&&(s=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=r,this.inputMax=s,this.normalizationConstant=(s-r)/255}return e.prototype.load=function(){return wM(this,void 0,void 0,(function(){var e,t,n,r=this;return kM(this,(function(s){switch(s.label){case 0:return this.modelUrl?(e=this,[4,$k(this.modelUrl)]):[3,2];case 1:return e.model=s.sent(),[3,4];case 2:return t=this,[4,$k(NM[this.version][this.alpha].url,{fromTFHub:!0})];case 3:t.model=s.sent(),s.label=4;case 4:return[4,(n=yo((function(){return r.model.predict(yc([1,224,224,3]))}))).data()];case 5:return s.sent(),n.dispose(),[2]}}))}))},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),yo((function(){e instanceof xs||(e=u.fromPixels(e));var r=e.toFloat().mul(n.normalizationConstant).add(n.inputMin),s=r;224===e.shape[0]&&224===e.shape[1]||(s=Od.resizeBilinear(r,[224,224],!0));var a=s.reshape([-1,224,224,3]);return t?n.model.execute(a,IM[n.version]).squeeze([1,2]):n.model.predict(a).slice([0,1],[-1,1e3])}))},e.prototype.classify=function(e,t){return void 0===t&&(t=3),wM(this,void 0,void 0,(function(){var n,r;return kM(this,(function(s){switch(s.label){case 0:return[4,$M(n=this.infer(e),t)];case 1:return r=s.sent(),n.dispose(),[2,r]}}))}))},e}();function $M(e,t){return wM(this,void 0,void 0,(function(){var n,r,s,a,i,o,u;return kM(this,(function(l){switch(l.label){case 0:return[4,(n=e.softmax()).data()];case 1:for(r=l.sent(),n.dispose(),s=[],u=0;u<r.length;u++)s.push({value:r[u],index:u});for(s.sort((function(e,t){return t.value-e.value})),a=new Float32Array(t),i=new Int32Array(t),u=0;u<t;u++)a[u]=s[u].value,i[u]=s[u].index;for(o=[],u=0;u<i.length;u++)o.push({className:vM[i[u]],probability:a[u]});return[2,o]}}))}))}var TM=function(){function e(e){this.store=e}return e.prototype.ngOnInit=function(){},e.prototype.ngOnDestroy=function(){this.stopVideo(this.webCamEl.nativeElement)},e.prototype.stopVideo=function(e){var t=e.srcObject;(t&&t.getTracks()||[]).forEach((function(e){return e.stop()})),e.srcObject=null},e.prototype.onEnableCamera=function(){return V.__awaiter(this,void 0,void 0,(function(){var e=this;return V.__generator(this,(function(t){return navigator.mediaDevices.getUserMedia&&navigator.mediaDevices.getUserMedia({video:!0}).then((function(t){console.log("stream",t),e.webCamEl.nativeElement.srcObject=t})).catch((function(e){console.log("Something went wrong!",e)})),[2]}))}))},e.prototype.runClassifierOnStream=function(e){return V.__awaiter(this,void 0,void 0,(function(){var e,t,n,r=this;return V.__generator(this,(function(s){switch(s.label){case 0:return[4,SM()];case 1:return e=s.sent(),[4,M.webcam(this.webCamEl.nativeElement,{resizeWidth:320,resizeHeight:160})];case 2:return t=s.sent(),console.log("webcam",t),n=setInterval((function(){return V.__awaiter(r,void 0,void 0,(function(){var n,r;return V.__generator(this,(function(s){switch(s.label){case 0:return[4,t.capture()];case 1:return n=s.sent(),[4,e.classify(n)];case 2:return r=s.sent(),this.results=r,n.dispose(),[4,Wd()];case 3:return s.sent(),[2]}}))}))}),1e3),[2,function(){t.stop(),clearInterval(n)}]}}))}))},e.prototype.onDisableCamera=function(){this.webCamStopper&&this.webCamStopper(),this.results=[],this.stopVideo(this.webCamEl.nativeElement)},e.prototype.onLabelChange=function(e,t){},e.prototype.onDescriptionChange=function(e,t){},e}(),AM=n("yGQT"),EM=L.qb({encapsulation:0,styles:[["[_nghost-%COMP%]{width:100%;display:flex;flex-direction:column;padding:1rem 1.25rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]{flex:1 1 0;padding-bottom:5rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   dwu-code-snippet[_ngcontent-%COMP%]{margin:.5rem 1rem;max-width:40rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]{flex:0 0 auto;display:flex;align-items:center}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button-container[_ngcontent-%COMP%]{flex:1 1 0}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[_ngcontent-%COMP%]{background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[_ngcontent-%COMP%]{flex:1 1 0;background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]{flex:0 0 auto;background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none;height:26px;display:flex;align-items:center}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{font-size:1rem}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .video-container[_ngcontent-%COMP%]{width:20rem;max-width:20rem;background-color:#9d9b99;line-height:0}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .video-container[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{width:100%}"]],data:{}});function RM(e){return L.Nb(0,[(e()(),L.sb(0,0,null,null,1,"div",[],null,null,null,null,null)),(e()(),L.Lb(1,null,[" ",": (",")\n"]))],null,(function(e,t){e(t,1,0,t.context.$implicit.className,t.context.$implicit.probability)}))}function FM(e){return L.Nb(0,[L.Jb(402653184,1,{webCamEl:0}),(e()(),L.sb(1,0,null,null,1,"p",[],null,null,null,null,null)),(e()(),L.Lb(-1,null,["Welcome to Picture Piper Test App"])),(e()(),L.sb(3,0,null,null,7,"div",[["class","camera-container"]],null,null,null,null,null)),(e()(),L.sb(4,0,null,null,4,"div",[["class","camera-control-buttons"]],null,null,null,null,null)),(e()(),L.sb(5,0,null,null,1,"button",[["class","control-button"]],null,[[null,"click"]],(function(e,t,n){var r=!0;return"click"===t&&(r=!1!==e.component.onEnableCamera()&&r),r}),null,null)),(e()(),L.Lb(-1,null,["Enable Camera"])),(e()(),L.sb(7,0,null,null,1,"button",[["class","control-button"]],null,[[null,"click"]],(function(e,t,n){var r=!0;return"click"===t&&(r=!1!==e.component.onDisableCamera()&&r),r}),null,null)),(e()(),L.Lb(-1,null,["Disable Camera"])),(e()(),L.sb(9,0,null,null,1,"div",[["class","video-container"]],null,null,null,null,null)),(e()(),L.sb(10,0,[[1,0],["webCamEl",1]],null,0,"video",[["autoplay",""],["muted",""],["playsinline",""]],null,null,null,null,null)),(e()(),L.sb(11,0,null,null,2,"label",[],null,null,null,null,null)),(e()(),L.sb(12,0,null,null,0,"input",[["type","checkbox"]],null,null,null,null,null)),(e()(),L.Lb(-1,null,[" Save training images\n"])),(e()(),L.hb(16777216,null,null,1,null,RM)),L.rb(15,278528,null,0,W.l,[L.O,L.L,L.r],{ngForOf:[0,"ngForOf"]},null)],(function(e,t){e(t,15,0,t.component.results)}),null)}function DM(e){return L.Nb(0,[(e()(),L.sb(0,0,null,null,1,"dwu-pp-test-app",[],null,null,null,FM,EM)),L.rb(1,245760,null,0,TM,[AM.n],null,null)],(function(e,t){e(t,1,0)}),null)}var _M=L.ob("dwu-pp-test-app",TM,DM,{},{},[]),OM=n("ZYCi"),MM=function(){return function(){}}();n.d(t,"PpTestAppModuleNgFactory",(function(){return zM}));var zM=L.pb(P,[],(function(e){return L.Ab([L.Bb(512,L.j,L.ab,[[8,[B.a,_M]],[3,L.j],L.w]),L.Bb(4608,W.o,W.n,[L.t,[2,W.A]]),L.Bb(1073742336,W.c,W.c,[]),L.Bb(1073742336,OM.p,OM.p,[[2,OM.u],[2,OM.l]]),L.Bb(1073742336,MM,MM,[]),L.Bb(1073742336,P,P,[]),L.Bb(1024,OM.j,(function(){return[[{path:"",component:TM}]]}),[])])}))},YSVl:function(e,t,n){var r=n("EhIR"),s=n("uDiL"),a=n("pJ6O"),i=n("yuCN"),o=n("euyF"),u=n("ie1u"),l=n("pJ3+");l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},euyF:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n=s[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(s=0==(n=o[127&a]^=r+(i=i+1640531527|0))?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,o[s]=(r^=r>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},ie1u:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},"pJ3+":function(e,t,n){var r;!function(s,a){var i,o=this,u=256,l=6,c="random",h=a.pow(u,l),d=a.pow(2,52),p=2*d,f=u-1;function m(e,t,n){var r=[],f=b(function e(t,n){var r,s=[],a=typeof t;if(n&&"object"==a)for(r in t)try{s.push(e(t[r],n-1))}catch(i){}return s.length?s:"string"==a?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(e)),x(e)}catch(r){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,x(s)]}}():e,3),r),m=new g(r),w=function(){for(var e=m.g(l),t=h,n=0;e<d;)e=(e+n)*u,t*=u,n=m.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|m.g(4)},w.quick=function(){return m.g(4)/4294967296},w.double=w,b(x(m.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&y(r,m),e.state=function(){return y(m,{})}),n?(a[c]=e,t):e})(w,f,"global"in t?t.global:this==a,t.state)}function g(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=f&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=f&s+1],n=n*u+i[f&(i[s]=i[a=f&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function y(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function b(e,t){for(var n,r=e+"",s=0;s<r.length;)t[f&s]=f&(n^=19*t[f&s])+r.charCodeAt(s++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(a["seed"+c]=m,b(a.random(),s),e.exports){e.exports=m;try{i=n(6)}catch(w){}}else void 0===(r=(function(){return m}).call(t,n,t,e))||(e.exports=r)}([],Math)},pJ6O:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},uDiL:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},yuCN:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],r[s]=n^=(e^=e<<13)^e<<9,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))}}]);