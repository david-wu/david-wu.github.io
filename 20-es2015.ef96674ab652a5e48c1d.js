/*! For license information please see 20-es2015.ef96674ab652a5e48c1d.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{10:function(e,t){},11:function(e,t){},12:function(e,t){},"2lpH":function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(C){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=s;var a={},i={};function o(e,t){var n,r,s;return t?(s=0<=(e>>>=0)&&e<256)&&(r=i[e])?r:(n=l(e,(0|e)<0?-1:0,!0),s&&(i[e]=n),n):(s=-128<=(e|=0)&&e<128)&&(r=a[e])?r:(n=l(e,e<0?-1:0,!1),s&&(a[e]=n),n)}function u(e,t){if(isNaN(e))return t?b:y;if(t){if(e<0)return b;if(e>=f)return S}else{if(e<=-m)return I;if(e+1>=m)return k}return e<0?u(-e,t).neg():l(e%d|0,e/d|0,t)}function l(e,t,n){return new r(e,t,n)}r.fromInt=o,r.fromNumber=u,r.fromBits=l;var c=Math.pow;function h(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return y;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return h(e.substring(1),t,n).neg();for(var s=u(c(n,8)),a=y,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var p=u(c(n,o));a=a.mul(p).add(u(l))}else a=(a=a.mul(s)).add(u(l))}return a.unsigned=t,a}function p(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?h(e,t):l(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=h,r.fromValue=p;var d=4294967296,f=d*d,m=f/2,g=o(1<<24),y=o(0);r.ZERO=y;var b=o(0,!0);r.UZERO=b;var x=o(1);r.ONE=x;var w=o(1,!0);r.UONE=w;var v=o(-1);r.NEG_ONE=v;var k=l(-1,2147483647,!1);r.MAX_VALUE=k;var S=l(-1,-1,!0);r.MAX_UNSIGNED_VALUE=S;var I=l(0,-2147483648,!1);r.MIN_VALUE=I;var N=r.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=u(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=u(c(e,6),this.unsigned),a=this,i="";;){var o=a.div(s),l=(a.sub(o.mul(s)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(e){return s(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(s(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(x)},N.neg=N.negate,N.add=function(e){s(e)||(e=p(e));var t=0,n=0,r=0,a=0;return r+=(a+=(65535&this.low)+(65535&e.low))>>>16,n+=(r+=(this.low>>>16)+(e.low>>>16))>>>16,t+=(n+=(65535&this.high)+(65535&e.high))>>>16,t+=(this.high>>>16)+(e.high>>>16),l((r&=65535)<<16|(a&=65535),(t&=65535)<<16|(n&=65535),this.unsigned)},N.subtract=function(e){return s(e)||(e=p(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return y;if(s(e)||(e=p(e)),n)return l(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return y;if(this.eq(I))return e.isOdd()?I:y;if(e.eq(I))return this.isOdd()?I:y;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(g)&&e.lt(g))return u(this.toNumber()*e.toNumber(),this.unsigned);var t=65535&this.high,r=this.low>>>16,a=65535&this.low,i=65535&e.high,o=e.low>>>16,c=65535&e.low,h=0,d=0,f=0,m=0;return f+=(m+=a*c)>>>16,d+=(f+=r*c)>>>16,f&=65535,d+=(f+=a*o)>>>16,h+=(d+=t*c)>>>16,d&=65535,h+=(d+=r*o)>>>16,d&=65535,h+=(d+=a*i)>>>16,h+=(this.high>>>16)*c+t*o+r*i+a*(e.high>>>16),l((f&=65535)<<16|(m&=65535),(h&=65535)<<16|(d&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(s(e)||(e=p(e)),e.isZero())throw Error("division by zero");var t,r,a;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?b:y;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return b;if(e.gt(this.shru(1)))return w;a=b}else{if(this.eq(I))return e.eq(x)||e.eq(v)?I:e.eq(I)?x:(t=this.shr(1).div(e).shl(1)).eq(y)?e.isNegative()?x:v:(r=this.sub(e.mul(t)),a=t.add(r.div(e)));if(e.eq(I))return this.unsigned?b:y;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=y}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(t)/Math.LN2),o=i<=48?1:c(2,i-48),h=u(t),d=h.mul(e);d.isNegative()||d.gt(r);)d=(h=u(t-=o,this.unsigned)).mul(e);h.isZero()&&(h=x),a=a.add(h),r=r.sub(d)}return a},N.div=N.divide,N.modulo=function(e){return s(e)||(e=p(e)),n?l((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return l(~this.low,~this.high,this.unsigned)},N.and=function(e){return s(e)||(e=p(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return s(e)||(e=p(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return s(e)||(e=p(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},5:function(e,t){},6:function(e,t){},7:function(e,t){},8:function(e,t){},9:function(e,t){},EhIR:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},PDX0:function(e,t){(function(t){e.exports=t}).call(this,{})},Q9qD:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"createScalarValue",(function(){return jt})),n.d(r,"toTypedArray",(function(){return qt})),n.d(r,"now",(function(){return Kt})),n.d(r,"fetch",(function(){return Xt})),n.d(r,"encodeString",(function(){return Yt})),n.d(r,"decodeString",(function(){return Zt})),n.d(r,"shuffle",(function(){return ve})),n.d(r,"shuffleCombo",(function(){return ke})),n.d(r,"clamp",(function(){return Se})),n.d(r,"nearestLargerEven",(function(){return Ie})),n.d(r,"swap",(function(){return Ne})),n.d(r,"sum",(function(){return Ce})),n.d(r,"randUniform",(function(){return Te})),n.d(r,"distSquared",(function(){return Ee})),n.d(r,"assert",(function(){return Ae})),n.d(r,"assertShapesMatch",(function(){return Re})),n.d(r,"assertNonNull",(function(){return $e})),n.d(r,"flatten",(function(){return _e})),n.d(r,"sizeFromShape",(function(){return Fe})),n.d(r,"isScalarShape",(function(){return De})),n.d(r,"arraysEqual",(function(){return Oe})),n.d(r,"isInt",(function(){return Me})),n.d(r,"tanh",(function(){return Pe})),n.d(r,"sizeToSquarishShape",(function(){return ze})),n.d(r,"createShuffledIndices",(function(){return Le})),n.d(r,"rightPad",(function(){return Be})),n.d(r,"repeatedTry",(function(){return We})),n.d(r,"inferFromImplicitShape",(function(){return Ve})),n.d(r,"parseAxisParam",(function(){return Ue})),n.d(r,"squeezeShape",(function(){return Ge})),n.d(r,"getTypedArrayFromDType",(function(){return He})),n.d(r,"getArrayFromDType",(function(){return je})),n.d(r,"checkConversionForErrors",(function(){return qe})),n.d(r,"isValidDtype",(function(){return Ke})),n.d(r,"hasEncodingLoss",(function(){return Xe})),n.d(r,"isTypedArray",(function(){return Ye})),n.d(r,"bytesPerElement",(function(){return Ze})),n.d(r,"bytesFromStringArray",(function(){return Qe})),n.d(r,"isString",(function(){return Je})),n.d(r,"isBoolean",(function(){return et})),n.d(r,"isNumber",(function(){return tt})),n.d(r,"inferDtype",(function(){return nt})),n.d(r,"isFunction",(function(){return rt})),n.d(r,"nearestDivisor",(function(){return st})),n.d(r,"computeStrides",(function(){return at})),n.d(r,"toNestedArray",(function(){return it})),n.d(r,"makeOnesTypedArray",(function(){return ot})),n.d(r,"makeZerosTypedArray",(function(){return ut})),n.d(r,"makeZerosNestedTypedArray",(function(){return lt})),n.d(r,"assertNonNegativeIntegerDimensions",(function(){return ct})),n.d(r,"locToIndex",(function(){return ht})),n.d(r,"indexToLoc",(function(){return pt})),n.d(r,"isPromise",(function(){return dt})),n.d(r,"hexToLong",(function(){return Dt})),n.d(r,"fingerPrint64",(function(){return Ht}));var s={};n.r(s),n.d(s,"makeTypesMatch",(function(){return wn})),n.d(s,"assertTypesMatch",(function(){return vn})),n.d(s,"isTensorInList",(function(){return kn})),n.d(s,"getTensorsInContainer",(function(){return Sn}));var a={};n.r(a),n.d(a,"mockIsMobile",(function(){return $n})),n.d(a,"isMobile",(function(){return _n})),n.d(a,"isBrowser",(function(){return Fn}));var i={};n.r(i),n.d(i,"copyModel",(function(){return $r})),n.d(i,"listModels",(function(){return Ar})),n.d(i,"moveModel",(function(){return _r})),n.d(i,"removeModel",(function(){return Rr})),n.d(i,"browserFiles",(function(){return Vr})),n.d(i,"browserHTTPRequest",(function(){return Zr})),n.d(i,"concatenateArrayBuffers",(function(){return Yn})),n.d(i,"decodeWeights",(function(){return jn})),n.d(i,"encodeWeights",(function(){return Hn})),n.d(i,"fromMemory",(function(){return ts})),n.d(i,"fromMemorySync",(function(){return ns})),n.d(i,"getLoadHandlers",(function(){return ur})),n.d(i,"getModelArtifactsForJSON",(function(){return er})),n.d(i,"getModelArtifactsForJSONSync",(function(){return Jn})),n.d(i,"getModelArtifactsInfoForJSON",(function(){return tr})),n.d(i,"getSaveHandlers",(function(){return or})),n.d(i,"getWeightSpecs",(function(){return nr})),n.d(i,"http",(function(){return Yr})),n.d(i,"isHTTPScheme",(function(){return Kr})),n.d(i,"loadWeights",(function(){return Hr})),n.d(i,"registerLoadRouter",(function(){return ir})),n.d(i,"registerSaveRouter",(function(){return ar})),n.d(i,"weightsLoaderFactory",(function(){return jr})),n.d(i,"withSaveHandler",(function(){return rs})),n.d(i,"withSaveHandlerSync",(function(){return ss}));var o={};n.r(o),n.d(o,"getBroadcastDims",(function(){return as})),n.d(o,"getReductionAxes",(function(){return is})),n.d(o,"assertAndGetBroadcastShape",(function(){return os}));var u={};n.r(u),n.d(u,"fromPixelsAsync",(function(){return hs})),n.d(u,"toPixels",(function(){return ps})),n.d(u,"fromPixels",(function(){return ds}));var l={};n.r(l),n.d(l,"assertParamsValid",(function(){return fs})),n.d(l,"maskToAxes",(function(){return ms})),n.d(l,"computeOutShape",(function(){return gs})),n.d(l,"stridesWithElidedDims",(function(){return ys})),n.d(l,"getNormalizedAxes",(function(){return ws})),n.d(l,"startIndicesWithElidedDims",(function(){return vs})),n.d(l,"stopIndicesWithElidedDims",(function(){return ks})),n.d(l,"stridesForAxis",(function(){return Ss})),n.d(l,"startForAxis",(function(){return Is})),n.d(l,"stopForAxis",(function(){return Ns})),n.d(l,"isSliceContinous",(function(){return Cs})),n.d(l,"computeFlatOffset",(function(){return Ts})),n.d(l,"parseSliceParams",(function(){return Es})),n.d(l,"sliceInfo",(function(){return As}));var c={};n.r(c),n.d(c,"Serializable",(function(){return $s})),n.d(c,"SerializationMap",(function(){return _s})),n.d(c,"registerClass",(function(){return Fs}));var h={};n.r(h),n.d(h,"conv2d",(function(){return al})),n.d(h,"depthwiseConv2d",(function(){return ul})),n.d(h,"matMul",(function(){return ll}));var p={};n.r(p),n.d(p,"segOpComputeOptimalWindowSize",(function(){return bh})),n.d(p,"computeOutShape",(function(){return xh})),n.d(p,"collectGatherOpShapeInfo",(function(){return wh}));var d={};n.r(d),n.d(d,"slice_util",(function(){return l})),n.d(d,"upcastType",(function(){return bn})),n.d(d,"segment_util",(function(){return p})),n.d(d,"fromUint8ToStringArray",(function(){return vh})),n.d(d,"fromStringArrayToUint8",(function(){return kh})),n.d(d,"axesAreInnerMostDims",(function(){return fi})),n.d(d,"combineLocations",(function(){return mi})),n.d(d,"computeOutAndReduceShapes",(function(){return gi})),n.d(d,"expandShapeToKeepDim",(function(){return yi})),n.d(d,"assertAxesAreInnerMostDims",(function(){return bi})),n.d(d,"getAxesPermutation",(function(){return xi})),n.d(d,"getUndoAxesPermutation",(function(){return wi})),n.d(d,"getInnerMostAxes",(function(){return vi})),n.d(d,"getBroadcastDims",(function(){return as})),n.d(d,"getReductionAxes",(function(){return is})),n.d(d,"assertAndGetBroadcastShape",(function(){return os})),n.d(d,"assertParamsConsistent",(function(){return wc})),n.d(d,"computeOutShape",(function(){return vc})),n.d(d,"computeDilation2DInfo",(function(){return ra})),n.d(d,"computePool2DInfo",(function(){return sa})),n.d(d,"computePool3DInfo",(function(){return aa})),n.d(d,"computeConv2DInfo",(function(){return ia})),n.d(d,"computeConv3DInfo",(function(){return oa})),n.d(d,"computeDefaultPad",(function(){return ua})),n.d(d,"tupleValuesAreOne",(function(){return da})),n.d(d,"eitherStridesOrDilationsAreOne",(function(){return fa})),n.d(d,"convertConv2DDataFormat",(function(){return ma})),n.d(d,"checkPadOnDimRoundingMode",(function(){return ga})),n.d(d,"getFusedDyActivation",(function(){return tl})),n.d(d,"getFusedBiasGradient",(function(){return nl})),n.d(d,"applyActivation",(function(){return rl})),n.d(d,"shouldFuse",(function(){return sl})),n.d(d,"RowPartitionType",(function(){return kc})),n.d(d,"combineRaggedTensorToTensorShapes",(function(){return Sc})),n.d(d,"getRowPartitionTypesHelper",(function(){return Ic})),n.d(d,"getRaggedRank",(function(){return Nc})),n.d(d,"validateDefaultValueShape",(function(){return Cc})),n.d(d,"PARALLELIZE_THRESHOLD",(function(){return Tc})),n.d(d,"computeOptimalWindowSize",(function(){return Ec})),n.d(d,"getImageCenter",(function(){return Ac})),n.d(d,"getReshaped",(function(){return Rc})),n.d(d,"getPermuted",(function(){return $c})),n.d(d,"getReshapedPermuted",(function(){return _c})),n.d(d,"getSliceBeginCoords",(function(){return Fc})),n.d(d,"getSliceSize",(function(){return Dc})),n.d(d,"prepareAndValidate",(function(){return Oc})),n.d(d,"validateUpdateShape",(function(){return Gu})),n.d(d,"validateInput",(function(){return Hu})),n.d(d,"calculateShapes",(function(){return ju})),n.d(d,"SELU_SCALEALPHA",(function(){return Mc})),n.d(d,"SELU_SCALE",(function(){return Pc})),n.d(d,"ERF_P",(function(){return zc})),n.d(d,"ERF_A1",(function(){return Lc})),n.d(d,"ERF_A2",(function(){return Bc})),n.d(d,"ERF_A3",(function(){return Wc})),n.d(d,"ERF_A4",(function(){return Vc})),n.d(d,"ERF_A5",(function(){return Uc})),n.d(d,"warn",(function(){return vt})),n.d(d,"log",(function(){return kt})),n.d(d,"mergeRealAndImagArrays",(function(){return Gc})),n.d(d,"splitRealAndImagArrays",(function(){return Hc})),n.d(d,"complexWithEvenIndex",(function(){return jc})),n.d(d,"complexWithOddIndex",(function(){return qc})),n.d(d,"getComplexWithIndex",(function(){return Kc})),n.d(d,"assignToTypedArray",(function(){return Xc})),n.d(d,"exponents",(function(){return Yc})),n.d(d,"exponent",(function(){return Zc})),n.d(d,"decodeEinsumEquation",(function(){return Jc})),n.d(d,"getEinsumPermutation",(function(){return eh})),n.d(d,"checkEinsumDimSizes",(function(){return th})),n.d(d,"getEinsumComputePath",(function(){return nh})),n.d(d,"isIdentityPermutation",(function(){return rh})),n.d(d,"prepareSplitSize",(function(){return ah})),n.d(d,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(function(){return ih})),n.d(d,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(function(){return oh})),n.d(d,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(function(){return uh})),n.d(d,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(function(){return lh})),n.d(d,"getSparseReshapeNegativeOutputDimErrorMessage",(function(){return ch})),n.d(d,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(function(){return hh})),n.d(d,"getSparseReshapeInputOutputMultipleErrorMessage",(function(){return ph})),n.d(d,"getSparseReshapeInputOutputMismatchErrorMessage",(function(){return dh})),n.d(d,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(function(){return fh})),n.d(d,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(function(){return mh})),n.d(d,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(function(){return gh})),n.d(d,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(function(){return yh}));var f={};n.r(f),n.d(f,"nonMaxSuppressionV3Impl",(function(){return kl})),n.d(f,"nonMaxSuppressionV4Impl",(function(){return Sl})),n.d(f,"nonMaxSuppressionV5Impl",(function(){return Il})),n.d(f,"whereImpl",(function(){return Lu}));var m={};n.r(m),n.d(m,"json",(function(){return Xy}));var g={};n.r(g),n.d(g,"json",(function(){return Yy}));var y={};n.r(y),n.d(y,"json",(function(){return Zy}));var b={};n.r(b),n.d(b,"json",(function(){return Qy}));var x={};n.r(x),n.d(x,"json",(function(){return Jy}));var w={};n.r(w),n.d(w,"json",(function(){return eb}));var v={};n.r(v),n.d(v,"json",(function(){return tb}));var k={};n.r(k),n.d(k,"json",(function(){return nb}));var S={};n.r(S),n.d(S,"json",(function(){return rb}));var I={};n.r(I),n.d(I,"json",(function(){return sb}));var N={};n.r(N),n.d(N,"json",(function(){return ab}));var C={};n.r(C),n.d(C,"json",(function(){return ib}));var T={};n.r(T),n.d(T,"json",(function(){return ob}));var E={};n.r(E),n.d(E,"json",(function(){return ub}));var A={};n.r(A),n.d(A,"json",(function(){return lb}));var R={};n.r(R),n.d(R,"json",(function(){return cb}));var $={};n.r($),n.d($,"json",(function(){return hb}));var _={};n.r(_),n.d(_,"json",(function(){return pb}));var F={};n.r(F),n.d(F,"json",(function(){return db}));var D={};n.r(D),n.d(D,"abs",(function(){return Us})),n.d(D,"acos",(function(){return Gs})),n.d(D,"acosh",(function(){return Hs})),n.d(D,"add",(function(){return js})),n.d(D,"addN",(function(){return qs})),n.d(D,"all",(function(){return Ks})),n.d(D,"any",(function(){return Xs})),n.d(D,"argMax",(function(){return Ys})),n.d(D,"argMin",(function(){return Zs})),n.d(D,"asin",(function(){return Qs})),n.d(D,"asinh",(function(){return Js})),n.d(D,"atan",(function(){return ea})),n.d(D,"atan2",(function(){return ta})),n.d(D,"atanh",(function(){return na})),n.d(D,"avgPool",(function(){return ba})),n.d(D,"avgPool3d",(function(){return xa})),n.d(D,"basicLSTMCell",(function(){return Ca})),n.d(D,"batchToSpaceND",(function(){return Ta})),n.d(D,"batchNorm",(function(){return Ea})),n.d(D,"batchNorm2d",(function(){return Aa})),n.d(D,"batchNorm3d",(function(){return Ra})),n.d(D,"batchNorm4d",(function(){return $a})),n.d(D,"bincount",(function(){return _a})),n.d(D,"broadcastArgs",(function(){return Fa})),n.d(D,"broadcastTo",(function(){return Da})),n.d(D,"buffer",(function(){return Or})),n.d(D,"cast",(function(){return Mr})),n.d(D,"ceil",(function(){return Oa})),n.d(D,"clipByValue",(function(){return Pa})),n.d(D,"clone",(function(){return Pr})),n.d(D,"complex",(function(){return Wn})),n.d(D,"concat",(function(){return wa})),n.d(D,"concat1d",(function(){return za})),n.d(D,"concat2d",(function(){return La})),n.d(D,"concat3d",(function(){return Ba})),n.d(D,"concat4d",(function(){return Wa})),n.d(D,"conv1d",(function(){return Ua})),n.d(D,"conv2d",(function(){return Va})),n.d(D,"conv2dTranspose",(function(){return Ha})),n.d(D,"conv3d",(function(){return ja})),n.d(D,"conv3dTranspose",(function(){return Ka})),n.d(D,"cos",(function(){return Xa})),n.d(D,"cosh",(function(){return Ya})),n.d(D,"cumprod",(function(){return Za})),n.d(D,"cumsum",(function(){return Qa})),n.d(D,"denseBincount",(function(){return Ja})),n.d(D,"depthToSpace",(function(){return ei})),n.d(D,"depthwiseConv2d",(function(){return ti})),n.d(D,"diag",(function(){return ni})),n.d(D,"dilation2d",(function(){return ri})),n.d(D,"div",(function(){return ai})),n.d(D,"divNoNan",(function(){return li})),n.d(D,"dot",(function(){return ci})),n.d(D,"einsum",(function(){return hi})),n.d(D,"elu",(function(){return pi})),n.d(D,"equal",(function(){return ii})),n.d(D,"erf",(function(){return di})),n.d(D,"euclideanNorm",(function(){return Ai})),n.d(D,"exp",(function(){return Ri})),n.d(D,"expandDims",(function(){return $i})),n.d(D,"expm1",(function(){return _i})),n.d(D,"eye",(function(){return Di})),n.d(D,"fill",(function(){return Ma})),n.d(D,"floor",(function(){return Oi})),n.d(D,"floorDiv",(function(){return si})),n.d(D,"gather",(function(){return Mi})),n.d(D,"greater",(function(){return Pi})),n.d(D,"greaterEqual",(function(){return zi})),n.d(D,"imag",(function(){return Li})),n.d(D,"isFinite",(function(){return Bi})),n.d(D,"isInf",(function(){return Wi})),n.d(D,"isNaN",(function(){return Vi})),n.d(D,"leakyRelu",(function(){return Ui})),n.d(D,"less",(function(){return Gi})),n.d(D,"lessEqual",(function(){return Hi})),n.d(D,"linspace",(function(){return ji})),n.d(D,"localResponseNormalization",(function(){return qi})),n.d(D,"log",(function(){return Ki})),n.d(D,"log1p",(function(){return Xi})),n.d(D,"logSigmoid",(function(){return Qi})),n.d(D,"logSoftmax",(function(){return eo})),n.d(D,"logSumExp",(function(){return to})),n.d(D,"logicalAnd",(function(){return no})),n.d(D,"logicalNot",(function(){return ro})),n.d(D,"logicalOr",(function(){return so})),n.d(D,"logicalXor",(function(){return ao})),n.d(D,"lowerBound",(function(){return oo})),n.d(D,"matMul",(function(){return va})),n.d(D,"max",(function(){return ki})),n.d(D,"maxPool",(function(){return uo})),n.d(D,"maxPool3d",(function(){return lo})),n.d(D,"maxPoolWithArgmax",(function(){return co})),n.d(D,"maximum",(function(){return ho})),n.d(D,"mean",(function(){return po})),n.d(D,"meshgrid",(function(){return go})),n.d(D,"min",(function(){return Si})),n.d(D,"minimum",(function(){return yo})),n.d(D,"mirrorPad",(function(){return bo})),n.d(D,"mod",(function(){return xo})),n.d(D,"moments",(function(){return wo})),n.d(D,"mul",(function(){return ka})),n.d(D,"multiRNNCell",(function(){return vo})),n.d(D,"multinomial",(function(){return ko})),n.d(D,"neg",(function(){return Yi})),n.d(D,"notEqual",(function(){return So})),n.d(D,"oneHot",(function(){return Io})),n.d(D,"ones",(function(){return mo})),n.d(D,"onesLike",(function(){return No})),n.d(D,"outerProduct",(function(){return Co})),n.d(D,"pad",(function(){return To})),n.d(D,"pad1d",(function(){return Eo})),n.d(D,"pad2d",(function(){return Ao})),n.d(D,"pad3d",(function(){return Ro})),n.d(D,"pad4d",(function(){return $o})),n.d(D,"pool",(function(){return Fo})),n.d(D,"pow",(function(){return Ii})),n.d(D,"prelu",(function(){return Do})),n.d(D,"print",(function(){return zr})),n.d(D,"prod",(function(){return Oo})),n.d(D,"raggedGather",(function(){return Mo})),n.d(D,"raggedTensorToTensor",(function(){return Po})),n.d(D,"rand",(function(){return zo})),n.d(D,"randomGamma",(function(){return Uo})),n.d(D,"randomNormal",(function(){return Go})),n.d(D,"randomStandardNormal",(function(){return Ho})),n.d(D,"randomUniform",(function(){return jo})),n.d(D,"range",(function(){return qo})),n.d(D,"real",(function(){return Ko})),n.d(D,"reciprocal",(function(){return Xo})),n.d(D,"relu",(function(){return Yo})),n.d(D,"relu6",(function(){return Zo})),n.d(D,"reshape",(function(){return ya})),n.d(D,"reverse",(function(){return Qo})),n.d(D,"reverse1d",(function(){return Jo})),n.d(D,"reverse2d",(function(){return eu})),n.d(D,"reverse3d",(function(){return tu})),n.d(D,"reverse4d",(function(){return nu})),n.d(D,"round",(function(){return ru})),n.d(D,"rsqrt",(function(){return su})),n.d(D,"scalar",(function(){return Ws})),n.d(D,"selu",(function(){return au})),n.d(D,"separableConv2d",(function(){return iu})),n.d(D,"setdiff1dAsync",(function(){return ou})),n.d(D,"sigmoid",(function(){return Sa})),n.d(D,"sign",(function(){return uu})),n.d(D,"sin",(function(){return lu})),n.d(D,"sinh",(function(){return cu})),n.d(D,"slice",(function(){return Ia})),n.d(D,"slice1d",(function(){return hu})),n.d(D,"slice2d",(function(){return pu})),n.d(D,"slice3d",(function(){return du})),n.d(D,"slice4d",(function(){return fu})),n.d(D,"softmax",(function(){return mu})),n.d(D,"softplus",(function(){return Zi})),n.d(D,"spaceToBatchND",(function(){return _o})),n.d(D,"fft",(function(){return gu})),n.d(D,"ifft",(function(){return yu})),n.d(D,"irfft",(function(){return bu})),n.d(D,"rfft",(function(){return wu})),n.d(D,"split",(function(){return xu})),n.d(D,"sqrt",(function(){return Ni})),n.d(D,"square",(function(){return Ci})),n.d(D,"squaredDifference",(function(){return vu})),n.d(D,"squeeze",(function(){return ku})),n.d(D,"stack",(function(){return Su})),n.d(D,"step",(function(){return Iu})),n.d(D,"stridedSlice",(function(){return Nu})),n.d(D,"sub",(function(){return Ji})),n.d(D,"sum",(function(){return Ti})),n.d(D,"tan",(function(){return Cu})),n.d(D,"tanh",(function(){return Na})),n.d(D,"tensor",(function(){return Un})),n.d(D,"tensor1d",(function(){return Tu})),n.d(D,"tensor2d",(function(){return Eu})),n.d(D,"tensor3d",(function(){return us})),n.d(D,"tensor4d",(function(){return Au})),n.d(D,"tensor5d",(function(){return Ru})),n.d(D,"tensor6d",(function(){return $u})),n.d(D,"tile",(function(){return Fi})),n.d(D,"topk",(function(){return _u})),n.d(D,"truncatedNormal",(function(){return Fu})),n.d(D,"unique",(function(){return Du})),n.d(D,"unsortedSegmentSum",(function(){return Ou})),n.d(D,"unstack",(function(){return Mu})),n.d(D,"upperBound",(function(){return Pu})),n.d(D,"variable",(function(){return zu})),n.d(D,"where",(function(){return oi})),n.d(D,"whereAsync",(function(){return Bu})),n.d(D,"zeros",(function(){return fo})),n.d(D,"zerosLike",(function(){return ui})),n.d(D,"op",(function(){return Bn})),n.d(D,"OP_SCOPE_SUFFIX",(function(){return Ln})),n.d(D,"image",(function(){return sc})),n.d(D,"linalg",(function(){return ac})),n.d(D,"losses",(function(){return ic})),n.d(D,"spectral",(function(){return nc})),n.d(D,"fused",(function(){return h})),n.d(D,"signal",(function(){return rc})),n.d(D,"sparse",(function(){return oc})),n.d(D,"string",(function(){return uc})),n.d(D,"booleanMaskAsync",(function(){return Wu})),n.d(D,"transpose",(function(){return Vu})),n.d(D,"norm",(function(){return Ei})),n.d(D,"movingAverage",(function(){return Uu})),n.d(D,"scatterND",(function(){return qu})),n.d(D,"searchSorted",(function(){return io})),n.d(D,"sparseToDense",(function(){return Ku})),n.d(D,"gatherND",(function(){return Xu})),n.d(D,"dropout",(function(){return Yu})),n.d(D,"enclosingPowerOfTwo",(function(){return Zu})),n.d(D,"cosineWindow",(function(){return Qu})),n.d(D,"inTopKAsync",(function(){return Ju}));var O={};n.r(O),n.d(O,"array",(function(){return Ub})),n.d(O,"Dataset",(function(){return Wb})),n.d(O,"zip",(function(){return Gb})),n.d(O,"CSVDataset",(function(){return Qb})),n.d(O,"TextLineDataset",(function(){return jb})),n.d(O,"csv",(function(){return px})),n.d(O,"func",(function(){return dx})),n.d(O,"generator",(function(){return fx})),n.d(O,"microphone",(function(){return gx})),n.d(O,"webcam",(function(){return mx})),n.d(O,"FileDataSource",(function(){return cx})),n.d(O,"URLDataSource",(function(){return hx})),n.d(O,"version_data",(function(){return yx}));var M={};n.r(M),n.d(M,"simpleAbsImpl",(function(){return ow})),n.d(M,"addImpl",(function(){return Qx})),n.d(M,"bincountImpl",(function(){return Mw})),n.d(M,"bincountReduceImpl",(function(){return Pw})),n.d(M,"castImpl",(function(){return qx})),n.d(M,"ceilImpl",(function(){return Bw})),n.d(M,"concatImpl",(function(){return Gw})),n.d(M,"equalImpl",(function(){return Nv})),n.d(M,"expImpl",(function(){return Ov})),n.d(M,"expm1Impl",(function(){return Bv})),n.d(M,"floorImpl",(function(){return ek})),n.d(M,"gatherNdImpl",(function(){return ak})),n.d(M,"gatherV2Impl",(function(){return ok})),n.d(M,"greaterImpl",(function(){return lk})),n.d(M,"greaterEqualImpl",(function(){return hk})),n.d(M,"lessImpl",(function(){return yk})),n.d(M,"lessEqualImpl",(function(){return xk})),n.d(M,"linSpaceImpl",(function(){return vk})),n.d(M,"logImpl",(function(){return Sk})),n.d(M,"maxImpl",(function(){return $k})),n.d(M,"maximumImpl",(function(){return Dk})),n.d(M,"minimumImpl",(function(){return Uk})),n.d(M,"multiplyImpl",(function(){return yv})),n.d(M,"negImpl",(function(){return Yk})),n.d(M,"notEqualImpl",(function(){return sS})),n.d(M,"prodImpl",(function(){return fS})),n.d(M,"raggedGatherImpl",(function(){return yS})),n.d(M,"raggedTensorToTensorImpl",(function(){return SS})),n.d(M,"rangeImpl",(function(){return NS})),n.d(M,"rsqrtImpl",(function(){return OS})),n.d(M,"scatterImpl",(function(){return PS})),n.d(M,"sigmoidImpl",(function(){return zx})),n.d(M,"sliceImpl",(function(){return _w})),n.d(M,"sparseFillEmptyRowsImpl",(function(){return QS})),n.d(M,"sparseReshapeImpl",(function(){return eI})),n.d(M,"sparseSegmentReductionImpl",(function(){return nI})),n.d(M,"sqrtImpl",(function(){return oI})),n.d(M,"squaredDifferenceImpl",(function(){return cI})),n.d(M,"stridedSliceImpl",(function(){return dI})),n.d(M,"stringNGramsImpl",(function(){return gI})),n.d(M,"stringSplitImpl",(function(){return xI})),n.d(M,"stringToHashBucketFastImpl",(function(){return vI})),n.d(M,"subImpl",(function(){return Gv})),n.d(M,"tileImpl",(function(){return NI})),n.d(M,"topKImpl",(function(){return EI})),n.d(M,"transposeImpl",(function(){return pw})),n.d(M,"uniqueImpl",(function(){return FI}));var P={};n.r(P),n.d(P,"createScalarValue",(function(){return oD})),n.d(P,"toTypedArray",(function(){return uD})),n.d(P,"now",(function(){return lD})),n.d(P,"fetch",(function(){return cD})),n.d(P,"encodeString",(function(){return hD})),n.d(P,"decodeString",(function(){return pD})),n.d(P,"isTypedArray",(function(){return dD})),n.d(P,"flatten",(function(){return fD})),n.d(P,"shuffle",(function(){return z_})),n.d(P,"shuffleCombo",(function(){return L_})),n.d(P,"clamp",(function(){return B_})),n.d(P,"nearestLargerEven",(function(){return W_})),n.d(P,"swap",(function(){return V_})),n.d(P,"sum",(function(){return U_})),n.d(P,"randUniform",(function(){return G_})),n.d(P,"distSquared",(function(){return H_})),n.d(P,"assert",(function(){return j_})),n.d(P,"assertShapesMatch",(function(){return q_})),n.d(P,"assertNonNull",(function(){return K_})),n.d(P,"sizeFromShape",(function(){return X_})),n.d(P,"isScalarShape",(function(){return Y_})),n.d(P,"arraysEqualWithNull",(function(){return Z_})),n.d(P,"arraysEqual",(function(){return Q_})),n.d(P,"isInt",(function(){return J_})),n.d(P,"tanh",(function(){return eF})),n.d(P,"sizeToSquarishShape",(function(){return tF})),n.d(P,"createShuffledIndices",(function(){return nF})),n.d(P,"rightPad",(function(){return rF})),n.d(P,"repeatedTry",(function(){return sF})),n.d(P,"inferFromImplicitShape",(function(){return aF})),n.d(P,"parseAxisParam",(function(){return iF})),n.d(P,"squeezeShape",(function(){return oF})),n.d(P,"getTypedArrayFromDType",(function(){return uF})),n.d(P,"getArrayFromDType",(function(){return lF})),n.d(P,"checkConversionForErrors",(function(){return cF})),n.d(P,"isValidDtype",(function(){return hF})),n.d(P,"hasEncodingLoss",(function(){return pF})),n.d(P,"bytesPerElement",(function(){return dF})),n.d(P,"bytesFromStringArray",(function(){return fF})),n.d(P,"isString",(function(){return mF})),n.d(P,"isBoolean",(function(){return gF})),n.d(P,"isNumber",(function(){return yF})),n.d(P,"inferDtype",(function(){return bF})),n.d(P,"isFunction",(function(){return xF})),n.d(P,"nearestDivisor",(function(){return wF})),n.d(P,"computeStrides",(function(){return vF})),n.d(P,"toNestedArray",(function(){return kF})),n.d(P,"convertBackendValuesAndArrayBuffer",(function(){return SF})),n.d(P,"makeOnesTypedArray",(function(){return IF})),n.d(P,"makeZerosTypedArray",(function(){return NF})),n.d(P,"makeZerosNestedTypedArray",(function(){return CF})),n.d(P,"assertNonNegativeIntegerDimensions",(function(){return TF})),n.d(P,"locToIndex",(function(){return EF})),n.d(P,"indexToLoc",(function(){return AF})),n.d(P,"isPromise",(function(){return RF})),n.d(P,"hexToLong",(function(){return XF})),n.d(P,"fingerPrint64",(function(){return iD}));var z={};n.r(z),n.d(z,"getBroadcastDims",(function(){return NM})),n.d(z,"getReductionAxes",(function(){return CM})),n.d(z,"assertAndGetBroadcastShape",(function(){return TM}));var L={};n.r(L),n.d(L,"copyModel",(function(){return JO})),n.d(L,"listModels",(function(){return ZO})),n.d(L,"moveModel",(function(){return eM})),n.d(L,"removeModel",(function(){return QO})),n.d(L,"browserFiles",(function(){return DM})),n.d(L,"browserHTTPRequest",(function(){return UM})),n.d(L,"CompositeArrayBuffer",(function(){return nO})),n.d(L,"concatenateArrayBuffers",(function(){return xO})),n.d(L,"decodeWeights",(function(){return cO})),n.d(L,"decodeWeightsStream",(function(){return mO})),n.d(L,"encodeWeights",(function(){return lO})),n.d(L,"fromMemory",(function(){return qM})),n.d(L,"fromMemorySync",(function(){return KM})),n.d(L,"getLoadHandlers",(function(){return RO})),n.d(L,"getModelArtifactsForJSON",(function(){return SO})),n.d(L,"getModelArtifactsForJSONSync",(function(){return kO})),n.d(L,"getModelArtifactsInfoForJSON",(function(){return IO})),n.d(L,"getSaveHandlers",(function(){return AO})),n.d(L,"getWeightSpecs",(function(){return NO})),n.d(L,"http",(function(){return VM})),n.d(L,"isHTTPScheme",(function(){return BM})),n.d(L,"loadWeights",(function(){return PM})),n.d(L,"registerLoadRouter",(function(){return EO})),n.d(L,"registerSaveRouter",(function(){return TO})),n.d(L,"weightsLoaderFactory",(function(){return zM})),n.d(L,"withSaveHandler",(function(){return XM})),n.d(L,"withSaveHandlerSync",(function(){return YM}));var B={};n.r(B),n.d(B,"fromPixelsAsync",(function(){return tP})),n.d(B,"toPixels",(function(){return rP})),n.d(B,"draw",(function(){return sP})),n.d(B,"fromPixels",(function(){return aP}));var W={};n.r(W),n.d(W,"assertParamsValid",(function(){return iP})),n.d(W,"maskToAxes",(function(){return oP})),n.d(W,"computeOutShape",(function(){return uP})),n.d(W,"stridesWithElidedDims",(function(){return lP})),n.d(W,"getNormalizedAxes",(function(){return pP})),n.d(W,"startIndicesWithElidedDims",(function(){return dP})),n.d(W,"stopIndicesWithElidedDims",(function(){return fP})),n.d(W,"stridesForAxis",(function(){return mP})),n.d(W,"startForAxis",(function(){return gP})),n.d(W,"stopForAxis",(function(){return yP})),n.d(W,"isSliceContinous",(function(){return bP})),n.d(W,"computeFlatOffset",(function(){return xP})),n.d(W,"parseSliceParams",(function(){return wP})),n.d(W,"sliceInfo",(function(){return vP}));var V={};n.r(V),n.d(V,"conv2d",(function(){return $W})),n.d(V,"depthwiseConv2d",(function(){return DW})),n.d(V,"matMul",(function(){return OW}));var U={};n.r(U),n.d(U,"segOpComputeOptimalWindowSize",(function(){return TU})),n.d(U,"computeOutShape",(function(){return EU})),n.d(U,"collectGatherOpShapeInfo",(function(){return AU}));var G={};n.r(G),n.d(G,"slice_util",(function(){return W})),n.d(G,"upcastType",(function(){return DD})),n.d(G,"segment_util",(function(){return U})),n.d(G,"fromUint8ToStringArray",(function(){return RU})),n.d(G,"fromStringArrayToUint8",(function(){return $U})),n.d(G,"axesAreInnerMostDims",(function(){return Gz})),n.d(G,"combineLocations",(function(){return Hz})),n.d(G,"computeOutAndReduceShapes",(function(){return jz})),n.d(G,"expandShapeToKeepDim",(function(){return qz})),n.d(G,"assertAxesAreInnerMostDims",(function(){return Kz})),n.d(G,"getAxesPermutation",(function(){return Xz})),n.d(G,"getUndoAxesPermutation",(function(){return Yz})),n.d(G,"getInnerMostAxes",(function(){return Zz})),n.d(G,"getBroadcastDims",(function(){return NM})),n.d(G,"getReductionAxes",(function(){return CM})),n.d(G,"assertAndGetBroadcastShape",(function(){return TM})),n.d(G,"assertParamsConsistent",(function(){return AV})),n.d(G,"computeOutShape",(function(){return RV})),n.d(G,"computeDilation2DInfo",(function(){return OP})),n.d(G,"computePool2DInfo",(function(){return MP})),n.d(G,"computePool3DInfo",(function(){return PP})),n.d(G,"computeConv2DInfo",(function(){return zP})),n.d(G,"computeConv3DInfo",(function(){return LP})),n.d(G,"computeDefaultPad",(function(){return BP})),n.d(G,"tupleValuesAreOne",(function(){return HP})),n.d(G,"eitherStridesOrDilationsAreOne",(function(){return jP})),n.d(G,"stridesOrDilationsArePositive",(function(){return qP})),n.d(G,"convertConv2DDataFormat",(function(){return KP})),n.d(G,"checkPadOnDimRoundingMode",(function(){return XP})),n.d(G,"getFusedDyActivation",(function(){return TW})),n.d(G,"getFusedBiasGradient",(function(){return EW})),n.d(G,"applyActivation",(function(){return AW})),n.d(G,"shouldFuse",(function(){return RW})),n.d(G,"RowPartitionType",(function(){return $V})),n.d(G,"combineRaggedTensorToTensorShapes",(function(){return _V})),n.d(G,"getRowPartitionTypesHelper",(function(){return FV})),n.d(G,"getRaggedRank",(function(){return DV})),n.d(G,"validateDefaultValueShape",(function(){return OV})),n.d(G,"PARALLELIZE_THRESHOLD",(function(){return MV})),n.d(G,"computeOptimalWindowSize",(function(){return PV})),n.d(G,"getImageCenter",(function(){return zV})),n.d(G,"getReshaped",(function(){return LV})),n.d(G,"getPermuted",(function(){return BV})),n.d(G,"getReshapedPermuted",(function(){return WV})),n.d(G,"getSliceBeginCoords",(function(){return VV})),n.d(G,"getSliceSize",(function(){return UV})),n.d(G,"prepareAndValidate",(function(){return GV})),n.d(G,"validateUpdateShape",(function(){return rW})),n.d(G,"validateInput",(function(){return sW})),n.d(G,"calculateShapes",(function(){return aW})),n.d(G,"SELU_SCALEALPHA",(function(){return HV})),n.d(G,"SELU_SCALE",(function(){return jV})),n.d(G,"ERF_P",(function(){return qV})),n.d(G,"ERF_A1",(function(){return KV})),n.d(G,"ERF_A2",(function(){return XV})),n.d(G,"ERF_A3",(function(){return YV})),n.d(G,"ERF_A4",(function(){return ZV})),n.d(G,"ERF_A5",(function(){return QV})),n.d(G,"warn",(function(){return zF})),n.d(G,"log",(function(){return LF})),n.d(G,"mergeRealAndImagArrays",(function(){return JV})),n.d(G,"splitRealAndImagArrays",(function(){return eU})),n.d(G,"complexWithEvenIndex",(function(){return tU})),n.d(G,"complexWithOddIndex",(function(){return nU})),n.d(G,"getComplexWithIndex",(function(){return rU})),n.d(G,"assignToTypedArray",(function(){return sU})),n.d(G,"exponents",(function(){return aU})),n.d(G,"exponent",(function(){return iU})),n.d(G,"decodeEinsumEquation",(function(){return uU})),n.d(G,"getEinsumPermutation",(function(){return lU})),n.d(G,"checkEinsumDimSizes",(function(){return cU})),n.d(G,"getEinsumComputePath",(function(){return hU})),n.d(G,"isIdentityPermutation",(function(){return pU})),n.d(G,"prepareSplitSize",(function(){return fU})),n.d(G,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(function(){return mU})),n.d(G,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(function(){return gU})),n.d(G,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(function(){return yU})),n.d(G,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(function(){return bU})),n.d(G,"getSparseReshapeNegativeOutputDimErrorMessage",(function(){return xU})),n.d(G,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(function(){return wU})),n.d(G,"getSparseReshapeInputOutputMultipleErrorMessage",(function(){return vU})),n.d(G,"getSparseReshapeInputOutputMismatchErrorMessage",(function(){return kU})),n.d(G,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(function(){return SU})),n.d(G,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(function(){return IU})),n.d(G,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(function(){return NU})),n.d(G,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(function(){return CU}));var H={};n.r(H),n.d(H,"nonMaxSuppressionV3Impl",(function(){return XW})),n.d(H,"nonMaxSuppressionV4Impl",(function(){return YW})),n.d(H,"nonMaxSuppressionV5Impl",(function(){return ZW})),n.d(H,"whereImpl",(function(){return fW}));var j={};n.r(j),n.d(j,"json",(function(){return GU}));var q={};n.r(q),n.d(q,"json",(function(){return HU}));var K={};n.r(K),n.d(K,"json",(function(){return jU}));var X={};n.r(X),n.d(X,"json",(function(){return qU}));var Y={};n.r(Y),n.d(Y,"json",(function(){return KU}));var Z={};n.r(Z),n.d(Z,"json",(function(){return XU}));var Q={};n.r(Q),n.d(Q,"json",(function(){return YU}));var J={};n.r(J),n.d(J,"json",(function(){return ZU}));var ee={};n.r(ee),n.d(ee,"json",(function(){return QU}));var te={};n.r(te),n.d(te,"json",(function(){return JU}));var ne={};n.r(ne),n.d(ne,"json",(function(){return eG}));var re={};n.r(re),n.d(re,"json",(function(){return tG}));var se={};n.r(se),n.d(se,"json",(function(){return nG}));var ae={};n.r(ae),n.d(ae,"json",(function(){return rG}));var ie={};n.r(ie),n.d(ie,"json",(function(){return sG}));var oe={};n.r(oe),n.d(oe,"json",(function(){return aG}));var ue={};n.r(ue),n.d(ue,"json",(function(){return iG}));var le={};n.r(le),n.d(le,"json",(function(){return oG}));var ce={};n.r(ce),n.d(ce,"json",(function(){return uG}));var he={};n.r(he),n.d(he,"abs",(function(){return IM})),n.d(he,"acos",(function(){return SP})),n.d(he,"acosh",(function(){return IP})),n.d(he,"add",(function(){return oM})),n.d(he,"addN",(function(){return NP})),n.d(he,"all",(function(){return CP})),n.d(he,"any",(function(){return TP})),n.d(he,"argMax",(function(){return EP})),n.d(he,"argMin",(function(){return AP})),n.d(he,"asin",(function(){return RP})),n.d(he,"asinh",(function(){return $P})),n.d(he,"atan",(function(){return _P})),n.d(he,"atan2",(function(){return FP})),n.d(he,"atanh",(function(){return DP})),n.d(he,"avgPool",(function(){return ZP})),n.d(he,"avgPool3d",(function(){return QP})),n.d(he,"basicLSTMCell",(function(){return sz})),n.d(he,"batchToSpaceND",(function(){return az})),n.d(he,"batchNorm",(function(){return iz})),n.d(he,"batchNorm2d",(function(){return oz})),n.d(he,"batchNorm3d",(function(){return uz})),n.d(he,"batchNorm4d",(function(){return lz})),n.d(he,"bincount",(function(){return cz})),n.d(he,"bitwiseAnd",(function(){return hz})),n.d(he,"broadcastArgs",(function(){return pz})),n.d(he,"broadcastTo",(function(){return dz})),n.d(he,"buffer",(function(){return rM})),n.d(he,"cast",(function(){return sM})),n.d(he,"ceil",(function(){return fz})),n.d(he,"clipByValue",(function(){return mz})),n.d(he,"clone",(function(){return aM})),n.d(he,"complex",(function(){return QD})),n.d(he,"concat",(function(){return JP})),n.d(he,"concat1d",(function(){return gz})),n.d(he,"concat2d",(function(){return yz})),n.d(he,"concat3d",(function(){return bz})),n.d(he,"concat4d",(function(){return xz})),n.d(he,"conv1d",(function(){return vz})),n.d(he,"conv2d",(function(){return wz})),n.d(he,"conv2dTranspose",(function(){return Sz})),n.d(he,"conv3d",(function(){return Iz})),n.d(he,"conv3dTranspose",(function(){return Cz})),n.d(he,"cos",(function(){return Tz})),n.d(he,"cosh",(function(){return Ez})),n.d(he,"cumprod",(function(){return Az})),n.d(he,"cumsum",(function(){return Rz})),n.d(he,"denseBincount",(function(){return $z})),n.d(he,"depthToSpace",(function(){return _z})),n.d(he,"depthwiseConv2d",(function(){return Fz})),n.d(he,"diag",(function(){return Dz})),n.d(he,"dilation2d",(function(){return Oz})),n.d(he,"div",(function(){return lM})),n.d(he,"divNoNan",(function(){return zz})),n.d(he,"dot",(function(){return Lz})),n.d(he,"einsum",(function(){return Bz})),n.d(he,"elu",(function(){return Wz})),n.d(he,"ensureShape",(function(){return Vz})),n.d(he,"equal",(function(){return Mz})),n.d(he,"erf",(function(){return Uz})),n.d(he,"euclideanNorm",(function(){return nL})),n.d(he,"exp",(function(){return rL})),n.d(he,"expandDims",(function(){return sL})),n.d(he,"expm1",(function(){return aL})),n.d(he,"eye",(function(){return oL})),n.d(he,"fill",(function(){return vM})),n.d(he,"floor",(function(){return uL})),n.d(he,"floorDiv",(function(){return uM})),n.d(he,"gather",(function(){return lL})),n.d(he,"greater",(function(){return cL})),n.d(he,"greaterEqual",(function(){return hL})),n.d(he,"imag",(function(){return pL})),n.d(he,"isFinite",(function(){return dL})),n.d(he,"isInf",(function(){return fL})),n.d(he,"isNaN",(function(){return mL})),n.d(he,"leakyRelu",(function(){return gL})),n.d(he,"less",(function(){return yL})),n.d(he,"lessEqual",(function(){return bL})),n.d(he,"linspace",(function(){return xL})),n.d(he,"localResponseNormalization",(function(){return wL})),n.d(he,"log",(function(){return vL})),n.d(he,"log1p",(function(){return kL})),n.d(he,"logSigmoid",(function(){return NL})),n.d(he,"logSoftmax",(function(){return CL})),n.d(he,"logSumExp",(function(){return TL})),n.d(he,"logicalAnd",(function(){return EL})),n.d(he,"logicalNot",(function(){return AL})),n.d(he,"logicalOr",(function(){return RL})),n.d(he,"logicalXor",(function(){return $L})),n.d(he,"lowerBound",(function(){return FL})),n.d(he,"matMul",(function(){return ez})),n.d(he,"max",(function(){return Qz})),n.d(he,"maxPool",(function(){return DL})),n.d(he,"maxPool3d",(function(){return OL})),n.d(he,"maxPoolWithArgmax",(function(){return ML})),n.d(he,"maximum",(function(){return EM})),n.d(he,"mean",(function(){return PL})),n.d(he,"meshgrid",(function(){return BL})),n.d(he,"min",(function(){return Jz})),n.d(he,"minimum",(function(){return WL})),n.d(he,"mirrorPad",(function(){return VL})),n.d(he,"mod",(function(){return UL})),n.d(he,"moments",(function(){return GL})),n.d(he,"mul",(function(){return cM})),n.d(he,"multiRNNCell",(function(){return HL})),n.d(he,"multinomial",(function(){return jL})),n.d(he,"neg",(function(){return SL})),n.d(he,"notEqual",(function(){return qL})),n.d(he,"oneHot",(function(){return KL})),n.d(he,"ones",(function(){return LL})),n.d(he,"onesLike",(function(){return XL})),n.d(he,"outerProduct",(function(){return YL})),n.d(he,"pad",(function(){return ZL})),n.d(he,"pad1d",(function(){return QL})),n.d(he,"pad2d",(function(){return JL})),n.d(he,"pad3d",(function(){return eB})),n.d(he,"pad4d",(function(){return tB})),n.d(he,"pool",(function(){return rB})),n.d(he,"pow",(function(){return kM})),n.d(he,"prelu",(function(){return sB})),n.d(he,"print",(function(){return iM})),n.d(he,"prod",(function(){return aB})),n.d(he,"raggedGather",(function(){return iB})),n.d(he,"raggedRange",(function(){return oB})),n.d(he,"raggedTensorToTensor",(function(){return uB})),n.d(he,"rand",(function(){return lB})),n.d(he,"randomGamma",(function(){return dB})),n.d(he,"randomNormal",(function(){return fB})),n.d(he,"randomStandardNormal",(function(){return mB})),n.d(he,"randomUniform",(function(){return gB})),n.d(he,"randomUniformInt",(function(){return yB})),n.d(he,"range",(function(){return bB})),n.d(he,"real",(function(){return xB})),n.d(he,"reciprocal",(function(){return wB})),n.d(he,"relu",(function(){return vB})),n.d(he,"relu6",(function(){return kB})),n.d(he,"reshape",(function(){return YP})),n.d(he,"reverse",(function(){return SB})),n.d(he,"reverse1d",(function(){return IB})),n.d(he,"reverse2d",(function(){return NB})),n.d(he,"reverse3d",(function(){return CB})),n.d(he,"reverse4d",(function(){return TB})),n.d(he,"round",(function(){return EB})),n.d(he,"rsqrt",(function(){return AB})),n.d(he,"scalar",(function(){return mM})),n.d(he,"selu",(function(){return RB})),n.d(he,"separableConv2d",(function(){return $B})),n.d(he,"setdiff1dAsync",(function(){return _B})),n.d(he,"sigmoid",(function(){return tz})),n.d(he,"sign",(function(){return FB})),n.d(he,"sin",(function(){return DB})),n.d(he,"sinh",(function(){return OB})),n.d(he,"slice",(function(){return nz})),n.d(he,"slice1d",(function(){return MB})),n.d(he,"slice2d",(function(){return PB})),n.d(he,"slice3d",(function(){return zB})),n.d(he,"slice4d",(function(){return LB})),n.d(he,"softmax",(function(){return BB})),n.d(he,"softplus",(function(){return IL})),n.d(he,"spaceToBatchND",(function(){return nB})),n.d(he,"fft",(function(){return WB})),n.d(he,"ifft",(function(){return VB})),n.d(he,"irfft",(function(){return UB})),n.d(he,"rfft",(function(){return HB})),n.d(he,"split",(function(){return GB})),n.d(he,"sqrt",(function(){return hM})),n.d(he,"square",(function(){return pM})),n.d(he,"squaredDifference",(function(){return jB})),n.d(he,"squeeze",(function(){return qB})),n.d(he,"stack",(function(){return KB})),n.d(he,"step",(function(){return XB})),n.d(he,"stridedSlice",(function(){return YB})),n.d(he,"sub",(function(){return SM})),n.d(he,"sum",(function(){return eL})),n.d(he,"tan",(function(){return ZB})),n.d(he,"tanh",(function(){return rz})),n.d(he,"tensor",(function(){return eO})),n.d(he,"tensor1d",(function(){return QB})),n.d(he,"tensor2d",(function(){return JB})),n.d(he,"tensor3d",(function(){return ZM})),n.d(he,"tensor4d",(function(){return eW})),n.d(he,"tensor5d",(function(){return tW})),n.d(he,"tensor6d",(function(){return nW})),n.d(he,"tensorScatterUpdate",(function(){return iW})),n.d(he,"tile",(function(){return iL})),n.d(he,"topk",(function(){return oW})),n.d(he,"truncatedNormal",(function(){return uW})),n.d(he,"unique",(function(){return lW})),n.d(he,"unsortedSegmentSum",(function(){return cW})),n.d(he,"unstack",(function(){return hW})),n.d(he,"upperBound",(function(){return pW})),n.d(he,"variable",(function(){return dW})),n.d(he,"where",(function(){return Pz})),n.d(he,"whereAsync",(function(){return mW})),n.d(he,"zeros",(function(){return zL})),n.d(he,"zerosLike",(function(){return dM})),n.d(he,"op",(function(){return ZD})),n.d(he,"OP_SCOPE_SUFFIX",(function(){return YD})),n.d(he,"image",(function(){return IV})),n.d(he,"linalg",(function(){return NV})),n.d(he,"losses",(function(){return CV})),n.d(he,"spectral",(function(){return kV})),n.d(he,"fused",(function(){return V})),n.d(he,"signal",(function(){return SV})),n.d(he,"sparse",(function(){return TV})),n.d(he,"string",(function(){return EV})),n.d(he,"booleanMaskAsync",(function(){return gW})),n.d(he,"transpose",(function(){return yW})),n.d(he,"norm",(function(){return tL})),n.d(he,"movingAverage",(function(){return bW})),n.d(he,"scatterND",(function(){return xW})),n.d(he,"searchSorted",(function(){return _L})),n.d(he,"sparseToDense",(function(){return wW})),n.d(he,"gatherND",(function(){return vW})),n.d(he,"dropout",(function(){return kW})),n.d(he,"enclosingPowerOfTwo",(function(){return SW})),n.d(he,"cosineWindow",(function(){return IW})),n.d(he,"inTopKAsync",(function(){return NW}));var pe={};n.r(pe),n.d(pe,"tilesFitEvenlyIntoShape",(function(){return gH})),n.d(pe,"computeDispatch",(function(){return yH})),n.d(pe,"computeWorkgroupInfoForMatMul",(function(){return bH})),n.d(pe,"computeWorkgroupSizeForConv2d",(function(){return xH})),n.d(pe,"computeWorkPerThreadForConv2d",(function(){return wH})),n.d(pe,"flatDispatchLayout",(function(){return vH})),n.d(pe,"GPUBytesPerElement",(function(){return kH})),n.d(pe,"isWebGPUSupported",(function(){return SH})),n.d(pe,"assertNotComplex",(function(){return IH})),n.d(pe,"MatMulProgramType",(function(){return NH}));var de={};n.r(de),n.d(de,"simpleAbsImpl",(function(){return lj})),n.d(de,"addImpl",(function(){return yj})),n.d(de,"bincountImpl",(function(){return xj})),n.d(de,"bincountReduceImpl",(function(){return wj})),n.d(de,"bitwiseAndImpl",(function(){return vj})),n.d(de,"castImpl",(function(){return dj})),n.d(de,"ceilImpl",(function(){return Nj})),n.d(de,"concatImpl",(function(){return Cj})),n.d(de,"equalImpl",(function(){return Tj})),n.d(de,"expImpl",(function(){return Ej})),n.d(de,"expm1Impl",(function(){return Aj})),n.d(de,"floorImpl",(function(){return Rj})),n.d(de,"floorDivImpl",(function(){return $j})),n.d(de,"gatherNdImpl",(function(){return _j})),n.d(de,"gatherV2Impl",(function(){return Fj})),n.d(de,"greaterImpl",(function(){return Dj})),n.d(de,"greaterEqualImpl",(function(){return Oj})),n.d(de,"lessImpl",(function(){return Mj})),n.d(de,"lessEqualImpl",(function(){return Pj})),n.d(de,"linSpaceImpl",(function(){return zj})),n.d(de,"logImpl",(function(){return Lj})),n.d(de,"maxImpl",(function(){return Bj})),n.d(de,"maximumImpl",(function(){return Wj})),n.d(de,"minimumImpl",(function(){return Vj})),n.d(de,"multiplyImpl",(function(){return Uj})),n.d(de,"negImpl",(function(){return Hj})),n.d(de,"notEqualImpl",(function(){return jj})),n.d(de,"prodImpl",(function(){return Kj})),n.d(de,"raggedGatherImpl",(function(){return Yj})),n.d(de,"raggedRangeImpl",(function(){return Zj})),n.d(de,"raggedTensorToTensorImpl",(function(){return nq})),n.d(de,"rangeImpl",(function(){return rq})),n.d(de,"rsqrtImpl",(function(){return sq})),n.d(de,"scatterImpl",(function(){return aq})),n.d(de,"sigmoidImpl",(function(){return iq})),n.d(de,"sliceImpl",(function(){return oq})),n.d(de,"sparseFillEmptyRowsImpl",(function(){return uq})),n.d(de,"sparseReshapeImpl",(function(){return lq})),n.d(de,"sparseSegmentReductionImpl",(function(){return cq})),n.d(de,"sqrtImpl",(function(){return hq})),n.d(de,"squaredDifferenceImpl",(function(){return pq})),n.d(de,"staticRegexReplaceImpl",(function(){return dq})),n.d(de,"stridedSliceImpl",(function(){return fq})),n.d(de,"stringNGramsImpl",(function(){return gq})),n.d(de,"stringSplitImpl",(function(){return bq})),n.d(de,"stringToHashBucketFastImpl",(function(){return xq})),n.d(de,"subImpl",(function(){return wq})),n.d(de,"tileImpl",(function(){return kq})),n.d(de,"topKImpl",(function(){return Nq})),n.d(de,"transposeImpl",(function(){return qj})),n.d(de,"uniqueImpl",(function(){return Cq}));var fe=n("8Y7J");class me{}var ge=n("pMnS"),ye=n("mrSG");n("o0su");class be{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class xe{refCount(e){return we("refCount")}incRef(e){return we("incRef")}timerAvailable(){return!0}time(e){return we("time")}read(e){return we("read")}readSync(e){return we("readSync")}readToGPU(e,t){return we("readToGPU")}numDataIds(){return we("numDataIds")}disposeData(e,t){return we("disposeData")}write(e,t,n){return we("write")}move(e,t,n,r,s){return we("move")}memory(){return we("memory")}floatPrecision(){return we("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return we("dispose")}}function we(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function ve(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,Ne(e,t,n)}function ke(e,t){if(e.length!==t.length)throw new Error("Array sizes must match to be shuffled together First array length was "+e.length+"Second array length was "+t.length);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,Ne(e,n,r),Ne(t,n,r)}function Se(e,t,n){return Math.max(e,Math.min(t,n))}function Ie(e){return e%2==0?e:e+1}function Ne(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Ce(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Te(e,t){const n=Math.random();return t*n+(1-n)*e}function Ee(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function Ae(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Re(e,t,n=""){Ae(Oe(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function $e(e){Ae(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function _e(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Ye(e)&&!n)for(let r=0;r<e.length;++r)_e(e[r],t,n);else t.push(e);return t}function Fe(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function De(e){return 0===e.length}function Oe(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function Me(e){return e%1==0}function Pe(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function ze(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function Le(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return ve(t),t}function Be(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function We(e,t=(e=>0),n,r=setTimeout){return new Promise((s,a)=>{let i=0;const o=()=>{if(e())return void s();i++;const u=t(i);null!=n&&i>=n?a():r(o,u)};o()})}function Ve(e,t){let n=1,r=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function Ue(e,t){const n=t.length;return Ae((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),Ae(e.every(e=>Me(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function Ge(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:Ue(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),r.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),r.push(o))}return{newShape:n,keptDims:r}}function He(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function je(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function qe(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function Ke(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Xe(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Ye(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function Ze(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function Qe(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function Je(e){return"string"==typeof e||e instanceof String}function et(e){return"boolean"==typeof e}function tt(e){return"number"==typeof e}function nt(e){return Array.isArray(e)?nt(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":tt(e)?"float32":Je(e)?"string":et(e)?"bool":"float32"}function rt(e){return!!(e&&e.constructor&&e.call&&e.apply)}function st(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function at(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function it(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return function e(t,n,r,s=!1){const a=new Array;if(1===n.length){const e=n[0]*(s?2:1);for(let n=0;n<e;n++)a[n]=r[t+n]}else{const i=n[0],o=n.slice(1),u=o.reduce((e,t)=>e*t)*(s?2:1);for(let n=0;n<i;n++)a[n]=e(t+n*u,o,r,s)}return a}(0,e,t,n)}function ot(e,t){const n=ut(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function ut(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function lt(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return it(e,new Float32Array(n));if("int32"===t)return it(e,new Int32Array(n));if("bool"===t)return it(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function ct(e){e.forEach(t=>{Ae(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function ht(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=n[s]*e[s];return r}function pt(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(e/n[s]),e-=r[s]*n[s];return r[r.length-1]=e,r}function dt(e){return e&&e.then&&"function"==typeof e.then}class ft{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=mt,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(gt().getBool("IS_TEST")||gt().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];gt().getBool("IS_TEST")||gt().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(dt(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function mt(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function gt(){return bt}let yt,bt=null;function xt(){if(null==yt){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}yt=e}return yt}function wt(e,t){const n=function(){const e=xt();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}function vt(...e){gt().getBool("IS_TEST")||gt().getBool("PROD")||console.warn(...e)}function kt(...e){gt().getBool("IS_TEST")||gt().getBool("PROD")||console.log(...e)}const St=wt("kernelRegistry",()=>new Map),It=wt("gradRegistry",()=>new Map);function Nt(e,t){const n=Rt(e,t);return St.get(n)}function Ct(e){return It.get(e)}function Tt(e){const t=St.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function Et(e){const{kernelName:t,backendName:n}=e,r=Rt(t,n);St.has(r)&&vt(`The kernel '${t}' for backend '${n}' is already registered`),St.set(r,e)}function At(e){const{kernelName:t}=e;It.has(t)&&gt().getBool("DEBUG")&&vt(`Overriding the gradient for '${t}'`),It.set(t,e)}function Rt(e,t){return`${t}_${e}`}var $t=n("2lpH"),_t=n.n($t);const Ft=_t.a||$t;function Dt(e){return Ft.fromString(e,!0,16)}const Ot=Dt("c3a5c85c97cb3127"),Mt=Dt("b492b66fbe98f273"),Pt=Dt("9ae16a3b2f90404f");function zt(e){return e.xor(e.shru(47))}function Lt(e,t,n){const r=e.slice(t,t+n);return Ft.fromBytes(Array.from(r),!0,!0)}function Bt(e,t){return Lt(e,t,8)}function Wt(e,t){return Lt(e,t,4)}function Vt(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Ut(e,t,n=Dt("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Gt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=Vt(a.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(n),a=a.add(Vt(s,44)),[s.add(r),a.add(i)]}(Bt(e,t),Bt(e,t+8),Bt(e,t+16),Bt(e,t+24),n,r)}function Ht(e,t=e.length){const n=Ft.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Pt.add(2*t),r=Bt(e,0).add(Pt),s=Bt(e,t-8);return Ut(Vt(s,37).mul(n).add(r),Vt(r,25).add(s).mul(n),n)}if(t>=4){const n=Pt.add(2*t);return Ut(Wt(e,0).shl(3).add(t),Wt(e,t-4),n)}if(t>0){const n=t+(e[t-1]<<2);return zt(Pt.mul(e[0]+(e[t>>1]<<8)).xor(Ot.mul(n))).mul(Pt)}return Pt}(e,t):function(e,t=e.length){const n=Pt.add(2*t),r=Bt(e,0).mul(Mt),s=Bt(e,8),a=Bt(e,t-8).mul(n),i=Bt(e,t-16).mul(Pt);return Ut(Vt(r.add(s),43).add(Vt(a,30)).add(i),r.add(Vt(s.add(Pt),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Pt.add(2*t),r=Bt(e,0).mul(Pt),s=Bt(e,8),a=Bt(e,t-8).mul(n),i=Bt(e,t-16).mul(Pt),o=Vt(r.add(s),43).add(Vt(a,30)).add(i),u=Ut(o,r.add(Vt(s.add(Pt),18)).add(a),n),l=Bt(e,16).mul(n),c=Bt(e,24),h=o.add(Bt(e,t-32)).mul(n),p=u.add(Bt(e,t-24)).mul(n);return Ut(Vt(l.add(c),43).add(Vt(h,30)).add(p),l.add(Vt(c.add(r),18)).add(h),n)}(e,t);let r=n,s=n.mul(Mt).add(113),a=zt(s.mul(Pt).add(113)).mul(Pt),i=[Ft.UZERO,Ft.UZERO],o=[Ft.UZERO,Ft.UZERO];r=r.mul(Pt).add(Bt(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=Vt(r.add(s).add(i[0]).add(Bt(e,u+8)),37).mul(Mt),s=Vt(s.add(i[1]).add(Bt(e,u+48)),42).mul(Mt),r=r.xor(o[1]),s=s.add(i[0]).add(Bt(e,u+40)),a=Vt(a.add(o[0]),33).mul(Mt),i=Gt(e,u,i[1].mul(Mt),r.add(o[0])),o=Gt(e,u+32,a.add(o[1]),s.add(Bt(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const h=Mt.add(a.and(255).shl(1));return u=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=Vt(r.add(s).add(i[0]).add(Bt(e,u+8)),37).mul(h),s=Vt(s.add(i[1]).add(Bt(e,u+48)),42).mul(h),r=r.xor(o[1].mul(9)),s=s.add(i[0].mul(9).add(Bt(e,u+40))),a=Vt(a.add(o[0]),33).mul(h),i=Gt(e,u,i[1].mul(h),r.add(o[0])),o=Gt(e,u+32,a.add(o[1]),s.add(Bt(e,u+16))),[a,r]=[r,a],Ut(Ut(i[0],o[0],h).add(zt(s).mul(Ot)).add(a),Ut(i[1],o[1],h).add(r),h)}function jt(e,t){return"string"===t?Yt(e):qt([e],t)}function qt(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=_e(e)),gt().getBool("DEBUG")&&qe(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function Kt(){return gt().platform.now()}function Xt(e,t){return gt().platform.fetch(e,t)}function Yt(e,t="utf-8"){return t=t||"utf-8",gt().platform.encode(e,t)}function Zt(e,t="utf-8"){return t=t||"utf-8",gt().platform.decode(e,t)}class Qt{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new en)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const i=Kt();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Kt()-i})}if(gt().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let o=0;o<r.length;o++){const t=r[o];t.data().then(n=>{Jt(n,t.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}function Jt(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class en{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?Be(r+"ms",9):r.error,o=Be(e,25),u=t.rank,l=t.size,c=Be(t.shape.toString(),14);let h="";for(const p in s){const e=s[p];if(null!=e){const n=e.shape||t.shape,r=n.length;h+=`${p}: ${r}D ${r>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function tn(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":Je(e)?`'${e}'`:"bool"===n?nn(e):parseFloat(e.toFixed(7)).toString(),Be(r,t)}function nn(e){return 0===e?"false":"true"}function rn(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class sn{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=Fe(e),null!=n){const e=n.length;Ae(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||je(t,this.size),this.strides=at(e)}set(e,...t){0===t.length&&(t=[0]),Ae(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const r of e){if(r<0||r>=this.shape[t])throw new Error(`Requested out of range element at ${e}.   Buffer shape=`+this.shape);t++}let n=e[e.length-1];for(let r=0;r<e.length-1;++r)n+=this.strides[r]*e[r];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return an().makeTensor(this.values,this.shape,this.dtype)}}let an=null,on=null,un=null;class ln{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=Fe(e),this.strides=at(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return on.buffer(this.shape,this.dtype,e)}bufferSync(){return on.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return it(this.shape,e,"complex64"===this.dtype)}arraySync(){return it(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=an().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>Zt(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),an().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=an().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>Zt(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await an().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(an().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return on.print(this,e)}clone(){return this.throwIfDisposed(),on.clone(this)}toString(e=!1){return function(e,t,n,r){const s=at(t),a=function(e,t,n,r){const s=Fe(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?rn(e):e;if(o>1)for(let l=0;l<s/a;l++){const e=l*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],tn(u[e+t],0,n).length)}return i}(e,t,n,s),i=t.length,o=function e(t,n,r,s,a,i=!0){const o="complex64"===r?2:1,u=n[0],l=n.length;if(0===l)return"complex64"===r?[tn(rn(t)[0],0,r)]:"bool"===r?[nn(t[0])]:[t[0].toString()];if(1===l){if(u>20){let e=Array.from(t.slice(0,3*o)),n=Array.from(t.slice((u-3)*o,u*o));return"complex64"===r&&(e=rn(e),n=rn(n)),["["+e.map((e,t)=>tn(e,a[t],r)).join(", ")+", ..., "+n.map((e,t)=>tn(e,a[u-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?rn(t):Array.from(t)).map((e,t)=>tn(e,a[t],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),p=s[0]*o,d=[];if(u>20){for(let n=0;n<3;n++){const s=n*p;d.push(...e(t.slice(s,s+p),c,r,h,a,!1))}d.push("...");for(let n=u-3;n<u;n++){const s=n*p;d.push(...e(t.slice(s,s+p),c,r,h,a,n===u-1))}}else for(let g=0;g<u;g++){const n=g*p;d.push(...e(t.slice(n,n+p),c,r,h,a,g===u-1))}const f=2===l?",":"";d[0]="["+d[0]+f;for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+f;let m=",\n";for(let g=2;g<l;g++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(e,t,n,s,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+i),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map(e=>"    "+e).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),on.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),an().makeVariable(this,e,t,n)}}function cn(){return wt("Tensor",()=>ln)}Object.defineProperty(ln,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),cn();class hn extends ln{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Oe(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);an().disposeTensor(this),this.dataId=e.dataId,an().incRef(this,null)}dispose(){an().disposeVariable(this),this.isDisposedInternal=!0}}var pn,dn,fn,mn,gn;Object.defineProperty(hn,Symbol.hasInstance,{value:e=>e instanceof ln&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(pn||(pn={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(dn||(dn={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(fn||(fn={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(mn||(mn={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(gn||(gn={}));const yn={float32:mn,int32:dn,bool:fn,complex64:gn};function bn(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return yn[e][t]}function xn(e){return bn(e,"int32")}function wn(e,t){if(e.dtype===t.dtype)return[e,t];const n=bn(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function vn(e,t){Ae(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function kn(e,t){return t.some(t=>t.id===e.id)}function Sn(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof ln)return void n.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=t;for(const i in a){const t=a[i];r.has(t)||(r.add(t),e(t,n,r))}}(e,t,new Set),t}function In(e){return null!=e.kernelName}class Nn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Cn{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Nn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(vt(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Qt(this.backendInstance),!0}setupRegisteredKernels(){Tt(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Tt(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof xe||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,vt(`Initialization of backend ${e} failed`),vt(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return vt(`Initialization of backend ${e} failed`),vt(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return Cn.nextTensorId++}nextVariableId(){return Cn.nextVariableId++}clone(e){const t=En.runKernel("Identity",{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>En.runKernel("Cast",{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){if(null==Nt(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=r-t-s-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const u=In(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(In(e)){const{kernelName:t,inputs:s,attrs:a}=e,u=Nt(t,this.backendName);Ae(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy(()=>t(this.backend,s));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=In(e)?null:e.backwardsFunc;let p;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,l,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()}),r&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(e=>null!=l[e]?l[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=Ct(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(Ae(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>s[t]);return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");r=r||this.backend;let s=e;"string"===(n=n||"float32")&&Je(e[0])&&(s=e.map(e=>Yt(e)));const a=r.write(s,t,n),i=new ln(t,n,a,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=Qe(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){return this.makeTensorFromTensorInfo({dataId:e,shape:t,dtype:n=n||"float32"},r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new ln(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new hn(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Ze(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof hn||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Ze(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=Ct(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=ut(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Sn(e),n=new Set(t.map(e=>e.id));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(Ae(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));Ae(s instanceof ln,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(r[i.id]){n.outputs.forEach(e=>r[e.id]=!0),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let u=0;u<e.length;u++){const t=e[u];if(s[t.id]&&i[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=ot(Fe(e),"float32");return En.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n(()=>o[t]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!Oe(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,e=>this.tidy(e),An);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return Ae(rt(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;Ae(t.every(e=>e instanceof ln),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),Ae(n.value instanceof ln,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),Ae(rt(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];Ae(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),Ae(a.every(e=>e instanceof ln),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Kt(),n=await this.backend.time(e);return n.wallMs=Kt()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Nn;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Tn(){const e=xt();if(null==e._tfengine){const t=new ft(e);e._tfengine=new Cn(t)}return bt=e._tfengine.ENV,an=()=>e._tfengine,e._tfengine}Cn.nextTensorId=0,Cn.nextVariableId=0;const En=Tn();function An(e,t){return En.runKernel("Add",{a:e,b:t})}let Rn;function $n(e){Rn=e}function _n(e){if(void 0!==Rn)return Rn;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Fn(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Dn=gt();function On(e,t){let n=e;if(Ye(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Ye(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&gt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!Ye(t))return void Ae(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);Ae(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),Ae(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);const s=n.slice(1);for(let a=0;a<t.length;++a)e(t[a],s,r.concat(a))}(e,r,[]),r}function Mn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function Pn(e,t,n,r="numeric"){if(e instanceof ln)return Mn(r,e.dtype,t,n),e;let s=nt(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Mn(r,s,t,n),null==e||!Ye(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=On(e,s);Ye(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?qt(e,s):_e(e,[],!0);return En.makeTensor(i,a,s)}function zn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,s)=>Pn(e,`${t}[${s}]`,n,r))}Dn.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Dn.registerFlag("IS_BROWSER",()=>Fn()),Dn.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Dn.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Dn.registerFlag("PROD",()=>!1),Dn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Dn.getBool("DEBUG")),Dn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Dn.registerFlag("IS_TEST",()=>!1),Dn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),Dn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Dn.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),Dn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Dn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const Ln="__op";function Bn(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Ln;const s=(...e)=>{En.startScope(n);try{const t=r(...e);return dt(t)&&console.error("Cannot return a Promise inside of tidy."),En.endScope(t),t}catch(t){throw En.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Wn=Bn({complex_:function(e,t){const n=Pn(e,"real","complex"),r=Pn(t,"imag","complex");return Re(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),En.runKernel("Complex",{real:n,imag:r})}});function Vn(e,t,n,r){if(null==r&&(r=nt(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ye(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ct(t);const e=Fe(t),r=Fe(n);Ae(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==Fe(t.slice(s));Ae(n[s]===t[s]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return Ye(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?qt(e,r):_e(e,[],!0),En.makeTensor(e,t,r)}function Un(e,t,n){return Vn(e,t,On(e,n),n)}const Gn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Hn(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),s+=4,r.set(e,s),s+=e.length}e(r)});r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:qn(await Promise.all(r)),specs:n}}function jn(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,u=Fe(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Gn[n.dtype],c=e.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++)l[e]=h[e]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=rr()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let e=0;e<h.length;e++)l[e]=Math.round(h[e]*n.scale+n.min)}s+=u*o}else if("string"===i){const t=Fe(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Gn[i],a=e.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=Un(e,o,"float32"),i=Un(r,o,"float32");n[t]=Wn(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[t]=Un(l,o,i))}return n}function qn(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}const Kn="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Xn(e){return Kn?Buffer.byteLength(e):new Blob([e]).size}function Yn(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function Zn(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Qn(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Jn(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function er(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),Jn(e,n,r)}function tr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Xn(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Xn(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function nr(e){const t=[];for(const n of e)t.push(...n.weights);return t}function rr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i];a[i]=e[n[s>>10]+(1023&s)]+t[s>>10]}return new Float32Array(s)}}class sr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==sr.instance&&(sr.instance=new sr),sr.instance}static registerSaveRouter(e){sr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){sr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return sr.getHandlers(e,"save")}static getLoadHandlers(e,t){return sr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?sr.getInstance().loadRouters:sr.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}const ar=e=>sr.registerSaveRouter(e),ir=e=>sr.registerLoadRouter(e),or=e=>sr.getSaveHandlers(e),ur=(e,t)=>sr.getLoadHandlers(e,t);function lr(){if(!gt().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function cr(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class hr{constructor(e){if(this.indexedDB=lr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>cr(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=tr(t),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{i=a.objectStore("model_info_store");const t=i.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}hr.URL_SCHEME="indexeddb://";const pr=e=>{return gt().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(hr.URL_SCHEME)?(t=e.slice(hr.URL_SCHEME.length),new hr(t)):null;var t};sr.registerSaveRouter(pr),sr.registerLoadRouter(pr);class dr{constructor(){this.indexedDB=lr()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>cr(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(hr.URL_SCHEME)?t.slice(hr.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>cr(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}const fr="tensorflowjs_models",mr="info",gr="model_topology",yr="weight_specs",br="weight_data",xr="model_metadata";function wr(e){return{info:[fr,e,mr].join("/"),topology:[fr,e,gr].join("/"),weightSpecs:[fr,e,yr].join("/"),weightData:[fr,e,br].join("/"),modelMetadata:[fr,e,xr].join("/")}}function vr(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function kr(e){const t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}class Sr{constructor(e){if(!gt().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=wr(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=tr(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(Kn)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:s}}catch(t){throw vr(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Kn){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(a),t}}Sr.URL_SCHEME="localstorage://";const Ir=e=>{return gt().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Sr.URL_SCHEME)?(t=e.slice(Sr.URL_SCHEME.length),new Sr(t)):null;var t};sr.registerSaveRouter(Ir),sr.registerLoadRouter(Ir);class Nr{constructor(){Ae(gt().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Ae("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=fr+"/",n="/"+mr;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[kr(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=wr(e=(t=e).startsWith(Sr.URL_SCHEME)?t.slice(Sr.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return vr(n),r}}class Cr{constructor(){this.managers={}}static getInstance(){return null==Cr.instance&&(Cr.instance=new Cr),Cr.instance}static registerManager(e,t){Ae(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),Ae(e.length>0,()=>"scheme must not be an empty string.");const n=Cr.getInstance();Ae(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=Cr.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Cr.getInstance().managers)}}function Tr(e){if(-1===e.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Cr.getSchemes().join(","));return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function Er(e,t,n=!1){Ae(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=sr.getLoadHandlers(e);Ae(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),Ae(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const s=r[0],a=sr.getSaveHandlers(t);Ae(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),Ae(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const i=a[0],o=Tr(e).scheme,u=Tr(e).path,l=o===Tr(e).scheme,c=await s.load();n&&l&&await Cr.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await Cr.getManager(o).removeModel(u),h.modelArtifactsInfo}async function Ar(){const e=Cr.getSchemes(),t={};for(const n of e){const e=await Cr.getManager(n).listModels();for(const r in e)t[n+"://"+r]=e[r]}return t}async function Rr(e){const t=Tr(e);return Cr.getManager(t.scheme).removeModel(t.path)}async function $r(e,t){return Er(e,t,!1)}async function _r(e,t){return Er(e,t,!0)}class Fr{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&gt().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}}if(gt().get("IS_BROWSER")){gt().setPlatform("browser",new Fr);try{Cr.registerManager(Sr.URL_SCHEME,new Nr)}catch(K1){}try{Cr.registerManager(hr.URL_SCHEME,new dr)}catch(K1){}}let Dr;function Or(e,t="float32",n){return t=t||"float32",ct(e),new sn(e,t,n)}gt().get("IS_NODE")&&!gt().get("IS_BROWSER")&&gt().setPlatform("node",new class{constructor(){this.util=n(6),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=gt().global.fetch?gt().global.fetch(e,t):(null==Dr&&(Dr=n(5)),Dr(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Mr=Bn({cast_:function(e,t){const n=Pn(e,"x","cast");if(!Ke(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return En.runKernel("Cast",{x:n},{dtype:t})}}),Pr=Bn({clone_:function(e){const t=Pn(e,"x","clone","string_or_numeric");return En.runKernel("Identity",{x:t})}});function zr(e,t=!1){console.log(e.toString(t))}function Lr(e){return new Promise(e=>setTimeout(e)).then(e)}Tn(),on={buffer:Or,cast:Mr,clone:Pr,print:zr};class Br{constructor(e){if(!gt().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Br.URL_SCHEME)&&(e=e.slice(Br.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Qn(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Lr(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Lr(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:tr(e)}}}}Br.URL_SCHEME="downloads://";class Wr{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error("modelTopology field is missing from file "+this.jsonFile.name));if(null==r.weightsManifest)return void t(new Error("weightManifest field is missing from file "+this.jsonFile.name));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=er(r,e=>this.loadWeights(e));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(s).then(e=>[t,Yn(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{const s=new FileReader;s.onload=e=>{n(e.target.result)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>Zn(e.name)),r={};for(const s of e)s.paths.forEach(e=>{const s=Zn(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Vr(e){return new Wr(e)}function Ur(e,t,n,r){!function(e){Ae(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){Ae(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),Ae(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),Ae(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++s/e.length*(r-n);return t(i),a}),a)))}async function Gr(e,t){null==t&&(t={});const n=null==t.fetchFunc?gt().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await Ur(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await Ur(s,t.onProgress,.5,1)}async function Hr(e,t="",n,r){return jr(e=>Gr(e,{requestInit:r}))(e,t,n)}function jr(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u=Gn["quantization"in e?e.quantization.dtype:e.dtype]*Fe(e.shape),l=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((t,n)=>{t===e.name&&(l(),i[n]=!0)}):l(),o.push(e.name),n+=u})}),!i.every(e=>e)){const e=r.filter((e,t)=>!i[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const c=await e(l),h={};let p=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[e].forEach(e=>{const t=jn(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]}),p+=n}),h}}sr.registerSaveRouter(e=>gt().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Br.URL_SCHEME)?function(e="model"){return new Br(e)}(e.slice(Br.URL_SCHEME.length)):null);class qr{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Ae("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=gt().platform.fetch,Ae(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&Ae(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Qn(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:tr(e),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(n){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}if(null==t.modelTopology&&null==t.weightsManifest)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return er(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=nr(e),i=[],o=[];for(const u of e)for(const e of u.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,Yn(await Gr(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Kr(e){return null!=e.match(qr.URL_SCHEME_REGEX)}qr.URL_SCHEME_REGEX=/^https?:\/\//;const Xr=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>Kr(e)):Kr(e),n)return Yr(e,t)}return null};function Yr(e,t){return new qr(e,t)}function Zr(e,t){return Yr(e,t)}sr.registerSaveRouter(Xr),sr.registerLoadRouter(Xr);class Qr{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Jr{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class es{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function ts(e,t,n,r){const s=arguments;return new es(ns(...s))}function ns(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Qr(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qr({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qr({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function rs(e){return new Jr(e)}function ss(e){return new Jr(e)}function as(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function is(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function os(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}function us(e,t,n){if($e(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=On(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Vn(e,t,r,n)}let ls;function cs(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(null!=Nt("FromPixels",En.backendName))return En.runKernel("FromPixels",{pixels:e},{numChannels:t});const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(a||s||o){if(null==ls)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");ls=new OffscreenCanvas(1,1).getContext("2d")}else ls=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});ls.canvas.width=u,ls.canvas.height=l,ls.drawImage(e,0,0,u,l),c=ls.getImageData(0,0,u,l).data}if(4===t)h=new Int32Array(c);else{const e=u*l;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return us(h,[l,u,t],"int32")}async function hs(e,t=3){let n=null;if(gt().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(r){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return cs(n,t)}async function ps(e,t){let n=Pn(e,"img","toPixels");if(!(e instanceof ln)){const e=n;n=Mr(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let l=0;l<r*s;++l){const e=[0,0,0,255];for(let r=0;r<a;r++){const t=i[l*a+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[r]=t*o}const t=4*l;u[t+0]=Math.round(e[0]),u[t+1]=Math.round(e[1]),u[t+2]=Math.round(e[2]),u[t+3]=Math.round(e[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const ds=Bn({fromPixels_:cs});function fs(e,t,n){const r=e.shape.length;Ae(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),Ae(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)Ae(t[s]+n[s]<=e.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`)}function ms(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function gs(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function ys(e,t,n,r){const s=[...e];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<n;a++)0===a?s[t]=1:(s.splice(t,0,1),s.pop());return s}function bs(e,t,n){return n<=e?n:n-(t-1)}function xs(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function ws(e,t,n,r,s,a,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=vs(i,u,l,r,e),h=ks(o,u,l,s,e),p=ys(a,u,l,e)}else for(let d=0;d<l;d++)c[d]=Is(i,r,a,e,d,u),h[d]=Ns(o,s,a,e,d,u),p[d]=Ss(a,d,u);return{begin:c,end:h,strides:p}}function vs(e,t,n,r,s){const a=[...s],i=xs(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const s=bs(t,n,o);let i=r[s];e&1<<s&&(i=0),a[o]=i}return a}function ks(e,t,n,r,s){const a=[...s],i=xs(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const s=bs(t,n,o);let i=r[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=s[o];a[o]<0&&(a[o]+=e),a[o]=Se(0,a[o],s[o])}return a}function Ss(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Is(e,t,n,r,s,a){let i=t[s];(e&1<<s||a&1<<s||null==i)&&(i=(n[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return i<0&&(i+=o),i=Se(0,i,o-1),i}function Ns(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?Se(0,i,u):Se(-1,i,u-1),i}function Cs(e,t,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Ts(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Es(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach(e=>{Ae(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(Ae(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function As(e,t,n,r,s,a,i,o,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};for(let b=0;b<h.dims;b++)c&&0!=(1<<b&o)&&h.numAddAxisAfterEllipsis++,1<<b&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let b=0;b<e.length;++b){if(0===p.strides[b])throw Error(`strides[${b}] must be non-zero`);const t=!!(p.shrinkAxisMask&1<<b),n=e[b];if(-1===n){g.push(t?1:-1);continue}const r=[p.beginMask&1<<b,p.endMask&1<<b],s=[p.strides[b]>0?0:-1,p.strides[b]>0?n:n-1];if(t&&p.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[b];const a=!!(p.beginMask&1<<b&&p.endMask&1<<b);if(p.beginValid&&p.endValid){if(t){const e=p.begin[b]<0?n+p.begin[b]:p.begin[b];if(p.begin[b]=e,p.end[b]=p.begin[b]+1,e<0||e>=n)throw Error(`slice index ${p.begin[b]} of dimension ${b} out of bounds.`)}else p.begin[b]=Rs(p.begin[b],0,p.strides[b],n,r,s),p.end[b]=Rs(p.end[b],1,p.strides[b],n,r,s);const e=1===p.strides[b]&&0===p.begin[b]&&p.end[b]===n;d=d&&e,f=f&&(0===b&&1===p.strides[b]||e)}else d=d&&1===p.strides[b]&&a,f=f&&(0===b&&1===p.strides[b]||a);let i,o=!1;if(p.beginValid&&p.endValid?(i=p.end[b]-p.begin[b],o=!0):t?(i=1,o=!0):a&&n>=0&&(i=p.strides[b]<0?-n:n,o=!0),o){let e;e=0===i||i<0!=p.strides[b]<0?0:Math.trunc(i/p.strides[b])+(i%p.strides[b]!=0?1:0),g.push(e)}else g.push(-1)}for(let b=0;b<p.finalShapeGatherIndices.length;++b){const e=p.finalShapeGatherIndices[b];e>=0?y.push(g[e]):-2===e&&y.push(1)}return{finalShapeSparse:y.filter((e,t)=>-2!==p.finalShapeGatherIndices[t]),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function Rs(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}class $s{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class _s{constructor(){this.classNameMap={}}static getMap(){return null==_s.instance&&(_s.instance=new _s),_s.instance}static register(e){_s.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Fs(e){Ae(null!=e.className,()=>"Class being registered does not have the static className property defined."),Ae("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),Ae(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),_s.register(e)}function Ds(){return En}function Os(){return En.memory()}function Ms(e,t){return En.tidy(e,t)}function Ps(e){Sn(e).forEach(e=>e.dispose())}function zs(e){return En.keep(e)}function Ls(e,t,n=1){return En.registerBackend(e,t,n)}function Bs(e){return En.customGrad(e)}function Ws(e,t){if((Ye(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Ye(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Vn(e,[],[],t)}un=function(e){gt().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};class Vs extends $s{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:s[e.name]}));this.applyGradients(e)}else this.applyGradients(s);return Ps(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){Ae(rt(e),()=>"The f passed in variableGrads(f) must be a function"),Ae(null==t||Array.isArray(t)&&t.every(e=>e instanceof hn),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in En.registeredVariables)t.push(En.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,s=t.length;Ae((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=En.gradients(e,t,null,!0);Ae(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),Ae(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Ps(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ws(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Vs,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const Us=Bn({abs_:function(e){const t=Pn(e,"x","abs");return En.runKernel("complex64"===t.dtype?"ComplexAbs":"Abs",{x:t})}}),Gs=Bn({acos_:function(e){const t=Pn(e,"x","acos");return En.runKernel("Acos",{x:t})}}),Hs=Bn({acosh_:function(e){const t=Pn(e,"x","acosh");return En.runKernel("Acosh",{x:t})}}),js=Bn({add_:function(e,t){let n=Pn(e,"a","add"),r=Pn(t,"b","add");return[n,r]=wn(n,r),En.runKernel("Add",{a:n,b:r})}}),qs=Bn({addN_:function(e){Ae(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),Ae(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>Pn(e,"tensors"+t,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!Oe(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),En.runKernel("AddN",t)}}),Ks=Bn({all_:function(e,t=null,n=!1){const r=Pn(e,"x","all","bool");return En.runKernel("All",{x:r},{axis:t,keepDims:n})}}),Xs=Bn({any_:function(e,t=null,n=!1){const r=Pn(e,"x","any","bool");return En.runKernel("Any",{x:r},{axis:t,keepDims:n})}}),Ys=Bn({argMax_:function(e,t=0){const n=Pn(e,"x","argMax");return En.runKernel("ArgMax",{x:n},{axis:t})}}),Zs=Bn({argMin_:function(e,t=0){const n=Pn(e,"x","argMin");return En.runKernel("ArgMin",{x:n},{axis:t})}}),Qs=Bn({asin_:function(e){const t=Pn(e,"x","asin");return En.runKernel("Asin",{x:t})}}),Js=Bn({asinh_:function(e){const t=Pn(e,"x","asinh");return En.runKernel("Asinh",{x:t})}}),ea=Bn({atan_:function(e){const t=Pn(e,"x","atan");return En.runKernel("Atan",{x:t})}}),ta=Bn({atan2_:function(e,t){let n=Pn(e,"a","atan2"),r=Pn(t,"b","atan2");return[n,r]=wn(n,r),En.runKernel("Atan2",{a:n,b:r})}}),na=Bn({atanh_:function(e){const t=Pn(e,"x","atanh");return En.runKernel("Atanh",{x:t})}});function ra(e,t,n,r,s="NHWC",a){return ia(e,[...t,e[3]],n,a,r,null,null,ma(s))}function sa(e,t,n,r,s,a,i="channelsLast"){const[o,u]=la(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);l=[o,u,e[1],e[1]]}return ia(e,l,n,r,s,a,!1,i)}function aa(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=ca(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return oa(e,c,n,r,s,!1,h,a)}function ia(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,l,c]=e}const[p,d,,f]=t,[m,g]=la(n),[y,b]=la(r),x=ha(p,y),w=ha(d,b),{padInfo:v,outHeight:k,outWidth:S}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=ua(e,t,n));const a=e[1];return[pa((e[0]-t+2*r)/n+1,s),pa((a-t+2*r)/n+1,s)]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),p=e-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const p="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=pa((t-a+p+d)/r+1,o),h=pa((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),I=i?f*h:f;let N;return"channelsFirst"===o?N=[u,I,k,S]:"channelsLast"===o&&(N=[u,k,S,I]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:S,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function oa(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,p,l,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=ca(n),[w,v,k]=ca(r),S=ha(d,w),I=ha(f,v),N=ha(m,k),{padInfo:C,outDepth:T,outHeight:E,outWidth:A}=function(e,t,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=ua(e,t,r));const i=e[1],o=e[2];return[pa((e[0]-t+2*s)/r+1,a),pa((i-t+2*s)/r+1,a),pa((o-t+2*s)/r+1,a),1]}([t,n,r,1],o,0,s,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,S,I,N,o),R=a?g*p:g;let $;return"channelsFirst"===i?$=[u,R,T,E,A]:"channelsLast"===i&&($=[u,T,E,A,R]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:E,outWidth:A,outChannels:R,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:I,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:$,filterShape:t}}function ua(e,t,n,r=1){const s=ha(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function la(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function ca(e){return"number"==typeof e?[e,e,e]:e}function ha(e,t){return t<=1?e:e+(e-1)*(t-1)}function pa(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function da(e){const[t,n,r]=la(e);return 1===t&&1===n&&1===r}function fa(e,t){return da(e)||da(t)}function ma(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}function ga(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)Ae(Me(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{Ae(Me(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}const ya=Bn({reshape_:function(e,t){const n=Pn(e,"x","reshape","string_or_numeric");return En.runKernel("Reshape",{x:n},{shape:t})}}),ba=Bn({avgPool_:function(e,t,n,r,s){const a=Pn(e,"x","avgPool","float32");Ae(fa(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=ya(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ae(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),ga("avgPool",r,s);let u=En.runKernel("AvgPool",{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return u=Mr(u,a.dtype),o?ya(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),xa=Bn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=Pn(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=ya(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Ae(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),Ae("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),ga("avgPool3d",r,s);let l=En.runKernel("AvgPool3D",{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return l=Mr(l,o.dtype),u?ya(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),wa=Bn({concat_:function(e,t=0){Ae(e.length>=1,()=>"Pass at least one tensor to concat");const n=zn(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?Pr(n[0]):En.runKernel("Concat",n,{axis:t})}}),va=Bn({matMul_:function(e,t,n=!1,r=!1){let s=Pn(e,"a","matMul"),a=Pn(t,"b","matMul");return[s,a]=wn(s,a),En.runKernel("BatchMatMul",{a:s,b:a},{transposeA:n,transposeB:r})}}),ka=Bn({mul_:function(e,t){let n=Pn(e,"a","mul"),r=Pn(t,"b","mul");return[n,r]=wn(n,r),En.runKernel("Multiply",{a:n,b:r})}}),Sa=Bn({sigmoid_:function(e){const t=Pn(e,"x","sigmoid","float32");return En.runKernel("Sigmoid",{x:t})}}),Ia=Bn({slice_:function(e,t,n){const r=Pn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");return En.runKernel("Slice",{x:r},{begin:t,size:n})}}),Na=Bn({tanh_:function(e){const t=Pn(e,"x","tanh","float32");return En.runKernel("Tanh",{x:t})}}),Ca=Bn({basicLSTMCell_:function(e,t,n,r,s,a){const i=Pn(e,"forgetBias","basicLSTMCell"),o=Pn(t,"lstmKernel","basicLSTMCell"),u=Pn(n,"lstmBias","basicLSTMCell"),l=Pn(r,"data","basicLSTMCell"),c=Pn(s,"c","basicLSTMCell"),h=Pn(a,"h","basicLSTMCell"),p=wa([l,h],1),d=va(p,o),f=js(d,u),m=f.shape[1]/4,g=[f.shape[0],m],y=Ia(f,[0,0],g),b=Ia(f,[0,m],g),x=Ia(f,[0,2*m],g),w=Ia(f,[0,3*m],g),v=js(ka(Sa(y),Na(b)),ka(c,Sa(js(i,x))));return[v,ka(Na(v),Sa(w))]}}),Ta=Bn({batchToSpaceND_:function(e,t,n){const r=Pn(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);return Ae(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),Ae(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),Ae(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`),En.runKernel("BatchToSpaceND",{x:r},{blockShape:t,crops:n})}}),Ea=Bn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=Pn(e,"x","batchNorm"),o=Pn(t,"mean","batchNorm"),u=Pn(n,"variance","batchNorm");let l,c;null!=s&&(l=Pn(s,"scale","batchNorm")),null!=r&&(c=Pn(r,"offset","batchNorm")),Ae(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Ae(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Ae(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){let t;return t=0===e.rank||1===e.rank?ya(e,[1,1,1,e.size]):2===e.rank?ya(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ya(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p=En.runKernel("FusedBatchNorm",{x:h,scale:l,offset:c,mean:o,variance:u},{varianceEpsilon:a});return ya(p,i.shape)}}),Aa=Bn({batchNorm2d_:function(e,t,n,r,s,a){const i=Pn(e,"x","batchNorm"),o=Pn(t,"mean","batchNorm"),u=Pn(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pn(s,"scale","batchNorm")),null!=r&&(c=Pn(r,"offset","batchNorm")),Ae(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),Ae(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),Ae(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&Ae(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&Ae(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ea(i,o,u,c,l,a)}}),Ra=Bn({batchNorm3d_:function(e,t,n,r,s,a){const i=Pn(e,"x","batchNorm"),o=Pn(t,"mean","batchNorm"),u=Pn(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pn(s,"scale","batchNorm")),null!=r&&(c=Pn(r,"offset","batchNorm")),Ae(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),Ae(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),Ae(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&Ae(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&Ae(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ea(i,o,u,c,l,a)}}),$a=Bn({batchNorm4d_:function(e,t,n,r,s,a){const i=Pn(e,"x","batchNorm"),o=Pn(t,"mean","batchNorm"),u=Pn(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pn(s,"scale","batchNorm")),null!=r&&(c=Pn(r,"offset","batchNorm")),Ae(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),Ae(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),Ae(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&Ae(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&Ae(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ea(i,o,u,c,l,a)}}),_a=Bn({bincount_:function(e,t,n){const r=Pn(e,"x","bincount"),s=Pn(t,"weights","bincount");return Ae("int32"===r.dtype,()=>"Error in bincount: input dtype must be int32, but got "+r.dtype),Ae(n>=0,()=>`size must be non-negative, but got ${n}.`),Ae(s.size===r.size||0===s.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: `+s.shape+"."),En.runKernel("Bincount",{x:r,weights:s},{size:n})}}),Fa=Bn({broadcastArgs_:function(e,t){const n=Pn(e,"s0","broadcastArgs","int32"),r=Pn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error("broadcastArgs(): first input must be a vector (rank=1). Has rank "+n.rank);if(1!==r.rank)throw new Error("broadcastArgs(): second input must be a vector (rank=1). Has rank "+r.rank);return En.runKernel("BroadcastArgs",{s0:n,s1:r})}}),Da=Bn({broadcastTo_:function(e,t){let n=Pn(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ya(n,e)}const s=n.shape,a=Array.from(t);for(let i=t.length-1;i>=0;i--)if(s[i]===t[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?Pr(n):En.runKernel("Tile",{x:n},{reps:a})}}),Oa=Bn({ceil_:function(e){const t=Pn(e,"x","ceil","float32");return En.runKernel("Ceil",{x:t})}});function Ma(e,t,n){return En.runKernel("Fill",{},{shape:e,value:t,dtype:n})}const Pa=Bn({clipByValue_:function(e,t,n){const r=Pn(e,"x","clipByValue");return Ae(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n?Ma(r.shape,t,r.dtype):En.runKernel("ClipByValue",{x:r},{clipValueMin:t,clipValueMax:n})}}),za=Bn({concat1d_:function(e){return wa(e,0)}}),La=Bn({concat2d_:function(e,t){return wa(e,t)}}),Ba=Bn({concat3d_:function(e,t){return wa(e,t)}}),Wa=Bn({concat4d_:function(e,t){return wa(e,t)}}),Va=Bn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Pn(e,"x","conv2d","float32"),u=Pn(t,"filter","conv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=ya(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Ae(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),Ae(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),ga("conv2d",r,i);const h="NHWC"===s?l.shape[3]:l.shape[1];Ae(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),Ae(fa(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p=En.runKernel("Conv2D",{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?ya(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Ua=Bn({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=Pn(e,"x","conv1d"),u=Pn(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=ya(o,[1,o.shape[0],o.shape[1]])),Ae(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),Ae(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),ga("conv1d",r,i),Ae(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),Ae(fa(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),Ae("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=ya(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=ya(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Va(p,h,[1,n],r,"NHWC",[1,a],i);return ya(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Ga=Bn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){Ae(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=ya(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),Ae(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),Ae(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),Ae(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];Ae(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),Ae(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),ga("conv2dDerInput",s,i);const p=En.runKernel("Conv2DBackpropInput",{dy:u,filter:n},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o});return l?ya(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Ha=Bn({conv2dTranspose_:function(e,t,n,r,s,a){const i=Pn(e,"x","conv2dTranspose"),o=Pn(t,"filter","conv2dTranspose");return Ga(n,i,o,r,s,"NHWC",a)}}),ja=Bn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=Pn(e,"x","conv3d"),o=Pn(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=ya(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Ae(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),Ae(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),Ae(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),Ae(fa(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),Ae("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c=En.runKernel("Conv3D",{x:u,filter:o},{strides:n,pad:r,dataFormat:s,dilations:a});return l?ya(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),qa=Bn({conv3DBackpropInput_:function(e,t,n,r,s){Ae(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=ya(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=i.shape[4];Ae(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),Ae(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),Ae(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),Ae(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),Ae(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c=En.runKernel("Conv3DBackpropInputV2",{dy:i,filter:n},{pad:s,strides:r,inputShape:a});return o?ya(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Ka=Bn({conv3dTranspose_:function(e,t,n,r,s){const a=Pn(e,"x","conv3dTranspose"),i=Pn(t,"filter","conv3dTranspose");return qa(n,a,i,r,s)}}),Xa=Bn({cos_:function(e){const t=Pn(e,"x","cos","float32");return En.runKernel("Cos",{x:t})}}),Ya=Bn({cosh_:function(e){const t=Pn(e,"x","cosh","float32");return En.runKernel("Cosh",{x:t})}}),Za=Bn({cumprod_:function(e,t=0,n=!1,r=!1){const s=Pn(e,"x","cumprod");return En.runKernel("Cumprod",{x:s},{axis:t,exclusive:n,reverse:r})}}),Qa=Bn({cumsum_:function(e,t=0,n=!1,r=!1){const s=Pn(e,"x","cumsum");return En.runKernel("Cumsum",{x:s},{axis:t,exclusive:n,reverse:r})}}),Ja=Bn({denseBincount_:function(e,t,n,r=!1){const s=Pn(e,"x","denseBincount"),a=Pn(t,"weights","denseBincount");return Ae("int32"===s.dtype,()=>"Error in denseBincount: input dtype must be int32, but got "+s.dtype),Ae(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),Ae(n>=0,()=>`size must be non-negative, but got ${n}.`),Ae(a.size===s.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: `+a.shape+"."),En.runKernel("DenseBincount",{x:s,weights:a},{size:n,binaryOutput:r})}}),ei=Bn({depthToSpace_:function(e,t,n="NHWC"){const r=Pn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return Ae(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t),Ae(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),Ae(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),Ae(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),En.runKernel("DepthToSpace",{x:r},{blockSize:t,dataFormat:n})}}),ti=Bn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=Pn(e,"x","depthwiseConv2d","float32"),u=Pn(t,"filter","depthwiseConv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=ya(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Ae(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),Ae(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+".");const h="NHWC"===s?l.shape[3]:l.shape[1];Ae(h===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${u.shape[2]}.`),ga("depthwiseConv2d",r,i);const p=En.runKernel("DepthwiseConv2dNative",{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?ya(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ni=Bn({diag_:function(e){const t=Pn(e,"x","diag");return En.runKernel("Diag",{x:t})}}),ri=Bn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=Pn(e,"x","dilation2d"),o=Pn(t,"filter","dilation2d");Ae(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),Ae(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),Ae("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let u=i,l=!1;3===i.rank&&(u=ya(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c=En.runKernel("Dilation2D",{x:u,filter:o},{strides:n,pad:r,dilations:s});return l?ya(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),si=Bn({floorDiv_:function(e,t){let n=Pn(e,"a","floorDiv"),r=Pn(t,"b","floorDiv");return[n,r]=wn(n,r),En.runKernel("FloorDiv",{a:n,b:r})}}),ai=Bn({div_:function(e,t){let n=Pn(e,"a","div"),r=Pn(t,"b","div");return[n,r]=wn(n,r),"int32"===n.dtype&&"int32"===r.dtype?si(n,r):En.runKernel("RealDiv",{a:n,b:r},{})}}),ii=Bn({equal_:function(e,t){let n=Pn(e,"a","equal","string_or_numeric"),r=Pn(t,"b","equal","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("Equal",{a:n,b:r})}}),oi=Bn({where_:function(e,t,n){const r=Pn(t,"a","where"),s=Pn(n,"b","where"),a=Pn(e,"condition","where","bool"),i=os(os(a.shape,r.shape),s.shape),o=Da(a,i),u=Da(r,i),l=Da(s,i);return En.runKernel("Select",{condition:o,t:u,e:l})}}),ui=Bn({zerosLike_:function(e){const t=Pn(e,"x","zerosLike");return En.runKernel("ZerosLike",{x:t})}}),li=Bn({divNoNan_:function(e,t){let n=Pn(e,"a","div"),r=Pn(t,"b","div");[n,r]=wn(n,r);const s=ai(n,r),a=ui(s),i=ii(r,a);return oi(i,a,s)}}),ci=Bn({dot_:function(e,t){const n=Pn(e,"t1","dot"),r=Pn(t,"t2","dot");Ae(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(Ae(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const e=ya(n,[1,-1]),t=ya(r,[-1,1]),s=va(e,t);return ya(s,[])}if(1===n.rank&&2===r.rank){const e=ya(n,[1,-1]),t=ya(r,[r.shape[0],r.shape[1]]),s=va(e,t);return ya(s,[s.size])}if(2===n.rank&&1===r.rank){const e=ya(r,[-1,1]),t=va(n,e);return ya(t,[t.size])}{const e=ya(r,[r.shape[0],r.shape[1]]);return va(n,e)}}}),hi=Bn({einsum_:function(e,...t){const n=t.map((e,t)=>Pn(e,"tensors"+t,"einsum"));return En.runKernel("Einsum",n,{equation:e})}}),pi=Bn({elu_:function(e){const t=Pn(e,"x","elu","float32");return En.runKernel("Elu",{x:t})}}),di=Bn({erf_:function(e){let t=Pn(e,"x","erf");return Ae("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=Mr(t,"float32")),En.runKernel("Erf",{x:t})}});function fi(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function mi(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function gi(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map(t=>e[t])]}function yi(e,t){return mi(e,t.map(e=>1),t)}function bi(e,t,n){Ae(fi(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function xi(e,t){if(fi(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function wi(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function vi(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const ki=Bn({max_:function(e,t=null,n=!1){const r=Pn(e,"x","max");return En.runKernel("Max",{x:r},{reductionIndices:t,keepDims:n})}}),Si=Bn({min_:function(e,t=null,n=!1){const r=Pn(e,"x","min");return En.runKernel("Min",{x:r},{axis:t,keepDims:n})}}),Ii=Bn({pow_:function(e,t){let n=Pn(e,"base","pow"),r=Pn(t,"exp","pow");return[n,r]=wn(n,r),En.runKernel("Pow",{a:n,b:r})}}),Ni=Bn({sqrt_:function(e){const t=Pn(e,"x","sqrt","float32");return En.runKernel("Sqrt",{x:t})}}),Ci=Bn({square_:function(e){const t=Pn(e,"x","square");return En.runKernel("Square",{x:t},{})}}),Ti=Bn({sum_:function(e,t=null,n=!1){let r=Pn(e,"x","sum");return"bool"===r.dtype&&(r=Mr(r,"int32")),En.runKernel("Sum",{x:r},{axis:t,keepDims:n})}}),Ei=Bn({norm_:function(e,t="euclidean",n=null,r=!1){const s=function e(t,n,r=null){if(0===t.rank)return Us(t);if(1!==t.rank&&null===r)return e(ya(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return Ti(Us(t),r);if(n===1/0)return ki(Us(t),r);if(n===-1/0)return Si(Us(t),r);if("euclidean"===n||2===n)return Ni(Ti(Ii(Us(t),Ws(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return ki(Ti(Us(t),r[0]),r[1]-1);if(n===1/0)return ki(Ti(Us(t),r[1]),r[0]);if(n===-1/0)return Si(Ti(Us(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return Ni(Ti(Ci(t),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(e=Pn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=Ue(n,e.shape);a=yi(s.shape,t)}return ya(s,a)}}),Ai=Bn({euclideanNorm_:function(e,t=null,n=!1){return Ei(e,"euclidean",t,n)}}),Ri=Bn({exp_:function(e){const t=Pn(e,"x","exp");return En.runKernel("Exp",{x:t})}}),$i=Bn({expandDims_:function(e,t=0){const n=Pn(e,"x","expandDims","string_or_numeric");return Ae(t<=n.rank,()=>"Axis must be <= rank of the tensor"),En.runKernel("ExpandDims",{input:n},{dim:t})}}),_i=Bn({expm1_:function(e){const t=Pn(e,"x","expm1");return En.runKernel("Expm1",{x:t})}}),Fi=Bn({tile_:function(e,t){const n=Pn(e,"x","tile","string_or_numeric");return Ae(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),En.runKernel("Tile",{x:n},{reps:t})}}),Di=Bn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Or([e,t],r),a=e<=t?e:t;for(let o=0;o<a;++o)s.set(1,o,o);const i=ya(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Fi($i(i,0),[n[0],1,1]);if(2===n.length)return Fi($i($i(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Fi($i($i($i(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Oi=Bn({floor_:function(e){const t=Pn(e,"x","floor","float32");return En.runKernel("Floor",{x:t})}}),Mi=Bn({gather_:function(e,t,n=0,r=0){const s=Pn(e,"x","gather"),a=Pn(t,"indices","gather","int32");return En.runKernel("GatherV2",{x:s,indices:a},{axis:n,batchDims:r})}}),Pi=Bn({greater_:function(e,t){let n=Pn(e,"a","greater","string_or_numeric"),r=Pn(t,"b","greater","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("Greater",{a:n,b:r})}}),zi=Bn({greaterEqual_:function(e,t){let n=Pn(e,"a","greaterEqual","string_or_numeric"),r=Pn(t,"b","greaterEqual","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("GreaterEqual",{a:n,b:r})}}),Li=Bn({imag_:function(e){const t=Pn(e,"input","imag");return En.runKernel("Imag",{input:t})}}),Bi=Bn({isFinite_:function(e){const t=Pn(e,"x","isFinite");return En.runKernel("IsFinite",{x:t})}}),Wi=Bn({isInf_:function(e){const t=Pn(e,"x","isInf");return En.runKernel("IsInf",{x:t})}}),Vi=Bn({isNaN_:function(e){const t=Pn(e,"x","isNaN");return En.runKernel("IsNan",{x:t})}}),Ui=Bn({leakyRelu_:function(e,t=.2){const n=Pn(e,"x","leakyRelu");return En.runKernel("LeakyRelu",{x:n},{alpha:t})}}),Gi=Bn({less_:function(e,t){let n=Pn(e,"a","less","string_or_numeric"),r=Pn(t,"b","less","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("Less",{a:n,b:r})}}),Hi=Bn({lessEqual_:function(e,t){let n=Pn(e,"a","lessEqual","string_or_numeric"),r=Pn(t,"b","lessEqual","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("LessEqual",{a:n,b:r})}});function ji(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");return En.runKernel("LinSpace",{},{start:e,stop:t,num:n})}const qi=Bn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Pn(e,"x","localResponseNormalization");Ae(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),Ae(Me(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=ya(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u=En.runKernel("LRN",{x:i},{depthRadius:t,bias:n,alpha:r,beta:s});return o?ya(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Ki=Bn({log_:function(e){const t=Pn(e,"x","log","float32");return En.runKernel("Log",{x:t})}}),Xi=Bn({log1p_:function(e){const t=Pn(e,"x","log1p");return En.runKernel("Log1p",{x:t})}}),Yi=Bn({neg_:function(e){const t=Pn(e,"x","neg");return En.runKernel("Neg",{x:t})}}),Zi=Bn({softplus_:function(e){const t=Pn(e,"x","softplus");return En.runKernel("Softplus",{x:t})}}),Qi=Bn({logSigmoid_:function(e){const t=Pn(e,"x","logSigmoid");return Bs(e=>({value:Yi(Zi(Yi(e))),gradFunc:t=>ka(t,Sa(Yi(e)))}))(t)}}),Ji=Bn({sub_:function(e,t){let n=Pn(e,"a","sub"),r=Pn(t,"b","sub");return[n,r]=wn(n,r),En.runKernel("Sub",{a:n,b:r})}}),eo=Bn({logSoftmax_:function(e,t=-1){const n=Pn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Bs((e,n)=>{const r=ki(e,t,!0),s=Ji(e,r),a=Ji(Mr(s,"float32"),Ki(Ti(Ri(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=Ri(r);return Ji(e,ka(Ti(e,t,!0),s))}}})(n)}}),to=Bn({logSumExp_:function(e,t=null,n=!1){const r=Pn(e,"x","logSumExp"),s=Ue(t,r.shape),a=ki(r,s,!0),i=Ji(r,a),o=Ri(i),u=Ti(o,s),l=Ki(u),c=js(ya(a,l.shape),l);if(n){const e=yi(c.shape,s);return ya(c,e)}return c}}),no=Bn({logicalAnd_:function(e,t){const n=Pn(e,"a","logicalAnd","bool"),r=Pn(t,"b","logicalAnd","bool");return os(n.shape,r.shape),En.runKernel("LogicalAnd",{a:n,b:r})}}),ro=Bn({logicalNot_:function(e){const t=Pn(e,"x","logicalNot","bool");return En.runKernel("LogicalNot",{x:t})}}),so=Bn({logicalOr_:function(e,t){const n=Pn(e,"a","logicalOr","bool"),r=Pn(t,"b","logicalOr","bool");return os(n.shape,r.shape),En.runKernel("LogicalOr",{a:n,b:r})}}),ao=Bn({logicalXor_:function(e,t){const n=Pn(e,"a","logicalXor","bool"),r=Pn(t,"b","logicalXor","bool");return os(n.shape,r.shape),no(so(e,t),ro(no(e,t)))}}),io=Bn({searchSorted_:function(e,t,n="left"){const r=Pn(e,"sortedSequence","searchSorted"),s=Pn(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=ya(r,[-1,r.shape[r.shape.length-1]]),o=ya(s,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==o.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Fe(o.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error("trailing dim_size must less than 2147483648 for int32 output type, was "+i.shape[1]);return En.runKernel("SearchSorted",{sortedSequence:i,values:o},{side:n})}});function oo(e,t){return io(e,t,"left")}const uo=Bn({maxPool_:function(e,t,n,r,s){const a=Pn(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=ya(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ae(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),Ae(fa(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),ga("maxPool",r,s);const u=En.runKernel("MaxPool",{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return o?ya(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),lo=Bn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=Pn(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=ya(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Ae(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),Ae("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),ga("maxPool3d",r,s);const l=En.runKernel("MaxPool3D",{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return u?ya(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),co=Bn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a=Pn(e,"x","maxPoolWithArgmax"),i=En.runKernel("MaxPoolWithArgmax",{x:a},{filterSize:t,strides:n,pad:r,includeBatchInIndex:s});return{result:i[0],indexes:i[1]}}}),ho=Bn({maximum_:function(e,t){let n=Pn(e,"a","maximum"),r=Pn(t,"b","maximum");return[n,r]=wn(n,r),"bool"===n.dtype&&(n=Mr(n,"int32"),r=Mr(r,"int32")),os(n.shape,r.shape),En.runKernel("Maximum",{a:n,b:r})}}),po=Bn({mean_:function(e,t=null,n=!1){const r=Pn(e,"x","mean");return En.runKernel("Mean",{x:r},{axis:t,keepDims:n})}});function fo(e,t="float32"){if("complex64"===t){const t=fo(e,"float32"),n=fo(e,"float32");return Wn(t,n)}const n=ut(Fe(e),t);return En.makeTensor(n,e,t)}function mo(e,t="float32"){if("complex64"===t){const t=mo(e,"float32"),n=fo(e,"float32");return Wn(t,n)}const n=ot(Fe(e),t);return En.makeTensor(n,e,t)}function go(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(n+" is not a valid third argument to meshgrid");if(void 0===e)return[];let r=Pn(e,"x","meshgrid",e instanceof ln?e.dtype:"float32");if(void 0===t)return[r];let s=Pn(t,"y","meshgrid",t instanceof ln?t.dtype:"float32");const a=Fe(r.shape),i=Fe(s.shape);return"xy"===n?(r=ya(r,[1,-1]),s=ya(s,[-1,1]),[va(mo([i,1],r.dtype),r),va(s,mo([1,a],s.dtype))]):(r=ya(r,[-1,1]),s=ya(s,[1,-1]),[va(r,mo([1,i],r.dtype)),va(mo([a,1],s.dtype),s)])}const yo=Bn({minimum_:function(e,t){let n=Pn(e,"a","minimum"),r=Pn(t,"b","minimum");return[n,r]=wn(n,r),"bool"===n.dtype&&(n=Mr(n,"int32"),r=Mr(r,"int32")),os(n.shape,r.shape),En.runKernel("Minimum",{a:n,b:r})}}),bo=Bn({mirrorPad_:function(e,t,n){Ae("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const r=Pn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Ae(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const s="reflect"===n?1:0;for(let a=0;a<r.rank;a++)Ae(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ae(t[a][0]>=0&&t[a][0]<=r.shape[a]-s&&t[a][1]>=0&&t[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal to ${r.shape[a]-s} or less than 0 for input of shape `+r.shape);return En.runKernel("MirrorPad",{x:r},{paddings:t,mode:n})}}),xo=Bn({mod_:function(e,t){let n=Pn(e,"a","mod"),r=Pn(t,"b","mod");return[n,r]=wn(n,r),En.runKernel("Mod",{a:n,b:r})}}),wo=Bn({moments_:function(e,t=null,n=!1){const r=Ue(t,(e=Pn(e,"x","moments")).shape),s=po(e,r,n);let a=s.shape;n||(a=yi(s.shape,r));const i=Ci(Ji(Mr(e,"float32"),ya(s,a)));return{mean:s,variance:po(i,r,n)}}}),vo=Bn({multiRNNCell_:function(e,t,n,r){const s=Pn(t,"data","multiRNNCell"),a=zn(n,"c","multiRNNCell"),i=zn(r,"h","multiRNNCell");let o=s;const u=[];for(let h=0;h<e.length;h++){const t=e[h](o,a[h],i[h]);u.push(t[0]),u.push(t[1]),o=t[1]}const l=[],c=[];for(let h=0;h<u.length;h+=2)l.push(u[h]),c.push(u[h+1]);return[l,c]}}),ko=Bn({multinomial_:function(e,t,n,r=!1){const s=Pn(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?ya(s,[1,-1]):s,u=En.runKernel("Multinomial",{logits:o},{numSamples:t,seed:n,normalized:r});return 1===i?ya(u,[u.size]):u}}),So=Bn({notEqual_:function(e,t){let n=Pn(e,"a","notEqual","string_or_numeric"),r=Pn(t,"b","notEqual","string_or_numeric");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("NotEqual",{a:n,b:r})}}),Io=Bn({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const a=Pn(e,"indices","oneHot","int32");return En.runKernel("OneHot",{indices:a},{dtype:s,depth:t,onValue:n,offValue:r})}}),No=Bn({onesLike_:function(e){const t=Pn(e,"x","onesLike");return En.runKernel("OnesLike",{x:t})}}),Co=Bn({outerProduct_:function(e,t){const n=Pn(e,"v1","outerProduct"),r=Pn(t,"v2","outerProduct");Ae(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=ya(n,[-1,1]),a=ya(r,[1,-1]);return va(s,a)}}),To=Bn({pad_:function(e,t,n=0){const r=Pn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return En.runKernel("PadV2",{x:r},{paddings:t,constantValue:n})}}),Eo=Bn({pad1d_:function(e,t,n=0){return Ae(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),To(e,[t],n)}}),Ao=Bn({pad2d_:function(e,t,n=0){return Ae(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),To(e,t,n)}}),Ro=Bn({pad3d_:function(e,t,n=0){return Ae(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),To(e,t,n)}}),$o=Bn({pad4d_:function(e,t,n=0){return Ae(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),To(e,t,n)}}),_o=Bn({spaceToBatchND_:function(e,t,n){const r=Pn(e,"x","spaceToBatchND");return Ae(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),Ae(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),Ae(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),En.runKernel("SpaceToBatchND",{x:r},{blockShape:t,paddings:n})}}),Fo=Bn({pool_:function(e,t,n,r,s,a,i){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const o=Pn(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=ya(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Ae(fa(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const c=sa(u.shape,t,a,s,r),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),i=t.map((e,t)=>(e-a[t]%e)%e),o=s.map((e,t)=>e+i[t]);return[t.map((e,t)=>[r[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([c.inHeight,c.inWidth],h,p),g=d?r:"valid",y=d?u:_o(u,h,f),b=("avg"===n?()=>ba(y,t,a,g,i):()=>uo(y,t,a,g,i))(),x=d?b:Ta(b,h,m);return l?ya(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),Do=Bn({prelu_:function(e,t){const n=Pn(e,"x","prelu"),r=Pn(t,"alpha","prelu");return En.runKernel("Prelu",{x:n,alpha:r})}}),Oo=Bn({prod_:function(e,t=null,n=!1){let r=Pn(e,"x","prod");return"bool"===r.dtype&&(r=Mr(r,"int32")),En.runKernel("Prod",{x:r},{axis:t,keepDims:n})}}),Mo=Bn({raggedGather_:function(e,t,n,r){const s=e.map((e,t)=>Pn(e,"tensors"+t,"raggedGather","int32")),a=Pn(t,"paramsDenseValues","raggedGather"),i=Pn(n,"indices","raggedGather","int32"),o=En.runKernel("RaggedGather",{paramsNestedSplits:s,paramsDenseValues:a,indices:i},{outputRaggedRank:r});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),Po=Bn({raggedTensorToTensor_:function(e,t,n,r,s){const a=Pn(e,"shape","raggedTensorToTensor","int32"),i=Pn(t,"values","raggedTensorToTensor"),o=Pn(n,"defaultValue","raggedTensorToTensor",i.dtype),u=r.map((e,t)=>Pn(e,"tensors"+t,"raggedTensorToTensor","int32"));return En.runKernel("RaggedTensorToTensor",{shape:a,values:i,defaultValue:o,rowPartitionTensors:u},{rowPartitionTypes:s})}}),zo=Bn({rand_:function(e,t,n){const r=Fe(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=t();return En.makeTensor(s,e,n)}});var Lo=n("YSVl");class Bo{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Lo.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Wo{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Lo.alea(s.toString()),this.randn=new Bo(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Vo{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Lo.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Uo=Bn({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Wo(t,n,r,s),i=Or(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Go=Bn({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Bo(t,n,r,!1,s),i=Or(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Ho=Bn({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error("Unsupported data type "+t);return Go(e,0,1,t,n)}}),jo=Bn({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Or(e,r),i=new Vo(t,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});function qo(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");return En.runKernel("Range",{},{start:e,stop:t,step:n,dtype:r})}const Ko=Bn({real_:function(e){const t=Pn(e,"input","real");return En.runKernel("Real",{input:t})}}),Xo=Bn({reciprocal_:function(e){const t=Pn(e,"x","reciprocal");return En.runKernel("Reciprocal",{x:t})}}),Yo=Bn({relu_:function(e){const t=Pn(e,"x","relu");return En.runKernel("Relu",{x:t})}}),Zo=Bn({relu6_:function(e){const t=Pn(e,"x","relu6");return En.runKernel("Relu6",{x:t})}}),Qo=Bn({reverse_:function(e,t){const n=Pn(e,"x","reverse");return En.runKernel("Reverse",{x:n},{dims:t})}}),Jo=Bn({reverse1d_:function(e){const t=Pn(e,"x","reverse");return Ae(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Qo(t,0)}}),eu=Bn({reverse2d_:function(e,t){const n=Pn(e,"x","reverse");return Ae(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Qo(n,t)}}),tu=Bn({reverse3d_:function(e,t){const n=Pn(e,"x","reverse");return Ae(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Qo(n,t)}}),nu=Bn({reverse4d_:function(e,t){const n=Pn(e,"x","reverse");return Ae(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Qo(n,t)}}),ru=Bn({round_:function(e){const t=Pn(e,"x","round");return En.runKernel("Round",{x:t})}}),su=Bn({rsqrt_:function(e){const t=Pn(e,"x","rsqrt","float32");return En.runKernel("Rsqrt",{x:t})}}),au=Bn({selu_:function(e){const t=Pn(e,"x","selu");return En.runKernel("Selu",{x:t})}}),iu=Bn({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=Pn(e,"x","separableConv2d"),u=Pn(t,"depthwiseFilter","separableConv2d"),l=Pn(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ya(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Ae(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),Ae(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),Ae(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),Ae(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),Ae(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const p=u.shape[2],d=u.shape[3];Ae(l.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`);const f=ti(c,u,r,s,i,a),m=Va(f,l,1,"valid",i);return h?ya(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),ou=async function(e,t){const n=Pn(e,"x","setdiff1d"),r=Pn(t,"y","setdiff1d");Ae(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),Ae(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),Ae(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let c=0;c<s.length;c++)i.has(s[c])||o++;const u=new sn([o],n.dtype),l=new sn([o],"int32");for(let c=0,h=0;c<s.length;c++)i.has(s[c])||(u.values[h]=s[c],l.values[h]=c,h++);return[u.toTensor(),l.toTensor()]},uu=Bn({sign_:function(e){const t=Pn(e,"x","sign");return En.runKernel("Sign",{x:t})}}),lu=Bn({sin_:function(e){const t=Pn(e,"x","sin","float32");return En.runKernel("Sin",{x:t})}}),cu=Bn({sinh_:function(e){const t=Pn(e,"x","sinh");return En.runKernel("Sinh",{x:t})}}),hu=Bn({slice1d_:function(e,t,n){const r=Pn(e,"x","slice1d");return Ae(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Ia(r,[t],[n])}}),pu=Bn({slice2d_:function(e,t,n){const r=Pn(e,"x","slice2d");return Ae(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Ia(r,t,n)}}),du=Bn({slice3d_:function(e,t,n){const r=Pn(e,"x","slice3d");return Ae(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Ia(r,t,n)}}),fu=Bn({slice4d_:function(e,t,n){const r=Pn(e,"x","slice4d");return Ae(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Ia(r,t,n)}}),mu=Bn({softmax_:function(e,t=-1){const n=Pn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);return En.runKernel("Softmax",{logits:n},{dim:t})}}),gu=Bn({fft_:function(e){return Ae("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),En.runKernel("FFT",{input:e})}}),yu=Bn({ifft_:function(e){return Ae("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),En.runKernel("IFFT",{input:e})}}),bu=Bn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=ya(e,[n,t]);r=yu(s)}else{const s=[n,2*(t-1)],a=ya(Ko(e),[n,t]),i=ya(Li(e),[n,t]),o=Qo(Ia(a,[0,1],[n,t-2]),1),u=ka(Qo(Ia(i,[0,1],[n,t-2]),1),Ws(-1)),l=wa([a,o],1),c=wa([i,u],1),h=ya(Wn(l,c),[s[0],s[1]]);r=yu(h)}if(r=Ko(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=ya(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),xu=Bn({split_:function(e,t,n=0){const r=Pn(e,"x","split");return En.runKernel("SplitV",{x:r},{numOrSizeSplits:t,axis:n})}}),wu=Bn({rfft_:function(e,t){Ae("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=Ia(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=wa([e,fo(r)],e.shape.length-1),n=t}else s=e;const a=ui(s),i=ya(Wn(s,a),[r,n]),o=gu(i),u=Math.floor(n/2)+1,l=Ko(o),c=Li(o),h=xu(l,[u,n-u],l.shape.length-1),p=xu(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,ya(Wn(h[0],p[0]),d)}}),vu=Bn({squaredDifference_:function(e,t){let n=Pn(e,"a","squaredDifference"),r=Pn(t,"b","squaredDifference");return[n,r]=wn(n,r),os(n.shape,r.shape),En.runKernel("SquaredDifference",{a:n,b:r},{})}}),ku=Bn({squeeze_:function(e,t){const n=Pn(e,"x","squeeze","string_or_numeric");return ya(n,Ge(n.shape,t).newShape)}}),Su=Bn({stack_:function(e,t=0){const n=zn(e,"tensors","stack","string_or_numeric");return Ae(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&Ae(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),En.runKernel("Pack",n,{axis:t})}}),Iu=Bn({step_:function(e,t=0){const n=Pn(e,"x","step");return En.runKernel("Step",{x:n},{alpha:t})}}),Nu=Bn({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l=Pn(e,"x","stridedSlice","string_or_numeric");return En.runKernel("StridedSlice",{x:l},{begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u})}}),Cu=Bn({tan_:function(e){const t=Pn(e,"x","tan","float32");return En.runKernel("Tan",{x:t})}});function Tu(e,t){$e(e);const n=On(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Vn(e,null,n,t)}function Eu(e,t,n){if($e(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=On(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Vn(e,t,r,n)}function Au(e,t,n){if($e(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=On(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Vn(e,t,r,n)}function Ru(e,t,n){if($e(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=On(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Vn(e,t,r,n)}function $u(e,t,n){if($e(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=On(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Vn(e,t=t||r,r,n)}const _u=Bn({topk_:function(e,t=1,n=!0){const r=Pn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error("'k' passed to topk() must be >= 0 but got "+t);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+t);const a={x:r},i={k:t,sorted:n},[o,u]=En.runKernel("TopK",a,i);return{values:o,indices:u}}}),Fu=Bn({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Bo(t,n,r,!0,s),i=Or(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Du=Bn({unique_:function(e,t=0){const n=Pn(e,"x","unique","string_or_numeric");Ae(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},s={axis:t},[a,i]=En.runKernel("Unique",r,s);return{values:a,indices:i}}}),Ou=Bn({unsortedSegmentSum_:function(e,t,n){const r=Pn(e,"x","unsortedSegmentSum"),s=Pn(t,"segmentIds","unsortedSegmentSum","int32");return Ae(Me(n),()=>"numSegments must be of dtype int"),En.runKernel("UnsortedSegmentSum",{x:r,segmentIds:s},{numSegments:n})}}),Mu=Bn({unstack_:function(e,t=0){const n=Pn(e,"x","unstack","string_or_numeric");return Ae(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),En.runKernel("Unpack",{value:n},{axis:t})}});function Pu(e,t){return io(e,t,"right")}function zu(e,t=!0,n,r){return En.makeVariable(e,t,n,r)}function Lu(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const r=Or(e,"int32"),s=Or([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=r.indexToLoc(n[a]);s.values.set(t,a*e.length)}return s.toTensor()}const Bu=async function(e){const t=Pn(e,"condition","whereAsync","bool"),n=await t.data(),r=Lu(t.shape,n);return e!==t&&t.dispose(),r},Wu=async function(e,t,n){const r=Pn(e,"tensor","boolMask"),s=Pn(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;Ae(i>0,()=>"mask cannot be scalar"),Re(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let m=a;m<a+i;m++)u*=o[m];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=ya(r,l),h=ya(s,[-1]),p=await Bu(h),d=ku(p,[1]),f=Mi(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},Vu=Bn({transpose_:function(e,t,n){const r=Pn(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),Ae(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{Ae(e>=0&&e<r.rank,()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+" but got "+t)}),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Ms(()=>{let e=Ko(r),t=Li(r);return e=En.runKernel("Transpose",{x:e},a),t=En.runKernel("Transpose",{x:t},a),n&&(t=Yi(t)),Wn(e,t)}):En.runKernel("Transpose",s,a)}}),Uu=Bn({movingAverage_:function(e,t,n,r,s=!0){const a=Pn(e,"v","movingAverage"),i=Pn(t,"x","movingAverage"),o=Pn(n,"decay","movingAverage");vn(a,i),Ae(Oe(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=Ws(1),l=Ji(u,o);let c=ka(Ji(i,a),l);if(s){Ae(null!=r,()=>"When using zeroDebias: true, step is required.");const e=Pn(r,"step","movingAverage");c=ai(c,Ji(u,Ii(o,e)))}return js(a,c)}});function Gu(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let i=0;i<s;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==e[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${e[i+s]})`)}function Hu(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}Gu(n,t,e)}function ju(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let u=s;u<a;++u)i*=n[u];const o=s<1?1:s;return{sliceRank:s,numUpdates:Fe(t.shape)/o,sliceSize:i,strides:[...at(n.slice(0,s)),1],outputSize:Fe(n)}}const qu=Bn({scatterND_:function(e,t,n){const r=Pn(e,"indices","scatterND","int32"),s=Pn(t,"updates","scatterND");return Hu(s,r,n),En.runKernel("ScatterNd",{indices:r,updates:s},{shape:n})}}),Ku=Bn({sparseToDense_:function(e,t,n,r=0){const s=Pn(e,"sparseIndices","sparseToDense","int32"),a=Pn(t,"sparseValues","sparseToDense","string_or_numeric"),i=Pn(r,"defaultValue","sparseToDense",a.dtype);return function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);if(0!==t.rank&&(1!==t.rank||t.size!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),En.runKernel("SparseToDense",{sparseIndices:s,sparseValues:a,defaultValue:i},{outputShape:n})}}),Xu=Bn({gatherND_:function(e,t){const n=Pn(t,"indices","gatherND","int32"),r=Pn(e,"x","gatherND","string_or_numeric");return En.runKernel("GatherNd",{params:r,indices:n})}}),Yu=Bn({dropout_:function(e,t,n,r){const s=Pn(e,"x","dropout");if(Ae("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),Ae(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof ln?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(Oe(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)n.push(null==t[r]&&null!=e.shape[r]?e.shape[r]:t[r]);return n}return t}(s,n),i=1-t,o=ai(Oi(js(jo(a,0,1,"float32",r),i)),i);return ka(s,o)}});function Zu(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Qu(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Tu(s,"float32")}const Ju=async function(e,t,n=1){const r=Pn(e,"predictions","inTopK"),s=Pn(t,"targets","inTopK");Ae(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),Ae(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),Re(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];Ae(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=He("bool",u);for(let h=0;h<u;h++){const e=h*l,t=i.subarray(e,e+l),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort((e,t)=>t.value-e.value),c[h]=0;for(let s=0;s<n;s++)if(r[s].index===o[h]){c[h]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Un(c,s.shape,"bool")},el=Bn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=ya(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ya(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Ae(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),Ae(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),Ae(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];return Ae(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),Ae(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),ga("conv2dDerFilter",s,i),En.runKernel("Conv2DBackpropFilter",{x:o,dy:u},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n})}});function tl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ka(e,Iu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function nl(e,t){let n=t;const r=is(e.shape,t.shape);return r.length>0&&(n=Ti(n,r)),ya(n,e.shape)}function rl(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Yo(e);if("elu"===t)return pi(e);if("relu6"===t)return Zo(e);if("prelu"===t)return Do(e,n);if("leakyrelu"===t)return Ui(e,r);if("sigmoid"===t)return Sa(e);throw new Error(`Unknown fused activation ${t}.`)}const sl=(e,t)=>!(e>0)||"linear"===t,al=Bn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===sl(En.state.gradientDepth,u=u||"linear")){Ae("NHWC"===s,()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let h=Va(e,t,n,r,s,a,i);return null!=o&&(h=js(h,o)),rl(h,u,l,c)}const h=Pn(e,"x","conv2d","float32"),p=Pn(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=ya(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Ae(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),Ae(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+p.rank+"."),ga("fused conv2d",r,i);const m="NHWC"===s?d.shape[3]:d.shape[1];Ae(p.shape[2]===m,()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`),Ae(fa(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const g=ia(d.shape,p.shape,n,a,r,i);let y,b;if(null!=o&&(y=Pn(o,"bias","fused conv2d"),[y]=wn(y,h),"NHWC"===s?os(g.outShape,y.shape):(Ae(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),Ae(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`))),null!=l){const e=l.shape;if(Ae(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)Ae(1===e[0]||e[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`);else if(3===e.length)try{os(e,g.outShape)}catch(k){throw Error(`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`)}b=Pn(l,"prelu weights","fused conv2d")}const x=(e,t)=>{Ae("NHWC"===s,()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[i,o,l,c]=t,h=tl(e,l,u);Ae(da(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const p=[Ga(o.shape,h,i,n,r),el(o,h,i.shape,n,r)];if(null!=c){const e=nl(c,h);p.push(e)}return p},w={x:d,filter:p,bias:y,preluActivationWeights:b},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?Bs((e,t,n)=>{let r=En.runKernel("FusedConv2D",w,v);return n([t,e,r]),f&&(r=ya(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}})(d,p):Bs((e,t,n,r)=>{let s=En.runKernel("FusedConv2D",w,v);return r([t,e,s,n]),f&&(s=ya(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}})(d,p,y)}}),il=Bn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=ya(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;return 3===u.rank&&(u=ya(t,[1,t.shape[0],t.shape[1],t.shape[2]])),En.runKernel("DepthwiseConv2dNativeBackpropFilter",{x:o,dy:u},{strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n})}}),ol=Bn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=ya(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l=En.runKernel("DepthwiseConv2dNativeBackpropInput",{dy:o,filter:n},{strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e});return u?ya(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),ul=Bn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===sl(En.state.gradientDepth,u)){let h=ti(e,t,n,r,s,a,i);return null!=o&&(h=js(h,o)),rl(h,u,l,c)}const h=Pn(e,"x","depthwiseConv2d","float32"),p=Pn(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=ya(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Ae(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),Ae(4===p.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`),Ae(d.shape[3]===p.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`),null==a&&(a=[1,1]),Ae(fa(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),ga("fused depthwiseConv2d",r,i);const m=ia(d.shape,p.shape,n,a,r,i,!0);let g,y;null!=o&&(g=Pn(o,"bias","fused conv2d"),[g]=wn(g,h),os(m.outShape,g.shape)),null!=l&&(y=Pn(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{Ae(da(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[s,o,l,c]=t,h=tl(e,l,u),p=ol(o.shape,h,s,n,r,a,i),d=il(o,h,s.shape,n,r,a,i);return null!=c?[p,d,nl(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?Bs((e,t,n)=>{let r=En.runKernel("FusedDepthwiseConv2D",x,w);return n([t,e,r]),f&&(r=ya(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p):Bs((e,t,n,r)=>{let s=En.runKernel("FusedDepthwiseConv2D",x,w);return r([t,e,s,n]),f&&(s=ya(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p,g)}}),ll=Bn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===sl(En.state.gradientDepth,a)){let u=va(e,t,n,r);return null!=s&&(u=js(u,s)),rl(u,a,i,o)}let u=Pn(e,"a","fused matMul"),l=Pn(t,"b","fused matMul");[u,l]=wn(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],p=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=Fe(f),y=Fe(m);Ae(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const b=os(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([p,d]),x=ya(u,n?[g,c,p]:[g,p,c]),w=ya(l,r?[y,d,h]:[y,h,d]);let v,k;null!=s&&(v=Pn(s,"bias","fused matMul"),[v]=wn(v,u),os(b,v.shape)),null!=i&&(k=Pn(i,"prelu weights","fused matMul"));const S=(e,t)=>{const[i,o,u,l]=t,c=tl(ya(e,u.shape),u,a);let h,p;return n||r?!n&&r?(h=va(c,o,!1,!1),p=va(c,i,!0,!1)):n&&!r?(h=va(o,c,!1,!0),p=va(i,c,!1,!1)):(h=va(o,c,!0,!0),p=va(c,i,!0,!0)):(h=va(c,o,!1,!0),p=va(i,c,!0,!1)),null!=s?[h,p,nl(l,c)]:[h,p]},I={a:x,b:w,bias:v,preluActivationWeights:k},N={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};return null==s?Bs((e,t,n)=>{const r=En.runKernel("_FusedMatMul",I,N);return n([e,t,r]),{value:ya(r,b),gradFunc:S}})(x,w):Bs((e,t,n,r)=>{const s=En.runKernel("_FusedMatMul",I,N);return r([e,t,s,n]),{value:ya(s,b),gradFunc:S}})(x,w,v)}}),cl=Bn({hammingWindow_:function(e){return Qu(e,.54,.46)}}),hl=Bn({hannWindow_:function(e){return Qu(e,.5,.5)}}),pl=Bn({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Ia(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=wa([Ia(e,a,t-r),Ma([r],s)]);i.push(o),a+=n}return 0===i.length?Eu([],[0,t]):ya(wa(i),[i.length,t])}}),dl=Bn({stft_:function(e,t,n,r,s=hl){null==r&&(r=Zu(t));const a=pl(e,t,n),i=ka(a,s(t));return wu(i,r)}}),fl=Bn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=Pn(e,"image","cropAndResize"),o=Pn(t,"boxes","cropAndResize","float32"),u=Pn(n,"boxInd","cropAndResize","int32"),l=o.shape[0];return Ae(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),Ae(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`),Ae(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`),Ae(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),Ae(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),Ae("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),En.runKernel("CropAndResize",{image:i,boxes:o,boxInd:u},{method:s,extrapolationValue:a,cropSize:r})}}),ml=Bn({flipLeftRight_:function(e){const t=Pn(e,"image","flipLeftRight","float32");return Ae(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),En.runKernel("FlipLeftRight",{image:t},{})}}),gl=Bn({grayscaleToRGB_:function(e){const t=Pn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];Ae(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),Ae(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,Fi(t,s)}}),yl=Bn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Pn(e,"image","rotateWithOffset","float32");return Ae(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`),En.runKernel("RotateWithOffset",{image:s},{radians:t,fillValue:n,center:r})}});function bl(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),Ae(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),Ae(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),Ae(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),Ae(1===t.rank,()=>"scores must be a 1D tensor"),Ae(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+t.shape[0]),Ae(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const xl=Bn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Pn(e,"boxes","nonMaxSuppression","float32"),i=Pn(t,"scores","nonMaxSuppression","float32"),o=bl(a,i,n,r,s);return En.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold})}});function wl(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||vl)}(e,t,n);e.splice(r<0?-(r+1):r,0,t)}function vl(e,t){return e>t?1:e<t?-1:0}function kl(e,t,n,r,s){return Nl(e,t,n,r,s,0)}function Sl(e,t,n,r,s,a){return Nl(e,t,n,r,s,0,!1,a,!0)}function Il(e,t,n,r,s,a){return Nl(e,t,n,r,s,a,!0)}function Nl(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let g=0;g<t.length;g++)t[g]>s&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(El);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let u=h.length-1;u>=i;--u){const n=Cl(e,a,h[u]);if(n>=r){o=!0;break}if(t.score=t.score*Tl(r,c,n),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&wl(l,t,El))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),u&&(m.validOutputs=d),m}function Cl(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Tl(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function El(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Al=Bn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Pn(e,"boxes","nonMaxSuppression"),o=Pn(t,"scores","nonMaxSuppression"),u=bl(i,o,n,r,s,a),l=En.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},{maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma});return{selectedIndices:l[0],selectedScores:l[1]}}}),Rl=Bn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Pn(e,"boxes","nonMaxSuppression"),o=Pn(t,"scores","nonMaxSuppression"),u=bl(i,o,n,r,s,null),l=En.runKernel("NonMaxSuppressionV4",{boxes:i,scores:o},{maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:l[0],validOutputs:l[1]}}}),$l=Bn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=Pn(e,"images","resizeBilinear");Ae(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),Ae(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."),Ae(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=ya(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=En.runKernel("ResizeBilinear",{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?ya(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),_l=Bn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=Pn(e,"images","resizeNearestNeighbor");Ae(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),Ae(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),Ae("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),Ae(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=ya(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=En.runKernel("ResizeNearestNeighbor",{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?ya(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),Fl=Bn({threshold_:function(e,t="binary",n=!1,r=.5){const s=Pn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,o,u,l,c=ka(Tu([r]),255);if(Ae(3===s.rank,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),Ae(3===s.shape[2]||1===s.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),Ae("int32"===s.dtype||"float32"===s.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),Ae("otsu"===t||"binary"===t,()=>"Method must be binary or otsu, but was "+t),3===s.shape[2]){[i,o,u]=xu(s,[1,1,1],-1);const e=ka(i,.2989),t=ka(o,.587),n=ka(u,.114);l=js(js(e,t),n)}else l=e;"otsu"===t&&(c=function(e,t){let n,r,s,a,i,o,u=Tu([-1]),l=Tu([0]),c=Tu([0]);for(let h=0;h<e.size-1;h++){n=Ia(e,0,h+1),r=Ia(e,h+1),i=ai(Ti(n),t),o=ai(Ti(r),t);const p=Ti(ka(n,qo(0,n.size)));s=ai(p,Ti(n));const d=Ma(r.shape,n.size),f=js(qo(0,r.size),d),m=ka(r,f);a=ai(Ti(m),Ti(r));const g=Ji(s,a),y=Ji(s,a),b=ka(i,o);c=ka(ka(b,g),y);const x=Pi(c,l);l=oi(x,c,l),u=oi(x,Tu([h]),u)}return u}(_a(Mr(ru(l),"int32"),Un([]),256),a));const h=n?Hi(l,c):Pi(l,c);return Mr(ka(h,255),"int32")}}),Dl=Bn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const i=Pn(e,"image","transform","float32"),o=Pn(t,"transforms","transform","float32");return Ae(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),Ae(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),Ae(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`),En.runKernel("Transform",{image:i,transforms:o},{interpolation:n,fillMode:r,fillValue:s,outputShape:a})}}),Ol=Bn({bandPart_:function(e,t,n){Ae(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),Ae(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Pn(e,"a","bandPart");Ae(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=ya(qo(0,a,1,"int32"),[-1,1]),u=qo(0,i,1,"int32"),l=Ji(o,u),c=no(Hi(l,Ws(+t,"int32")),zi(l,Ws(-n,"int32"))),h=fo([a,i],r.dtype);return ya(Su(Mu(ya(r,[-1,a,i])).map(e=>oi(c,e,h))),s)}}),Ml=Bn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Ae(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)Ae(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=xu(e,e.shape[0],0).map(e=>ku(e,[0]));Ae(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let s=0;s<e.length;++s)n.push(En.tidy(()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=ka(Ti(ka(n[t],e)),n[t]);e=Ji(e,r)}return ai(e,Ei(e,"euclidean"))}));return t?Su(n,0):n}});function Pl(e,t=!1){return En.tidy(()=>{Ae(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=Di(n),a=Pr(e);const i=Eu([[1]],[1,1]);let o=Pr(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=o,l=s;[o,a,s]=En.tidy(()=>{const t=Ia(a,[e,e],[n-e,1]),u=Ei(t),l=Ia(a,[e,e],[1,1]),c=oi(Pi(l,0),Eu([[-1]]),Eu([[1]])),h=Ji(l,ka(c,u)),p=ai(t,h);o=1===p.shape[0]?Pr(i):wa([i,Ia(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Yi(ai(va(c,h),u)),f=Ia(a,[e,0],[n-e,r]),m=ka(d,o),g=Vu(o);if(0===e)a=Ji(f,va(m,va(g,f)));else{const t=Ji(f,va(m,va(g,f)));a=wa([Ia(a,[0,0],[e,r]),t],0)}const y=Vu(m),b=Ia(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Ji(b,va(va(b,o),y));else{const t=Ji(b,va(va(b,o),y));s=wa([Ia(s,[0,0],[n,e]),t],1)}return[o,a,s]}),Ps([t,u,l])}return!t&&n>r&&(s=Ia(s,[0,0],[n,r]),a=Ia(a,[0,0],[r,r])),[s,a]})}const zl=Bn({qr_:function(e,t=!1){if(Ae(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return Pl(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=Mu(ya(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach(e=>{const[n,r]=Pl(e,t);s.push(n),a.push(r)}),[ya(Su(s,0),e.shape),ya(Su(a,0),e.shape)]}}});var Ll;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ll||(Ll={}));const Bl=Bn({computeWeightedLoss_:function(e,t,n=Ll.SUM_BY_NONZERO_WEIGHTS){const r=Pn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Pn(t,"weights","computeWeightedLoss"));const a=null==s?r:ka(r,s);if(n===Ll.NONE)return a;if(n===Ll.SUM)return Ti(a);if(n===Ll.MEAN){if(null==s)return po(a);{const e=r.size/s.size,t=ai(Ti(a),Ti(s));return e>1?ai(t,Ws(e)):t}}if(n===Ll.SUM_BY_NONZERO_WEIGHTS){if(null==s)return ai(Ti(a),Ws(r.size));{const e=ka(s,mo(r.shape)),t=Mr(Ti(So(e,Ws(0))),"float32");return ai(Ti(a),t)}}throw Error("Unknown reduction: "+n)}}),Wl=Bn({absoluteDifference_:function(e,t,n,r=Ll.SUM_BY_NONZERO_WEIGHTS){const s=Pn(e,"labels","absoluteDifference"),a=Pn(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Pn(n,"weights","absoluteDifference")),Re(s.shape,a.shape,"Error in absoluteDifference: ");const o=Us(Ji(s,a));return Bl(o,i,r)}}),Vl=Bn({cosineDistance_:function(e,t,n,r,s=Ll.SUM_BY_NONZERO_WEIGHTS){const a=Pn(e,"labels","cosineDistance"),i=Pn(t,"predictions","cosineDistance");let o=null;null!=r&&(o=Pn(r,"weights","cosineDistance")),Re(a.shape,i.shape,"Error in cosineDistance: ");const u=Ws(1),l=Ji(u,Ti(ka(a,i),n,!0));return Bl(l,o,s)}}),Ul=Bn({hingeLoss_:function(e,t,n,r=Ll.SUM_BY_NONZERO_WEIGHTS){let s=Pn(e,"labels","hingeLoss");const a=Pn(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Pn(n,"weights","hingeLoss")),Re(s.shape,a.shape,"Error in hingeLoss: ");const o=Ws(1);s=Ji(ka(Ws(2),s),o);const u=Yo(Ji(o,ka(s,a)));return Bl(u,i,r)}}),Gl=Bn({huberLoss_:function(e,t,n,r=1,s=Ll.SUM_BY_NONZERO_WEIGHTS){const a=Pn(e,"labels","huberLoss"),i=Pn(t,"predictions","huberLoss");let o=null;null!=n&&(o=Pn(n,"weights","huberLoss")),Re(a.shape,i.shape,"Error in huberLoss: ");const u=Ws(r),l=Us(Ji(i,a)),c=yo(l,u),h=Ji(l,c),p=js(ka(Ws(.5),Ci(c)),ka(u,h));return Bl(p,o,s)}}),Hl=Bn({logLoss_:function(e,t,n,r=1e-7,s=Ll.SUM_BY_NONZERO_WEIGHTS){const a=Pn(e,"labels","logLoss"),i=Pn(t,"predictions","logLoss");let o=null;null!=n&&(o=Pn(n,"weights","logLoss")),Re(a.shape,i.shape,"Error in logLoss: ");const u=Ws(1),l=Ws(r),c=Yi(ka(a,Ki(js(i,l)))),h=ka(Ji(u,a),Ki(js(Ji(u,i),l))),p=Ji(c,h);return Bl(p,o,s)}}),jl=Bn({meanSquaredError_:function(e,t,n,r=Ll.SUM_BY_NONZERO_WEIGHTS){const s=Pn(e,"labels","meanSquaredError"),a=Pn(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Pn(n,"weights","meanSquaredError")),Re(s.shape,a.shape,"Error in meanSquaredError: ");const o=vu(s,a);return Bl(o,i,r)}}),ql=Bn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Ll.SUM_BY_NONZERO_WEIGHTS){let a=Pn(e,"multiClassLabels","sigmoidCrossEntropy");const i=Pn(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Pn(n,"weights","sigmoidCrossEntropy")),Re(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Ws(r),t=Ws(1),n=Ws(.5);a=js(ka(a,Ji(t,e)),ka(n,e))}const u=function(e,t){const n=Pn(e,"labels","sigmoidCrossEntropyWithLogits"),r=Pn(t,"logits","sigmoidCrossEntropyWithLogits");Re(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Yo(r),a=ka(r,n),i=Xi(Ri(Yi(Us(r))));return js(Ji(s,a),i)}(a,i);return Bl(u,o,s)}}),Kl=Bn({softmaxCrossEntropy_:function(e,t,n,r=0,s=Ll.SUM_BY_NONZERO_WEIGHTS){let a=Pn(e,"onehotLabels","softmaxCrossEntropy");const i=Pn(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Pn(n,"weights","softmaxCrossEntropy")),Re(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Ws(r),t=Ws(1),n=Ws(a.shape[1]);a=js(ka(a,Ji(t,e)),ai(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return Bs((e,t,r)=>{const s=to(t,[n],!0),a=Ji(Mr(t,"float32"),s);r([e,a]);const i=Yi(ka(a,e));return{value:Ti(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=yi(e.shape,[n]);return[ka(ya(e,a),Ji(Mr(r,"float32"),Ri(s))),ka(ya(e,a),Ji(Ri(s),Mr(r,"float32")))]}}})(e,t)}(a,i);return Bl(u,o,s)}}),Xl=Bn({sparseFillEmptyRows_:function(e,t,n,r){const s=Pn(e,"indices","sparseFillEmptyRows","int32"),a=Pn(t,"values","sparseFillEmptyRows"),i=Pn(n,"denseShape","sparseFillEmptyRows","int32"),o=Pn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error("Indices should be Tensor2D but received shape\n        "+s.shape);if(1!==a.rank)throw new Error("Values should be Tensor1D but received shape "+a.shape);if(1!==i.rank)throw new Error("Dense shape should be Tensor1D but received shape "+i.shape);if(0!==o.rank)throw new Error("Default value should be a scalar but received shape "+o.shape);const u=En.runKernel("SparseFillEmptyRows",{indices:s,values:a,denseShape:i,defaultValue:o});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),Yl=Bn({sparseReshape_:function(e,t,n){const r=Pn(e,"inputIndices","sparseReshape","int32"),s=Pn(t,"inputShape","sparseReshape","int32"),a=Pn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error("Input indices should be Tensor2D but received shape\n        "+r.shape);if(1!==s.rank)throw new Error("Input shape should be Tensor1D but received shape "+s.shape);if(1!==a.rank)throw new Error("New shape should be Tensor1D but received shape "+a.shape);const i=En.runKernel("SparseReshape",{inputIndices:r,inputShape:s,newShape:a});return{outputIndices:i[0],outputShape:i[1]}}}),Zl=Bn({sparseSegmentMean_:function(e,t,n){const r=Pn(e,"data","sparseSegmentMean"),s=Pn(t,"indices","sparseSegmentMean","int32"),a=Pn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n          "+s.shape);if(1!==a.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          "+a.shape);return En.runKernel("SparseSegmentMean",{data:r,indices:s,segmentIds:a})}}),Ql=Bn({sparseSegmentSum_:function(e,t,n){const r=Pn(e,"data","sparseSegmentSum"),s=Pn(t,"indices","sparseSegmentSum","int32"),a=Pn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n         "+s.shape);if(1!==a.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         "+a.shape);return En.runKernel("SparseSegmentSum",{data:r,indices:s,segmentIds:a})}}),Jl=Bn({stringNGrams_:function(e,t,n,r,s,a,i,o){const u=Pn(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error("Data must be a vector, saw: "+u.shape);const l=Pn(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c=En.runKernel("StringNGrams",{data:u,dataSplits:l},{separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:i,preserveShortSequences:o});return{nGrams:c[0],nGramsSplits:c[1]}}}),ec=Bn({stringSplit_:function(e,t,n=!0){const r=Pn(e,"input","stringSplit","string"),s=Pn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error("Input should be Tensor1D but received shape "+r.shape);if(0!==s.rank)throw new Error("Delimiter should be a scalar but received shape "+s.shape);const a=En.runKernel("StringSplit",{input:r,delimiter:s},{skipEmpty:n});return{indices:a[0],values:a[1],shape:a[2]}}}),tc=Bn({stringToHashBucketFast_:function(e,t){const n=Pn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return En.runKernel("StringToHashBucketFast",{input:n},r)}}),nc={fft:gu,ifft:yu,rfft:wu,irfft:bu},rc={hammingWindow:cl,hannWindow:hl,frame:pl,stft:dl},sc={flipLeftRight:ml,grayscaleToRGB:gl,resizeNearestNeighbor:_l,resizeBilinear:$l,rotateWithOffset:yl,cropAndResize:fl,nonMaxSuppression:xl,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Pn(e,"boxes","nonMaxSuppressionAsync"),i=Pn(t,"scores","nonMaxSuppressionAsync"),o=bl(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=kl(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Tu(h,"int32")},nonMaxSuppressionWithScore:Al,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Pn(e,"boxes","nonMaxSuppressionAsync"),o=Pn(t,"scores","nonMaxSuppressionAsync"),u=bl(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:p,selectedScores:d}=Il(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Tu(p,"int32"),selectedScores:Tu(d)}},nonMaxSuppressionPadded:Rl,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Pn(e,"boxes","nonMaxSuppressionAsync"),o=Pn(t,"scores","nonMaxSuppressionAsync"),u=bl(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Sl(p,d,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Tu(f,"int32"),validOutputs:Ws(m,"int32")}},threshold:Fl,transform:Dl},ac={bandPart:Ol,gramSchmidt:Ml,qr:zl},ic={absoluteDifference:Wl,computeWeightedLoss:Bl,cosineDistance:Vl,hingeLoss:Ul,huberLoss:Gl,logLoss:Hl,meanSquaredError:jl,sigmoidCrossEntropy:ql,softmaxCrossEntropy:Kl},oc={sparseFillEmptyRows:Xl,sparseReshape:Yl,sparseSegmentMean:Zl,sparseSegmentSum:Ql},uc={stringNGrams:Jl,stringSplit:ec,stringToHashBucketFast:tc};class lc extends Vs{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=En.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=En.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:Ms(()=>ui(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:Ms(()=>ui(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Ms(()=>{const e=js(ka(a,this.rho),ka(Ci(s),1-this.rho)),t=ka(ai(Ni(js(i,this.epsilon)),Ni(js(a,this.epsilon))),s),n=js(ka(i,this.rho),ka(Ci(t),1-this.rho));a.assign(e),i.assign(n);const o=js(ka(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ps(this.accumulatedGrads.map(e=>e.variable)),Ps(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}lc.className="Adadelta",Fs(lc);class cc extends Vs{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=En.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:Ms(()=>Ma(r.shape,this.initialAccumulatorValue).variable(e))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Ms(()=>{const e=js(a,Ci(s));a.assign(e);const t=js(ka(ai(s,Ni(js(e,En.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ps(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}cc.className="Adagrad",Fs(cc);class hc extends Vs{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ms(()=>{this.accBeta1=Ws(t).variable(),this.accBeta2=Ws(n).variable()}),null==r&&(this.epsilon=En.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Ms(()=>{const n=Ji(1,this.accBeta1),r=Ji(1,this.accBeta2);t.forEach((t,s)=>{const a=En.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:Ms(()=>ui(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:t+"/v",variable:Ms(()=>ui(a).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=js(ka(o,this.beta1),ka(i,1-this.beta1)),c=js(ka(u,this.beta2),ka(Ci(i),1-this.beta2)),h=ai(l,n),p=ai(c,r);o.assign(l),u.assign(c);const d=js(ka(ai(h,js(Ni(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(ka(this.accBeta1,this.beta1)),this.accBeta2.assign(ka(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ps(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&Ps(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),Ms(()=>{this.accBeta1.assign(Ii(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ii(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}hc.className="Adam",Fs(hc);class pc extends Vs{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ms(()=>{this.iteration=Ws(0).variable(),this.accBeta1=Ws(t).variable()}),null==r&&(this.epsilon=En.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Ms(()=>{const n=Ji(1,this.accBeta1),r=ai(-this.learningRate,js(ka(this.iteration,this.decay),1));t.forEach((t,s)=>{const a=En.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:ui(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:t+"/v",variable:ui(a).variable(!1)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=js(ka(o,this.beta1),ka(i,1-this.beta1)),c=ka(u,this.beta2),h=Us(i),p=ho(c,h);o.assign(l),u.assign(p);const d=js(ka(ai(r,n),ai(l,js(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(js(this.iteration,1)),this.accBeta1.assign(ka(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ps(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&Ps(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}pc.className="Adamax",Fs(pc);class dc extends Vs{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=En.registeredVariables[t];Ms(()=>{const e=js(ka(this.c,r),s);s.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=zs(Ws(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}dc.className="SGD",Fs(dc);class fc extends dc{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Ws(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=En.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:Ms(()=>ui(r).variable(e))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Ms(()=>{let e;const t=js(ka(this.m,s),a);e=js(ka(this.c,this.useNesterov?js(a,ka(t,this.m)):t),r),s.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ps(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}fc.className="Momentum",Fs(fc);class mc extends Vs{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=En.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=En.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:Ms(()=>ui(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:Ms(()=>ui(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:Ms(()=>ui(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Ms(()=>{const e=js(ka(a,this.decay),ka(Ci(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,o=js(ka(t,this.decay),ka(s,1-this.decay)),u=ai(ka(s,this.learningRate),Ni(Ji(e,js(Ci(o),this.epsilon)))),l=js(ka(i,this.momentum),u);a.assign(e),t.assign(o),i.assign(l);const c=Ji(r,l);r.assign(c)}else{const e=js(ka(a,this.decay),ka(Ci(s),1-this.decay)),t=js(ka(i,this.momentum),ai(ka(s,this.learningRate),Ni(js(e,this.epsilon))));a.assign(e),i.assign(t);const n=Ji(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ps(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Ps(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&Ps(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}mc.className="RMSProp",Fs(mc);class gc{static sgd(e){return new dc(e)}static momentum(e,t,n=!1){return new fc(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new mc(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new hc(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new lc(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new pc(e,t,n,r,s)}static adagrad(e,t=.1){return new cc(e,t)}}const yc={sgd:gc.sgd,momentum:gc.momentum,adadelta:gc.adadelta,adagrad:gc.adagrad,rmsprop:gc.rmsprop,adamax:gc.adamax,adam:gc.adam},bc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function xc(){return new Promise(e=>bc(()=>e()))}function wc(e,t){const n=e[0].length;e.forEach((e,t)=>{Ae(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),Ae(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,s)=>{for(let a=0;a<n;a++)Ae(a===t||e[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function vc(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var kc;function Sc(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],i=r[r.length-n.length+s],o=r[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${o}`)}else r[i]=a}return r}function Ic(e){const t={FIRST_DIM_SIZE:kc.FIRST_DIM_SIZE,VALUE_ROWIDS:kc.VALUE_ROWIDS,ROW_LENGTHS:kc.ROW_LENGTHS,ROW_SPLITS:kc.ROW_SPLITS,ROW_LIMITS:kc.ROW_LIMITS,ROW_STARTS:kc.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function Nc(e){return 0===e.length?0:e[0]===kc.FIRST_DIM_SIZE?e.length-1:e.length}function Cc(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(kc||(kc={}));const Tc=30;function Ec(e){return e<=Tc?e:st(e,Math.floor(Math.sqrt(e)))}function Ac(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Rc(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function $c(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function _c(e,t,n,r=!0){const s=[];s.push(r?e[0]/n:e[0]*n);for(let a=1;a<e.length;++a)s.push(a<=t.length?r?t[a-1]*e[a]:e[a]/t[a-1]:e[a]);return s}function Fc(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Dc(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function Oc(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Fe(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let h=0;h<s.length-1;++h)i*=s[h];const o=e.shape,u=s.slice();u.pop();let l=1;for(let h=a;h<n;++h)l*=o[h],u.push(o[h]);const c=[...at(e.shape).map(e=>e/l),1].slice(0,a);return[u,i,l,c]}const Mc=1.7580993408473768,Pc=1.0507009873554805,zc=.3275911,Lc=.254829592,Bc=-.284496736,Wc=1.421413741,Vc=-1.453152027,Uc=1.061405429;function Gc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Hc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function jc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function qc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function Kc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Xc(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Yc(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Zc(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Qc=/->/g;function Jc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Qc,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split("->");Ae(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const a=r.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let h=0;h<s.length;++h){const e=s[h];if(!a.some(t=>-1!==t.indexOf(e)))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let h=0;h<r.length;++h){const e=r[h];-1===o.indexOf(e)&&","!==e&&o.push(e)}const u=new Array(a.length);for(let h=0;h<i;++h){if(new Set(a[h].split("")).size!==a[h].length)throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);u[h]=[];for(let e=0;e<a[h].length;++e)u[h].push(o.indexOf(a[h][e]))}const l=o.length,c=[];for(let h=s.length;h<l;++h)c.push(h);return{allDims:o,summedDims:c,idDims:u}}function eh(e,t){let n=new Array(e);n.fill(-1);for(let s=0;s<t.length;++s)n[t[s]]=s;const r=[];for(let s=0;s<e;++s)-1===n[s]&&r.push(s);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:r}}function th(e,t,n){const r=new Array(e);for(let s=0;s<n.length;++s){const e=n[s].shape;for(let n=0;n<t[s].length;++n)void 0===r[t[s][n]]?r[t[s][n]]=e[n]:Ae(r[t[s][n]]===e[n],()=>`Expected dimension ${r[t[s][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension `+e[n])}}function nh(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let i=0;i<s;++i)r.push([]);const a=[];for(let i=0;i<n.length;++i){const e=sh(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(r[i].push(t),a.push(t))}return{path:n,steps:r}}function rh(e){return e.every((e,t)=>e===t)}function sh(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function ah(e,t,n=0){let r=[];if("number"==typeof t)Ae(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{Ae(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}Ae(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function ih(e){return"Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = "+e}function oh(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function uh(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function lh(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function ch(e,t){return`size ${e} must be non-negative, not ${t}`}function hh(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ph(e,t){return`Input to reshape is a SparseTensor with ${Fe(e)}\n  dense values, but the requested shape requires a multiple of ${Fe(t)}. inputShape=${e} outputShape= ${t}`}function dh(e,t){return`Input to reshape is a tensor with ${Fe(e)} dense values, but the requested shape has ${Fe(t)}. inputShape=${e} outputShape=${t}`}function fh(){return"segment ids must be >= 0"}function mh(){return"segment ids are not increasing"}function gh(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function yh(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function bh(e,t){let n,r=!1;for(e<=Tc?(n=e,r=!0):n=st(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=st(e,n+1);return n}function xh(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)r.push(a!==t?e[a]:n);return r}function wh(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let h=0;h<r;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let h=0;h<r;++h)o.push(e.shape[h]),u*=e.shape[h];for(let h=r;h<n;h++)o.push(e.shape[h]),l*=e.shape[h];for(let h=r;h<s;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function vh(e){try{return e.map(e=>Zt(e))}catch(K1){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+K1)}}function kh(e){return e.map(e=>Yt(e))}const Sh={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,Iu(Mr(n,"float32"),-1))}}},Ih={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ci(Mr(n,"float32")),r=Ni(Ji(Ws(1),t));return Yi(ai(e,r))}}}},Nh={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ni(Ji(Ci(Mr(n,"float32")),1));return ai(e,t)}}}},Ch={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{let t=e;const r=is(n.shape,s);return r.length>0&&(t=Ti(t,r)),ya(t,n.shape)},b:()=>{let t=e;const n=is(r.shape,s);return n.length>0&&(t=Ti(t,n)),ya(t,r.shape)}}}},Th={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ui(n)}}},Eh={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ui(n)}}},Ah={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,Ni(Ji(Ws(1),Ci(Mr(n,"float32")))))}}},Rh={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ni(js(Ws(1),Ci(Mr(n,"float32"))));return ai(e,t)}}}},$h={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{const t=js(Ci(n),Ci(r));let a=ka(e,ai(r,t));const i=is(n.shape,s);return i.length>0&&(a=Ti(a,i)),ya(a,n.shape)},b:()=>{const t=js(Ci(n),Ci(r));let a=Yi(ka(e,ai(n,t)));const i=is(r.shape,s);return i.length>0&&(a=Ti(a,i)),ya(a,r.shape)}}}},_h={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,js(Ci(Mr(n,"float32")),1))}}},Fh={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,Ji(Ws(1),Ci(Mr(n,"float32"))))}}},Dh=Bn({avgPool3dGrad_:function(e,t,n,r,s,a){const i=Pn(e,"dy","avgPool3dGrad"),o=Pn(t,"input","avgPool3dGrad");let u=i,l=o,c=!1;4===o.rank&&(c=!0,u=ya(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),l=ya(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Ae(5===u.rank,()=>"Error in avgPool3dGrad: dy must be rank 5 but got rank "+u.rank+"."),Ae(5===l.rank,()=>"Error in avgPool3dGrad: input must be rank 5 but got rank "+l.rank+"."),ga("avgPool3dGrad",s,a);const h=En.runKernel("AvgPool3DGrad",{dy:u,input:l},{filterSize:n,strides:r,pad:s,dimRoundingMode:a});return c?ya(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Oh={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>Dh(e,r,s,a,i,o)}}},Mh=Bn({avgPoolGrad_:function(e,t,n,r,s){const a=Pn(e,"dy","avgPoolGrad"),i=Pn(t,"input","avgPoolGrad");Ae(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=ya(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=ya(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Ae(4===u.rank,()=>"Error in avgPoolGrad: dy must be rank 4 but got rank "+u.rank+"."),Ae(4===o.rank,()=>"Error in avgPoolGrad: input must be rank 4 but got rank "+o.rank+".");const c=En.runKernel("AvgPoolGrad",{dy:u,input:o},{filterSize:n,strides:r,pad:s});return l?ya(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Ph={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Mh(e,r,s,a,i)}}},zh={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>va(e,s,!1,!1),b:()=>va(e,r,!0,!1)}:a&&!i?{a:()=>va(s,e,!1,!0),b:()=>va(r,e,!1,!1)}:{a:()=>va(s,e,!0,!0),b:()=>va(e,r,!0,!0)}:{a:()=>va(e,s,!1,!0),b:()=>va(r,e,!0,!1)}}},Lh={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>_o(e,r,s)}}},Bh={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n.inputShape,s=n.shape,a=Array.from(s);for(let o=r.length-1;o>=0;o--)if(r[o]===s[o])a[o]=1;else if(1!==r[o])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);const i=[];for(let o=0;o<a.length;o++)a[o]>1&&i.push(o);return{x:()=>Ti(e,i,!0)}}},Wh={kernelName:"Ceil",gradFunc:e=>({x:()=>ui(e)})},Vh={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>oi(no(zi(r,s),Hi(r,a)),e,ui(e))}}},Uh={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:Sh.gradFunc},Gh={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map(e=>e.shape),{axis:s}=n,a=Ue(s,t[0].shape)[0],i=r.map(e=>e[a]);return xu(e,i,a).map(e=>()=>e)}},Hh={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return Ae(da(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Ga(r.shape,e,s,i,o,u),filter:()=>el(r,e,s.shape,i,o,u)}}},jh={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Va(e,s,a,i,o,1,u),filter:()=>el(e,r,s.shape,a,i,o,u)}}},qh=Bn({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=ya(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;return 4===i.rank&&(i=ya(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Ae(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),Ae(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),Ae(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),Ae(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),Ae(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`),En.runKernel("Conv3DBackpropFilterV2",{x:a,dy:i},{strides:r,pad:s,filterShape:n})}}),Kh={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;Ae(da(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=t;return{x:()=>qa(i.shape,e,o,s,a),filter:()=>qh(i,e,o.shape,s,a)}}},Xh={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(Yi(lu(Mr(n,"float32"))),e)}}},Yh={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(cu(Mr(n,"float32")),e)}}},Zh={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=xi([s],r.rank);let n=Qa(e,s,a,!i);return null!=t&&(n=Vu(n,t)),n}}}},Qh={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;Ae(da(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,l]=t;return Ae(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),Ae(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),Ae(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),Ae(fa(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),ga("depthwiseConv2d",a,i),{x:()=>ol(u.shape,e,l,s,a,o,i),filter:()=>il(u,e,l.shape,s,a,o,i)}}},Jh={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>En.runKernel("Dilation2DBackpropInput",a,n),filter:()=>En.runKernel("Dilation2DBackpropFilter",i,n)}}},ep={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>En.runKernel("EluGrad",r)}}},tp={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ka(Ri(Yi(Ci(n))),2/Math.sqrt(Math.PI));return{x:()=>ka(e,r)}}},np={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,n)}}},rp={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>ya(e,n.shape)}}},sp={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,Ri(n))}}},ap={kernelName:"Floor",gradFunc:e=>({x:()=>ui(e)})},ip={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{const t=ai(e,Mr(r,"float32")),a=is(n.shape,s);return a.length>0?ya(Ti(t,a),n.shape):t},b:()=>{let t=ka(e,Mr(n,"float32"));const a=is(r.shape,s);a.length>0&&(t=ya(Ti(t,a),r.shape));const i=Ci(r);return Yi(ai(t,Mr(i,"float32")))}}}},op={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,u=null==o?Ws(1):o,l=is(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=Ji(s,a),p=ka(e,u),d=su(js(i,Ws(r))),f=ka(ka(ka(d,d),d),Ws(-.5));return{x:()=>ya(ka(ka(e,1===a.rank?Fi(ya(d,[1,1,1,a.shape[0]]),c):d),u),s.shape),mean:()=>{let e=ka(ka(d,Ws(-1)),p);return 1===a.rank&&(e=Ti(e,l)),ya(e,a.shape)},variance:()=>{let e=ka(ka(f,h),p);return 1===a.rank&&(e=Ti(e,l)),ya(e,a.shape)},scale:()=>{const t=ka(h,d);let n=ka(e,t);return 1===a.rank&&(n=Ti(n,l)),ya(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ti(t,l)),ya(t,a.shape)}}}},up={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=Ue(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),u=o.length,l=t.slice(a,t.length).slice(1),c=l.length,h=lp(0,u),p=lp(u+1,u+1+c),d=cp([o,[n],l]),f=ya(e,d),m=ya(s,[n]),g=cp([[u],h,p]),y=Vu(f,g);let b=Ou(y,m,r.shape[i]);const x=wi(g);return b=Vu(b,x),b},indices:()=>s}}};function lp(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function cp(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const hp={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ui(n),b:()=>ui(r)}}},pp={kernelName:"Identity",gradFunc:e=>({x:()=>Mr(e,"float32")})},dp={kernelName:"IsFinite",gradFunc:e=>({x:()=>ui(e)})},fp={kernelName:"IsInf",gradFunc:e=>({x:()=>ui(e)})},mp={kernelName:"IsNan",gradFunc:e=>({x:()=>ui(e)})},gp={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=Pi(r,0);return{x:()=>oi(a,e,ka(e,s))}}},yp={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,js(n,1))}}},bp={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,Mr(n,"float32"))}}},xp={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=Ri(r);return Ji(e,ka(Ti(e,s,!0),t))}}}},wp=Bn({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){return En.runKernel("LRNGrad",{x:e,y:t,dy:n},{depthRadius:r,bias:s,alpha:a,beta:i})}}),vp={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>wp(r,s,e,a,i,o,u)}}};function kp(e,t,n,r){return t.rank<n.rank&&(t=ya(t,yi(t.shape,r))),e.rank<n.rank&&(e=ya(e,yi(e.shape,r))),{x:()=>ka(e,Mr(ii(n,t),e.dtype))}}const Sp={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=kp(e,t[1],a,Ue(s,a.shape));return{x:()=>i.x()}}},Ip={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ka(e,Mr(zi(n,r),"float32")),b:()=>ka(e,Mr(Gi(n,r),"float32"))}}},Np=Bn({maxPool3dGrad_:function(e,t,n,r,s,a,i){const o=Pn(e,"dy","maxPool3dGrad"),u=Pn(t,"input","maxPool3dGrad"),l=Pn(n,"output","maxPool3dGrad");let c=o,h=u,p=l,d=!1;4===u.rank&&(d=!0,c=ya(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=ya(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=ya(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Ae(5===c.rank,()=>"Error in maxPool3dGrad: dy must be rank 5 but got rank "+c.rank+"."),Ae(5===h.rank,()=>"Error in maxPool3dGrad: input must be rank 5 but got rank "+h.rank+"."),Ae(5===p.rank,()=>"Error in maxPool3dGrad: output must be rank 5 but got rank "+p.rank+"."),ga("maxPool3dGrad",a,i);const f=En.runKernel("MaxPool3DGrad",{dy:c,input:h,output:p},{filterSize:r,strides:s,pad:a,dimRoundingMode:i});return d?ya(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Cp={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>Np(e,r,s,a,i,o,u)}}},Tp=Bn({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=Pn(e,"dy","maxPoolGrad"),u=Pn(t,"input","maxPoolGrad"),l=Pn(n,"output","maxPoolGrad");return Ae(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),Ae(4===o.rank,()=>"Error in maxPoolGrad: dy must be rank 4 but got rank "+o.rank+"."),Ae(4===u.rank,()=>"Error in maxPoolGrad: input must be rank 4 but got rank "+u.rank+"."),ga("maxPoolGrad",a,i),En.runKernel("MaxPoolGrad",{dy:o,input:u,output:l},{filterSize:r,strides:s,pad:a,dimRoundingMode:i})}}),Ep={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>Ia(e,a,r.shape)}}},Ap={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Ta(e,r,s)}}},Rp={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>wa(e,r)}}},$p=[Sh,Ih,Nh,Ch,{kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}},Th,Eh,Ah,Rh,$h,_h,Fh,Oh,Ph,zh,Lh,Bh,{kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},Wh,Vh,Uh,Gh,jh,Hh,Kh,Xh,Yh,Zh,Qh,Jh,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{const t=ai(e,Mr(r,"float32")),a=is(n.shape,s);return a.length>0?ya(Ti(t,a),n.shape):t},b:()=>{let t=ka(e,Mr(n,"float32"));const a=is(r.shape,s);a.length>0&&(t=ya(Ti(t,a),r.shape));const i=Ci(r);return Yi(ai(t,Mr(i,"float32")))}}}},ep,tp,np,rp,sp,ip,ap,op,up,hp,pp,dp,fp,mp,gp,yp,bp,xp,vp,Sp,Sp,Ip,Cp,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Tp(e,r,s,a,i,o)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=Ue(s,r.shape),i=Fe(gi(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach(e=>{t[e]=1});const n=ya(e,t);return ai(ka(n,mo(r.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=kp(e,i,a,Ue(s,a.shape));return{x:()=>o.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ka(e,Mr(Hi(n,r),"float32")),b:()=>ka(e,Mr(Pi(n,r),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>Ia(e,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{const t=is(n.shape,s);return t.length>0?ya(Ti(e,t),n.shape):e},b:()=>{const t=ka(e,Yi(Oi(ai(n,r)))),a=is(r.shape,s);return a.length>0?ya(Ti(t,a),r.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{const t=ka(e,Mr(r,"float32")),a=is(n.shape,s);return a.length>0?ya(Ti(t,a),n.shape):t},b:()=>{const t=ka(e,Mr(n,"float32")),a=is(r.shape,s);return a.length>0?ya(Ti(t,a),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>Yi(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>fo(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>ui(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Mu(e,r).map(e=>()=>e)}},Ep,Ep,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=os(a.shape,i.shape);return{a:()=>{const t=Mr(i,"float32");let n=ka(e,ka(t,Ii(a,Ji(t,Ws(1)))));const r=is(a.shape,o);return r.length>0&&(n=Ti(n,r)),ya(n,a.shape)},b:()=>{const t=Pi(a,0),n=oi(t,Ki(a),ui(a));let r=ka(e,ka(s,n));const u=is(i.shape,o);return u.length>0&&(r=Ti(r,u)),ya(r,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=Pi(n,0);return{x:()=>oi(s,e,ka(e,r)),alpha:()=>{let t=oi(s,ui(e),ka(e,n));const a=is(r.shape,e.shape);return a.length>0&&(t=Ti(t,a)),ya(t,r.shape)}}}},{kernelName:"Prod",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;let a=[];return a=null==s?r.shape.map((e,t)=>t):"number"==typeof s?[s]:s,{x:()=>function(e,t,n){const r=e.shape.length,s=r-n.length,a=d.getAxesPermutation(n,r);let i=e;null!=a&&(i=Vu(e,a));const o=i.shape.slice(),u=o.splice(r-n.length,n.length).reduce((e,t)=>e*t,1);o.push(u);let l=function(e,t,n){const r=e.shape.slice();r[n]=1;const s=ya(t,r),a=Za(e,n,!0,!1),i=Za(e,n,!0,!0),o=ka(a,i);return ka(s,o)}(i.reshape(o),t,s);if(l=l.reshape(i.shape),null!=a){const e=d.getUndoAxesPermutation(a);l=Vu(l,e)}return l}(r,e,a)}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,Yi(Ci(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ka(Hi(n,6),Iu(n));return{x:()=>ka(e,Mr(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,Mr(Iu(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ya(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>En.runKernel("ResizeBilinearGrad",s,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>En.runKernel("ResizeNearestNeighborGrad",s,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=Ue(r,e.shape);return{x:()=>Qo(e,s)}}},{kernelName:"Round",gradFunc:e=>({x:()=>ui(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Yi(ai(e,ka(Ii(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Mr(ui(n),"float32"),t:()=>ka(e,Mr(n,e.dtype)),e:()=>ka(e,Mr(ro(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Pi(n,Ws(0)),r=Ws(Mc),s=Ws(Pc),a=ka(e,s),i=ka(ka(e,r),Ri(Mr(n,"float32")));return oi(t,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,ka(n,Ji(Ws(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>ui(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(Xa(Mr(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(Ya(Mr(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=Es(r,s,a),l=[];for(let c=0;c<e.rank;c++)l.push([o[c],i[c]-o[c]-u[c]]);return{x:()=>To(e,l)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=ka(e,r);return{logits:()=>Ji(a,ka(Ti(a,[s],!0),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,Sa(n))}}},Ap,Ap,Rp,Rp,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,ka(Ni(Mr(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Ws(2);return{a:()=>ka(e,ka(s,Ji(n,r))),b:()=>ka(e,ka(s,Ji(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(e,ka(Mr(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>ui(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=os(n.shape,r.shape);return{a:()=>{let t=e;const r=is(n.shape,s);return r.length>0&&(t=Ti(t,r)),ya(t,n.shape)},b:()=>{let t=e;const n=is(r.shape,s);return n.length>0&&(t=Ti(t,n)),ya(Yi(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;Ue(a,r.shape).forEach(e=>{s[e]=1});const i=ya(e,s),o=ka(i,mo(r.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ai(e,Ci(Xa(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ka(Ji(Ws(1),Ci(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=ui(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=js(t,Ia(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=js(t,Ia(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=js(t,Ia(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=js(t,Ia(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=wi(s);return{x:()=>Vu(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Su(e,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=ho(t,ui(t)),r=Mi(e,n);let s=zi(t,Ws(0,"int32"));const a=r.rank-s.rank;for(let o=0;o<a;++o)s=$i(s,o+1);s=no(s,mo(r.shape,"bool"));const i=ui(r);return oi(s,r,i)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>ui(e)})}];for(const X1 of $p)At(X1);cn().prototype.abs=function(){return this.throwIfDisposed(),Us(this)},cn().prototype.acos=function(){return this.throwIfDisposed(),Gs(this)},cn().prototype.acosh=function(){return this.throwIfDisposed(),Hs(this)},cn().prototype.add=function(e){return this.throwIfDisposed(),js(this,e)},cn().prototype.all=function(e,t){return this.throwIfDisposed(),Ks(this,e,t)},cn().prototype.any=function(e,t){return this.throwIfDisposed(),Xs(this,e,t)},cn().prototype.argMax=function(e){return this.throwIfDisposed(),Ys(this,e)},cn().prototype.argMin=function(e){return this.throwIfDisposed(),Zs(this,e)},cn().prototype.asScalar=function(){return this.throwIfDisposed(),Ae(1===this.size,()=>"The array must have only 1 element."),ya(this,[])},cn().prototype.asType=function(e){return this.throwIfDisposed(),Mr(this,e)},cn().prototype.as1D=function(){return this.throwIfDisposed(),ya(this,[this.size])},cn().prototype.as2D=function(e,t){return this.throwIfDisposed(),ya(this,[e,t])},cn().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),ya(this,[e,t,n])},cn().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),ya(this,[e,t,n,r])},cn().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),ya(this,[e,t,n,r,s])},cn().prototype.asin=function(){return this.throwIfDisposed(),Qs(this)},cn().prototype.asinh=function(){return this.throwIfDisposed(),Js(this)},cn().prototype.atan=function(){return this.throwIfDisposed(),ea(this)},cn().prototype.atan2=function(e){return this.throwIfDisposed(),ta(this,e)},cn().prototype.atanh=function(){return this.throwIfDisposed(),na(this)},cn().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),ba(this,e,t,n,r)},cn().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Ta(this,e,t)},cn().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),Ea(this,e,t,n,r,s)},cn().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Da(this,e)},cn().prototype.cast=function(e){return this.throwIfDisposed(),Mr(this,e)},cn().prototype.ceil=function(){return this.throwIfDisposed(),Oa(this)},cn().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Pa(this,e,t)},cn().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ln&&(e=[e]),wa([this,...e],t)},cn().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Ua(this,e,t,n,r,s,a)},cn().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),Ha(this,e,t,n,r,s)},cn().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Va(this,e,t,n,r,s,a)},cn().prototype.cos=function(){return this.throwIfDisposed(),Xa(this)},cn().prototype.cosh=function(){return this.throwIfDisposed(),Ya(this)},cn().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Za(this,e,t,n)},cn().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Qa(this,e,t,n)},cn().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),ei(this,e,t)},cn().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ti(this,e,t,n,r,s,a)},cn().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),ri(this,e,t,n,r,s)},cn().prototype.divNoNan=function(e){return this.throwIfDisposed(),li(this,e)},cn().prototype.div=function(e){return this.throwIfDisposed(),ai(this,e)},cn().prototype.dot=function(e){return this.throwIfDisposed(),ci(this,e)},cn().prototype.elu=function(){return this.throwIfDisposed(),pi(this)},cn().prototype.equal=function(e){return this.throwIfDisposed(),ii(this,e)},cn().prototype.erf=function(){return this.throwIfDisposed(),di(this)},cn().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Ai(this,e,t)},cn().prototype.exp=function(){return this.throwIfDisposed(),Ri(this)},cn().prototype.expandDims=function(e){return this.throwIfDisposed(),$i(this,e)},cn().prototype.expm1=function(){return this.throwIfDisposed(),_i(this)},cn().prototype.fft=function(){return this.throwIfDisposed(),gu(this)},cn().prototype.flatten=function(){return this.throwIfDisposed(),ya(this,[this.size])},cn().prototype.floor=function(){return this.throwIfDisposed(),Oi(this)},cn().prototype.floorDiv=function(e){return this.throwIfDisposed(),si(this,e)},cn().prototype.gather=function(e,t){return this.throwIfDisposed(),Mi(this,e,t)},cn().prototype.greaterEqual=function(e){return this.throwIfDisposed(),zi(this,e)},cn().prototype.greater=function(e){return this.throwIfDisposed(),Pi(this,e)},cn().prototype.ifft=function(){return this.throwIfDisposed(),yu(this)},cn().prototype.irfft=function(){return this.throwIfDisposed(),bu(this)},cn().prototype.isFinite=function(){return this.throwIfDisposed(),Bi(this)},cn().prototype.isInf=function(){return this.throwIfDisposed(),Wi(this)},cn().prototype.isNaN=function(){return this.throwIfDisposed(),Vi(this)},cn().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Ui(this,e)},cn().prototype.lessEqual=function(e){return this.throwIfDisposed(),Hi(this,e)},cn().prototype.less=function(e){return this.throwIfDisposed(),Gi(this,e)},cn().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),qi(this,e,t,n,r)},cn().prototype.logSigmoid=function(){return this.throwIfDisposed(),Qi(this)},cn().prototype.logSoftmax=function(e){return this.throwIfDisposed(),eo(this,e)},cn().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),to(this,e,t)},cn().prototype.log=function(){return this.throwIfDisposed(),Ki(this)},cn().prototype.log1p=function(){return this.throwIfDisposed(),Xi(this)},cn().prototype.logicalAnd=function(e){return this.throwIfDisposed(),no(this,e)},cn().prototype.logicalNot=function(){return this.throwIfDisposed(),ro(this)},cn().prototype.logicalOr=function(e){return this.throwIfDisposed(),so(this,e)},cn().prototype.logicalXor=function(e){return this.throwIfDisposed(),ao(this,e)},cn().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),va(this,e,t,n)},cn().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),uo(this,e,t,n,r)},cn().prototype.max=function(e,t){return this.throwIfDisposed(),ki(this,e,t)},cn().prototype.maximum=function(e){return this.throwIfDisposed(),ho(this,e)},cn().prototype.mean=function(e,t){return this.throwIfDisposed(),po(this,e,t)},cn().prototype.min=function(e,t){return this.throwIfDisposed(),Si(this,e,t)},cn().prototype.minimum=function(e){return this.throwIfDisposed(),yo(this,e)},cn().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),bo(this,e,t)},cn().prototype.mod=function(e){return this.throwIfDisposed(),xo(this,e)},cn().prototype.mul=function(e){return this.throwIfDisposed(),ka(this,e)},cn().prototype.neg=function(){return this.throwIfDisposed(),Yi(this)},cn().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Ei(this,e,t,n)},cn().prototype.notEqual=function(e){return this.throwIfDisposed(),So(this,e)},cn().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Io(this,e,t,n)},cn().prototype.onesLike=function(){return this.throwIfDisposed(),No(this)},cn().prototype.pad=function(e,t){return this.throwIfDisposed(),To(this,e,t)},cn().prototype.pool=function(e,t,n,r,s,a){return this.throwIfDisposed(),Fo(this,e,t,n,r,s,a)},cn().prototype.pow=function(e){return this.throwIfDisposed(),Ii(this,e)},cn().prototype.prelu=function(e){return this.throwIfDisposed(),Do(this,e)},cn().prototype.prod=function(e,t){return this.throwIfDisposed(),Oo(this,e,t)},cn().prototype.reciprocal=function(){return this.throwIfDisposed(),Xo(this)},cn().prototype.relu=function(){return this.throwIfDisposed(),Yo(this)},cn().prototype.relu6=function(){return this.throwIfDisposed(),Zo(this)},cn().prototype.reshapeAs=function(e){return this.throwIfDisposed(),ya(this,e.shape)},cn().prototype.reshape=function(e){return this.throwIfDisposed(),ya(this,e)},cn().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),$l(this,e,t,n)},cn().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),_l(this,e,t,n)},cn().prototype.reverse=function(e){return this.throwIfDisposed(),Qo(this,e)},cn().prototype.rfft=function(){return this.throwIfDisposed(),wu(this)},cn().prototype.round=function(){return this.throwIfDisposed(),ru(this)},cn().prototype.rsqrt=function(){return this.throwIfDisposed(),su(this)},cn().prototype.selu=function(){return this.throwIfDisposed(),au(this)},cn().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),iu(this,e,t,n,r,s,a)},cn().prototype.sigmoid=function(){return this.throwIfDisposed(),Sa(this)},cn().prototype.sign=function(){return this.throwIfDisposed(),uu(this)},cn().prototype.sin=function(){return this.throwIfDisposed(),lu(this)},cn().prototype.sinh=function(){return this.throwIfDisposed(),cu(this)},cn().prototype.slice=function(e,t){return this.throwIfDisposed(),Ia(this,e,t)},cn().prototype.softmax=function(e){return this.throwIfDisposed(),mu(this,e)},cn().prototype.softplus=function(){return this.throwIfDisposed(),Zi(this)},cn().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),_o(this,e,t)},cn().prototype.split=function(e,t){return this.throwIfDisposed(),xu(this,e,t)},cn().prototype.sqrt=function(){return this.throwIfDisposed(),Ni(this)},cn().prototype.square=function(){return this.throwIfDisposed(),Ci(this)},cn().prototype.squaredDifference=function(e){return this.throwIfDisposed(),vu(this,e)},cn().prototype.squeeze=function(e){return this.throwIfDisposed(),ku(this,e)},cn().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ln?[this,e]:[this,...e];return Su(n,t)},cn().prototype.step=function(e){return this.throwIfDisposed(),Iu(this,e)},cn().prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),Nu(this,e,t,n,r,s,a,i,o)},cn().prototype.sub=function(e){return this.throwIfDisposed(),Ji(this,e)},cn().prototype.sum=function(e,t){return this.throwIfDisposed(),Ti(this,e,t)},cn().prototype.tan=function(){return this.throwIfDisposed(),Cu(this)},cn().prototype.tanh=function(){return this.throwIfDisposed(),Na(this)},cn().prototype.tile=function(e){return this.throwIfDisposed(),Fi(this,e)},cn().prototype.toBool=function(){return this.throwIfDisposed(),Mr(this,"bool")},cn().prototype.toFloat=function(){return this.throwIfDisposed(),Mr(this,"float32")},cn().prototype.toInt=function(){return this.throwIfDisposed(),Mr(this,"int32")},cn().prototype.topk=function(e,t){return this.throwIfDisposed(),_u(this,e,t)},cn().prototype.transpose=function(e){return this.throwIfDisposed(),Vu(this,e)},cn().prototype.unique=function(e){return this.throwIfDisposed(),Du(this,e)},cn().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Ou(this,e,t)},cn().prototype.unstack=function(e){return this.throwIfDisposed(),Mu(this,e)},cn().prototype.where=function(e,t){return this.throwIfDisposed(),oi(e,this,t)},cn().prototype.zerosLike=function(){return this.throwIfDisposed(),ui(this)};class _p extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_p.prototype)}}class Fp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Fp.prototype)}}class Dp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Dp.prototype)}}class Op extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Op.prototype)}}class Mp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Mp.prototype)}}Error;class Pp{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function zp(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Lp(e,t){if(!e)throw new Mp(t)}function Bp(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Wp(e){return 1===e.length?e[0]:e}function Vp(e){return Array.isArray(e)?e:[e]}function Up(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Gp(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let Hp={};function jp(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function qp(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Hp)a=Hp[s];else if(a=t[s],null==a)throw new Dp(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Dp(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Hp?[o,u]=Hp.className:i in t&&([o,u]=t[i]),null==o)throw new Dp(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const n of Object.keys(Hp))e[n]=Hp[n];for(const s of Object.keys(n))e[s]=n[s];a.config.customObjects=e;const t=Object.assign({},Hp);for(const s of Object.keys(n))Hp[s]=n[s];!function e(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(t=>e(t));else{const n=Object.keys(t);for(const r of n){const n=t[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?e(n):t[r]=n.value)}}}(a.config);const r=u(o,a.config,n,s);return Hp=Object.assign({},t),r}{const e=Object.assign({},Hp);for(const r of Object.keys(n))Hp[r]=n[r];const t=new o(a.config);return Hp=Object.assign({},e),t}}}function Kp(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Xp(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Yp(e){if(null==e)throw new Dp("Invalid value in obj: "+JSON.stringify(e));for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Zp(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Dp(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Qp(e,t,n=0,r=1/0){return Lp(n>=0),Lp(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(e=>typeof e===t)}function Jp(e,t){Array.isArray(e)?(r.assert(e.length>0,()=>t+" is unexpectedly an empty array."),e.forEach((e,n)=>Jp(e,`element ${n+1} of ${t}`))):r.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got `+function e(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>e(t)).join(",")+"]":"string"==typeof t?`"${t}"`:""+t}(e)+".")}function ed(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let td=0;function nd(){return td++}const rd={};function sd(e=""){return e in rd||(rd[e]=0),rd[e]+=1,e+rd[e].toString()}const ad=["channelsFirst","channelsLast"],id=["nearest","bilinear"],od=["valid","same","causal"],ud=["max","avg"],ld=["sum","mul","concat","ave"],cd=new Map;function hd(e){Zp(ad,"DataFormat",e)}function pd(e){Zp(od,"PaddingMode",e)}function dd(e){Zp(ud,"PoolMode",e)}const fd=[];function md(e,t){fd.push(e);try{const e=t();return fd.pop(),e}catch(n){throw fd.pop(),n}}function gd(e){if(!xd(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===fd.length?"":fd.join("/")+"/")+e}function yd(e){if(!xd(e))throw new Error("Not a valid tensor name: '"+e+"'");cd.has(e)||cd.set(e,0);const t=cd.get(e);if(cd.set(e,cd.get(e)+1),t>0){const n=`${e}_${t}`;return cd.set(n,1),n}return e}const bd=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function xd(e){return!!e.match(bd)}function wd(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function vd(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function kd(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function Sd(e,t){if(t<e)throw new Dp(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}let Id;function Nd(){return null==Id&&(Id=En.backend.epsilon()),Id}function Cd(e,t){return Mr(e,t)}function Td(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),ya(e,n)}function Ed(e,t,n){return Ms(()=>{switch(e.rank){case 1:return hu(e,t,n);case 2:return pu(e,[t,0],[n,e.shape[1]]);case 3:return du(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return fu(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ia(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ia(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Dp("sliceAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}})}function Ad(e,t,n){return Ms(()=>{switch(e.rank){case 1:return hu(e,t,n);case 2:return pu(e,[0,t],[e.shape[0],n]);case 3:return du(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return fu(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Dp("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function Rd(e,t,n,r){return Ms(()=>{switch(e.rank){case 1:return hu(e,t,n);case 2:switch(r){case 1:return Ed(e,t,n);case 2:return Ad(e,t,n);default:throw new Dp("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return Ed(e,t,n);case 2:return du(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Ad(e,t,n);default:throw new Dp("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return Ed(e,t,n);case 2:return fu(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return fu(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Ad(e,t,n);default:throw new Dp("The axis is not within the rank of the tensor "+r)}default:throw new Dp("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function $d(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),wa(e,t)}function _d(e,t){switch(e.rank){case 1:return za([e,t]);case 2:return La([e,t],0);case 3:return Ba([e,t],0);case 4:return Wa([e,t],0);default:throw new Dp("concatAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}function Fd(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Dp(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Fi(e,t)}function Dd(e,t=0,n=1,r,s){return Go(e,t,n,r,s)}function Od(e,t,n,r){if(e.rank<2||t.rank<2)throw new Op(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Op(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = `+t.shape);if(2===e.rank&&2===t.rank)return h.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?zd(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=ya(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=ya(Vu(t,c),[u,-1]);const p=[...s,...l];return ya(h.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?zd(e.rank,r,"channelsLast"):null,activation:n}),p)}}function Md(e,t,n){return Ms(()=>(t=Array.isArray(t)?Tu(t,"int32"):Mr(t,"int32"),Mi(e,t,n)))}function Pd(e){return ka(e,e)}function zd(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new Dp("Unexpected bias dimensions: "+t.rank+"; expected it to be 1 or "+e);if(5===e){if("channelsFirst"===n)return ya(t,1===r.length?[1,r[0],1,1,1]:[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return ya(t,1===r.length?[1,1,1,1,r[0]]:[1].concat(r))}else if(4===e){if("channelsFirst"===n)return ya(t,1===r.length?[1,r[0],1,1]:[1,r[2],r[0],r[1]]);if("channelsLast"===n)return ya(t,1===r.length?[1,1,1,r[0]]:[1].concat(r))}else if(3===e){if("channelsFirst"===n)return ya(t,1===r.length?[1,r[0],1]:[1,r[1],r[0]]);if("channelsLast"===n)return ya(t,1===r.length?[1,1,r[0]]:[1].concat(r))}else if(e<3)return t;throw new Dp("Unsupported input rank by biasAdd: "+t.rank)}function Ld(e,t,n){return Ms(()=>(null==n&&(n="channelsLast"),hd(n),js(e,zd(e.rank,t,n))))}function Bd(e,t,n,r){return Ms(()=>Yu(e,t,n,r))}function Wd(e,t,n=!1){return n?e():t()}const Vd=["fanIn","fanOut","fanAvg"],Ud=["normal","uniform","truncatedNormal"];class Gd extends c.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Hd extends Gd{apply(e,t){return fo(e,t)}}Hd.className="Zeros",c.registerClass(Hd);class jd extends Gd{apply(e,t){return mo(e,t)}}jd.className="Ones",c.registerClass(jd);class qd extends Gd{constructor(e){if(super(),"object"!=typeof e)throw new Dp("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new Dp("config must have value set but got "+e);this.value=e.value}apply(e,t){return Ms(()=>ka(Ws(this.value),mo(e,t)))}getConfig(){return{value:this.value}}}qd.className="Constant",c.registerClass(qd);class Kd extends Gd{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return jo(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Kd.className="RandomUniform",c.registerClass(Kd);class Xd extends Gd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Op(`randomNormal does not support dType ${t}.`);return Dd(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Xd.className="RandomNormal",c.registerClass(Xd);class Yd extends Gd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Op(`truncatedNormal does not support dType ${t}.`);return Fu(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Yd.className="TruncatedNormal",c.registerClass(Yd);class Zd extends Gd{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Ms(()=>{if(2!==e.length||e[0]!==e[1])throw new Dp("Identity matrix initializer can only be used for 2D square matrices.");return ka(this.gain,Di(e[0]))})}getConfig(){return{gain:this.gain}}}Zd.className="Identity",c.registerClass(Zd);class Qd extends Gd{constructor(e){if(super(),e.scale<0)throw new Dp("scale must be a positive float. Got: "+e.scale);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,Zp(Vd,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Zp(Ud,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(hd(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=wd(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=wd(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=wd(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,r):"fanOut"===this.mode?Math.max(1,s):Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Op(`${this.getClassName()} does not support dType ${t}.`);return Fu(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return jo(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Qd.className="VarianceScaling",c.registerClass(Qd);class Jd extends Qd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}Jd.className="GlorotUniform",c.registerClass(Jd);class ef extends Qd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}ef.className="GlorotNormal",c.registerClass(ef);class tf extends Qd{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}tf.className="HeNormal",c.registerClass(tf);class nf extends Qd{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}nf.className="HeUniform",c.registerClass(nf);class rf extends Qd{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}rf.className="LeCunNormal",c.registerClass(rf);class sf extends Qd{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Qd.className}}sf.className="LeCunNormal",c.registerClass(sf);class af extends Gd{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Op("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Ms(()=>{if(e.length<2)throw new Op("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Dd(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=ac.gramSchmidt(t);return e[0]>e[1]&&(n=Vu(n)),ka(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}af.className="Orthogonal",c.registerClass(af);const of={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function uf(e,t={}){return qp(e,c.SerializationMap.getMap().classNameMap,t,"initializer")}function lf(e){return jp(e)}function cf(e){if("string"==typeof e){const t=e in of?of[e]:e;if("GlorotNormal"===t)return new ef;if("GlorotUniform"===t)return new Jd;if("HeNormal"===t)return new tf;if("HeUniform"===t)return new nf;if("LeCunNormal"===t)return new rf;if("LeCunUniform"===t)return new sf;{const e={};return e.className=t,e.config={},uf(e)}}return e instanceof Gd?e:uf(e)}function hf(e){return Array.isArray(e)&&Array.isArray(e[0])}function pf(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function df(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Dp("Expected Tensor length to be 1; got "+e.length);t=e[0]}else t=e;return t}function ff(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Dp("Expected exactly 1 Shape; got "+e.length)}return e}function mf(e){let t=0;for(const n of e)t+=0===n.shape.length?1:n.shape.reduce((e,t)=>e*t);return t}class gf{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=nd(),this.originalName=gd(n=null==n?"Variable":n),this.name=yd(this.originalName),this.trainable_=r,this.constraint=s,this.val=zu(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function yf(e){return e.map(e=>e.read())}function bf(e){e.forEach(e=>{e[0].write(e[1])})}class xf{constructor(e){this.dtype=e.dtype,this.shape=e.shape,this.ndim=null!=e.shape?e.shape.length:e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class wf{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=nd(),null!=a&&(this.originalName=gd(a),this.name=yd(this.originalName)),this.rank=t.length}}let vf=0;class kf{constructor(e,t){this.callArgs=t,this.id=vf++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)e.push(null!=t?t.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Sf=0;class If extends c.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Sf++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Up(e)+"_"+sd(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=e.weights?e.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Fp(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Dp(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Wp(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Wp(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new _p("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new _p("Layer "+this.name+" is not connected, no input to return.");return Wp(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new _p("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new _p("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Wp(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Vp(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Vp(this.inputSpec);if(e.length!==t.length)throw new Dp(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: `+e);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Dp(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Dp(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Dp(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Dp(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Dp(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new Dp(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Vp(e);let r=!0;for(const a of n)if(!(a instanceof wf)){r=!1;break}let s=!0;for(const a of n)if(a instanceof wf){s=!1;break}if(r===s)throw new Dp("Arguments to apply() must be all SymbolicTensors or all Tensors");return md(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Vp(e))t.push(n.shape);this.build(Wp(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=Vp(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Wp(a),null!=this.activityRegularizer)throw new Op("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=Vp(e);const t=[];for(const n of e)t.push(n.shape);return Wp(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new wf(a,n,this,Vp(e),t,this.name,r)):new wf(a,r,this,Vp(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new Op("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(e)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let t=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new _p(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new _p(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Fp(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return mf(this.weights)}build(e){this.built=!0}getWeights(e=!1){return yf(e?this.trainableWeights:this.weights)}setWeights(e){Ms(()=>{const t=this.weights;if(t.length!==e.length)throw new Dp(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=yf(t);for(let a=0;a<s.length;++a){const i=s[a],o=t[a],u=e[a];if(!r.arraysEqual(i.shape,u.shape))throw new Dp(`Layer weight shape ${i.shape} not compatible with provided weight shape `+u.shape);n.push([o,u])}bf(n)})}addWeight(e,t,n,r,s,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Dp(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=o?o():cf("zeros"));const u=r.apply(t,n),l=new gf(u,n,e,a,i);return u.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Vp(e),null!=this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=Vp(e);t=Vp(t),n=Vp(n),r=Vp(r),s=pf(s),a=pf(a);const u=[],l=[],c=[];for(const h of o)u.push(h.sourceLayer),l.push(h.nodeIndex),c.push(h.tensorIndex);new kf({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}class Nf extends If{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:sd("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Dp("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Dp("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Dp("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new wf(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new kf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Dp("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}Nf.className="InputLayer",c.registerClass(Nf);class Cf{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Cf)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Dp(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Mr(t,e.dtype)}catch(K1){throw new Dp(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof wf){if(null==this.id2Value[e.id])throw new Dp("Nonexistent key: "+e.name);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Dp("Feed dict has no SymbolicTensor name: "+e);return this.id2Value[t]}}getMask(e){if(e instanceof wf){if(null==this.id2Value[e.id])throw new Dp("Nonexistent key: "+e.name);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Dp("Feed dict has no SymbolicTensor name: "+e);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Ps(this.id2Mask)}}const Tf=new Pp,Ef=new Pp;function Af(e,t,n,s){const a=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],u=o.map(e=>e.name),l=[],c=t.names();for(const r of u)-1!==c.indexOf(r)?l.push(t.getValue(r)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=u.join(",")+"|"+t.names().sort().join(",");let p,d=Tf.get(h);if(null==d){const e=function(e,t){r.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=$f(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=$f(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:Rf(s)}}(o,t);d=e.sorted,p=e.recipientCounts,Tf.put(h,d),Ef.put(h,p)}p={},a||Object.assign(p,Ef.get(h));const f=new Cf(t);for(let r=0;r<d.length;++r){if(null!=s){const e=Os().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=d[r],i=e.sourceLayer;if(i instanceof Nf)continue;const o=[],c=[],h=[];let m=!1;for(const n of e.inputs){const e=f.getValue(n),r=f.getMask(n);o.push(e),c.push(r),null!=r&&(m=!0),a||(p[n.name]--,0!==p[n.name]||t.hasKey(n)||-1!==u.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||h.push(e))}m&&((n=n||{}).mask=c[0]);const g=Vp(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=_f(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=u.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}a||Ps(h)}return f.disposeMasks(),i?l:l[0]}function Rf(e){const t={};for(const n in e)t[n]=e[n].size;return t}function $f(e,t){const n=new Set,r=[],s={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function _f(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Ff(e,t){return Ms(()=>Ni(Ti(ka(e,e),t,!0)))}gt().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,(function(e){null!=Tf&&Tf.setMaxEntries(e),null!=Ef&&Ef.setMaxEntries(e)}));class Df extends c.Serializable{getConfig(){return{}}}class Of extends Df{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ms(()=>{const t=Ff(e,this.axis),n=Pa(t,0,this.maxValue);return ka(e,ai(n,js(Nd(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Of.className="MaxNorm",c.registerClass(Of);class Mf extends Df{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ms(()=>ai(e,js(Nd(),Ff(e,this.axis))))}getConfig(){return{axis:this.axis}}}Mf.className="UnitNorm",c.registerClass(Mf);class Pf extends Df{apply(e){return Yo(e)}}Pf.className="NonNeg",c.registerClass(Pf);class zf extends Df{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Ms(()=>{const t=Ff(e,this.axis),n=js(ka(this.rate,Pa(t,this.minValue,this.maxValue)),ka(1-this.rate,t));return ka(e,ai(n,js(Nd(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}zf.className="MinMaxNorm",c.registerClass(zf);const Lf={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Bf(e){return jp(e)}function Wf(e,t={}){return qp(e,c.SerializationMap.getMap().classNameMap,t,"constraint")}function Vf(e){return null==e?null:"string"==typeof e?Wf({className:e in Lf?Lf[e]:e,config:{}}):e instanceof Df?e:Wf(e)}async function Uf(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Ps(r)}}function Gf(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Hf;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Hf||(Hf={}));class jf{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class qf{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Kf extends jf{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const r in t){const e=t[r];if("number"==typeof e)this.totals.hasOwnProperty(r)||(this.totals[r]=0),this.totals[r]=this.totals[r]+e*n;else{let t;r in this.totals?t=this.totals[r]:this.totals[r]=0;const s=Ms(()=>js(this.totals[r],ka(e,n)));this.totals[r]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:Ms(()=>{const e=ka(ai(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),zs(t[n])}))}}class Xf extends jf{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)"number"!=typeof r[a]&&(e.push(r[a].data()),t.push(s),n.push(a))}const r=await Promise.all(e);for(let s=0;s<r.length;++s)this.history[t[s]][n[s]].dispose(),this.history[t[s]][n[s]]=r[s][0]}}class Yf extends jf{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||xc,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");r.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,a=null!=n?n():r.now();return(...i)=>{const o=null!=n?n():r.now();return o-a<t||(a=o,s=e(...i)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await Uf(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Uf(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Uf(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Uf(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Uf(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):r.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Uf(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Uf(e),await this.trainEnd(e))}}function Zf(e,t){return null==e&&(e={}),e instanceof jf?[e]:Array.isArray(e)&&e[0]instanceof jf?e:Vp(e).map(e=>new Yf(e,t))}class Qf{constructor(){}static registerCallbackConstructor(e,t){r.assert(e>=0&&Number.isInteger(e),()=>"Verbosity level is expected to be an integer >= 0, but got "+e),Qf.checkForDuplicate(t),null==Qf.constructors[e]&&(Qf.constructors[e]=[]),Qf.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Qf.constructors)Qf.constructors[+t].forEach(t=>{if(t===e)throw new Dp("Duplicate callback constructor.")})}static clear(){Qf.constructors={}}static createCallbacks(e){const t=[];for(const n in Qf.constructors){const r=+n;e>=r&&t.push(...Qf.constructors[r])}return t.map(e=>new e)}}function Jf(e,t,n,r,s,a,i,o,u){const l=new Xf,c=[new Kf,...Qf.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new qf(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function em(e,t={},n=!1){return qp(e,c.SerializationMap.getMap().classNameMap,t,"layer",n)}function tm(e,t){return Ms(()=>{"float32"!==e.dtype&&(e=Mr(e,"float32"));const n=Ti(Pd(e),t,!0),r=Ma(n.shape,Nd()),s=Ni(ho(n,r));return ai(e,s)})}function nm(e,t){return Ms(()=>po(Pd(Ji(t,e)),-1))}function rm(e,t){return Ms(()=>po(Us(Ji(t,e)),-1))}function sm(e,t){return Ms(()=>{const n=Ji(e,t),r=Pa(Us(e),Nd(),Number.MAX_VALUE),s=Us(ai(n,r));return ka(100,po(s,-1))})}function am(e,t,n=!1){return Ms(()=>{if(n)t=mu(t);else{const e=Ti(t,t.shape.length-1,!0);t=ai(t,e)}return t=Pa(t,Nd(),1-Nd()),Yi(Ti(ka(Mr(e,"float32"),Ki(t)),t.shape.length-1))})}function im(e,t,n=!1){return Ms(()=>{const r=Mr(Oi(function(e){const t=[wd(e.shape)];return ya(e,t)}(e)),"int32"),s=(t=Pa(t,Nd(),1-Nd())).shape;return am(ya(Io(r,s[s.length-1]),s),t,n)})}function om(e,t){return Ms(()=>{let n;return n=Pa(t,Nd(),1-Nd()),n=Ki(ai(n,Ji(1,n))),po(function(e,t){if(!r.arraysEqual(e.shape,t.shape))throw new Dp(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Ms(()=>{const n=Yo(t),r=Yi(Us(t));return js(Ji(n,ka(t,e)),Xi(Ri(r)))})}(e,n),-1)})}function um(e,t){return Ms(()=>{const n=tm(e,-1),r=tm(t,-1),s=ka(n,r);return Yi(Ti(s,-1))})}Qf.constructors={};const lm={meanSquaredError:nm,meanAbsoluteError:rm,meanAbsolutePercentageError:sm,meanSquaredLogarithmicError:function(e,t){return Ms(()=>{const n=Pa(t,Nd(),Number.MAX_VALUE),r=Ki(js(1,n)),s=Pa(e,Nd(),Number.MAX_VALUE),a=Ki(js(1,s));return po(Pd(Ji(r,a)),-1)})},squaredHinge:function(e,t){return Ms(()=>{const n=ho(0,Ji(1,ka(e,t)));return po(Pd(n),-1)})},hinge:function(e,t){return Ms(()=>{const n=ho(0,Ji(1,ka(e,t)));return po(n,-1)})},categoricalHinge:function(e,t){return Ms(()=>{const n=Ti(ka(e,t),-1),r=ki(ka(Ji(1,e),t),-1);return ho(0,js(1,Ji(r,n)))})},logcosh:function(e,t){return Ms(()=>{const n=Math.log(2),r=Ji(t,e),s=Ji(js(r,Zi(ka(-2,r))),n);return po(s,-1)})},categoricalCrossentropy:am,sparseCategoricalCrossentropy:im,binaryCrossentropy:om,kullbackLeiblerDivergence:function(e,t){return Ms(()=>{const n=Pa(e,Nd(),1),r=Pa(t,Nd(),1);return Ti(ka(e,Ki(ai(n,r))),-1)})},poisson:function(e,t){return Ms(()=>{const n=Ki(js(Nd(),t));return po(Ji(t,ka(e,n)),-1)})},cosineProximity:um};function cm(e){if("string"==typeof e){if(e in lm)return lm[e];let t="Unknown loss "+e;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Dp(t)}return e}function hm(e,t){return Ms(()=>{const n=ka(.5,No(t)),r=Cd(Pi(t,n),e.dtype);return po(ii(e,r),-1)})}function pm(e,t){return Ms(()=>Cd(ii(Ys(e,-1),Ys(t,-1)),"float32"))}function dm(e,t){return om(e,t)}function fm(e,t){return e.rank===t.rank&&(e=ku(e,[e.rank-1])),(t=Ys(t,-1)).dtype!==e.dtype&&(t=Mr(t,e.dtype)),Mr(ii(e,t),"float32")}const mm=am,gm=im,ym={binaryAccuracy:hm,categoricalAccuracy:pm,precision:function(e,t){return Ms(()=>{const n=function(e,t){return Ms(()=>Mr(Ti(no(ii(e,1),ii(t,1))),"float32"))}(e,t),r=function(e,t){return Ms(()=>Mr(Ti(no(ii(e,0),ii(t,1))),"float32"))}(e,t),s=js(n,r);return Mr(oi(Pi(s,0),ai(n,s),0),"float32")})},categoricalCrossentropy:mm,sparseCategoricalCrossentropy:gm,mse:nm,MSE:nm,mae:rm,MAE:rm,mape:sm,MAPE:sm,cosine:um};function bm(e){if("string"==typeof e&&e in ym)return ym[e];if("string"!=typeof e&&null!=e)return e;throw new Dp("Unknown metric "+e)}function xm(e){if(Lp(null!==e,"Unknown LossOrMetricFn "+e),"string"==typeof e)return e;{let t;for(const n of Object.keys(lm))if(lm[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(ym))if(ym[n]===e){t=n;break}return void 0!==t?t:e.name}}function wm(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const n=Object.keys(t);for(const r of n){if("string"!=typeof r)return!1;if(!e(t[r]))return!1}return!0}if(Array.isArray(t)){for(const n of t)if(!e(n))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function vm(e,t,n=console.log){let r="";for(let s=0;s<e.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=e[s],r=r.slice(0,t[s]),r+=" ".repeat(t[s]-r.length);n(r)}function km(e,t,n){let r,s;try{s=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(K1){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(K1){r="multiple"}vm([`${e.name} (${e.getClassName()})`,s,r,e.countParams().toString()],t,n)}function Sm(e,t,n,r){let s,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(K1){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(K1){s="multiple"}const i=[];for(const c of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(c)))for(let e=0;e<c.inboundLayers.length;++e)i.push(`${c.inboundLayers[e].name}[${c.nodeIndices[e]}][${c.tensorIndices[e]}]`);const o=e.name,u=e.getClassName(),l=0===i.length?"":i[0];vm([`${o} (${u})`,a,s,e.countParams().toString(),l],t,r);for(let c=1;c<i.length;++c)vm(["","","","",i[c]],t,r)}function Im(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}class Nm extends If{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=sd(e)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],this.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],Xp(this.inputs).length!==this.inputs.length)throw new Dp("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(e=>e.name));Xp(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(e=>e.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.nodeIndex,t=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(t)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;Lp(0===t,"input layer has >1 nodes"),Lp(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof Nf))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${y} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new Fp(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(Nm.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let a=0;a<c;a++)o(l.inputTensors[a],t,n,l.inboundLayers[a],l.nodeIndices[a],l.tensorIndices[a]);for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const y of this.outputs)o(y,u,l);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];e=Math.max(e,null==r[y.outboundLayer.id]?0:r[y.outboundLayer.id]),r[y.outboundLayer.id]=e,s[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let r=0;r<y.inboundLayers.length;r++){const s=y.inboundLayers[r].inboundNodes[y.nodeIndices[r]];t[s.id]=Math.max(e+1,null==t[s.id]?0:t[s.id]),n[s.id]=s}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const p={};for(const y in r){const e=r[y];e in p||(p[e]=[]),p[e].push(s[y])}let d=Object.keys(p).map(e=>parseInt(e,10)).sort(Kp);this.layers=[];for(const y of d){const e=p[y];e.sort((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof Nm&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(e=>parseInt(e,10)).sort(Kp);const f=this.inputs.slice(),m=[];for(const y of d)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Fp("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(e=>e.name);for(const y of g){const e=g.filter(e=>e===y).length;if(1!==e)throw new Fp(`The name "${y}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new kf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Dp("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const a of this.layers)for(const e of a.weights){if(null!=n[e.originalName])throw new Dp("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const a in e){let r=a;if(null==n[a]){const e=a.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])s.push([n[r],e[a]]);else if(t)throw new Dp("Provided weight data has no target variable: "+a);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Dp(`${e.length} of ${r} weights are not set: `+e)}bf(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.21.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=function e(t,n){if(null==t)return null;if("string"==typeof t)return Up(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const r=[],s=t.length;for(let a=0;a<s;++a){const s=t[a];Im(n,a,s)?r.push(s):r.push(e(s,n))}return r}{const n={};for(const r of Object.keys(t)){const s=t[r];n[Up(r)]="name"!==r&&"className"!==r||"string"!=typeof s?e(s,r):s}return n}}(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Ms(()=>{e=Vp(e);const n=new Cf;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Af(this.outputs,n,t)})}computeMask(e,t){return Ms(()=>{let n;return e=Vp(e),n=null==t?zp(null,e.length):Vp(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=pf(e);if(t.length!==this.inputLayers.length)throw new Dp(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++)n[this.inputLayers[i].name+"_0_0"]=t[i];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Kp);if(r.length>1)for(const i of r){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;const r=[];for(let i=0;i<t.inboundLayers.length;i++)r.push(n[`${t.inboundLayers[i].name}_${t.nodeIndices[i]}_${t.tensorIndices[i]}`]);const s=pf(e.computeOutputShape(Wp(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++)n[`${e.name}_${a}_${t}`]=s[t]}}const s=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const e=a[i];Lp(e in n),s.push(n[e])}return Wp(s)}runInternalGraph(e,t){null==t&&(t=zp(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o)n[this.inputs[o].id]=[e[o],t[o]];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Kp);for(const o of r){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=Vp(e.call(t,l)),u=Vp(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(e=>e[0]),i=a.map(e=>e[1]),null==l.mask&&(l.mask=i),o=Vp(e.call(r,l)),u=Vp(e.computeMask(r,i));if(e.activityRegularizer)throw new Op("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e)n[s[e].id]=[o[e],u[e]]}}}const s=[],a=[],i=[];for(const o of this.outputs){Lp(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),s.push(e),a.push(t)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const r of this.layers){n=r instanceof Nm?1:0;for(let e=0;e<r.inboundNodes.length;e++){const s=Nm.nodeKey(r,e);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Dp(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Dp("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===e)return n;throw new Dp("No such layer: "+e)}calculateLosses(){return Ms(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=Nm.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),r=a.getConfig(),s=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],r=Nm.nodeKey(a,n);let i={};if(this.containerNodes.has(r)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(K1){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: `+e.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(e.inboundLayers.length>0){const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],a=e.tensorIndices[r];let o=t[Nm.nodeKey(s,e.nodeIndices[r])];null==o&&(o=0),n.push([s.name,o,a,i])}s.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=r,i.inboundNodes=s,n.push(i)}e.layers=n;const r=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=Nm.nodeKey(e,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let s=t[n];null==s&&(s=0),r.push([e.name,s,this.inputLayersTensorIndices[a]])}e.inputLayers=r;const s=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=Nm.nodeKey(e,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let r=t[n];null==r&&(r=0),s.push([e.name,r,this.outputLayersTensorIndices[a]])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=u)return void i(e,t);n.push(c.inboundNodes[u].outputTensors[l])}n.length>0&&e.apply(Wp(n),r)}function u(e){const n=e.name,a=em(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new Dp("Corrupted configuration, expected array for nodeData: "+e);i(a,e)})}const l=t.name,c=t.layers;for(const m of c)u(m);for(;!Yp(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const m of d){const e=m[0],t=m[1],n=m[2];Lp(e in s),h.push(s[e].inboundNodes[t].outputTensors[n])}const f=t.outputLayers;for(const m of f){const e=m[0],t=m[1],n=m[2];Lp(e in s),p.push(s[e].inboundNodes[t].outputTensors[n])}return new e({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new Dp("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Ms(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function Cm(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided classWeight is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{n.push(t in e?e[t]:null)}),n}throw new Error(`The model has multiple (${r}) outputs, so classWeight must be either an array with ${r} elements or an object with ${t} keys. Provided classWeight not understood: ${JSON.stringify(e)}`)}(e,t)}async function Tm(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Ms(()=>{if(1===e.shape.length)return Pr(e);if(2===e.shape.length){if(e.shape[1]>1)return Ys(e,1);if(1===e.shape[1])return ya(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await t.data());Ps(t);const s=[];return r.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])}),Tu(s,"float32")}return null}function Em(e,t){return ka(e,t)}function Am(e,t){let n,s;n=t.xs,s=t.ys,r.assert(null!=n&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+t);const a=Rm("input",e.inputNames,n),i=Rm("output",e.outputNames,s),o=a[0].shape[0];r.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(e.inputNames)+")"),r.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(e.outputNames)+")");for(let u=0;u<a.length;u++)r.assert(a[u].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[u]} has ${a[u].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let u=0;u<i.length;u++)r.assert(i[u].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[u]} has ${i[u].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function Rm(e,t,n){if(n instanceof ln)return[n];if(Array.isArray(n))return r.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const r=[];for(const s of t){if(null==n[s])throw new Dp(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}function $m(e){return"function"==typeof e.iterator}function _m(e){r.assert(e>0&&Number.isInteger(e),()=>"batchSize is required to be a positive integer, but got "+e)}function Fm(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>Ed(e,t,n-t)):Ed(e,t,n-t)}function Dm(e,t){return Ms(()=>null==e?null:Array.isArray(e)?e.map(e=>Dm(e,t)):Md(e,"int32"===t.dtype?t:Mr(t,"int32")))}function Om(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function Mm(e){const t=[];e instanceof ln&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(Td(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function Pm(e,t){if(null==e)return;const n=[];if(t instanceof ln)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const s in t)n.push(t[s].id);const r=[];if(e instanceof ln)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&r.push(e)});else if(null!=e)for(const s in e){const t=e[s];-1===n.indexOf(t.id)&&r.push(t)}r.forEach(e=>{e.isDisposed||e.dispose()})}function zm(e){return Array.isArray(e)}function Lm(e){return!function(e){return e instanceof ln}(e)&&!zm(e)}function Bm(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(zm(e)&&e.length>0)t=!0;else if(Lm(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Dp(`Error when checking model ${s} expected no data, but got `+e)}return[]}if(null==e)return t.map(e=>null);let a;if(Lm(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Dp(`No data provided for "${n}". Need data for each key in: `+t);a.push(e[n])}}else if(zm(e)){if((e=e).length!==t.length)throw new Dp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): `+e);a=e}else{if(e=e,t.length>1)throw new Dp(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+e.shape);a=[e]}if(a=Mm(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Dp(`Error when checking ${s}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape `+e.shape);for(let t=0;t<n[i].length;++t){if(0===t&&!r)continue;const a=e.shape[t],o=n[i][t];if(null!=o&&o>=0&&a!==o)throw new Dp(s+" expected a batch of elements where each "+`example has shape [${n[i].slice(1,n[i].length)}] `+`(i.e.,tensor shape [*,${n[i].slice(1,n[i].length)}])`+` but the ${s} received an input with ${e.shape[0]}`+` examples, each with shape [${e.shape.slice(1,e.shape.length)}]`+` (tensor shape [${e.shape}])`)}}return a}function Wm(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Dp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Dp(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(e.shape)+".");a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Dp(`Error when checking ${s}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape `+JSON.stringify(e.shape));for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=e.shape[a],u=n[i][a];if(null!=u&&u!==o)throw new Dp(`Error when checking ${s}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class Vm extends Nm{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Dp("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const s in e.nodesByDepth)n.push(e.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}r.push(...s)}if(t)for(const s of e.layers){let e=!1;for(const n of s.inboundNodes)if(-1!==r.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),vm(a,n,r),r("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)s?km(o[c],n,r):Sm(o[c],n,i,r),r((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;return t=mf(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights),t}(e),l=mf(e.nonTrainableWeights);r("Total params: "+(u+l)),r("Trainable params: "+u),r("Non-trainable params: "+l),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>yc.adagrad(.01),Adadelta:()=>yc.adadelta(1,.95,Nd()),Adam:()=>yc.adam(.001,.9,.999,Nd()),Adamax:()=>yc.adamax(.002,.9,.999,Nd(),0),RMSProp:()=>yc.rmsprop(.001,.9,0,Nd()),SGD:()=>yc.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Dp("Unknown Optimizer "+e)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Vs))throw new Dp("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Dp(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>cm(e))}else{const n=cm(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Dp(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(cm(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],md("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+e);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};md("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===om?-1!==["accuracy","acc"].indexOf(i)?r=hm:-1!==["crossentropy","ce"].indexOf(i)&&(r=dm):this.lossFunctions[e]===im?-1!==["accuracy","acc"].indexOf(i)?r=fm:-1!==["crossentropy","ce"].indexOf(i)&&(r=gm):-1!==["accuracy","acc"].indexOf(i)?r=pm:-1!==["crossentropy","ce"].indexOf(i)&&(r=mm),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=bm(i);a=e,n=""+xm(i)}let t;md(n,()=>{t=a}),s(e,n,t)}})(r[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;_m(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);return this.makeTestFunction(),Wp(this.testLoop(this.testFunction,a,r,n.verbose,n.steps))}finally{Pm(s[0],e),Pm(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let i=[];if(n.verbose>0)throw new Op("Verbose mode is not implemented yet.");r.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const o="function"==typeof t.next?t:await t.iterator();let u=0,l=0;for(;!s||l<n.batches;){const t=await o.next();if(i=Ms(()=>{if(t.value){const{xs:n,ys:r}=Am(e,t.value),s=n.concat(r),o=Ms(()=>a(s));if(Ps(s),0===l)for(let e=0;e<o.length;++e)i.push(Ws(0));const c=s[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=i[e];i[e]=Ms(()=>js(i[e],ka(c,t))),l>0&&Ps(n)}Ps(o),u+=c,++l}return i}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let r=0;r<i.length;++r){const e=i[r];i[r]=ai(i[r],u),Ps(e)}return Wp(i)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new Dp(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+t)}else{if(null==e)throw new Dp("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Dp("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=this.retrieveSymbolicTensors(n?t:[t]),s=new Cf;if(e instanceof ln&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Dp(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(const i of this.inputs){const t=e[i.name];if(null==t)throw new Dp("No value is provided for the model's input "+i.name);s.add(i,t)}const a=Af(r,s);return n?a:a[0]}retrieveSymbolicTensors(e){const t=zp(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(e=>e.name);for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,r)=>{null==t&&n.push(e[r])}),new Dp("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return t}predictLoop(e,t=32,n=!1){return Ms(()=>{const r=this.checkNumSamples(e);if(n)throw new Op("Verbose predictLoop() is not implemented yet.");const s=Om(r,t),a=this.outputs.map(e=>[]);for(let t=0;t<s.length;++t)Ms(()=>{const n=Fm(e,s[t][0],s[t][1]),r=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)r.push({key:this.inputs[e],value:n[e]});else r.push({key:this.inputs[0],value:n});const a=new Cf(r);return Af(this.outputs,a)}).forEach((e,t)=>a[t].push(e));return Wp(a.map(e=>wa(e,0)))})}predict(e,t={}){const n=Mm(e);Wm(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return _m(r),this.predictLoop(n,r)}finally{Pm(n,e)}}predictOnBatch(e){Wm(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Fp("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let r=0;r<this.feedOutputShapes.length;++r){const e=this.feedOutputShapes[r];a.push(this.feedLossFns[r]===im?e.slice(0,e.length-1).concat([1]):e)}if(function(e,t,n){const s=Xp(e.map(e=>e.shape[0]));s.sort();const a=Xp(t.map(e=>e.shape[0]));if(a.sort(),s.length>1)throw new Dp("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(e=>e.shape)));if(a.length>1)throw new Dp("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(e=>e.shape)));if(s.length>0&&a.length>0&&!r.arraysEqual(s,a))throw new Dp(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=Bm(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Bm(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const r=[nm,om,am];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===am&&1===a.shape[a.shape.length-1])throw new Dp(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new Dp(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Dp(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=Cm(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await Tm(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,r=0,s){return Ms(()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new Op("Verbose mode is not implemented yet.");if(null!=s)throw new Op("steps mode in testLoop() is not implemented yet");{const r=Om(a,n),s=Tu(Sd(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=Ed(s,a,o-a),l=Dm(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(Ws(0));for(let e=0;e<c.length;++e)i[e]=js(i[e],ka(o-a,c[e]))}for(let e=0;e<i.length;++e)i[e]=ai(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;Bp(e,r)>1&&(s+="_"+Bp(e.slice(0,n),r)),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Cf(e),o=Af(this.outputs,i,{training:!0});let u;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(r[n],o[n]);null!=s[n]&&(e=Em(e,s[n]));const a=po(e);t.push(a),u=0===n?e:js(u,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][1];e=po((0,this.metricsTensors[n][0])(r[t],o[t]))}zs(e),a.push(e)}return u=po(u),this.calculateLosses().forEach(e=>{u=js(u,e)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Ms(()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new Cf(a),o=Af(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=po((0,this.lossFunctions[e])(s[e],o[e]));n=0===e?r:js(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][1],r=po((0,this.metricsTensors[e][0])(s[n],o[n]));t.push(r)}return t})}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,u,l,c,h,p,d;e.isTraining=!0;try{const f=null==s.batchSize?32:s.batchSize;_m(f);const m=!1,g=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,m,f);a=g[0],i=g[1],d=g[2];let y,b=!1;if(null!=s.validationData&&s.validationData.length>0){if(b=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Op("validationData including sample weights is not supported yet."):new Dp("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");l=s.validationData[0],c=s.validationData[1];const t=!0,n=await e.standardizeUserData(l,c,null,null,t,f);h=n[0],p=n[1],y=h.concat(p)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){b=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];h=Fm(a,e,t),o=a,a=Fm(a,0,e),p=Fm(i,e,t),u=i,i=Fm(i,0,e),y=h.concat(p)}else null!=s.validationSteps&&(b=!0);const x=a.concat(i).concat(d);e.checkTrainableWeightsConsistency();const w=e.makeTrainFunction(),v=e.getDedupedMetricsNames();let k,S;b?(e.makeTestFunction(),k=e.testFunction,S=v.slice().concat(v.map(e=>"val_"+e))):(k=null,y=[],S=v.slice());const I=Zf(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,a,i,o,u,l,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;null!=l&&null!=c&&(g=!0);const y=e.checkNumSamples(n,a,null,"steps_per_epoch");let b;null!=y&&(b=Sd(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Jf(u,o,i,d,y,null,a,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let v=d;v<i;++v){await x.onEpochBegin(v);const i={};{if("batch"===h)throw new Op("batch shuffling is not implemneted yet");h&&r.shuffle(b);const o=Tu(b),u=Om(y,a);for(let r=0;r<u.length;++r){const h={};if(await x.onBatchBegin(r,h),Ms(()=>{const p=u[r][0],d=u[r][1],f=Ed(o,p,d-p);h.batch=r,h.size=d-p;const m=Dm(n,f),y=t(m);for(let e=0;e<s.length;++e){const t=y[e];h[s[e]]=t,zs(t)}if(r===u.length-1&&g){const t=e.testLoop(l,c,a);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];zs(r),i["val_"+n]=r}}}),await x.onBatchEnd(r,h),Gf(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(v,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,w,x,v,f,s.epochs,s.verbose,I,k,y,s.shuffle,S,s.initialEpoch)}finally{e.isTraining=!1,Pm(a,t),Pm(i,n),Pm(o,t),Pm(u,n),Pm(h,l),Pm(p,c),null!=d&&Ps(d)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(r.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),r.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),r.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),r.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),r.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if($m(n.validationData))r.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const e=function(e){if(3===e.length)throw new Op("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}const u=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let c;c=a?l.slice().concat(l.map(e=>"val_"+e)):l.slice();const h=Zf(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=Jf(h,p,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const r={};await d.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=Am(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Cm(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Tm(s[e],null,t[e]))}const o=r.concat(s).concat(i),p=u(o);Ps(o);for(let e=0;e<l.length;++e){const t=p[e];a[l[e]]=t,zs(t)}await d.onBatchEnd(h,a),Gf(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=$m(n.validationData)?Vp(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Vp(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)r["val_"+e.metricsNames[n]]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,r),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return Ps(a),Pm(n[0],e),Pm(n[1],t),Wp(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let a=0;a<r.length;++a)n&&!r[a].trainable||t.push({name:r[a].originalName,tensor:s[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Os().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Os().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Up(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>Up(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Up(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Up(xm(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Up(xm(e)));{const e={};for(const t in this.metrics)e[t]=Up(xm(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=em(function e(t,n){if(null===t)return null;if("string"==typeof t)return Gp(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const r=[],s=t.length;for(let a=0;a<s;++a){const s=t[a];Im(n,a,s)?r.push(s):r.push(e(s,n))}return r}{const n={};for(const r of Object.keys(t)){const s=t[r];if("name"===r&&"string"==typeof s)n[r]=s;else{const t=Gp(r);n[t]=e(s,t)}}return n}}(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Gp(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>Gp(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Gp(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map(e=>Gp(e));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Gp(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=i.getSaveHandlers(e);if(0===t.length)throw new Dp(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Dp(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Dp("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await i.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.21.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await i.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=i.concatenateArrayBuffers([n.data,t])}return null!=this.userDefinedMetadata&&(wm(this.userDefinedMetadata,this.name,!0),r.userDefinedMetadata=this.userDefinedMetadata),r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){wm(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Vm.className="Model",c.registerClass(Vm);class Um extends Vm{}Um.className="Functional",c.registerClass(Um);class Gm extends Vm{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:sd("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new Dp("Negative dimension size caused by adding layer "+e.name+" with input shape ["+e.inboundNodes[0].inputTensors[0].shape+"]")}add(e){const t=e instanceof Gm||e instanceof Vm;let n;if(t){if(n=e,1!==n.outputs.length)throw new Dp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Dp("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Dp("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Dp("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Nf({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Dp(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Dp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,n,r){if((null==n||null!=r&&r>0)&&(n=t.sourceLayer,r=t.nodeIndex),0===n.inboundNodes.length)return[t];{const t=n.inboundNodes[r];if(0===t.inboundLayers.length)return t.inputTensors;{const n=[];for(let r=0;r<t.inboundLayers.length;r++){const s=e(t.inputTensors[r],t.inboundLayers[r],t.nodeIndices[r]);for(const e of s)-1===n.indexOf(e)&&n.push(e)}return n}}}(this.outputs[0])}this.inboundNodes=[],new kf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:zp(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(ff(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Vm({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Fp("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Fp("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Fp("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Fp("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Dp("Legacy serialization format not supported yet.");a=t}else r.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof Gm))throw new Op("Sequential.fromConfig called on non-Sequential input: "+o);for(const r of a){const e=em(r,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),o.add(e)}return o}set stopTraining(e){if(null==this.model)throw new Dp("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Dp("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Gm.className="Sequential",c.registerClass(Gm);class Hm extends c.Serializable{getConfig(){return{}}}class jm extends Hm{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Op(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return pi(e)}(e,t)}}jm.className="elu",c.registerClass(jm);class qm extends Hm{apply(e){return au(e)}}qm.className="selu",c.registerClass(qm);class Km extends Hm{apply(e){return Yo(e)}}Km.className="relu",c.registerClass(Km);class Xm extends Hm{apply(e){return Ms(()=>yo(6,Yo(e)))}}Xm.className="relu6",c.registerClass(Xm);class Ym extends Hm{apply(e){return e}}Ym.className="linear",c.registerClass(Ym);class Zm extends Hm{apply(e){return Sa(e)}}Zm.className="sigmoid",c.registerClass(Zm);class Qm extends Hm{apply(e){return function(e){return Ms(()=>{const t=js(.5,ka(.2,e));return Pa(t,0,1)})}(e)}}Qm.className="hardSigmoid",c.registerClass(Qm);class Jm extends Hm{apply(e){return Zi(e)}}Jm.className="softplus",c.registerClass(Jm);class eg extends Hm{apply(e){return function(e){return Ms(()=>ai(e,js(Us(e),1)))}(e)}}eg.className="softsign",c.registerClass(eg);class tg extends Hm{apply(e){return Na(e)}}tg.className="tanh",c.registerClass(tg);class ng extends Hm{apply(e,t=-1){return mu(e,t)}}ng.className="softmax",c.registerClass(ng);class rg extends Hm{apply(e,t=-1){return eo(e,t)}}rg.className="logSoftmax",c.registerClass(rg);class sg extends Hm{apply(e,t=1){return Ms(()=>ka(Sa(ka(e,t)),e))}}sg.className="swish",c.registerClass(sg);class ag extends Hm{apply(e){return Ms(()=>ka(e,Na(Zi(e))))}}function ig(e){return e.getClassName()}function og(e,t={}){return qp(e,c.SerializationMap.getMap().classNameMap,t,"activation")}function ug(e){if(null==e)return og({className:"linear",config:{}});if("string"==typeof e){const t={};return t.className=e,t.config={},og(t)}return e instanceof Hm?e:og(e)}ag.className="mish",c.registerClass(ag);class lg extends c.Serializable{}class cg extends lg{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+e)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Ms(()=>{let t=fo([1]);return this.hasL1&&(t=js(t,Ti(ka(this.l1,Us(e))))),this.hasL2&&(t=js(t,Ti(ka(this.l2,Pd(e))))),ya(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}cg.className="L1L2",c.registerClass(cg);const hg={l1l2:"L1L2"};function pg(e){return jp(e)}function dg(e,t={}){return qp(e,c.SerializationMap.getMap().classNameMap,t,"regularizer")}function fg(e){return null==e?null:"string"==typeof e?dg({className:e in hg?hg[e]:e,config:{}}):e instanceof lg?e:dg(e)}class mg extends If{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=df(e);let n=Yo(e);return null!=this.maxValue&&(n=Pa(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}mg.className="ReLU",c.registerClass(mg);class gg extends If{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=df(e);return Ui(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}gg.className="LeakyReLU",c.registerClass(gg);class yg extends If{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=cf(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=fg(e.alphaRegularizer),this.alphaConstraint=Vf(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Dp("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=ff(e)).slice(1);if(null!=this.sharedAxes)for(const r of this.sharedAxes)t[r-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let r=1;r<e.length;++r)n[r]=e[r];this.inputSpec=[new xf({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=df(e),Do(e,this.alpha.read())}getConfig(){const e={alphaInitializer:lf(this.alphaInitializer),alphaRegularizer:pg(this.alphaRegularizer),alphaConstraint:Bf(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}yg.className="PReLU",c.registerClass(yg);class bg extends If{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Op(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=df(e);return pi(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}bg.className="ELU",c.registerClass(bg);class xg extends If{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=df(e);return ka(n,Mr(Pi(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}xg.className="ThresholdedReLU",c.registerClass(xg);class wg extends If{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new ng).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=df(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function vg(e,t,n){if("number"==typeof e)return zp(e,t);if(e.length!==t)throw new Dp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new Dp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number `+a)}return e;var r}function kg(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Sg(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+kd([n-t,0]);else{if("same"!==r)throw new Dp(`Unsupport padding mode: ${r}.`);e*=t}return e}function Ig(e,t){return Ms(()=>(hd(t),"channelsFirst"===t?Vu(e,[0,2,3,1]):e))}function Ng(e,t){return Ms(()=>(hd(t),"channelsFirst"===t?Vu(e,[0,2,3,4,1]):e))}function Cg(e,t,n,r=[1,1],s="valid",a,i,o=null){return Ms(()=>{if(null==a&&(a="channelsLast"),hd(a),3!==e.rank&&4!==e.rank)throw new Dp(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Dp(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=Ig(e,a);if("causal"===s)throw new Op("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=h.conv2d({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Vu(u,[0,3,1,2])),u})}wg.className="Softmax",c.registerClass(wg);class Tg extends If{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Tg.verifyArgs(t),this.rank=e,Jp(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Op(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=vg(t.kernelSize,e,"kernelSize"),this.strides=vg(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,pd(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,hd(this.dataFormat),this.activation=ug(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=cf(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Vf(t.biasConstraint),this.biasRegularizer=fg(t.biasRegularizer),this.activityRegularizer=fg(t.activityRegularizer),this.dilationRate=vg(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Dp("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Dp("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Dp("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(e){if(Lp("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Qp(e.kernelSize,"number",1,3))throw new Dp(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ig(this.activation),useBias:this.useBias,biasInitializer:lf(this.biasInitializer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),biasConstraint:Bf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Eg extends Tg{constructor(e,t){super(e,t),this.kernel=null,Eg.verifyArgs(t),this.filters=t.filters,Jp(this.filters,"filters"),this.kernelInitializer=cf(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Vf(t.kernelConstraint),this.kernelRegularizer=fg(t.kernelRegularizer)}build(e){e=ff(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Dp("The channel dimension of the input should be defined. Found "+e[t]);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Ms(()=>{let t;e=df(e);const n=null==this.bias?null:this.bias.read(),r=ed(this.activation.getClassName());if(null!=r&&2===this.rank)t=Cg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return Ms(()=>{if(null==a&&(a="channelsLast"),hd(a),3!==e.shape.length)throw new Dp("The input of a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead.");if(3!==t.shape.length)throw new Dp("The kernel for a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new Dp("The bias for a conv1dWithBias operation should be 1, but is "+t.shape.length+" instead");if("channelsFirst"===a&&(e=Vu(e,[0,2,1])),"causal"===s)throw new Op("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Ua(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Ld(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Cg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Op("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return Ms(()=>{if(null==a&&(a="channelsLast"),hd(a),4!==e.rank&&5!==e.rank)throw new Dp("conv3dWithBias expects input to be of rank 4 or 5, but received "+e.rank+".");if(4!==t.rank&&5!==t.rank)throw new Dp("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+e.rank+".");let o=Ng(e,a);if("causal"===s)throw new Op("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=ja(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Ld(o,n)),"channelsFirst"===a&&(o=Vu(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=ff(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let s=0;s<n.length;++s){const e=kg(n[s],this.kernelSize[s],this.padding,this.strides[s],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[s]);t.push(e)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:lf(this.kernelInitializer),kernelRegularizer:pg(this.kernelRegularizer),kernelConstraint:Bf(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Dp("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(e.filters))}}class Ag extends Eg{constructor(e){super(2,e),Ag.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qp(e.kernelSize,"number",1,2))throw new Dp(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Ag.className="Conv2D",c.registerClass(Ag);class Rg extends Eg{constructor(e){super(3,e),Rg.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Dp(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Rg.className="Conv3D",c.registerClass(Rg);class $g extends Ag{constructor(e){if(super(e),this.inputSpec=[new xf({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Dp("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(e){if(4!==(e=ff(e)).length)throw new Dp("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Dp("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new xf({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Ms(()=>{let t=df(e);if(4!==t.shape.length)throw new Dp("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);const n=t.shape;let r,s;"channelsFirst"===this.dataFormat?(r=2,s=3):(r=1,s=2);const a=n[s],i=this.kernelSize[1],o=this.strides[1],u=[n[0],Sg(n[r],this.strides[0],this.kernelSize[0],this.padding),Sg(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Vu(t,[0,2,3,1]));let l=Ha(t,this.kernel.read(),u,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(l=Vu(l,[0,3,1,2])),null!=this.bias&&(l=Ld(l,this.bias.read(),this.dataFormat)),null!=this.activation&&(l=this.activation.apply(l)),l})}computeOutputShape(e){const t=(e=ff(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=Sg(t[r],o,a,this.padding),t[s]=Sg(t[s],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}$g.className="Conv2DTranspose",c.registerClass($g);class _g extends Rg{constructor(e){if(super(e),this.inputSpec=[new xf({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Dp("Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(e){if(5!==(e=ff(e)).length)throw new Dp("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Dp("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new xf({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Ms(()=>{let t=df(e);if(5!==t.shape.length)throw new Dp("Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);const n=t.shape;let r,s,a;"channelsFirst"===this.dataFormat?(a=2,r=3,s=4):(a=1,r=2,s=3);const i=n[r],o=n[s],u=this.kernelSize[1],l=this.kernelSize[2],c=this.strides[1],h=this.strides[2],p=[n[0],Sg(n[a],this.strides[0],this.kernelSize[0],this.padding),Sg(i,c,u,this.padding),Sg(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Vu(t,[0,2,3,4,1]));let d=Ka(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Vu(d,[0,4,1,2,3])),null!==this.bias&&(d=Ld(d,this.bias.read(),this.dataFormat)),null!==this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(e){const t=(e=ff(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[r]=Sg(t[r],l,i,this.padding),t[s]=Sg(t[s],c,o,this.padding),t[a]=Sg(t[a],h,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}_g.className="Conv3DTranspose",c.registerClass(_g);class Fg extends Eg{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Dp("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Dp("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Dp(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(t.padding));this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=cf(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=fg(t.depthwiseRegularizer),this.depthwiseConstraint=Vf(t.depthwiseConstraint),this.pointwiseInitializer=cf(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=fg(t.pointwiseRegularizer),this.pointwiseConstraint=Vf(t.pointwiseConstraint)}build(e){if((e=ff(e)).length<this.rank+2)throw new Dp(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Dp("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[t]));const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.inputSpec=[new xf({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Ms(()=>{let t;if(e=df(e),1===this.rank)throw new Op("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Vu(e,[0,2,3,1])),t=iu(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Ld(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Vu(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=lf(this.depthwiseInitializer),e.pointwiseInitializer=lf(this.pointwiseInitializer),e.depthwiseRegularizer=pg(this.depthwiseRegularizer),e.pointwiseRegularizer=pg(this.pointwiseRegularizer),e.depthwiseConstraint=Bf(this.depthwiseConstraint),e.pointwiseConstraint=Bf(this.pointwiseConstraint),e}}Fg.className="SeparableConv";class Dg extends Fg{constructor(e){super(2,e)}}Dg.className="SeparableConv2D",c.registerClass(Dg);class Og extends Eg{constructor(e){super(1,e),Og.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qp(e.kernelSize,"number",1,1))throw new Dp(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Og.className="Conv1D",c.registerClass(Og);class Mg extends If{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Ms(()=>{if(e=df(e),"channelsLast"===this.dataFormat){const t=Rd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Rd(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Rd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Rd(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Mg.className="Cropping2D",c.registerClass(Mg);class Pg extends If{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hd(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,Zp(id,"InterpolationFormat",this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,t){return Ms(()=>{let t=df(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Vu(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?sc.resizeNearestNeighbor(t,[e,r]):sc.resizeBilinear(t,[e,r]);return Vu(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?sc.resizeNearestNeighbor(t,[e,r]):sc.resizeBilinear(t,[e,r])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Pg.className="UpSampling2D",c.registerClass(Pg);class zg extends Tg{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=cf(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Vf(e.depthwiseConstraint),this.depthwiseRegularizer=fg(e.depthwiseRegularizer)}build(e){if((e=ff(e)).length<4)throw new Dp(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Dp(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Ms(()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Ms(()=>{null==s&&(s="channelsLast"),hd(s);let i=Ig(e,s);if(4!==e.rank)throw new Dp("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new Dp("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return i=ti(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Vu(i,[0,3,1,2])),i})}(e=df(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Ld(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=ff(e);const t="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=kg("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),s=kg(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,r,s]:[e[0],r,s,n]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=lf(this.depthwiseInitializer),e.depthwiseRegularizer=pg(this.depthwiseRegularizer),e.depthwiseConstraint=Bf(this.depthwiseRegularizer),e}}function Lg(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new Dp("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function Bg(e,t,n,r=!1,s,a,i=!1,o=!1){return Ms(()=>{const u=t.shape.length;if(u<3)throw new Dp(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(Sd(2,u));if(t=Vu(t,l),null!=a)throw new Op("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=Mr(Mr(s,"bool"),"float32")).rank===u-1&&(s=$i(s,-1)),s=Vu(s,l)),r&&(t=Qo(t,0),null!=s&&(s=Qo(s,0)));const c=[];let h,p=n;const d=t.shape[0],f=Mu(t);let m,g;null!=s&&(m=Mu(s));for(let t=0;t<d;++t){const n=f[t],r=Ms(()=>e(n,p));if(null==s)h=r[0],p=r[1];else{const e=Ms(()=>{const e=m[t],n=Ji(No(e),e);return{output:js(ka(r[0],e),ka(p[0],n)),newStates:p.map((t,s)=>js(ka(r[1][s],e),ka(t,n)))}});h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=Su(c,1)),[h,g,p]})}zg.className="DepthwiseConv2D",c.registerClass(zg);class Wg extends If{constructor(e){let t;if(super(e),null==e.cell)throw new Dp("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Xg({cells:e.cell}):e.cell,null==t.stateSize)throw new Dp("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new xf({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Sd(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){hf(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Ms(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Op("Constants support is not implemented in RNN yet.");hf(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new xf({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),a))throw new Dp(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=a.map(e=>new xf({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){Ms(()=>{if(!this.stateful)throw new _p("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Dp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>fo([n,e])):[fo([n,this.cell.stateSize])];else if(null==e)Ps(this.states_),null!=this.keptStates&&(Ps(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>fo([n,e])):this.states_[0]=fo([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Dp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);!0===t?this.keptStates.push(this.states_.slice()):Ps(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,i=[n,a];if(!r.arraysEqual(s.shape,i))throw new Dp(`State ${t} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>zs(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Lg(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new xf({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof wf){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Ms(()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=df(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Dp(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Bg((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h})}getInitialState(e){return Ms(()=>{let t=fo(e.shape);return t=Ti(t,[1,2]),t=Td(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?Fd(t,[1,e]):t):this.cell.stateSize>1?[Fd(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Wg.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=em(t.cell,n);return new e(Object.assign(t,{cell:r}))}}Wg.className="RNN",c.registerClass(Wg);class Vg extends If{}class Ug extends Vg{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Jp(this.units,"units"),this.activation=ug(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=Vf(e.kernelConstraint),this.recurrentConstraint=Vf(e.recurrentConstraint),this.biasConstraint=Vf(e.biasConstraint),this.dropout=vd([1,kd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=vd([1,kd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ff(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Ms(()=>{if(2!==(e=e).length)throw new Dp(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Yg({ones:()=>No(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Yg({ones:()=>No(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Od(null!=a?ka(e,a):e,this.kernel.read()),null!=this.bias&&(s=Ld(s,this.bias.read())),null!=i&&(n=ka(n,i));let o=js(s,Od(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),useBias:this.useBias,kernelInitializer:lf(this.kernelInitializer),recurrentInitializer:lf(this.recurrentInitializer),biasInitializer:lf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:Bf(this.kernelConstraint),recurrentConstraint:Bf(this.recurrentConstraint),biasConstraint:Bf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Ug.className="SimpleRNNCell",c.registerClass(Ug);class Gg extends Wg{constructor(e){e.cell=new Ug(e),super(e)}call(e,t){return Ms(()=>(null!=this.cell.dropoutMask&&(Ps(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ps(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return new e(t)}}Gg.className="SimpleRNN",c.registerClass(Gg);class Hg extends Vg{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Dp("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Jp(this.units,"units"),this.activation=ug(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ug(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=Vf(e.kernelConstraint),this.recurrentConstraint=Vf(e.recurrentConstraint),this.biasConstraint=Vf(e.biasConstraint),this.dropout=vd([1,kd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=vd([1,kd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ff(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Ms(()=>{if(2!==(e=e).length)throw new Dp("GRUCell expects 2 input Tensors (inputs, h, c), got "+e.length+".");const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Yg({ones:()=>No(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Yg({ones:()=>No(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(e=ka(e,this.dropoutMask[0]));let u=Od(e,this.kernel.read());this.useBias&&(u=Ld(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ka(r,s[0]));const l=this.recurrentKernel.read(),[c,h]=xu(l,[2*this.units,this.units],l.rank-1),p=Od(r,c),[d,f,m]=xu(u,3,u.rank-1),[g,y]=xu(p,2,p.rank-1);a=this.recurrentActivation.apply(js(d,g)),i=this.recurrentActivation.apply(js(f,y));const b=Od(ka(i,r),h);o=this.activation.apply(js(m,b));const x=js(ka(a,r),ka(js(1,Yi(a)),o));return[x,x]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),recurrentActivation:ig(this.recurrentActivation),useBias:this.useBias,kernelInitializer:lf(this.kernelInitializer),recurrentInitializer:lf(this.recurrentInitializer),biasInitializer:lf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:Bf(this.kernelConstraint),recurrentConstraint:Bf(this.recurrentConstraint),biasConstraint:Bf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Hg.className="GRUCell",c.registerClass(Hg);class jg extends Wg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Hg(e),super(e)}call(e,t){return Ms(()=>(null!=this.cell.dropoutMask&&(Ps(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ps(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}jg.className="GRU",c.registerClass(jg);class qg extends Vg{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Jp(this.units,"units"),this.activation=ug(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ug(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=fg(e.kernelRegularizer),this.recurrentRegularizer=fg(e.recurrentRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.kernelConstraint=Vf(e.kernelConstraint),this.recurrentConstraint=Vf(e.recurrentConstraint),this.biasConstraint=Vf(e.biasConstraint),this.dropout=vd([1,kd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=vd([1,kd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;if(e=ff(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,r=this.units;n=new((t=class extends Gd{apply(t,n){const s=e.apply([r]),a=(new jd).apply([r]),i=e.apply([2*r]);return _d(_d(s,a),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Ms(()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Dp("LSTMCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Yg({ones:()=>No(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Yg({ones:()=>No(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.recurrentDropoutMask;let i,o,u,l;0<this.dropout&&this.dropout<1&&(e=ka(e,this.dropoutMask[0]));let c=Od(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ka(r,a[0])),c=js(c,Od(r,this.recurrentKernel.read())),this.useBias&&(c=Ld(c,this.bias.read()));const[h,p,d,f]=xu(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(p),u=js(ka(o,s),ka(i,this.activation.apply(d))),l=this.recurrentActivation.apply(f);const m=ka(l,this.activation.apply(u));return[m,m,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ig(this.activation),recurrentActivation:ig(this.recurrentActivation),useBias:this.useBias,kernelInitializer:lf(this.kernelInitializer),recurrentInitializer:lf(this.recurrentInitializer),biasInitializer:lf(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pg(this.kernelRegularizer),recurrentRegularizer:pg(this.recurrentRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:Bf(this.kernelConstraint),recurrentConstraint:Bf(this.recurrentConstraint),biasConstraint:Bf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}qg.className="LSTMCell",c.registerClass(qg);class Kg extends Wg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new qg(e),super(e)}call(e,t){return Ms(()=>(null!=this.cell.dropoutMask&&(Ps(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ps(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Kg.className="LSTM",c.registerClass(Kg);class Xg extends Vg{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Ms(()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;hf(e)&&(e=e[0]),e=e,this.cells.forEach((n,r)=>{md("RNNCell_"+r,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){const r=[];for(const s of t.cells)r.push(em(s,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return yf(e)}setWeights(e){const t=[];for(const n of this.cells){const r=e.splice(n.weights.length);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}bf(t)}}function Yg(e){const{ones:t,rate:n,training:r=!1,count:s=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):Bd(t(),n),o=()=>Wd(i,t,r);return!s||s<=1?zs(o().clone()):Array(s).fill(void 0).map(o).map(e=>zs(e.clone()))}var Zg,Qg;Xg.className="StackedRNNCells",c.registerClass(Xg);class Jg extends Wg{constructor(e){if(e.unroll)throw new Op("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Op("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new xf({ndim:5})]}call(e,t){return Ms(()=>{if(null!=this.cell.dropoutMask&&(Ps(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ps(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Dp("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Ms(()=>{const{stateSize:t}=this.cell,n=this.computeSingleOutputShape(e.shape),r=fo([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]})}resetStates(e,t=!1){Ms(()=>{if(!this.stateful)throw new _p("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new Dp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>fo(a)):[fo(a)];else if(null==e)Ps(this.states_),null!=this.keptStates&&(Ps(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>fo(a)):this.states_[0]=fo(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Dp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);t?this.keptStates.push(this.states_.slice()):Ps(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!r.arraysEqual(n.shape,s))throw new Dp(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>zs(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?4:3],l=kg(e[o?3:2],r[0],s,a[0],i[0]),c=kg(u,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,l,c]:[l,c,n]]}}Jg.className="ConvRNN2D";class ey extends qg{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Jp(this.filters,"filters"),this.kernelSize=vg(n,2,"kernelSize"),this.kernelSize.forEach(e=>Jp(e,"kernelSize")),this.strides=vg(r||1,2,"strides"),this.strides.forEach(e=>Jp(e,"strides")),this.padding=s||"valid",pd(this.padding),this.dataFormat=a||"channelsLast",hd(this.dataFormat),this.dilationRate=vg(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>Jp(e,"dilationRate"))}build(e){var t;e=ff(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Dp("The channel dimension of the input should be defined. Found "+e[n]);const r=this.kernelSize.concat([e[n],4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Gd{apply(e,t){return $d([n.apply([r]),mo([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Ms(()=>{if(3!==e.length)throw new Dp("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Yg({ones:()=>No(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?ka(t[n],e):e;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Yg({ones:()=>No(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=xu(this.kernel.read(),4,3),[v,k,S,I]=this.useBias?xu(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,S,this.padding),h=this.inputConv(h,w,I,this.padding);const[N,C,T,E]=xu(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,N),f=this.recurrentConv(f,C),m=this.recurrentConv(m,T),g=this.recurrentConv(g,E);const A=this.recurrentActivation.apply(js(u,d)),R=this.recurrentActivation.apply(js(l,f)),$=js(ka(R,a),ka(A,this.activation.apply(js(c,m)))),_=ka(this.recurrentActivation.apply(js(h,g)),this.activation.apply($));return[_,_,$]})}getConfig(){const e=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}(super.getConfig(),["units"]);return Object.assign({},e,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,r){const s=Va(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ld(s,n,this.dataFormat):s}recurrentConv(e,t){return Va(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}ey.className="ConvLSTM2DCell",c.registerClass(ey);class ty extends Jg{constructor(e){const t=new ey(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}ty.className="ConvLSTM2D",c.registerClass(ty);class ny extends If{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?t[r]:this.noiseShape[r]);return n}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Wd(()=>Bd(n,this.rate,r,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}ny.className="Dropout",c.registerClass(ny);class ry extends ny{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}ry.className="SpatialDropout1D",c.registerClass(ry);class sy extends If{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Jp(this.units,"units"),this.activation=ug(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=cf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=cf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Vf(e.kernelConstraint),this.biasConstraint=Vf(e.biasConstraint),this.kernelRegularizer=fg(e.kernelRegularizer),this.biasRegularizer=fg(e.biasRegularizer),this.activityRegularizer=fg(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=ff(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=ff(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e),r=ed(this.activation.getClassName());let s;return null!=r?s=Od(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Od(n,this.kernel.read()),null!=this.bias&&(s=Ld(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const e={units:this.units,activation:ig(this.activation),useBias:this.useBias,kernelInitializer:lf(this.kernelInitializer),biasInitializer:lf(this.biasInitializer),kernelRegularizer:pg(this.kernelRegularizer),biasRegularizer:pg(this.biasRegularizer),activityRegularizer:pg(this.activityRegularizer),kernelConstraint:Bf(this.kernelConstraint),biasConstraint:Bf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}sy.className="Dense",c.registerClass(sy);class ay extends If{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=ff(e);for(const t of e.slice(1))if(null==t)throw new Dp(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],wd(e,1)]}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);let n=df(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Vu(n,e)}return function(e){if(e.rank<=1)throw new Dp(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],wd(e.shape,1)];return ya(e,t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}ay.className="Flatten",c.registerClass(ay);class iy extends If{constructor(e){super(e),this.supportsMasking=!0,this.activation=ug(e.activation)}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e);return this.activation.apply(n)})}getConfig(){const e={activation:ig(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}iy.className="Activation",c.registerClass(iy);class oy extends If{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Ms(()=>{return e=df(e),t=e,n=this.n,Ms(()=>{if(2!==t.shape.length)throw new Dp(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Fd(Td(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}oy.className="RepeatVector",c.registerClass(oy);class uy extends If{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let o=0;o<r.length;++o){const e=r[o];if(this.isUnknown(e)){if(null!==a)throw new Dp("Can only specifiy one unknown dimension.");a=o}else s*=e}const i=wd(e);if(null!==a){if(0===s||i%s!=0)throw new Dp(n);r[a]=i/s}else if(i!==s)throw new Dp(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return ya(n,s)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}uy.className="Reshape",c.registerClass(uy);class ly extends If{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");const t=Sd(1,e.dims.length+1);if(!r.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new xf({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=ff(e)).slice();return this.dims.forEach((n,r)=>{t[r+1]=e[n]}),t}call(e,t){return Vu(df(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}ly.className="Permute",c.registerClass(ly);class cy extends If{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=df(e);return Xs(So(n,this.maskValue),-1)}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e),r=Xs(So(n,this.maskValue),-1,!0);return ka(n,Mr(r,n.dtype))})}}cy.className="Masking",c.registerClass(cy);class hy extends If{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=null==e.inputLength?[t,null]:[t].concat(Vp(e.inputLength))}this.inputDim=e.inputDim,Jp(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Jp(this.outputDim,"outputDim"),this.embeddingsInitializer=cf(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=fg(e.embeddingsRegularizer),this.activityRegularizer=fg(e.activityRegularizer),this.embeddingsConstraint=Vf(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Ms(()=>this.maskZero?(e=df(e),So(e,ui(e))):null)}computeOutputShape(e){if(e=ff(e),null==this.inputLength)return[...e,this.outputDim];const t=Vp(this.inputLength);if(t.length!==e.length-1)throw new Dp(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new Dp(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);let n=df(e);"int32"!==n.dtype&&(n=Cd(n,"int32"));const r=Md(this.embeddings.read(),ya(n,[n.size]));return ya(r,ff(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:lf(this.embeddingsInitializer),embeddingsRegularizer:pg(this.embeddingsRegularizer),activityRegularizer:pg(this.activityRegularizer),embeddingsConstraint:Bf(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}hy.className="Embedding",c.registerClass(hy);class py extends If{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Op}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Dp("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[ff(e)]),(e=e).length<2)throw new Dp(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const s of e)null!=s&&null!==s[0]&&t.push(s[0]);if(t=Xp(t),t.length>1)throw new Dp(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const t=null==e[s]?null:e[s].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const r=e.map(e=>e.length);this.reshapeRequired=-1!==e.indexOf(null)||1!==Xp(r).length}call(e,t){return Ms(()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const r=kd(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=Td(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,r=e[0],s=e.slice(1).concat([r]);let i=ya(a,[r].concat(wd(e.slice(1))));i=Vu(i,[1,0]),i=ya(i,s),t.push(i),n=!0}else if(e>1){const r=Sd(1,e).concat([0]);t.push(Vu(a,r)),n=!0}else t.push(a)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=ya(Vu(ya(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(Sd(0,s-1));r=Vu(r,e)}return r}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const n=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const r of e)null!=r&&null!==r[0]&&n.push(r[0]);return n=Xp(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Ms(()=>{if(null==t)return null;if(!Array.isArray(t))throw new Dp("`mask` should be an Array");if(!Array.isArray(e))throw new Dp("`inputs` should be an Array");if(t.length!==e.length)throw new Dp(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:$i(e,0)))[0];for(let e=1;e<t.length-1;++e)n=no(n,t[e]);return n})}}class dy extends py{constructor(e){super(e)}mergeFunction(e){return Ms(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=js(t,e[n]);return t})}}dy.className="Add",c.registerClass(dy);class fy extends py{constructor(e){super(e)}mergeFunction(e){return Ms(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ka(t,e[n]);return t})}}fy.className="Multiply",c.registerClass(fy);class my extends py{constructor(e){super(e)}mergeFunction(e){return Ms(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=js(t,e[n]);return ka(1/e.length,t)})}}my.className="Average",c.registerClass(my);class gy extends py{constructor(e){super(e)}mergeFunction(e){return Ms(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=ho(t,e[n]);return t})}}gy.className="Maximum",c.registerClass(gy);class yy extends py{constructor(e){super(e)}mergeFunction(e){return Ms(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=yo(t,e[n]);return t})}}yy.className="Minimum",c.registerClass(yy);class by extends py{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Dp("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const r of e)if(null!=r){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let a=!1;for(const e of n)if(r.arraysEqual(e,t)){a=!0;break}a||n.push(t)}if(n.length>1)throw new Dp("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Ms(()=>$d(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Dp("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const s of t.slice(1)){if(null==n[r]||null==s[r]){n[r]=null;break}n[r]+=s[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Dp("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Dp("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Dp(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Ms(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const r=[];for(let a=0;a<e.length;++a)r.push(null==t[a]?Mr(No(e[a]),"bool"):t[a].rank<e[a].rank?$i(t[a],-1):t[a]);const s=wa(r,this.axis);return Ks(s,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function xy(e,t){for(;e<0;)e+=t;return e}by.className="Concatenate",c.registerClass(by);class wy extends py{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Op("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Dp(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Dp(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>xy(t,e[n].shape.length)):[xy(this.axes,n.shape.length),xy(this.axes,s.shape.length)],this.normalize&&(n=tm(n,t[0]),s=tm(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Op("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.assert(e.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+e.shape.length),r.assert(e.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+t.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Op("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const i=n;return Ms(()=>{let n,r;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=ya(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=ya(e,e.shape.concat(t))}else n=0;if(r=2===e.shape.length&&2===t.shape.length?i[0]===i[1]?Ti(ka(e,t),i[0]):Ti(ka(Vu(e,[1,0]),t),i[1]):va(e,t,i[0]!==e.shape.length-1,i[1]===t.shape.length-1),n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);r=ku(r,t)}return 1===r.shape.length&&(r=$i(r,1)),r})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[xy(this.axes,e.length),xy(this.axes,t.length)],n}computeOutputShape(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Op("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}wy.className="Dot",c.registerClass(wy);class vy extends If{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e);return Wd(()=>js(Dd(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}vy.className="GaussianNoise",c.registerClass(vy);class ky extends If{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ms(()=>{this.invokeCallHook(e,t);const n=df(e);return this.rate>0&&this.rate<1?Wd(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return ka(n,Dd(n.shape,1,e))},()=>n,t.training||!1):n})}}ky.className="GaussianDropout",c.registerClass(ky);class Sy extends If{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||df(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Ms(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Wd(()=>{const t=df(e),r=-1.7580993408473766;let s=zi(jo(n),this.rate);s=Cd(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate,o=js(ka(t,s),ka(js(s,-1),r));return js(ka(o,a),i)},()=>df(e),t.training||!1)}return e})}}function Iy(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=Aa(e,t,n,r,s,a);else if(3===e.rank)i=Ra(e,t,n,r,s,a);else{if(4!==e.rank)throw new Op(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=$a(e,t,n,r,s,a)}return i}Sy.className="AlphaDropout",c.registerClass(Sy);class Ny extends If{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=cf(e.betaInitializer||"zeros"),this.gammaInitializer=cf(e.gammaInitializer||"ones"),this.movingMeanInitializer=cf(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=cf(e.movingVarianceInitializer||"ones"),this.betaConstraint=Vf(e.betaConstraint),this.gammaConstraint=Vf(e.gammaConstraint),this.betaRegularizer=fg(e.betaRegularizer),this.gammaRegularizer=fg(e.gammaRegularizer)}build(e){e=ff(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Dp(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(e)+".");this.inputSpec=[new xf({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Ms(()=>{const n=null!=t.training&&t.training,s=df(e),a=s.shape,i=a.length,o=Sd(0,i),u=this.axis>=0?this.axis:this.axis+i;o.splice(u,1);const l=zp(1,i);l[u]=a[u];const c=o.slice();c.sort();const h=!r.arraysEqual(c,Sd(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const e=ya(this.movingMean.read(),l),t=ya(this.movingVariance.read(),l),n=this.center?ya(this.beta.read(),l):null,r=this.scale?ya(this.gamma.read(),l):null;return Iy(s,e,t,n,r,this.epsilon)}return Iy(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(e,t,n,s,a=.001){return r.arraysEqual(s.slice().sort(),Sd(0,e.rank-1))?function(e,t,n,r,s=.001){return Ms(()=>{const a=wo(e,r),i=a.mean,o=a.variance;return[Iy(e,i,o,n,t,s),i,o]})}(e,t,n,s,a):function(e,t,n,r,s=.001){return Ms(()=>{const a=wo(e,r),i=a.mean,o=a.variance,u=[];for(const t of Sd(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=ya(i,u),c=ya(o,u),h=null==t?null:ya(t,u),p=null==n?null:ya(n,u);return[Iy(e,l,c,p,h,s),i,o]})}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,t,n)=>{Ms(()=>{const r=1-n,s=e.read(),a=ka(Ji(s,t),r);e.write(Ji(s,a))})};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:lf(this.betaInitializer),gammaInitializer:lf(this.gammaInitializer),movingMeanInitializer:lf(this.movingMeanInitializer),movingVarianceInitializer:lf(this.movingVarianceInitializer),betaRegularizer:pg(this.betaRegularizer),gammaRegularizer:pg(this.gammaRegularizer),betaConstraint:Bf(this.betaConstraint),gammaConstraint:Bf(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Ny.className="BatchNormalization",c.registerClass(Ny);class Cy extends If{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const e of this.axis)if(!Number.isInteger(e))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=cf(e.betaInitializer||"zeros"),this.gammaInitializer=cf(e.gammaInitializer||"ones"),this.betaRegularizer=fg(e.betaRegularizer),this.gammaRegularizer=fg(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=ff(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error("Invalid axis: "+r);if(this.axis.length!==Xp(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(t=>e[t]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,t){const n=df(e),r=n.shape,s=r.length;return Ms(()=>{let{mean:e,variance:t}=wo(n,this.axis,!0);const a=zp(1,s);for(const n of this.axis)a[n]=r[n];const i=e=>null!=e&&e.shape.length!==s?ya(e,a):e;let o=this.scale?i(this.gamma.read()):null,u=this.center?i(this.beta.read()):null;const l=[],c=[];for(let n=0;n<s;++n)-1!==this.axis.indexOf(n)?(l.push(r[n]),c.push(1)):(l.push(1),c.push(r[n]));return e=Fi(e,l),t=Fi(t,l),null!=o&&(o=Fi(o,c)),null!=u&&(u=Fi(u,c)),Iy(n,e,t,u,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:lf(this.betaInitializer),gammaInitializer:lf(this.gammaInitializer),betaRegularizer:pg(this.betaRegularizer),gammaRegularizer:pg(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Cy.className="LayerNormalization",c.registerClass(Cy);class Ty extends If{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Dp(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Dp(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Dp(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new xf({ndim:4})]}computeOutputShape(e){let t,n;return e=ff(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Ms(()=>{return t=df(e),n=this.padding,r=this.dataFormat,Ms(()=>{if(4!==t.rank)throw new Dp("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Dp("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Dp(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],To(t,e)});var t,n,r})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Ey(e,t,n,r,s,a){return Ms(()=>{let i;hd(s),dd(a),pd(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Ig(e,s);const o="same"===r?"same":"valid";return i="max"===a?uo(e,t,n,o):ba(e,t,n,o),"channelsFirst"===s&&(i=Vu(i,[0,3,1,2])),i})}function Ay(e,t,n,r,s,a){return Ms(()=>{let i;hd(s),dd(a),pd(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Ng(e,s);const o="same"===r?"same":"valid";return i="max"===a?lo(e,t,n,o):xa(e,t,n,o),"channelsFirst"===s&&(i=Vu(i,[0,4,1,2,3])),i})}Ty.className="ZeroPadding2D",c.registerClass(Ty);class Ry extends If{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Dp("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));this.poolSize=e.poolSize}if(Jp(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Dp("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));this.strides=e.strides}Jp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,pd(this.padding),this.inputSpec=[new xf({ndim:3})]}computeOutputShape(e){const t=kg((e=ff(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Ms(()=>{this.invokeCallHook(e,t),e=Td(df(e),2);const n=this.poolingFunction(df(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ku(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class $y extends Ry{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ey(e,t,n,r,s,"max")}}$y.className="MaxPooling1D",c.registerClass($y);class _y extends Ry{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ey(e,t,n,r,s,"avg")}}_y.className="AveragePooling1D",c.registerClass(_y);class Fy extends If{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Dp("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides];Jp(this.poolSize,"poolSize"),Jp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hd(this.dataFormat),pd(this.padding),this.inputSpec=[new xf({ndim:4})]}computeOutputShape(e){e=ff(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=kg(t,this.poolSize[0],this.padding,this.strides[0]),n=kg(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Ms(()=>(this.invokeCallHook(e,t),this.poolingFunction(df(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Dy extends Fy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ey(e,t,n,r,s,"max")}}Dy.className="MaxPooling2D",c.registerClass(Dy);class Oy extends Fy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ey(e,t,n,r,s,"avg")}}Oy.className="AveragePooling2D",c.registerClass(Oy);class My extends If{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Dp("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Jp(this.poolSize,"poolSize"),Jp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hd(this.dataFormat),pd(this.padding),this.inputSpec=[new xf({ndim:5})]}computeOutputShape(e){e=ff(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=kg(t,this.poolSize[0],this.padding,this.strides[0]),n=kg(n,this.poolSize[1],this.padding,this.strides[1]),r=kg(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Ms(()=>(this.invokeCallHook(e,t),this.poolingFunction(df(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Py extends My{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ay(e,t,n,r,s,"max")}}Py.className="MaxPooling3D",c.registerClass(Py);class zy extends My{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return hd(s),pd(r),Ay(e,t,n,r,s,"avg")}}zy.className="AveragePooling3D",c.registerClass(zy);class Ly extends If{constructor(e){super(e),this.inputSpec=[new xf({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Op}}class By extends Ly{constructor(e){super(e||{})}call(e,t){return Ms(()=>{const t=df(e);return po(t,1)})}}By.className="GlobalAveragePooling1D",c.registerClass(By);class Wy extends Ly{constructor(e){super(e||{})}call(e,t){return Ms(()=>{const t=df(e);return ki(t,1)})}}Wy.className="GlobalMaxPooling1D",c.registerClass(Wy);class Vy extends If{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hd(this.dataFormat),this.inputSpec=[new xf({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Op}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Uy extends Vy{call(e,t){return Ms(()=>{const t=df(e);return po(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Uy.className="GlobalAveragePooling2D",c.registerClass(Uy);class Gy extends Vy{call(e,t){return Ms(()=>{const t=df(e);return ki(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Gy.className="GlobalMaxPooling2D",c.registerClass(Gy);class Hy extends If{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=em(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class jy extends Hy{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=ff(e)).length<3)throw new Dp("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=ff(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t);return[n[0],e[1]].concat(n.slice(1))}call(e,t){return Ms(()=>Bg((e,n)=>[df(this.layer.call(e,t)),[]],e=df(e),[],!1,null,null,!1,!0)[1])}}jy.className="TimeDistributed",c.registerClass(jy);class qy extends Hy{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=em(n),t.goBackwards=!0!==t.goBackwards;const r={};if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=em(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,Zp(ld,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new Op("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Wp(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Lg(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Dp("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map(e=>new xf({shape:e.shape}));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new Op("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof wf;for(const u of a)if(u instanceof wf!==o)throw new Dp("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Ms(()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Qo(s,1)),"concat"===this.mergeMode?i=$d([r,s]):"sum"===this.mergeMode?i=js(r,s):"ave"===this.mergeMode?i=ka(.5,js(r,s)):"mul"===this.mergeMode?i=ka(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){md(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),md(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=em(t.layer);if(delete t.layer,null!=t.numConstants)throw new Op("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}qy.className="Bidirectional",c.registerClass(qy);class Ky extends If{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Ms(()=>("float32"!==(e=df(e)).dtype&&(e=Cd(e,"float32")),js(ka(e,this.scale),this.offset)))}}Ky.className="Rescaling",c.registerClass(Ky),gt().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(Zg||(Zg={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Qg||(Qg={}));const Xy=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Yy=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Zy=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],Qy=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Jy=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],eb=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],tb=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],nb=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],rb=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],sb=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],ab=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],ib=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],ob=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],ub=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],lb=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],cb=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],hb=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],pb=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],db=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];function fb(e,t,n=new Map,r=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(yb(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=fb(e[a],t,n,r);s[a]=i}return r.delete(e),e.__proto__&&(s.__proto__=e.__proto__),s}throw new Error("Can't recurse into non-iterable type: "+e)}return n.set(e,s.value),s.value}function mb(e){return null===e?null:yb(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function gb(e,t){const n=new Map;fb(e,t,n);for(const s of Array.from(n.keys())){const e=n.get(s);if(r.isPromise(e)){const t=await e;n.set(s,t)}}return fb(e,t,n)}function yb(e){let t=!1;if(gt().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:r}=n(8);t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ln)&&!(e instanceof Promise)&&!t)}function bb(e){return e instanceof ln?{value:e.clone(),recurse:!1}:yb(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class xb{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class wb extends xb{constructor(){super(wb.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let r=0;r<n;r++)t[r]=this.get(this.wrap(this.begin+r));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function vb(e){return new Ib(e)}function kb(e){return new Nb(e)}wb.INITIAL_CAPACITY=32;class Sb{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new _b(this,e)}filter(e){return new Rb(this,e)}map(e){return new $b(this,e)}mapAsync(e){return new Fb(this,e)}serialMapAsync(e){return new Fb(this,e).serial()}flatmap(e){return new Ob(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Ab(this,e,t)}columnMajorBatch(e,t=!0,n=mb){return this.rowMajorBatch(e,t).map(e=>function(e,t=mb){return function e(t,n,r=new Set){const s=t[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(t);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(yb(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e(t.map(e=>e[i]),n,r);a[i]=s}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(e,t)}(e,n))}concatenate(e,t){return new Mb(vb([this,e]),t)}take(e){return e<0||null==e?this:new Eb(this,e)}skip(e){return e<0||null==e?this:new Tb(this,e)}prefetch(e){return new Lb(this,e)}shuffle(e,t){return new Bb(this,e,t)}serial(){return new Cb(this)}}class Ib extends Sb{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,fb(t,bb)),done:!1};var t}}class Nb extends Sb{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message="Error thrown while iterating through a dataset: "+e.message,e}}}class Cb extends Sb{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Tb extends Sb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Ps(e.value)}return this.upstream.next()}}class Eb extends Sb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Ab extends Sb{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Rb extends Sb{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Ps(e.value)}}}class $b extends Sb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Map"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class _b extends Sb{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Fb extends Sb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=await this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Db extends Sb{constructor(){super(),this.outputQueue=new wb,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!(await this.pump()))return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Ob extends Db{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return!0}}class Mb extends Sb{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Pb;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Pb||(Pb={}));class zb extends Sb{constructor(e,t=Pb.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await gb(this.iterators,(function(e){return e instanceof Sb?{value:e.next().then(e=>(t++,e.done&&n++,e.value)),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Pb.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Pb.SHORTEST:return{value:null,done:!0}}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Lb extends Sb{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new xb(t)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Bb extends Lb{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Lo.alea(n||r.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Wb{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return r.assert(e>0,()=>"batchSize needs to be positive, but it is\n      "+e),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Vb(async()=>(await n.iterator()).columnMajorBatch(e,t,Hb),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Vb(async()=>(await t.iterator()).concatenate(await e.iterator()),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Vb(async()=>(await t.iterator()).filter(t=>Ms(()=>e(t))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Vb(async()=>(await t.iterator()).map(t=>Ms(()=>e(t))),this.size)}mapAsync(e){const t=this;return Vb(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Vb(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Vb(async()=>{return n=kb(async()=>({value:await t.iterator(),done:!1})).take(e),new Mb(n,void 0);var n},n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Vb(async()=>(await t.iterator()).skip(e),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=Lo.alea(t||r.now().toString());return Vb(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Vb(async()=>(await t.iterator()).take(e),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Vb(e,t=null){return new class extends Wb{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Ub(e){return Vb(async()=>vb(e),e.length)}function Gb(e){if(!yb(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return Vb(async()=>function(e,t=Pb.FAIL){return new zb(e,t)}(await gb(e,e=>{if(e instanceof Wb)return{value:e.iterator(),recurse:!1};if(yb(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Pb.SHORTEST),t)}function Hb(e){return null===e?null:null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof ln||r.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ln?Su(e):Un(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}Wb.MAX_BUFFER_SIZE=1e4;class jb extends Wb{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}const qb=Symbol("out"),Kb=Symbol("field"),Xb=Symbol("quote"),Yb=Symbol("quoteafterquote"),Zb=Symbol("quoteinquote");class Qb extends Wb{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new jb(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(r.assert(null==t.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&r.assert(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),n=Object.keys(t).filter(e=>t[e]>1);if(r.assert(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const r of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(r))throw new Error('The key "'+r+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");return this.parseRow(t.value,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[s];let u=null;if(""===o)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);u=void 0}else{const e=Number(o);if(isNaN(e))u=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":u=e;break;case"int32":u=Math.floor(e);break;case"bool":u=this.getBoolean(o);break;default:u=e}else u=e}i&&i.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=qb;for(let i=0;i<s;i++)switch(a){case qb:switch(e.charAt(i)){case'"':r=i+1,a=Xb;break;case this.delimiter:if(r=i+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=qb;break;default:a=Kb,r=i}break;case Kb:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(r,i)),a=qb,r=i+1}break;case Xb:switch(e.charAt(i)){case'"':a=Yb}break;case Yb:switch(e.charAt(i)){case this.delimiter:n.push(e.substring(r,i-1)),a=qb,r=i+1;break;case'"':a=Xb;break;default:a=Zb}break;case Zb:switch(e.charAt(i)){case'"':a=Xb}}if(n.push(a===Yb?e.substring(r,s-1):e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Jb extends Sb{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!gt().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new Jb(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(n){throw new Error("Error thrown while initializing video stream: "+n.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise(r=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach((e,r)=>n.set(e,r*t)),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(r.sizeFromShape(t));return n.set(e,n.length-e.length),Un(n,t)}}class ex extends Sb{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Tu([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2;this.cropBox=Eu([r,n,t+r,n+e],[1,4])}else this.cropBox=Eu([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!gt().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new ex(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&r.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message="Error thrown while initializing video stream: "+e.message,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=u.fromPixels(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return Ms(()=>{const t=$i(Mr(e,"float32"),0);let n;return n=sc.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear"),ya(n,n.shape.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class tx{}class nx extends Sb{split(e){return new rx(this,e)}}class rx extends nx{constructor(e,t){super(),this.upstream=e,this.impl=new sx(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class sx extends Db{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const n of t.slice(0,-1))this.outputQueue.push(n);return this.carryover=t[t.length-1],!0}}class ax extends Sb{decodeUTF8(){return new ix(this)}}class ix extends nx{constructor(e){super(),this.upstream=e,this.impl=new ox(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class ox extends Db{constructor(e){if(super(),this.upstream=e,gt().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(9);this.decoder=new e("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=gt().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class ux extends ax{constructor(e,t={}){super(),this.file=e,this.options=t,r.assert(e instanceof Uint8Array||!!gt().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n});return{value:await e,done:!1}}}function lx(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class cx extends tx{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(lx(this.input)&&gt().get("IS_NODE")){const e=n(10);this.input=e.readFileSync(this.input.slice(7))}return new ux(this.input,this.options)}}class hx extends tx{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return lx(this.url)?new cx(this.url,this.fileOptions).iterator():async function(e,t={},n){let s,a;var i;"string"==typeof e?s=e:(s=e.url,a={method:(i=e).method,headers:i.headers,body:i.body,mode:i.mode,credentials:i.credentials,cache:i.cache,redirect:i.redirect,referrer:i.referrer,integrity:i.integrity});const o=await(n||r.fetch)(s,a);if(o.ok){const e=new Uint8Array(await o.arrayBuffer());return new ux(e,t)}throw new Error(o.statusText)}(this.url,this.fileOptions)}}function px(e,t={}){return new Qb(new hx(e),t)}function dx(e){const t=kb(e);return Vb(async()=>t)}function fx(e){return Vb(async()=>{const t=await e();return kb(()=>t.next())})}async function mx(e,t){return ex.create(e,t)}async function gx(e){return Jb.create(e)}const yx="3.21.0";function bx(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the CPU backend.")})}const xx=f.whereImpl;class wx extends xe{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new be(this,Ds())}nextDataId(){return wx.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,gt().get("IS_NODE")&&d.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return d.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>r.decodeString(e));return Or(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Or(e.shape,e.dtype,t)}makeOutput(e,t,n){return Ds().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.now();return e(),{kernelMs:r.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){bx([e],"where");const t=this.readSync(e.dataId);return xx(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function vx(e,t,n){return({inputs:s,attrs:a,backend:i})=>{const{x:o}=s;if(bx(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=i,l=u.data.get(o.dataId).values,c=r.sizeFromShape(o.shape),h=n||o.dtype,p=r.getArrayFromDType(h,c);for(let e=0;e<c;++e)p[e]=t(l[e],a);return u.makeTensorInfo(o.shape,h,p)}}function kx(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(bx(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}wx.nextDataId=0,Ls("cpu",()=>new wx,1);const Sx=vx("Elu",e=>e>=0?e:Math.exp(e)-1),Ix={kernelName:"Elu",backendName:"cpu",kernelFunc:Sx};function Nx(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Cx={kernelName:"Identity",backendName:"cpu",kernelFunc:Nx};function Tx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s;bx([a],"leakyRelu");const o=r.sizeFromShape(a.shape),u=n.data.get(a.dataId).values,l=r.getTypedArrayFromDType("float32",o);for(let r=0;r<u.length;r++)l[r]=u[r]<0?i*u[r]:u[r];return n.makeTensorInfo(a.shape,"float32",l)}const Ex={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:Tx};function Ax(e){return(t,n,s,a,i)=>{const o=d.assertAndGetBroadcastShape(t,n),u=o.length,l=r.computeStrides(o),c=r.sizeFromShape(o),h=r.getTypedArrayFromDType(i,c),p=t.length,f=n.length,m=r.computeStrides(t),g=r.computeStrides(n),y=d.getBroadcastDims(t,o),b=d.getBroadcastDims(n,o);if(y.length+b.length===0)for(let r=0;r<h.length;++r)h[r]=e(s[r%s.length],a[r%a.length]);else for(let d=0;d<h.length;++d){const t=r.indexToLoc(d,u,l),n=t.slice(-p);y.forEach(e=>n[e]=0);const i=r.locToIndex(n,p,m),o=t.slice(-f);b.forEach(e=>o[e]=0);const c=r.locToIndex(o,f,g);h[d]=e(s[i],a[c])}return[h,o]}}const Rx=Ax((e,t)=>e<0?t*e:e);function $x(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;bx([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=Rx(r.shape,s.shape,a,i,"float32");return n.makeTensorInfo(u,"float32",o)}const _x={kernelName:"Prelu",backendName:"cpu",kernelFunc:$x},Fx=vx("Relu",e=>Math.max(0,e)),Dx={kernelName:"Relu",backendName:"cpu",kernelFunc:Fx},Ox=vx("Relu6",e=>Math.min(Math.max(0,e),6)),Mx={kernelName:"Relu6",backendName:"cpu",kernelFunc:Ox};function Px(e){return(t,n,s)=>{const a=r.getTypedArrayFromDType(n,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],s);return a}}const zx=Px(e=>1/(1+Math.exp(-e))),Lx=vx("Sigmoid",e=>1/(1+Math.exp(-e))),Bx={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:Lx};function Wx(e,t,n,r,s){if("linear"===n)return Nx({inputs:{x:t},backend:e});if("relu"===n)return Fx({inputs:{x:t},backend:e});if("elu"===n)return Sx({inputs:{x:t},backend:e});if("relu6"===n)return Ox({inputs:{x:t},backend:e});if("prelu"===n)return $x({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return Tx({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return Lx({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Vx(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const Ux={kernelName:"Complex",backendName:"cpu",kernelFunc:Vx};function Gx(e,t,n="float32"){if("complex64"===n)return Vx({inputs:{real:Gx(e,t,"float32"),imag:Gx(e,t,"float32")},backend:e});const s=r.makeZerosTypedArray(r.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function Hx(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const jx={kernelName:"Real",backendName:"cpu",kernelFunc:Hx};function qx(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=r.toTypedArray([0],n),[a,i]=Ax((e,t)=>e!==t?1:0)(t,[],e,s,"bool");return[i,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function Kx(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return Nx({inputs:{x:a},backend:n});const e=Gx(n,a.shape,a.dtype),t=Kx({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=Vx({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=Hx({inputs:{input:a},backend:n}),t=Kx({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!r.hasEncodingLoss(a.dtype,i)){const e=Nx({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}const o=n.data.get(a.dataId).values,[u,l,c]=qx(o,a.shape,a.dtype,i);return n.makeTensorInfo(u,l,c)}const Xx={kernelName:"Cast",backendName:"cpu",kernelFunc:Kx};function Yx(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:i}=n,o=s;bx([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c="string"===a.dtype?d.fromUint8ToStringArray(u):u,h="string"===a.dtype?d.fromUint8ToStringArray(l):l,p=r||a.dtype,[f,m]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(m,p,f)}:({inputs:e,backend:s})=>{const{a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Kx({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.imag,s=o.data.get(t.complexTensorInfos.real.dataId).values,u=o.data.get(r.dataId).values,l=Kx({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(l.dataId),h=c.complexTensorInfos.imag,p=o.data.get(c.complexTensorInfos.real.dataId).values,d=o.data.get(h.dataId).values,[f,m,g]=n(a.shape,i.shape,s,u,p,d),y=o.makeTensorInfo(g,"float32",f),b=o.makeTensorInfo(g,"float32",m),x=Vx({inputs:{real:y,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(b),x}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function Zx(e){return(t,n,s,a,i,o)=>{const u=d.assertAndGetBroadcastShape(t,n),l=r.sizeFromShape(u),c=u.length,h=r.computeStrides(u),p=r.getTypedArrayFromDType("float32",l),f=r.getTypedArrayFromDType("float32",l),m=d.getBroadcastDims(t,u),g=d.getBroadcastDims(n,u),y=d.mergeRealAndImagArrays(s,a),b=d.mergeRealAndImagArrays(i,o),x=t.length,w=r.computeStrides(t),v=n.length,k=r.computeStrides(n);if(m.length+g.length===0)for(let r=0;r<p.length;r++){const t=r%y.length,n=r%b.length,s=e(y[2*t],y[2*t+1],b[2*n],b[2*n+1]);p[r]=s.real,f[r]=s.imag}else for(let d=0;d<p.length;d++){const t=r.indexToLoc(d,c,h),n=t.slice(-x);m.forEach(e=>n[e]=0);const s=r.locToIndex(n,x,w),a=t.slice(-v);g.forEach(e=>a[e]=0);const i=r.locToIndex(a,v,k),o=e(y[2*s],y[2*s+1],b[2*i],b[2*i+1]);p[d]=o.real,f[d]=o.imag}return[p,f,u]}}const Qx=Ax((e,t)=>e+t),Jx=Zx((e,t,n,r)=>({real:e+n,imag:t+r})),ew=Yx("Add",Qx,Jx),tw={kernelName:"Add",backendName:"cpu",kernelFunc:ew};function nw(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=r.sizeFromShape(a.shape),u=r.inferFromImplicitShape(i,o),l=r.sizeFromShape(u);r.assert(o===l,()=>`The new shape (${u}) has ${l} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=u,e.shape=u}return{dataId:a.dataId,shape:u,dtype:a.dtype}}const rw={kernelName:"Reshape",backendName:"cpu",kernelFunc:nw};function sw(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:i}=t,{transposeA:u,transposeB:l}=s;bx([a,i],"matMul");const c=a.shape.length,h=i.shape.length,p=u?a.shape[c-2]:a.shape[c-1],d=l?i.shape[h-1]:i.shape[h-2],f=u?a.shape[c-1]:a.shape[c-2],m=l?i.shape[h-2]:i.shape[h-1],g=a.shape.slice(0,-2),y=i.shape.slice(0,-2),b=r.sizeFromShape(g),x=r.sizeFromShape(y),w=o.assertAndGetBroadcastShape(a.shape.slice(0,-2),i.shape.slice(0,-2)).concat([f,m]);r.assert(p===d,()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${u} and transposeB=${l} must match.`);const v=l?[x,m,d]:[x,d,m],k=nw({inputs:{x:a},backend:n,attrs:{shape:u?[b,p,f]:[b,f,p]}}),S=nw({inputs:{x:i},backend:n,attrs:{shape:v}}),I=u?k.shape[1]:k.shape[2],N=u?k.shape[2]:k.shape[1],C=l?S.shape[1]:S.shape[2],T=Math.max(b,x),E=n.data.get(k.dataId).values,A=n.data.get(S.dataId).values,R=r.computeStrides(k.shape),$=r.computeStrides(S.shape),[_,F,D]=u?[R[0],1,R[1]]:[R[0],R[1],1],[O,M,P]=l?[1,$[1],$[0]]:[$[1],1,$[0]],z=N*C,L=Or([T,N,C],k.dtype),B=L.values,W=n.blockSize;for(let r=0;r<T;r++)for(let e=0;e<N;e+=W)for(let t=0;t<C;t+=W)for(let n=0;n<I;n+=W){const s=Math.min(e+W,N),a=Math.min(t+W,C),i=Math.min(n+W,I);for(let o=e;o<s;o++)for(let e=t;e<a;e++){let t=0;for(let s=n;s<i;s++){const n=Math.min(r,b-1)*_,a=Math.min(r,x-1)*P;t+=E[n+o*F+s*D]*A[s*O+e*M+a]}B[r*z+(o*C+e)]+=t}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(S),n.makeTensorInfo(w,L.dtype,L.values)}const aw={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:sw},iw={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;let p,d,f;const m=[];p=sw({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(d=ew({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Wx(n,p,c,o,h),m.push(p),p=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return p}};function ow(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const uw={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;bx(t,"abs");let s=new Float32Array(r.sizeFromShape(t.shape));return s=ow(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},lw={kernelName:"Acos",backendName:"cpu",kernelFunc:vx("Acos",e=>Math.acos(e))},cw={kernelName:"Acosh",backendName:"cpu",kernelFunc:vx("Acosh",e=>Math.acosh(e))},hw={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;bx(t,"addN");const s=r.map(e=>n.data.get(e.dataId).values),a=Or(r[0].shape,r[0].dtype),i=a.values;for(let o=0;o<r.length;o++){const e=s[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function pw(e,t,n,s,a){const i=t.length,o=r.sizeFromShape(t),u=r.computeStrides(t),l=r.computeStrides(a),c=r.getTypedArrayFromDType(n,r.sizeFromShape(a));for(let h=0;h<o;++h){const t=r.indexToLoc(h,i,u),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];c[r.locToIndex(n,i,l)]=e[h]}return c}function dw(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;bx(s,"transpose");const i=new Array(s.shape.length);for(let u=0;u<i.length;u++)i[u]=s.shape[a[u]];const o=pw(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(o,i,s.dtype),shape:i,dtype:s.dtype}}const fw={kernelName:"Transpose",backendName:"cpu",kernelFunc:dw},mw={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;bx(a,"all");const u=r.parseAxisParam(i,a.shape);let l=u;const c=d.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=dw({inputs:{x:a},backend:n,attrs:{perm:c}}),l=d.getInnerMostAxes(l.length,a.shape.length)),d.assertAxesAreInnerMostDims("all",l,h.shape.length);const[p,f]=d.computeOutAndReduceShapes(h.shape,l),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(p),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];t=t&&r}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,g);if(o){const e=nw({inputs:{x:b},backend:n,attrs:{shape:d.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},gw={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;bx(a,"any");const u=r.parseAxisParam(i,a.shape);let l=u;const c=d.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=dw({inputs:{x:a},backend:n,attrs:{perm:c}}),l=d.getInnerMostAxes(l.length,a.shape.length)),d.assertAxesAreInnerMostDims("any",l,h.shape.length);const[p,f]=d.computeOutAndReduceShapes(h.shape,l),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(p),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];t=t||r}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,g);if(o){const e=nw({inputs:{x:b},backend:n,attrs:{shape:d.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},yw={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;bx(a,"argMax");let o=r.parseAxisParam(i,a.shape);const u=d.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=dw({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=d.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],d.assertAxesAreInnerMostDims("argMax",o,l.shape.length);const[h,p]=d.computeOutAndReduceShapes(l.shape,o),f=r.sizeFromShape(h),m=r.makeZerosTypedArray(f,"int32"),g=r.sizeFromShape(p),y=n.data.get(l.dataId).values;for(let r=0;r<m.length;++r){const e=r*g;let t=y[e],n=0;for(let r=0;r<g;++r){const s=y[e+r];s>t&&(t=s,n=r)}m[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},bw={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;bx(a,"argMin");let o=r.parseAxisParam(i,a.shape);const u=d.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=dw({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=d.getInnerMostAxes(o.length,l.shape.length)),o=[o[0]],d.assertAxesAreInnerMostDims("argMin",o,l.shape.length);const[h,p]=d.computeOutAndReduceShapes(l.shape,o),f=r.sizeFromShape(h),m=r.makeZerosTypedArray(f,"int32"),g=r.sizeFromShape(p),y=n.data.get(l.dataId).values;for(let r=0;r<m.length;++r){const e=r*g;let t=y[e],n=0;for(let r=0;r<g;++r){const s=y[e+r];s<t&&(t=s,n=r)}m[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},xw={kernelName:"Asin",backendName:"cpu",kernelFunc:vx("Asin",e=>Math.asin(e))},ww={kernelName:"Asinh",backendName:"cpu",kernelFunc:vx("Asinh",e=>Math.asinh(e))},vw={kernelName:"Atan",backendName:"cpu",kernelFunc:vx("Atan",e=>Math.atan(e))},kw={kernelName:"Atan2",backendName:"cpu",kernelFunc:Yx("Atan2",Ax((e,t)=>Math.atan2(e,t)))},Sw={kernelName:"Atanh",backendName:"cpu",kernelFunc:vx("Atanh",e=>Math.atanh(e))};function Iw(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Or(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const t=w*y,n=w*r[0];for(let m=0;m<s.inChannels;++m)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),S=t+y*b;for(let t=0;t<s.outWidth;++t){const i=t*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let t=v;t<k;t+=u){const s=n+t*r[1];for(let t=c;t<p;t+=l){const n=e[s+t*r[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[S+t*x+m]="avg"===a?b/w:y}}}return m}function Nw(e,t,n,r,s=!1,a=!1){const i=Or(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Or(t,n,e);for(let g=0;g<r.batchSize;++g)for(let e=0;e<r.inChannels;++e)for(let t=0;t<r.outHeight;++t){const n=t*o-d;let y=n;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+n);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let t=y;t<b;t+=l){const i=t-n;for(let n=d;n<x;n+=c){const o=n-h,u=m.get(g,t,n,e);u>w&&(w=u,v=s?a?((g*r.inHeight+t)*r.inWidth+n)*r.inChannels+e:(t*r.inWidth+n)*r.inChannels+e:i*p+o)}}i.set(v,g,t,o,e)}}return i}function Cw(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,p=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Or(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[3]*s.outShape[4],I=s.outShape[4];for(let N=0;N<s.batchSize;++N){const t=N*v,n=N*r[0];for(let x=0;x<s.inChannels;++x)for(let v=0;v<s.outDepth;++v){const N=v*i-m;let C=N;for(;C<0;)C+=l;const T=Math.min(s.inDepth,p+N),E=t+v*k;for(let t=0;t<s.outHeight;++t){const i=t*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(s.inHeight,d+i),v=E+t*S;for(let t=0;t<s.outWidth;++t){const i=t*u-y;let o=i;for(;o<0;)o+=h;const d=Math.min(s.inWidth,f+i),g=v+t*I;let k=b,S=0,N=0;for(let t=C;t<T;t+=l){const s=n+t*r[1];for(let t=p;t<m;t+=c){const n=s+t*r[2];for(let t=o;t<d;t+=h){const s=e[n+t*r[3]+x];if("max"===a&&s>k?k=s:"avg"===a&&(S+=s,N++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+x]="avg"===a?S/N:k}}}}return x}const Tw={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;bx(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(d.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=d.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=Nx({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=Iw(e,0,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},Ew={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=s;bx(a,"avgPool3d");const h=d.computePool3DInfo(a.shape,i,o,1,u,l,c),p=Cw(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),h,"avg");return n.makeTensorInfo(p.shape,"float32",p.values)}},Aw={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;bx([s,a],"avgPool3DGrad");const c=d.computePool3DInfo(a.shape,i,o,1,u,l),h=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.filterDepth,g=c.filterHeight,y=c.filterWidth,b=c.dilationDepth,x=c.dilationHeight,w=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,S=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=S-1-c.padInfo.left,C=k-1-c.padInfo.top,T=Or(a.shape,"float32"),E=1/(m*g*y),A=n.bufferSync(s);for(let d=0;d<c.batchSize;++d)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=t-I,a=n-C,i=r-N;let o=0;for(let t=0;t<v;t+=b){const n=(s+t)/h;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let t=0;t<k;t+=x){const r=(a+t)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let t=0;t<S;t+=w){const s=(i+t)/f;s<0||s>=c.outWidth||Math.floor(s)!==s||(o+=A.get(d,n,r,s,e))}}}T.set(o*E,d,t,n,r,e)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},Rw={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;bx([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=d.computePool2DInfo(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,w=x-1-c.padInfo.left,v=b-1-c.padInfo.top,k=Or(i.shape,"float32"),S=1/(f*m),I=n.data.get(s.dataId).values,N=Or(s.shape,"float32",I);for(let d=0;d<c.batchSize;++d)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const r=t-v,s=n-w;let a=0;for(let t=0;t<b;t+=g){const n=(r+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=y){const r=(s+t)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(a+=N.get(d,n,r,e))}}k.set(a*S,d,t,n,e)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},$w={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:i,offset:o,mean:u,variance:l}=t;r.assert(u.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||u.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==i||u.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),bx([a,u,l,i,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,p=n.data.get(u.dataId).values,d=n.data.get(l.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let v=0,k=0,S=0,I=0;for(let r=0;r<h.length;++r)g[r]=m[v++]+(h[r]-p[k++])*f[S++]/Math.sqrt(d[I++]+c),v>=y&&(v=0),k>=w&&(k=0),S>=b&&(S=0),I>=x&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};function _w(e,t,n,s,a){const i=l.isSliceContinous(s,t,n),o=r.sizeFromShape(n),u=r.computeStrides(s);if(i){const n=l.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const c=Or(s,a,"string"===a?d.fromUint8ToStringArray(e):e),h=Or(n,a);for(let r=0;r<h.size;++r){const e=h.indexToLoc(r),n=e.map((e,n)=>e+t[n]);h.set(c.get(...n),...e)}return"string"===a?d.fromStringArrayToUint8(h.values):h.values}function Fw(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;bx(s,"slice");const[o,u]=l.parseSliceParams(s,a,i);l.assertParamsValid(s,o,u);const c=_w(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,c)}const Dw={kernelName:"Slice",backendName:"cpu",kernelFunc:Fw},Ow={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;bx([s],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),u=d.getReshaped(s.shape,a,o),l=d.getPermuted(u.length,a.length),c=d.getReshapedPermuted(s.shape,a,o),h=d.getSliceBeginCoords(i,a.length),p=d.getSliceSize(c,i,a.length),f=nw({inputs:{x:s},backend:n,attrs:{shape:u}}),m=dw({inputs:{x:f},backend:n,attrs:{perm:l}}),g=nw({inputs:{x:m},backend:n,attrs:{shape:c}}),y=Fw({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};function Mw(e,t,n,s,a){const i=r.sizeFromShape(s),o=r.makeZerosTypedArray(a,n);for(let r=0;r<e.length;r++){const n=e[r];if(n<0)throw new Error("Input x must be non-negative!");n>=a||(o[n]+=i>0?t[r]:1)}return o}function Pw(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=Or([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(r?1:t.size>0?i.get(o,a)+t.get(o,s):i.get(o,a)+1,o,a)}return i}const zw={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=Mw(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},Lw={kernelName:"BroadcastArgs",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=d.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},Bw=Px(e=>Math.ceil(e)),Ww={kernelName:"Ceil",backendName:"cpu",kernelFunc:kx("Ceil",Bw)},Vw={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:vx("ClipByValue",(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e)},Uw={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(r.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.imag,o=n.data.get(a.complexTensorInfos.real.dataId).values,u=n.data.get(i.dataId).values;for(let r=0;r<o.length;r++)s[r]=Math.hypot(o[r],u[r]);return n.makeOutput(s,t.shape,"float32")}};function Gw(e,t,n,s){const a=r.getArrayFromDType(n,r.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=r.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{const s="string"===n?d.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]})}return a}function Hw(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const jw={kernelName:"Imag",backendName:"cpu",kernelFunc:Hw};function qw(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0],o=t.map(e=>e.shape);d.assertParamsConsistent(o,i);let u=d.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(u))return n.makeTensorInfo(u,t[0].dtype,[]);const l=t.filter(e=>r.sizeFromShape(e.shape)>0);if(1===l.length)return Nx({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map(e=>Hx({inputs:{input:e},backend:n})),t=l.map(e=>Hw({inputs:{input:e},backend:n})),r=qw({inputs:e,backend:n,attrs:{axis:i}}),s=qw({inputs:t,backend:n,attrs:{axis:i}}),a=Vx({inputs:{real:r,imag:s},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),a}const c=l.map(e=>{const t=r.sizeFromShape(e.shape.slice(i));return nw({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=c.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));u=d.computeOutShape(c.map(e=>e.shape),1);const p=Gw(h,u,t[0].dtype,1===c[0].shape[0]),f=d.computeOutShape(l.map(e=>e.shape),i),m=n.makeTensorInfo(f,t[0].dtype,p);return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}const Kw={kernelName:"Concat",backendName:"cpu",kernelFunc:qw};function Xw(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dataFormat:l,dilations:c,dimRoundingMode:h}=s;bx([a,i],"conv2d");const p=d.convertConv2DDataFormat(l),f=d.computeConv2DInfo(a.shape,i.shape,o,c,u,h,!1,p),m=f.filterHeight,g=f.filterWidth,y=f.dilationHeight,b=f.dilationWidth,x=f.padInfo.left,w=f.padInfo.top,v="channelsLast"===f.dataFormat,k=new sn(f.outShape,a.dtype),S=r.computeStrides(a.shape),I=r.computeStrides(i.shape),N=S[0],C=v?S[1]:S[2],T=v?S[2]:1,E=v?1:S[1],A=k.strides[0],R=v?k.strides[1]:k.strides[2],$=v?k.strides[2]:1,_=v?1:k.strides[1],F=n.data.get(a.dataId).values,D=n.data.get(i.dataId).values,O=k.values;for(let r=0;r<f.batchSize;++r){const e=r*N,t=r*A;for(let n=0;n<f.outHeight;++n){const r=t+n*R,s=n*f.strideHeight-w;for(let t=0;t<m;++t){const n=s+t*y;if(n<0||n>=f.inHeight)continue;const a=t*I[0],i=e+n*C;for(let e=0;e<f.outWidth;++e){const t=r+e*$,n=e*f.strideWidth-x;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=f.inWidth)continue;const s=i+r*T;let o=a+e*I[1];for(let e=0;e<f.inChannels;++e){const n=F[s+e*E];for(let e=0;e<f.outChannels;++e)O[t+e*_]+=n*D[o+e];o+=f.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,O)}const Yw={kernelName:"Conv2D",backendName:"cpu",kernelFunc:Xw},Zw={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;bx([s,a],"conv2dBackpropFilter");const h=d.convertConv2DDataFormat(u),p=d.computeConv2DInfo(s.shape,c,i,1,o,l,!1,h),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=p,b="channelsLast"===p.dataFormat,x=new sn(p.filterShape,"float32"),w=p.padInfo.left,v=p.padInfo.top,k=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,I=new sn(s.shape,s.dtype,k),N=new sn(a.shape,a.dtype,S);for(let d=0;d<g;++d){const e=Math.max(0,Math.ceil((v-d)/f)),t=Math.min(p.outHeight,(p.inHeight+v-d)/f);for(let n=0;n<y;++n){const r=Math.max(0,Math.ceil((w-n)/m)),s=Math.min(p.outWidth,(p.inWidth+w-n)/m);for(let a=0;a<p.inChannels;++a)for(let i=0;i<p.outChannels;++i){let o=0;for(let u=0;u<p.batchSize;++u)for(let l=e;l<t;++l){const e=d+l*f-v;for(let t=r;t<s;++t){const r=n+t*m-w;o+=b?I.get(u,e,r,a)*N.get(u,l,t,i):I.get(u,a,e,r)*N.get(u,i,l,t)}}x.set(o,d,n,a,i)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Qw={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:u,pad:l,dataFormat:c,dimRoundingMode:h}=s;bx([a,i],"conv2dBackpropInput");const p=r.computeStrides(i.shape),f=r.computeStrides(a.shape);let m=d.convertConv2DDataFormat(c);const g=d.computeConv2DInfo(o,i.shape,u,1,l,h,!1,m),y=new sn(g.inShape,"float32"),b=y.values,x=n.data.get(a.dataId).values,w=n.data.get(i.dataId).values,[v,k,S]=p,{batchSize:I,filterHeight:N,filterWidth:C,inChannels:T,inHeight:E,inWidth:A,outChannels:R,outHeight:$,outWidth:_,strideHeight:F,strideWidth:D}=g;m=g.dataFormat;const O=N-1-g.padInfo.top,M=C-1-g.padInfo.left,P="channelsLast"===m,z=y.strides[0],L=P?y.strides[1]:y.strides[2],B=P?y.strides[2]:1,W=P?1:y.strides[1],V=f[0],U=P?f[1]:f[2],G=P?f[2]:1,H=P?1:f[1];for(let r=0;r<I;++r)for(let e=0;e<T;++e)for(let t=0;t<E;++t){const n=t-O,s=Math.max(0,Math.ceil(n/F)),a=Math.min($,(N+n)/F);for(let i=0;i<A;++i){const o=i-M,u=Math.max(0,Math.ceil(o/D)),l=Math.min(_,(C+o)/D);let c=0;for(let t=s;t<a;++t){const s=t*F-n;for(let n=u;n<l;++n){const a=V*r+U*t+G*n,i=v*(N-1-s)+k*(C-1-(n*D-o))+S*e;for(let e=0;e<R;++e)c+=x[a+H*e]*w[i+e]}}b[z*r+L*t+B*i+W*e]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Jw={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l}=s;bx([a,i],"conv3d");const c=d.computeConv3DInfo(a.shape,i.shape,o,l,u),{filterDepth:h,filterHeight:p,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.front,w=b.left,v=b.top,k=new sn(c.outShape,a.dtype),S=n.data.get(a.dataId).values,I=n.data.get(i.dataId).values,N=k.values,C=r.computeStrides(a.shape),T=r.computeStrides(i.shape);for(let r=0;r<c.batchSize;++r){const e=r*C[0],t=r*k.strides[0];for(let n=0;n<c.outDepth;++n){const r=t+n*k.strides[1],s=n*c.strideDepth-x;for(let t=0;t<h;++t){const n=s+t*m;if(n<0||n>=c.inDepth)continue;const a=t*T[0],i=e+n*C[1];for(let e=0;e<c.outHeight;++e){const t=r+e*k.strides[2],n=e*c.strideHeight-v;for(let e=0;e<p;++e){const r=n+e*g;if(r<0||r>=c.inHeight)continue;const s=a+e*T[1],o=i+r*C[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,r=e*c.strideWidth-w;for(let e=0;e<f;++e){const t=r+e*y;if(t<0||t>=c.inWidth)continue;const a=o+t*c.inChannels;let i=s+e*T[2];for(let e=0;e<c.inChannels;++e){const t=S[a+e];for(let e=0;e<c.outChannels;++e)N[n+e]+=t*I[i+e];i+=c.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},ev={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:u,filterShape:l}=s;bx([a,i],"conv3dBackpropFilterV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),p=d.computeConv3DInfo(a.shape,l,o,1,u),f=p.strideDepth,m=p.strideHeight,g=p.strideWidth,y=p.filterDepth,b=p.filterHeight,x=p.filterWidth,w=new sn(p.filterShape,"float32"),v=w.values,[k,S,I,N]=w.strides,C=n.data.get(i.dataId).values,[T,E,A,R]=h,$=n.data.get(a.dataId).values,[_,F,D,O]=c,M=p.padInfo.front,P=p.padInfo.left,z=p.padInfo.top;for(let r=0;r<y;++r){const e=Math.max(0,Math.ceil((M-r)/f)),t=Math.min(p.outDepth,(p.inDepth+M-r)/f),n=r*k;for(let s=0;s<b;++s){const a=Math.max(0,Math.ceil((z-s)/m)),i=Math.min(p.outHeight,(p.inHeight+z-s)/m),o=s*S+n;for(let n=0;n<x;++n){const u=Math.max(0,Math.ceil((P-n)/g)),l=Math.min(p.outWidth,(p.inWidth+P-n)/g),c=n*I+o;for(let o=0;o<p.inChannels;++o){const h=o*N+c;for(let c=0;c<p.outChannels;++c){let d=0;for(let h=0;h<p.batchSize;++h){const p=h*_,y=h*T;for(let h=e;h<t;++h){const e=(r+h*f-M)*F+p,t=h*E+y;for(let r=a;r<i;++r){const a=(s+r*m-z)*D+e,i=r*A+t;for(let e=u;e<l;++e)d+=$[(n+e*g-P)*O+a+o]*C[e*R+i+c]}}}v[h+c]=d}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},tv={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:u,inputShape:l}=s;bx([a],"conv3dBackpropInputV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),p=d.computeConv3DInfo(l,i.shape,u,1,o),f=new sn(p.inShape,"float32"),m=f.values,[g,y,b,x]=f.strides,w=n.data.get(a.dataId).values,[v,k,S,I]=c,N=n.data.get(i.dataId).values,[C,T,E,A]=h,{batchSize:R,filterDepth:$,filterHeight:_,filterWidth:F,inChannels:D,inDepth:O,inHeight:M,inWidth:P,outChannels:z,outDepth:L,outHeight:B,outWidth:W,strideDepth:V,strideHeight:U,strideWidth:G}=p,H=$-1-p.padInfo.front,j=_-1-p.padInfo.top,q=F-1-p.padInfo.left;for(let r=0;r<R;++r)for(let e=0;e<D;++e)for(let t=0;t<O;++t){const n=t-H,s=Math.max(0,Math.ceil(n/V)),a=Math.min(L,($+n)/V);for(let i=0;i<M;++i){const o=i-j,u=Math.max(0,Math.ceil(o/U)),l=Math.min(B,(_+o)/U);for(let c=0;c<P;++c){const h=c-q,p=Math.max(0,Math.ceil(h/G)),d=Math.min(W,(F+h)/G);let f=0;for(let t=s;t<a;++t){const s=t*V-n;for(let n=u;n<l;++n){const a=n*U-o;for(let i=p;i<d;++i){const o=v*r+k*t+S*n+I*i,u=C*($-1-s)+T*(_-1-a)+E*(F-1-(i*G-h))+A*e;for(let e=0;e<z;++e)f+=w[o+e]*N[u+e]}}}m[g*r+y*t+b*i+x*c+e]=f}}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},nv={kernelName:"Cos",backendName:"cpu",kernelFunc:vx("Cos",e=>Math.cos(e))},rv={kernelName:"Cosh",backendName:"cpu",kernelFunc:vx("Cosh",e=>Math.cosh(e))},sv={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:u,method:l,extrapolationValue:c}=s,[h,p,d,f]=a.shape,m=i.shape[0],[g,y]=u,b=Or([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,w=n.data.get(o.dataId).values,v=n.data.get(a.dataId).values,k=r.computeStrides(a.shape),S=r.computeStrides(b.shape);for(let r=0;r<m;r++){const e=4*r,t=x[e],n=x[e+1],s=x[e+2],a=x[e+3],i=w[r];if(i>=h)continue;const o=g>1?(s-t)*(p-1)/(g-1):0,u=y>1?(a-n)*(d-1)/(y-1):0;for(let h=0;h<g;h++){const e=g>1?t*(p-1)+h*o:.5*(t+s)*(p-1);if(e<0||e>p-1)for(let t=0;t<y;t++)for(let e=0;e<f;e++)b.values[e+t*S[2]+h*S[1]+r*S[0]]=c;else if("bilinear"===l){const t=Math.floor(e),s=Math.ceil(e),o=e-t;for(let e=0;e<y;e++){const l=y>1?n*(d-1)+e*u:.5*(n+a)*(d-1);if(l<0||l>d-1){for(let t=0;t<f;t++)b.values[t+e*S[2]+h*S[1]+r*S[0]]=c;continue}const p=Math.floor(l),m=Math.ceil(l),g=l-p;for(let n=0;n<f;n++){let a=n+p*k[2]+t*k[1]+i*k[0];const u=v[a];a=n+m*k[2]+t*k[1]+i*k[0];const l=v[a];a=n+p*k[2]+s*k[1]+i*k[0];const c=v[a];a=n+m*k[2]+s*k[1]+i*k[0];const d=v[a],f=u+(l-u)*g;a=n+e*S[2]+h*S[1]+r*S[0],b.values[a]=f+(c+(d-c)*g-f)*o}}}else for(let t=0;t<y;++t){const s=y>1?n*(d-1)+t*u:.5*(n+a)*(d-1);if(s<0||s>d-1){for(let e=0;e<f;e++)b.values[e+t*S[2]+h*S[1]+r*S[0]]=c;continue}const o=Math.round(s),l=Math.round(e);for(let e=0;e<f;e++)b.values[e+t*S[2]+h*S[1]+r*S[0]]=v[e+o*k[2]+l*k[1]+i*k[0]]}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},av={kernelName:"Cumprod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:u}=s;bx(a,"cumprod");const l=d.getAxesPermutation([i],a.shape.length);let c=a;null!=l&&(c=dw({inputs:{x:a},backend:n,attrs:{perm:l}}));const h=d.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=bn(c.dtype,"int32"),f=r.makeOnesTypedArray(r.sizeFromShape(c.shape),p),m=n.data.get(c.dataId).values,g=c.shape[c.shape.length-1],y=u?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let r=0;r<m.length;r+=g)for(let e=0;e<g;e++){const t=y(r,e);if(0===e)f[t]=o?1:m[t];else{const n=y(r,e-1);f[t]=o?m[n]*f[n]:m[t]*f[n]}}const b=n.makeTensorInfo(c.shape,p,f);if(null!=l){const e=dw({inputs:{x:b},backend:n,attrs:{perm:d.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),e}return b}},iv={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:u}=s;bx(a,"cumsum");const l=d.getAxesPermutation([i],a.shape.length);let c=a;null!=l&&(c=dw({inputs:{x:a},backend:n,attrs:{perm:l}}));const h=d.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const p=bn(c.dtype,"int32"),f=r.makeZerosTypedArray(r.sizeFromShape(c.shape),p),m=n.data.get(c.dataId).values,g=c.shape[c.shape.length-1],y=u?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let r=0;r<m.length;r+=g)for(let e=0;e<g;e++){const t=y(r,e);if(0===e)f[t]=o?0:m[t];else{const n=y(r,e-1);f[t]=o?m[n]+f[n]:m[t]+f[n]}}const b=n.makeTensorInfo(c.shape,p,f);if(null!=l){const e=dw({inputs:{x:b},backend:n,attrs:{perm:d.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),e}return b}},ov={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=Mw(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=Pw(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+s.shape.length+".")}},uv={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.assert("NHWC"===o,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+o);const u=a.shape[0],l=a.shape[1],c=a.shape[2],h=a.shape[3],p=l*i,d=c*i,f=h/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(u*p*d*f);let y=0;for(let r=0;r<u;++r)for(let e=0;e<p;++e){const t=Math.floor(e/i),n=e%i;for(let e=0;e<d;++e){const s=Math.floor(e/i),a=(n*i+e%i)*f;for(let e=0;e<f;++e)g[y++]=m[e+a+h*(s+c*(t+l*r))]}}return n.makeTensorInfo([u,p,d,f],a.dtype,g)}};function lv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=s;bx([a,i],"depthwiseConv2DNative");const h=r.computeStrides(a.shape),p=r.computeStrides(i.shape);let f=l;null==f&&(f=[1,1]),r.assert(d.eitherStridesOrDilationsAreOne(o,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);const m=d.computeConv2DInfo(a.shape,i.shape,o,f,u,c,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:w}=m,v=w.left,k=w.top,S=m.outChannels/m.inChannels,I=new sn(m.outShape,a.dtype),N=n.data.get(a.dataId).values,C=n.data.get(i.dataId).values,T=I.values;for(let r=0;r<m.batchSize;++r){const e=r*h[0],t=r*I.strides[0];for(let n=0;n<m.outHeight;++n){const r=t+n*I.strides[1],s=n*m.strideHeight-k;for(let t=0;t<g;++t){const n=s+t*b;if(n<0||n>=m.inHeight)continue;const a=t*p[0],i=e+n*h[1];for(let e=0;e<m.outWidth;++e){const t=r+e*I.strides[2],n=e*m.strideWidth-v;for(let e=0;e<y;++e){const r=n+e*x;if(r<0||r>=m.inWidth)continue;const s=i+r*m.inChannels;let o=t,u=a+e*p[1];for(let e=0;e<m.inChannels;++e){const t=N[s+e];for(let e=0;e<S;++e)T[o+e]+=t*C[u+e];o+=S,u+=S}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const cv={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:lv},hv={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;bx([s,a],"depthwiseConv2dNativeBackpropFilter");const h=d.computeConv2DInfo(s.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=h,y=new sn(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,w=h.outChannels/h.inChannels,v=n.data.get(s.dataId).values,k=new sn(s.shape,s.dtype,v),S=n.data.get(a.dataId).values,I=new sn(a.shape,a.dtype,S);for(let d=0;d<m;++d){const e=Math.max(0,Math.ceil((x-d)/p)),t=Math.min(h.outHeight,(h.inHeight+x-d)/p);for(let n=0;n<g;++n){const r=Math.max(0,Math.ceil((b-n)/f)),s=Math.min(h.outWidth,(h.inWidth+b-n)/f);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/w),o=a%w;let u=0;for(let l=0;l<h.batchSize;++l)for(let o=e;o<t;++o){const e=d+o*p-x;for(let t=r;t<s;++t)u+=k.get(l,e,n+t*f-b,i)*I.get(l,o,t,a)}y.set(u,d,n,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},pv={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:u,pad:l,dimRoundingMode:c,inputShape:h}=s;bx([a,i],"depthwiseConv2DNativeBackpropInput");const p=r.computeStrides(a.shape),f=r.computeStrides(i.shape),m=d.computeConv2DInfo(h,i.shape,o,u,l,c,!0),g=new sn(m.inShape,"float32"),y=g.values,[b,x,w]=g.strides,v=n.data.get(a.dataId).values,[k,S,I]=p,N=n.data.get(i.dataId).values,[C,T,E]=f,{batchSize:A,filterHeight:R,filterWidth:$,inChannels:_,inHeight:F,inWidth:D,outChannels:O,outHeight:M,outWidth:P,strideHeight:z,strideWidth:L}=m,B=R-1-m.padInfo.top,W=$-1-m.padInfo.left,V=O/_;for(let r=0;r<A;++r)for(let e=0;e<_;++e)for(let t=0;t<F;++t){const n=t-B,s=Math.max(0,Math.ceil(n/z)),a=Math.min(M,(R+n)/z);for(let i=0;i<D;++i){const o=i-W,u=Math.max(0,Math.ceil(o/L)),l=Math.min(P,($+o)/L);let c=0;for(let t=s;t<a;++t){const s=t*z-n;for(let n=u;n<l;++n){const a=k*r+S*t+I*n,i=C*(R-1-s)+T*($-1-(n*L-o))+E*e;for(let t=0;t<V;++t)c+=v[a+(e*V+t)]*N[i+t]}}y[b*r+x*t+w*i+e]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},dv={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=r.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,o=Or([a,a],s.dtype),u=o.values;for(let r=0;r<i.length;r++)u[r*a+r]=i[r];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},fv={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=l.data.get(s.dataId).values,h=s.shape.length,p=l.data.get(a.dataId).values,f=a.shape.length,{batchSize:m,inHeight:g,inWidth:y,inChannels:b,outHeight:x,outWidth:w,padInfo:v,strideHeight:k,strideWidth:S,filterHeight:I,filterWidth:N,dilationHeight:C,dilationWidth:T,outShape:E}=d.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",u),A=r.sizeFromShape(E),R=E.length,$=r.getArrayFromDType(s.dtype,A);for(let d=0;d<m;++d)for(let e=0;e<x;++e){const t=e*k-v.top;for(let n=0;n<w;++n){const i=n*S-v.left;for(let o=0;o<b;++o){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<I;++e){const n=t+e*C;if(n>=0&&n<g)for(let t=0;t<N;++t){const l=i+t*T;if(l>=0&&l<y){const i=r.locToIndex([d,n,l,o],h,r.computeStrides(s.shape)),m=r.locToIndex([e,t,o],f,r.computeStrides(a.shape)),g=c[i]+p[m];g>u&&(u=g)}}}$[r.locToIndex([d,e,n,o],R,r.computeStrides(E))]=u}}}return{dataId:l.write(r.toTypedArray($,s.dtype),E,s.dtype),shape:E,dtype:s.dtype}}},mv={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),p=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:S,filterWidth:I,dilationHeight:N,dilationWidth:C,outShape:T}=d.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l);r.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${T.length}, but got `+i.rank);const E=r.toNestedArray(T,c.data.get(i.dataId).values),A=r.makeZerosNestedTypedArray(a.shape,a.dtype);for(let r=0;r<f;++r)for(let e=0;e<b;++e){const t=e*v-w.top;for(let n=0;n<x;++n){const s=n*k-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<S;++e){const n=t+e*N;if(n>=0&&n<m)for(let t=0;t<I;++t){const l=s+t*C;if(l>=0&&l<g){const s=h[r][n][l][a]+p[e][t][a];s>i&&(i=s,o=e,u=t)}}}A[o][u][a]+=E[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(A,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},gv={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:u,dilations:l}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),p=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:S,filterWidth:I,dilationHeight:N,dilationWidth:C,outShape:T}=d.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l);r.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${T.length}, but got `+i.rank);const E=r.toNestedArray(T,c.data.get(i.dataId).values),A=r.makeZerosNestedTypedArray(s.shape,s.dtype);for(let r=0;r<f;++r)for(let e=0;e<b;++e){const t=e*v-w.top;for(let n=0;n<x;++n){const s=n*k-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=t<0?0:t,u=s<0?0:s;for(let e=0;e<S;++e){const n=t+e*N;if(n>=0&&n<m)for(let t=0;t<I;++t){const l=s+t*C;if(l>=0&&l<g){const s=h[r][n][l][a]+p[e][t][a];s>i&&(i=s,o=n,u=l)}}}A[r][o][u][a]+=E[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(A,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},yv=Ax((e,t)=>e*t),bv=Zx((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),xv=Yx("Multiply",yv,bv),wv={kernelName:"Multiply",backendName:"cpu",kernelFunc:xv};function vv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;let u;bx(a,"sum"),u="bool"===a.dtype?Kx({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):Nx({inputs:{x:a},backend:n});const l=u.shape.length,c=r.parseAxisParam(i,u.shape),h=d.getAxesPermutation(c,l);let p=c,f=u;null!=h&&(f=dw({inputs:{x:u},backend:n,attrs:{perm:h}}),p=d.getInnerMostAxes(p.length,l)),d.assertAxesAreInnerMostDims("sum",p,f.shape.length);const[m,g]=d.computeOutAndReduceShapes(f.shape,p);let y=Gx(n,m,d.upcastType(f.dtype,"int32"));const b=r.sizeFromShape(g),x=n.data.get(y.dataId).values,w=n.data.get(f.dataId).values;for(let r=0;r<x.length;++r){const e=r*b;let t=0;for(let n=0;n<b;++n)t+=w[e+n];x[r]=t}if(o){const e=y;y=nw({inputs:{x:y},backend:n,attrs:{shape:d.expandShapeToKeepDim(y.shape,c)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(u),null!=h&&n.disposeIntermediateTensorInfo(f),y}const kv={kernelName:"Sum",backendName:"cpu",kernelFunc:vv},Sv={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,i=t,{allDims:o,summedDims:u,idDims:l}=d.decodeEinsumEquation(a,i.length);d.checkEinsumDimSizes(o.length,l,i);const{path:c,steps:h}=d.getEinsumComputePath(u,l),p=h.length;let f=null,m=o.length;const g=[];for(let y=0;y<p;++y){for(const e of h[y]){const{permutationIndices:t,expandDims:s}=d.getEinsumPermutation(m,l[e]);let a;d.isIdentityPermutation(t)?a=i[e]:(a=dw({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),g.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);r.arraysEqual(a.shape,o)||(a=nw({inputs:{x:a},backend:n,attrs:{shape:o}}),g.push(a)),null===f?f=a:(f=xv({inputs:{a,b:f},backend:n}),g.push(f))}y<p-1&&(c[y]>=0&&(f=vv({inputs:{x:f},backend:n,attrs:{axis:c[y]-(o.length-m),keepDims:!1}}),g.push(f)),m--)}for(const r of g)r!==f&&n.disposeIntermediateTensorInfo(r);return f}},Iv={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;bx([s,a],"eluGrad");const i=new Float32Array(r.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values;for(let r=0;r<o.length;++r){const e=o[r];i[r]=e>=1?u[r]:u[r]*(e+1)}return n.makeTensorInfo(a.shape,"float32",i)}},Nv=Ax((e,t)=>e===t?1:0),Cv=Yx("Equal",Nv,null,"bool"),Tv={kernelName:"Equal",backendName:"cpu",kernelFunc:Cv},Ev=d.ERF_P,Av=d.ERF_A1,Rv=d.ERF_A2,$v=d.ERF_A3,_v=d.ERF_A4,Fv=d.ERF_A5,Dv={kernelName:"Erf",backendName:"cpu",kernelFunc:vx("Erf",e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+Ev*n);return t*(1-((((Fv*r+_v)*r+$v)*r+Rv)*r+Av)*r*Math.exp(-n*n))})},Ov=Px(e=>Math.exp(e)),Mv=kx("Exp",Ov,"float32"),Pv={kernelName:"Exp",backendName:"cpu",kernelFunc:Mv};function zv(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:i}=s,o=a.shape.length,u=a.shape.slice();let l=i;return i<0&&(r.assert(-(o+1)<=i,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+i+1),u.splice(l,0,1),nw({inputs:{x:a},backend:n,attrs:{shape:u}})}const Lv={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:zv},Bv=Px(e=>Math.expm1(e)),Wv={kernelName:"Expm1",backendName:"cpu",kernelFunc:kx("Expm1",Bv)},Vv=Yx("RealDiv",Ax((e,t)=>e/t)),Uv={kernelName:"RealDiv",backendName:"cpu",kernelFunc:Vv},Gv=Ax((e,t)=>e-t),Hv=Zx((e,t,n,r)=>({real:e-n,imag:t-r})),jv=Yx("Sub",Gv,Hv),qv={kernelName:"Sub",backendName:"cpu",kernelFunc:jv};function Kv(e,t,n){const s=e.shape,a=s[0],i=s[1],o=n.data.get(e.dataId),u=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,c=[a,i],h=r.sizeFromShape(c),p=r.getTypedArrayFromDType("float32",h),f=r.getTypedArrayFromDType("float32",h);for(let r=0;r<a;r++){const e=Fw({inputs:{x:u},backend:n,attrs:{begin:[r,0],size:[1,i]}}),s=Fw({inputs:{x:l},backend:n,attrs:{begin:[r,0],size:[1,i]}}),a=Vx({inputs:{real:e,imag:s},backend:n}),{real:o,imag:c}=Xv(a,t,n),h=d.mergeRealAndImagArrays(o,c);for(let t=0;t<i;t++){const e=d.getComplexWithIndex(h,t);p[r*i+t]=e.real,f[r*i+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a)}const m=n.makeTensorInfo(c,"float32",p),g=n.makeTensorInfo(c,"float32",f),y=Vx({inputs:{real:m,imag:g},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}function Xv(e,t,n){const s=r.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((u=s)&u-1)){const a=function e(t,n,r,s,a){if(1===r)return{real:t,imag:n};const i=d.mergeRealAndImagArrays(t,n),o=r/2,u=d.complexWithEvenIndex(i),l=u.real,c=u.imag,h=[l.length],p=a.makeTensorInfo(h,"float32",l),f=a.makeTensorInfo(h,"float32",c),m=Vx({inputs:{real:p,imag:f},backend:a}),g=d.complexWithOddIndex(i),y=g.real,b=g.imag,x=[y.length],w=a.makeTensorInfo(x,"float32",y),v=a.makeTensorInfo(x,"float32",b),k=Vx({inputs:{real:w,imag:v},backend:a}),S=e(l,c,o,s,a),I=S.real,N=S.imag,C=[I.length],T=a.makeTensorInfo(C,"float32",I),E=a.makeTensorInfo(C,"float32",N),A=Vx({inputs:{real:T,imag:E},backend:a}),R=e(y,b,o,s,a),$=R.real,_=R.imag,F=[$.length],D=a.makeTensorInfo(F,"float32",$),O=a.makeTensorInfo(F,"float32",_),M=Vx({inputs:{real:D,imag:O},backend:a}),P=d.exponents(r,s),z=[P.real.length],L=a.makeTensorInfo(z,"float32",P.real),B=a.makeTensorInfo(z,"float32",P.imag),W=Vx({inputs:{real:L,imag:B},backend:a}),V=xv({inputs:{a:W,b:M},backend:a}),U=ew({inputs:{a:A,b:V},backend:a}),G=jv({inputs:{a:A,b:V},backend:a}),H=Hx({inputs:{input:U},backend:a}),j=Hx({inputs:{input:G},backend:a}),q=Hw({inputs:{input:U},backend:a}),K=Hw({inputs:{input:G},backend:a}),X=qw({inputs:[H,j],backend:a,attrs:{axis:0}}),Y=qw({inputs:[q,K],backend:a,attrs:{axis:0}}),Z=a.data.get(X.dataId).values,Q=a.data.get(Y.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(k),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(A),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(M),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(X),a.disposeIntermediateTensorInfo(Y),{real:Z,imag:Q}}(i,o,s,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",a.real),t=n.makeTensorInfo(u,"float32",a.imag),i=n.makeTensorInfo([],"float32",r.createScalarValue(s,"float32")),o=Nx({inputs:{x:i},backend:n}),l=Uv.kernelFunc({inputs:{a:e,b:i},backend:n}),c=Uv.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(l.dataId).values,p=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),{real:h,imag:p}}return a}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=d.exponent(s*r,t,n),u=d.getComplexWithIndex(e,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=t,i/=t),d.assignToTypedArray(r,a,i,s)}return r}(d.mergeRealAndImagArrays(i,o),s,t);return d.splitRealAndImagArrays(e)}var u}const Yv={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=nw({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),u=Kv(o,!1,n),l=nw({inputs:{x:u},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};function Zv(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:i}=n,o=i||r.inferDtype(a),u=r.getArrayFromDType(o,r.sizeFromShape(s));return function(e,t,n){e.fill(t)}(u,a),t.makeTensorInfo(s,o,u)}const Qv={kernelName:"Fill",backendName:"cpu",kernelFunc:Zv},Jv={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=r.getTypedArrayFromDType(n.dtype,r.sizeFromShape(n.shape)),[i,o,u,l]=n.shape,c=s.data.get(n.dataId).values;for(let r=0;r<i;r++){const e=r*u*o*l;for(let t=0;t<o;t++){const n=t*(u*l);for(let t=0;t<u;t++){const r=t*l;for(let s=0;s<l;s++){const i=Math.round(u-t-1),o=e+n+r+s;let h=c[o];i>=0&&i<u&&(h=c[e+n+i*l+s]),a[o]=h}}}}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},ek=Px(e=>Math.floor(e)),tk={kernelName:"Floor",backendName:"cpu",kernelFunc:kx("Floor",ek)},nk={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Yx("FloorDiv",Ax((e,t)=>Math.floor(e/t)),null,"int32")},rk={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=Xw({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=nw({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=ew({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=ew({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=nw({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Wx(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=Wx(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}},sk={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=lv({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=ew({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Wx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function ak(e,t,n,r,s,a,i,o,u){const l=Or([r,a],n);for(let c=0;c<r;c++){const n=[];let r=0;for(let t=0;t<s;t++){const a=e[c*s+t];r+=a*i[t],n.push(a)}if(r<0||r>=u/a)throw new Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<a;e++)l.values[c*a+e]=t.get(...t.indexToLoc(r*a+e))}return l}const ik={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=r.sizeFromShape(s.shape),o=a.shape,u=o[o.length-1],[l,c,h,p]=d.prepareAndValidate(s,a);if(0===c)return n.makeTensorInfo(l,s.dtype,[]);const f=ak(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,c,u,h,p,s.shape,i);return n.makeTensorInfo(l,s.dtype,f.values)}};function ok(e,t,n){const r=Or(n,e.dtype);for(let s=0;s<r.size;++s){const n=r.indexToLoc(s).slice(),a=t.locToIndex([n[0],n[2]]);n[2]=t.values[a];const i=e.locToIndex(n);0<=i&&i<e.values.length&&(r.values[s]=e.values[i])}return r}const uk={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=s;bx([a,i],"gatherV2");const l=r.parseAxisParam(o,a.shape)[0],c=n.data.get(i.dataId).values,h=a.shape[l];for(let d=0;d<c.length;++d){const e=c[d];r.assert(e<=h-1&&e>=0,()=>`GatherV2: the index value ${e} is not in [0, ${h-1}]`)}let p=u;null==u&&(p=0);const f=r.sizeFromShape(i.shape),m=d.segment_util.collectGatherOpShapeInfo(a,i,l,p),g=nw({inputs:{x:a},backend:n,attrs:{shape:[m.batchSize,m.outerSize,m.dimSize,m.sliceSize]}}),y=nw({inputs:{x:i},backend:n,attrs:{shape:[m.batchSize,f/m.batchSize]}}),b=[m.batchSize,m.outerSize,f/m.batchSize,m.sliceSize],x=n.bufferSync(y),w=ok(n.bufferSync(g),x,b);return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),n.makeTensorInfo(m.outputShape,w.dtype,w.values)}},lk=Ax((e,t)=>e>t?1:0),ck={kernelName:"Greater",backendName:"cpu",kernelFunc:Yx("Greater",lk,null,"bool")},hk=Ax((e,t)=>e>=t?1:0),pk={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Yx("GreaterEqual",hk,null,"bool")},dk={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=nw({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),u=Kv(o,!0,n),l=nw({inputs:{x:u},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}},fk={kernelName:"IsFinite",backendName:"cpu",kernelFunc:vx("IsFinite",e=>Number.isFinite(e)?1:0,"bool")},mk={kernelName:"IsInf",backendName:"cpu",kernelFunc:vx("IsInf",e=>Math.abs(e)===1/0?1:0,"bool")},gk={kernelName:"IsNan",backendName:"cpu",kernelFunc:vx("IsNan",e=>Number.isNaN(e)?1:0,"bool")},yk=Ax((e,t)=>e<t?1:0),bk={kernelName:"Less",backendName:"cpu",kernelFunc:Yx("Less",yk,null,"bool")},xk=Ax((e,t)=>e<=t?1:0),wk={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Yx("LessEqual",xk,null,"bool")};function vk(e,t,n){const s=(t-e)/(n-1),a=r.makeZerosTypedArray(n,"float32");a[0]=e;for(let r=1;r<a.length;r++)a[r]=a[r-1]+s;return a}const kk={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=vk(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},Sk=Px(e=>Math.log(e)),Ik={kernelName:"Log",backendName:"cpu",kernelFunc:kx("Log",Sk)},Nk={kernelName:"Log1p",backendName:"cpu",kernelFunc:vx("Log1p",e=>Math.log1p(e))},Ck={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Yx("LogicalAnd",Ax((e,t)=>e&&t),null,"bool")},Tk={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:vx("LogicalNot",e=>e?0:1,"bool")},Ek={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Yx("LogicalOr",Ax((e,t)=>e||t),null,"bool")},Ak={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:u,beta:l}=s;bx(a,"LRN");const c=a.shape[3],h=c-1,p=n.data.get(a.dataId).values,d=r.sizeFromShape(a.shape),f=new Float32Array(d);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,h);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let r=0;r<d;r++){const e=m(r),t=p[r]*Math.pow(o+u*e,-l);f[r]=t}return n.makeTensorInfo(a.shape,a.dtype,f)}},Rk={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:i,dy:o}=t,{depthRadius:u,bias:l,alpha:c,beta:h}=s;bx(o,"LRNGrad");const p=r.sizeFromShape(o.shape),d=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let r=0;r<b;r++){const e=r%d,t=r-e+Math.max(0,e-u),n=r-e+Math.min(d,e+u+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(m[r],2);s=c*s+l;for(let a=t;a<n;a++){let e=-2*c*h*m[a]*g[r]/s;r===a&&(e+=Math.pow(s,-h)),e*=f[r],y[a]+=e}}return n.makeTensorInfo(o.shape,a.dtype,y)}};function $k(e,t,n,s){const a=r.getTypedArrayFromDType(s,r.sizeFromShape(n));for(let r=0;r<a.length;++r){const n=r*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];(Number.isNaN(t)||t>s)&&(s=t)}a[r]=s}return a}function _k(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,u=n;let l=a.shape;const c=l.length,h=r.parseAxisParam(i,l);let p=h;const f=d.getAxesPermutation(p,c);let m=u.data.get(a.dataId).values;if(null!=f){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=l[f[t]];m=pw(m,l,a.dtype,f,e),p=d.getInnerMostAxes(p.length,c),l=e}bx(a,"max"),d.assertAxesAreInnerMostDims("max",p,c);const[g,y]=d.computeOutAndReduceShapes(l,p),b=$k(m,r.sizeFromShape(y),g,a.dtype),x=u.write(b,g,a.dtype);let w=g;return o&&(w=d.expandShapeToKeepDim(g,h)),{dataId:x,shape:w,dtype:a.dtype}}const Fk={kernelName:"Max",backendName:"cpu",kernelFunc:_k},Dk=Ax((e,t)=>Math.max(e,t)),Ok={kernelName:"Maximum",backendName:"cpu",kernelFunc:Yx("Maximum",Dk)},Mk={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;bx(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(d.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=d.computePool2DInfo(a.shape,i,o,1,u,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=Nx({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=Iw(e,0,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},Pk={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l,dataFormat:c}=s;bx(a,"maxPool3d");const h=d.computePool3DInfo(a.shape,i,o,1,u,l,c),p=Cw(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),h,"max");return n.makeTensorInfo(p.shape,"float32",p.values)}},zk={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;bx([s,a],"maxPool3DGrad");const c=d.computePool3DInfo(a.shape,i,o,1,u,l),h=function(e,t){const n=Or(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const S=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<S;a+=u){const i=a-d,o=e.get(m,t,r,a,g);o>=I&&(I=o,N=n*c*h+s*c+i)}}}n.set(N,m,y,r,s,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,f=c.strideHeight,m=c.strideWidth,g=c.dilationDepth,y=c.dilationHeight,b=c.dilationWidth,x=c.effectiveFilterDepth,w=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=x-1-c.padInfo.front,S=v-1-c.padInfo.left,I=w-1-c.padInfo.top,N=Or(a.shape,"float32"),C=n.bufferSync(s);for(let d=0;d<c.batchSize;++d)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=t-k,a=n-I,i=r-S;let o=0;for(let t=0;t<x;t+=g){const n=(s+t)/p;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let r=0;r<w;r+=y){const s=(a+r)/f;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let a=0;a<v;a+=b){const u=(i+a)/m;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const l=x*w*v-1-h.get(d,n,s,u,e)===t*w*v+r*v+a?1:0;0!==l&&(o+=C.get(d,n,s,u,e)*l)}}}N.set(o,d,t,n,r,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},Lk={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;bx([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=d.computePool2DInfo(o.shape,u,l,1,c,h),f=n.data.get(o.dataId).values,m=Or(p.outShape,o.dtype,Nw(f,o.shape,o.dtype,p).values),g=p.strideHeight,y=p.strideWidth,b=p.dilationHeight,x=p.dilationWidth,w=p.effectiveFilterHeight,v=p.effectiveFilterWidth,k=v-1-p.padInfo.left,S=w-1-p.padInfo.top,I=Or(o.shape,"float32"),N=n.data.get(s.dataId).values,C=Or(s.shape,"float32",N);for(let d=0;d<p.batchSize;++d)for(let e=0;e<p.inChannels;++e)for(let t=0;t<p.inHeight;++t)for(let n=0;n<p.inWidth;++n){const r=t-S,s=n-k;let a=0;for(let t=0;t<w;t+=b){const n=(r+t)/g;if(!(n<0||n>=p.outHeight||Math.floor(n)!==n))for(let r=0;r<v;r+=x){const i=(s+r)/y;if(i<0||i>=p.outWidth||Math.floor(i)!==i)continue;const o=w*v-1-m.get(d,n,i,e)===t*v+r?1:0;0!==o&&(a+=C.get(d,n,i,e)*o)}}I.set(a,d,t,n,e)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},Bk={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,l=n;bx(s,"MaxPoolWithArgmax");const c=l.data.get(s.dataId).values,h=d.computePool2DInfo(s.shape,a,i,[1,1],o),[p,f]=function(e,t,n,s,a){const i=Iw(e,0,n,r.computeStrides(t),a,"max"),o=Nw(e,t,n,a,!0,s);return[i.values,o.values]}(c,s.shape,s.dtype,u,h),m=l.write(p,h.outShape,s.dtype),g=l.write(f,h.outShape,s.dtype);return[{dataId:m,shape:h.outShape,dtype:s.dtype},{dataId:g,shape:h.outShape,dtype:"int32"}]}},Wk={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=r.parseAxisParam(i,a.shape),l=d.computeOutAndReduceShapes(a.shape,u),c=r.sizeFromShape(l[1]),h=[],p=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(p);const f=Kx({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(f);const m=Vv({inputs:{a:f,b:p},backend:n});h.push(m);const g=vv({inputs:{x:m},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}},Vk={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;bx(a,"min");const u=r.parseAxisParam(i,a.shape);let l=u;const c=d.getAxesPermutation(l,a.shape.length);let h=a;null!=c&&(h=dw({inputs:{x:a},backend:n,attrs:{perm:c}}),l=d.getInnerMostAxes(l.length,a.shape.length)),d.assertAxesAreInnerMostDims("min",l,h.shape.length);const[p,f]=d.computeOutAndReduceShapes(h.shape,l),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(p),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];(Number.isNaN(r)||r<t)&&(t=r)}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(p,h.dtype,g);if(o){const e=nw({inputs:{x:b},backend:n,attrs:{shape:d.expandShapeToKeepDim(p,u)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Uk=Ax((e,t)=>Math.min(e,t)),Gk={kernelName:"Minimum",backendName:"cpu",kernelFunc:Yx("Minimum",Uk)},Hk={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,mode:o}=s;bx(a,"mirrorPad");const u=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),c=i.map((e,t)=>e[0]+a.shape[t]),h="reflect"===o?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,f=r.computeStrides(a.shape),m=r.sizeFromShape(u),g=u.length,y=r.computeStrides(u),b=r.getTypedArrayFromDType(a.dtype,m);for(let x=0;x<m;x++){let e=r.indexToLoc(x,g,y);for(let n=0;n<g;n++)e[n]<l[n]?e[n]=2*l[n]-e[n]-h:e[n]>=c[n]&&(e[n]=2*(c[n]-1)-e[n]+h);e=e.map((e,t)=>e-l[t]);const t=r.locToIndex(e,d,f);b[x]=p[t]}return{dataId:n.write(b,u,a.dtype),shape:u,dtype:a.dtype}}},jk={kernelName:"Mod",backendName:"cpu",kernelFunc:Yx("Mod",Ax((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}))};function qk(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=a.shape.length;let u=i;if(-1===u&&(u=o-1),u!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${u}`);const l=r.parseAxisParam([u],a.shape),c=_k({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),h=d.expandShapeToKeepDim(c.shape,l),p=nw({inputs:{x:c},backend:n,attrs:{shape:h}}),f=jv({inputs:{a,b:p},backend:n}),m=Mv({inputs:{x:f},backend:n}),g=vv({inputs:{x:m},backend:n,attrs:{axis:l,keepDims:!1}}),y=nw({inputs:{x:g},backend:n,attrs:{shape:h}}),b=Vv({inputs:{a:m,b:y},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}const Kk={kernelName:"Softmax",backendName:"cpu",kernelFunc:qk},Xk={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:u}=s;bx(a,"multinomial");const l=u?a:qk({inputs:{logits:a},backend:n,attrs:{dim:-1}}),c=l.shape[0],h=l.shape[1],p=n.data.get(l.dataId).values,d=[c,i],f=r.makeZerosTypedArray(r.sizeFromShape(d),"int32");for(let r=0;r<c;++r){const e=r*h,t=new Float32Array(h-1);t[0]=p[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+p[e+r];const n=Lo.alea(o.toString()),s=r*i;for(let r=0;r<i;++r){const e=n();f[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){f[s+r]=n;break}}}return u||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",f)}};function Yk(e,t,n){const s=r.createScalarValue(-1,n);return yv([],t,s,e,n)}const Zk={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;bx(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=Yk(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},Qk=f.nonMaxSuppressionV3Impl,Jk={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;bx(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=Qk(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},eS=f.nonMaxSuppressionV4Impl,tS={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r;bx(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=eS(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},nS=f.nonMaxSuppressionV5Impl,rS={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r;bx(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=nS(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},sS=Ax((e,t)=>e!==t?1:0),aS={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Yx("NotEqual",sS,null,"bool")},iS={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:i,depth:o,onValue:u,offValue:l}=s;bx(a,"oneHot");const c=r.sizeFromShape(a.shape),h=new Float32Array(c*o);h.fill(l);const p=n.data.get(a.dataId).values;for(let r=0;r<c;++r)p[r]>=0&&p[r]<o&&(h[r*o+p[r]]=u);return n.makeTensorInfo([...a.shape,o],i,h)}};function oS(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Hx({inputs:{input:r},backend:n}),t=oS({inputs:{x:e},backend:n}),s=Hw({inputs:{input:r},backend:n}),a=oS({inputs:{x:s},backend:n}),i=Vx({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return Zv({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const uS={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:oS},lS={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=Hx({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=Hw({inputs:{input:s},backend:r}),i=oS({inputs:{x:a},backend:r}),o=Vx({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return Zv({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function cS(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return zv({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],l=qw({inputs:t.map(e=>{const t=zv({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t}),backend:n,attrs:{axis:a}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}const hS={kernelName:"Pack",backendName:"cpu",kernelFunc:cS},pS={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;bx(a,"pad");const u=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),c=n.data.get(a.dataId).values,h=r.sizeFromShape(a.shape),p=a.shape.length,d=r.computeStrides(a.shape),f=r.sizeFromShape(u),m=u.length,g=r.computeStrides(u),y=r.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let b=0;b<h;b++){const e=r.indexToLoc(b,p,d).map((e,t)=>e+l[t]);y[r.locToIndex(e,m,g)]=c[b]}return{dataId:n.write(y,u,a.dtype),shape:u,dtype:a.dtype}}},dS={kernelName:"Pow",backendName:"cpu",kernelFunc:Yx("Pow",Ax((e,t)=>Math.pow(e,t)))};function fS(e,t,n,s){const[a,i]=d.computeOutAndReduceShapes(e,s),o=bn(t,"int32"),u=r.makeZerosTypedArray(r.sizeFromShape(a),o),l=r.sizeFromShape(i);for(let r=0;r<u.length;++r){const e=r*l;let t=1;for(let r=0;r<l;++r)t*=n[e+r];u[r]=t}return{outVals:u,outShape:a,outDtype:o}}const mS={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;bx(a,"prod");const u=a.shape.length,l=r.parseAxisParam(i,a.shape),c=d.getAxesPermutation(l,u);let h=l,p=a;const f=[];null!=c&&(p=dw({inputs:{x:a},backend:n,attrs:{perm:c}}),f.push(p),h=d.getInnerMostAxes(h.length,u));const m=n.data.get(p.dataId).values,{outVals:g,outShape:y,outDtype:b}=fS(p.shape,p.dtype,m,h);let x=y;return o&&(x=d.expandShapeToKeepDim(y,l)),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(x,b,g)}};function gS(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function yS(e,t,n,s,a,i,o,u){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach((e,s)=>{if(e<0||e>=n){const a=r.indexToLoc(s,t.length,r.computeStrides(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}})}(i,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:c,valueSlices:h,numValues:p}=function(e,t,n,r){const s=[];let a=0;const i=new Array(t.length-1+n.length).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let o=1;for(let u=0;u<t.length-1;++u){o*=t[u];const e=t[u+1];for(let t=1;t<o+1;++t)i[u].push(t*e)}for(let u=0;u<e.length;++u){let r=e[u],o=e[u]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-s[r];for(let n=r;n<o;++n)i[a].push(s[n+1]+t)}r=s[r],o=s[o]}o!==r&&(s.push([r,o]),a+=o-r)}return{outSplits:i,valueSlices:s,numValues:a}}(i,o,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=r.getArrayFromDType("int32",e[n].length);t.push(s),e[n].forEach((e,t)=>s[t]=e)}return t}(c),f=function(e,t,n,s,a){const i=t.slice();i[0]=a;const o=r.getArrayFromDType(n,r.sizeFromShape(i)),u=e.length;return function(e,t,n,r,s,a){const i=gS(t,2)[1],o=gS(a,2)[1];let u=0;for(const l of n)for(let t=l[0];t<l[1];++t){for(let n=0;n<r;++n)s[u*o+n]=e[t*i+n];++u}}(e,t,s,0===u?0:u/t[0],o,i),[o,i]}(n,s,a,h,p);return[d,f[0],f[1]]}const bS={kernelName:"RaggedGather",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{paramsNestedSplits:r,paramsDenseValues:s,indices:a}=t,i=r.map(e=>n.data.get(e.dataId).values),o=r.map(e=>e.shape),u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,[c,h,p]=yS(i,o,u,s.shape,s.dtype,l,a.shape),d=c.map(e=>n.makeTensorInfo([e.length],"int32",e)),f=n.makeTensorInfo(p,s.dtype,h);return d.concat([f])}};var xS=d.RowPartitionType;class wS{constructor(e,t,n,r,s,a,i,o,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=d.getRowPartitionTypesHelper(l),this.raggedRank=d.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===xS.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===xS.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case xS.VALUE_ROWIDS:return wS.getMaxWidthValueRowID(t);case xS.ROW_SPLITS:return wS.getMaxWidthRowSplit(t);default:throw new Error("Cannot handle partition type "+xS[this.getRowPartitionTypeByDimension(e-1)])}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return kS(e,n)}calculateOutputSize(e){const t=this.valuesShape;d.validateDefaultValueShape(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=d.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);r[0]<0&&(r[0]=e);for(let s=1;s<=this.raggedRank;++s)r[s]<0&&(r[s]=this.getMaxWidth(s));return r}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),a=[];let i=0;for(let r=0;r<s;++r,i+=t)a.push(i);for(let r=s;r<e;++r)a.push(-1);return r.assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let i=0;i<s-1;++i){const s=e[i+1]-e[i];let o=Math.min(r,s),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)a.push(u),u+=n;for(let e=0;e<s-o;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===o)u>=0&&(++i,i<r?u+=n:u=-1);else{if(i=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case xS.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case xS.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error("Unsupported partition type: "+xS[a])}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case xS.FIRST_DIM_SIZE:return e[0];case xS.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case xS.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error("Cannot handle type "+xS[t])}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let r=n.length-2;r>=0;--r)n[r]=n[r+1]*t[r+1];const s=kS(t,!1),a=r.getArrayFromDType(this.valuesDType,r.sizeFromShape(s));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)r=this.calculateOutputIndex(e-1,r,n[e],t[e]);this.setOutput(this.raggedRank,r,a,s)}return[s,a]}setOutput(e,t,n,s){if(0===n.length)return;const a=this.values,i=n;let o=s.slice();o=o.slice(e+1);const u=r.sizeFromShape(o),l=t.length;let c=this.defaultValue;if(c.length!==u&&1!==c.length){const e=this.defaultValueShape;Ms(()=>{const t=ya(c,e),n=Da(t,o);c=n.dataSync()})}let h=0,p=0,d=0;for(let r=0;r<=l;++r){let e=r<l?t[r]:-1;if(e!==d){if(p<d){const e=a.subarray(h*u);vS(i.subarray(p*u),e,(d-p)*u)}if(r>=l&&(e=Math.floor(n.length/u)),e>d)if(1===this.defaultValue.length)i.subarray(d*u,e*u).fill(this.defaultValue[0]),d=e;else for(;e>d;)vS(i.slice(d*u),c,u),++d;e<0?(h=r+1,p=d):(h=r,p=d,d=p+1)}else++d}}}function vS(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function kS(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function SS(e,t,n,r,s,a,i,o,u,l){return new wS(e,t,n,r,s,a,i,o,u,l).compute()}const IS={kernelName:"RaggedTensorToTensor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,p=o.map(e=>n.data.get(e.dataId).values),d=o.map(e=>e.shape),[f,m]=SS(l,s.shape,c,a.shape,a.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,a.dtype,m)}};function NS(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return r.makeZerosTypedArray(0,s);const a=Math.abs(Math.ceil((t-e)/n)),i=r.makeZerosTypedArray(a,s);t<e&&1===n&&(n=-1),i[0]=e;for(let r=1;r<i.length;r++)i[r]=i[r-1]+n;return i}const CS={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=NS(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},TS={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:vx("Reciprocal",e=>1/e)},ES={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=s;bx(a,"resizeBilinear");const l=r.computeStrides(a.shape),[c,h]=u,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(r.sizeFromShape([p,c,h,m])),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let w=0;const v=b[0]/x[0],k=b[1]/x[1];for(let r=0;r<p;r++)for(let e=0;e<c;e++){let t;t=o?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),i=r*l[0]+n*l[1],u=r*l[0]+a*l[1];for(let e=0;e<h;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(f-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],p=i+a*l[2],d=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*r;y[w++]=a+(n+(g[d+e]-n)*r-a)*s}}}return n.makeTensorInfo([p,c,h,m],"float32",y)}},AS={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;bx([i,a],"resizeBilinearGrad");const u=r.computeStrides(a.shape),[l,c,h,p]=a.shape,[,d,f]=i.shape,m=new Float32Array(l*c*h*p),g=[o&&d>1?c-1:c,o&&f>1?h-1:h],y=[o&&d>1?d-1:d,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],w=n.data.get(i.dataId).values;let v=0;for(let r=0;r<l;r++){const e=r*u[0];for(let t=0;t<d;t++){const n=t*b,r=Math.floor(n),s=Math.min(Math.ceil(n),c-1),a=e+r*u[1],i=e+s*u[1],o=n-r,l=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),s=t-n,c=1-s,d=a+n*u[2],f=a+r*u[2],g=i+n*u[2],y=i+r*u[2],b=l*c,k=l*s,S=o*c,I=o*s;for(let e=0;e<p;e++){const t=w[v++];m[d+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*S,m[y+e]+=t*I}}}}return n.makeTensorInfo([l,h,c,p],"float32",m)}},RS={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:u}=s;bx(a,"resizeNearestNeighbor");const l=r.computeStrides(a.shape),[c,h]=u,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p*c*h*m),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],w=b[0]/x[0],v=b[1]/x[1];let k=0;for(let r=0;r<p;r++){const e=r*l[0];for(let t=0;t<c;t++){const n=o?w*(t+.5):w*t;let r=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=e+r*l[1];for(let e=0;e<h;e++){const t=o?v*(e+.5):v*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*l[2];for(let e=0;e<m;e++)y[k++]=g[r+e]}}}return n.makeTensorInfo([p,c,h,m],a.dtype,y)}},$S={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;bx([i,a],"resizeNearestNeighborGrad");const u=r.computeStrides(a.shape),l=r.computeStrides(i.shape),[c,h,p,d]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*p*d),y=n.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],w=b[0]/x[0],v=b[1]/x[1],k=1/w,S=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(S)+2;for(let r=0;r<c;r++){const e=r*u[0];for(let t=0;t<h;t++){const n=e+t*u[1],r=Math.floor(t*k),s=Math.floor(r-I/2);for(let a=0;a<p;a++){const r=n+a*u[2],i=Math.floor(a*S),c=Math.floor(i-N/2);for(let n=0;n<d;n++){let i=0;for(let r=0;r<I;r++){const u=r+s;if(u<0||u>=f)continue;const d=e+u*l[1],g=u*w;if(t===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<N;e++){const t=e+c;if(t<0||t>=m)continue;const r=d+t*l[2],s=t*v;a===Math.min(p-1,o?Math.round(s):Math.floor(s))&&(i+=y[r+n])}}g[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},_S={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s;bx(a,"reverse");const o=a.shape.length,u=r.parseAxisParam(i,a.shape);if(0===o)return Nx({inputs:{x:a},backend:n});const l=new sn(a.shape,a.dtype),c=n.bufferSync(a);for(let r=0;r<l.size;r++){const e=l.indexToLoc(r),t=e.slice();u.forEach(e=>t[e]=a.shape[e]-1-t[e]),l.set(c.get(...t),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},FS={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,u=n,l=r.getTypedArrayFromDType(s.dtype,r.sizeFromShape(s.shape)),[c,h,p,f]=s.shape,[m,g]=d.getImageCenter(o,h,p),y=Math.sin(a),b=Math.cos(a),x=u.data.get(s.dataId).values;for(let r=0;r<c;r++){const e=r*p*h*f;for(let t=0;t<h;t++){const n=t*(p*f);for(let r=0;r<p;r++){const s=r*f;for(let a=0;a<f;a++){const o=[c,t,r,a],u=o[2],d=o[1];let w=(u-m)*b-(d-g)*y,v=(u-m)*y+(d-g)*b;w=Math.round(w+m),v=Math.round(v+g);let k=i;"number"!=typeof i&&(k=3===a?255:i[a]),w>=0&&w<p&&v>=0&&v<h&&(k=x[e+v*(p*f)+w*f+a]),l[e+n+s+a]=k}}}}return{dataId:u.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},DS={kernelName:"Round",backendName:"cpu",kernelFunc:vx("Round",e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})},OS=Px(e=>1/Math.sqrt(e)),MS={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:kx("Rsqrt",OS)};function PS(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,p=t.values;if(0===r)return Or(n,t.dtype);const d=Or(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=r/s)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[a*s+n]+=p[f*s+n]:d.values[a*s+n]=0===t.rank?p[0]:p[f*s+n]}return d}const zS={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=d.calculateShapes(a,s,i),p=PS(n.bufferSync(s),n.bufferSync(a),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function LS(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<t?n=s+1:r=s;return r}function BS(e,t){let n=0,r=e.length,s=0;for(;n<r;)s=Math.floor((n+r)/2),e[s]<=t?n=s+1:r=s;return r}const WS={kernelName:"SearchSorted",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:i}=t,{side:o}=s,u=function(e,t,n,s,a,i){const o=r.getArrayFromDType("int32",n*a);for(let r=0;r<n;++r){const n=e.slice(r*s,(r+1)*s),u=r*a;for(let e=0;e<a;++e)o[u+e]="left"===i?LS(n,t[e+u]):BS(n,t[e+u])}return o}(n.data.get(a.dataId).values,n.data.get(i.dataId).values,a.shape[0],a.shape[1],i.shape[1],o);return n.makeTensorInfo(i.shape,"int32",u)}},VS={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t;bx([s,a,i],"select");const o=s.shape.length,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,h=bn(a.dtype,i.dtype),p=r.makeZerosTypedArray(r.sizeFromShape(a.shape),h);let d=0;const f=0===o||o>1||1===a.shape.length?1:r.sizeFromShape(a.shape.slice(1));for(let r=0;r<u.length;r++)for(let e=0;e<f;e++)p[d++]=1===u[r]?l[r]:c[r];return n.makeTensorInfo(a.shape,h,p)}},US=d.SELU_SCALEALPHA,GS=d.SELU_SCALE,HS={kernelName:"Selu",backendName:"cpu",kernelFunc:vx("Selu",e=>e>=0?GS*e:US*(Math.exp(e)-1))},jS={kernelName:"Sign",backendName:"cpu",kernelFunc:vx("Sign",e=>e<0?-1:e>0?1:0)},qS={kernelName:"Sin",backendName:"cpu",kernelFunc:vx("Sin",e=>Math.sin(e))},KS={kernelName:"Sinh",backendName:"cpu",kernelFunc:vx("Sinh",e=>Math.sinh(e))},XS=Math.log(1.1920928955078125e-7)+2,YS={kernelName:"Softplus",backendName:"cpu",kernelFunc:vx("Softplus",e=>{const t=e>-XS,n=e<XS,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})},ZS={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;bx([a],"spaceToBatchND");const u=r.sizeFromShape(i),l=[[0,0]];l.push(...o);for(let r=1+i.length;r<a.shape.length;++r)l.push([0,0]);const c=pS.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=d.getReshaped(c.shape,i,u,!1),p=d.getPermuted(h.length,i.length,!1),f=d.getReshapedPermuted(c.shape,i,u,!1),m=nw({inputs:{x:c},backend:n,attrs:{shape:h}}),g=dw({inputs:{x:m},backend:n,attrs:{perm:p}}),y=nw({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};function QS(e,t,n,s,a,i,o){const u=t[0],l=i[0],c=new Array(l),h=new Array(u),p=t[1];if(0===l){if(0!==u)throw new Error(d.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[r.getArrayFromDType(n,0),[0,p],r.getArrayFromDType(a,0),c,h]}let f=!0,m=0;const g=new Array(l).fill(0);for(let r=0;r<u;++r){const t=e[r*p];if(t<0)throw new Error(d.getSparseFillEmptyRowsNegativeIndexErrorMessage(r,t));if(t>=l)throw new Error(d.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(r,t,l));++g[t],f=f&&t>=m,m=t}let y=!0;for(let r=0;r<l;++r){const e=0===g[r];c[r]=e,y=y&&!e,g[r]=Math.max(g[r],1),r>0&&(g[r]+=g[r-1])}if(y&&f){const t=e,n=s;for(let e=0;e<u;++e)h[e]=e;return[t,[u,p],n,c,h]}{const t=g[l-1],i=r.getArrayFromDType(n,t*p),d=r.getArrayFromDType(a,t),f=new Array(l).fill(0);for(let n=0;n<u;++n){const t=e[n*p],r=(0===t?0:g[t-1])+f[t];f[t]++;for(let s=0;s<p;++s)i[r*p+s]=e[n*p+s];d[r]=s[n],h[n]=r}for(let e=0;e<l;++e)if(0===f[e]){const t=0===e?0:g[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;d[t]=o}return[i,[t,p],d,c,h]}}const JS={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error("Dense shape must be a vector, saw:\n        "+a.shape);if(2!==r.shape.length)throw new Error("Indices must be a matrix, saw:\n        "+r.shape);if(1!==s.shape.length)throw new Error("Values must be a vector, saw:\n        "+s.shape);if(0!==i.shape.length)throw new Error("Default value must be a scalar, saw:\n        "+i.shape);const o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=QS(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(p,r.dtype,h),n.makeTensorInfo([p[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function eI(e,t,n,s,a){const i=r.sizeFromShape(s),o=t[0],u=a.length,l=[];let c=1,h=-1;for(let r=0;r<u;++r){const e=a[r];if(-1===e){if(-1!==h)throw new Error(d.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,r));h=r,l.push(1)}else{if(e<0)throw new Error(d.getSparseReshapeNegativeOutputDimErrorMessage(r,e));c*=e,l.push(e)}}if(-1!==h){if(c<=0)throw new Error(d.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(i/c);if(c*e!==i)throw new Error(d.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[h]=e}if(r.sizeFromShape(l)!==i)throw new Error(d.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const p=s.length,f=[];if(p>0){f[p-1]=1;for(let e=p-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}const m=[];if(u>0){m[u-1]=1;for(let e=u-2;e>=0;--e)m[e]=m[e+1]*l[e+1]}const g=r.getArrayFromDType(n,o*u);for(let r=0;r<o;++r){let t=0;for(let n=0;n<p;++n)t+=e[r*p+n]*f[n];for(let e=0;e<u;++e)g[r*u+e]=Math.trunc(t/m[e]),t%=m[e]}return[g,[o,u],l]}const tI={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error("Input indices should be a matrix but received shape\n        "+r.shape);if(1!==s.shape.length)throw new Error("Input shape should be a vector but received shape\n        "+s.shape);if(1!==a.shape.length)throw new Error("Target shape should be a vector but received shape "+a.shape);const i=Array.from(n.data.get(s.dataId).values),o=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,h]=eI(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function nI(e,t,n,s,a,i=!1,o=0){const u=s.length,l=[t[0],e.length/t[0]],c=l[1],h=u>0?a[u-1]+1:0;if(h<0)throw new Error(d.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=t.slice();p[0]=h;const f=p.reduce((e,t)=>e*t,1),m=r.getArrayFromDType(n,f);if(0===u)return h>0&&m.fill(o),[m,p];if(h<=0)throw new Error(d.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let g=0,y=1,b=0,x=a[g];for(;;){let t=0;if(y<u){if(t=a[y],x===t){++y;continue}if(x>=t)throw new Error(d.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(x<0||x>=h)throw new Error(d.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(x,h));x>b&&m.fill(o,b*c,x*c);for(let n=g;n<y;++n){const t=s[n];if(t<0||t>=l[0])throw new Error(d.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,s[n],l[0]));for(let n=0;n<c;n++)m[x*c+n]+=e[t*c+n]}if(i)for(let e=0;e<c;e++)m[x*c+e]/=y-g;if(g=y,++y,b=x+1,x=t,y>u)break}return b<h&&m.fill(o,b*c,h*c),[m,p]}const rI={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n          "+s.shape);if(1!==a.shape.length)throw new Error("Segment ids should be a vector but received shape\n          "+a.shape);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=nI(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},sI={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n         "+s.shape);if(1!==a.shape.length)throw new Error("Segment ids should be a vector but received shape\n         "+a.shape);if(s.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=nI(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}},aI={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:u}=s,{sliceRank:l,numUpdates:c,sliceSize:h,strides:p,outputSize:f}=d.calculateShapes(i,a,u),m=n.bufferSync(a);let g;switch(i.dtype){case"bool":g=PS(m,n.bufferSync(i),u,f,h,c,l,p,Boolean(n.data.get(o.dataId).values[0]),!1);break;case"float32":case"int32":g=PS(m,n.bufferSync(i),u,f,h,c,l,p,n.data.get(o.dataId).values[0],!1);break;case"string":g=PS(m,n.bufferSync(i),u,f,h,c,l,p,r.decodeString(n.data.get(o.dataId).values[0]),!1);break;default:throw new Error("Unsupported type "+i.dtype)}return n.makeTensorInfo(u,g.dtype,g.values)}},iI={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,u=r.parseAxisParam(o,a.shape)[0],l=d.prepareSplitSize(a,i,u),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{const t=[...h];t[u]=e;const r=Fw({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r})}},oI=Px(e=>Math.sqrt(e)),uI={kernelName:"Sqrt",backendName:"cpu",kernelFunc:vx("Sqrt",e=>Math.sqrt(e))},lI={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;bx(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let i=0;i<s.length;++i){const e=s[i];a[i]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},cI=Ax((e,t)=>{const n=e-t;return n*n}),hI={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Yx("SquaredDifference",cI)},pI={kernelName:"Step",backendName:"cpu",kernelFunc:vx("Step",(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})};function dI(e,t,n,r){const s=Or(e,t.dtype);for(let a=0;a<s.size;a++){const e=s.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+r[t];s.set(t.get(...i),...e)}return s}const fI={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,end:o,strides:u,beginMask:c,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:f}=s;bx(a,"stridedSlice");const{finalShapeSparse:m,finalShape:g,isIdentity:y,sliceDim0:b,isSimpleSlice:x,begin:w,end:v,strides:k}=l.sliceInfo(a.shape,i,o,u,c,h,p,d,f);let S;if(y)S=nw({inputs:{x:a},backend:n,attrs:{shape:g}});else if(b||x){r.assert(a.shape.length>=1,()=>"Input must have rank at least 1, got: "+a.shape.length);const e=l.computeOutShape(w,v,k),t=Fw({inputs:{x:a},backend:n,attrs:{begin:w,size:e}});S=nw({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else{const e=dI(m,n.bufferSync(a),k,w);S=n.makeTensorInfo(g,e.dtype,e.values)}return S}};class mI{constructor(e,t,n,s,a,i){this.separator=r.encodeString(e),this.nGramWidths=t,this.leftPad=r.encodeString(n),this.rightPad=r.encodeString(s),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let i=0;i<s;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),l=Math.max(0,o-(s-(i+1))),c=a-(u+l),h=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=l*this.rightPad.length,p+=(u+l+c-1)*this.separator.length,n[r+i]=new Uint8Array(p);const d=n[r+i];let f=0;const m=e=>e.forEach(e=>d[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error("First split value must be 0, got "+e);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,i=r.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let t=0;t<=a;++t)i[t]=0;return[e,i]}i[0]=0;for(let r=1;r<=a;++r){const e=t[r]-t[r-1];let n=0;this.nGramWidths.forEach(t=>{n+=this.getNumNGrams(e,t)}),this.preserveShort&&e>0&&0===n&&(n=1),i[r]=i[r-1]+n}const o=new Array(i[a]);for(let r=0;r<a;++r){const n=t[r];let s=i[r];if(this.nGramWidths.forEach(a=>{const i=this.getNumNGrams(t[r+1]-t[r],a);this.createNGrams(e,n,o,s,i,a),s+=i}),this.preserveShort&&s===i[r]){const a=t[r+1]-t[r];if(0===a)continue;this.createNGrams(e,n,o,s,1,a+2*this.padWidth)}}return[o,i]}}function gI(e,t,n,r,s,a,i,o){return new mI(n,r,s,a,i,o).compute(e,t)}const yI={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=gI(p,d,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function bI(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function xI(e,t,n){const s=e.length,a=[];let i=0,o=0;const u=new Array(s);for(let r=0;r<s;++r){const s=a.length;bI(e[r],t,n,a);const l=a.length-s;u[r]=l,i+=l,o=Math.max(o,l)}const l=r.getArrayFromDType("int32",2*i),c=new Array(i),h=[s,o];let p=0;for(let r=0;r<s;++r)for(let e=0;e<u[r];++e)l[2*p]=r,l[2*p+1]=e,c[p]=a[p],++p;return[l,c,h]}const wI={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error("Input must be a vector, got shape: "+a.shape);if(0!==i.shape.length)throw new Error("Delimiter must be a scalar, got shape: "+i.shape);const o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values[0],[l,c,h]=xI(o,u,s),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function vI(e,t){const n=r.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=r.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const kI={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=vI(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",i)}},SI={kernelName:"Tan",backendName:"cpu",kernelFunc:vx("Tan",e=>Math.tan(e))},II=vx("Tanh",e=>Math.tanh(e));function NI(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const r=Or(n,e.dtype);for(let s=0;s<r.values.length;++s){const t=r.indexToLoc(s),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const a=e.locToIndex(n);r.values[s]=e.values[a]}return r}const CI=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function TI(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);TI(e,t,Math.max(n,Math.floor(t-a*o/r+u)),Math.min(s,Math.floor(t+(r-a)*o/r+u)))}const a=e[t];let i=n,o=s;for(r.swap(e,n,t),CI(e[s],a)>0&&r.swap(e,n,s);i<o;){for(r.swap(e,i,o),i++,o--;CI(e[i],a)<0;)i+=1;for(;CI(e[o],a)>0;)o-=1}0===CI(e[n],a)?r.swap(e,n,o):(o+=1,r.swap(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function EI(e,t,n,s,a){const i=t[t.length-1],[o,u]=[e.length/i,i],l=r.getTypedArrayFromDType(n,o*s),c=r.getTypedArrayFromDType("int32",o*s);for(let r=0;r<o;r++){const t=r*u,n=e.subarray(t,t+u);let i=new Array(n.length);n.forEach((e,t)=>i[t]={value:e,index:t}),s<i.length&&(TI(i,s),i=i.slice(0,s)),a&&i.sort(CI);const o=r*s,h=l.subarray(o,o+s),p=c.subarray(o,o+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const h=t.slice();return h[h.length-1]=s,[Or(h,n,l),Or(h,"int32",c)]}function AI(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;return n<0?t<=1?n=0:n+=t*(Math.trunc(-n/(t-1))+1):n>t-1&&(t<=1?n=0:n-=t*Math.trunc(n/(t-1))),r.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r.clamp(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function RI(e,t,n,r,s,a,i,o,u,l,c){return 0<=o&&o<t&&0<=u&&u<n?e[i*r+o*s+u*a+l]:c}function $I(e,t,n,r,s,a,i,o,u,l,c){return RI(e,t,n,r,s,a,i,Math.round(o),Math.round(u),l,c)}function _I(e,t,n,r,s,a,i,o,u,l,c){const h=Math.floor(o),p=Math.floor(u),d=h+1,f=p+1;return(d-o)*((f-u)*RI(e,t,n,r,s,a,i,h,p,l,c)+(u-p)*RI(e,t,n,r,s,a,i,h,f,l,c))+(o-h)*((f-u)*RI(e,t,n,r,s,a,i,d,p,l,c)+(u-p)*RI(e,t,n,r,s,a,i,d,f,l,c))}function FI(e,t,n,s){const a=r.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let r=0;r<a;r++)i[0]*=n[r];i[1]=n[a];for(let r=a+1;r<n.length;r++)i[2]*=n[r];const o={},u=new Int32Array(n[a]),l=new sn(i,s,e),c=[],h=1===i[0]&&1===i[2];for(let r=0;r<n[a];r++){let t;if(h)t=e[r].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let n=0;n<i[2];n++)e.push(l.get(t,r,n));t=e.join(",")}if(void 0!==o[t])u[r]=o[t];else{const e=Object.keys(o).length;o[t]=e,u[r]=e,c.push(r)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new sn(p,s);c.forEach((e,t)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)d.set(l.get(n,e,r),n,t,r)});const f=n.slice();return f[a]=p[1],{outputValues:d.values,outputShape:f,indices:u}}const DI=[iw,uw,lw,cw,tw,hw,mw,gw,yw,bw,xw,ww,vw,kw,Sw,Tw,Ew,Aw,Rw,aw,$w,Ow,zw,Lw,Xx,Ww,Vw,Ux,Uw,Kw,Yw,Zw,Qw,Jw,ev,tv,nv,rv,sv,av,iv,ov,uv,cv,hv,pv,dv,fv,mv,gv,Sv,Ix,Iv,Tv,Dv,Pv,Lv,Wv,Yv,Qv,Jv,tk,nk,rk,sk,ik,uk,ck,pk,Cx,dk,jw,fk,mk,gk,Ex,bk,wk,kk,Ik,Nk,Ck,Tk,Ek,Ak,Rk,Fk,Ok,Mk,Pk,zk,Lk,Bk,Wk,Vk,Gk,Hk,jk,Xk,wv,Zk,Jk,tS,rS,aS,iS,lS,hS,pS,dS,_x,mS,bS,IS,CS,jx,Uv,TS,Dx,Mx,rw,ES,AS,RS,$S,_S,FS,DS,MS,zS,WS,VS,HS,Bx,jS,qS,KS,Dw,Kk,YS,ZS,JS,tI,rI,sI,aI,iI,uI,lI,hI,pI,fI,yI,wI,kI,qv,kv,SI,{kernelName:"Tanh",backendName:"cpu",kernelFunc:II},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;bx(s,"tile");const i=NI(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r;bx(s,"topk");const o=n.data.get(s.dataId).values,[u,l]=EI(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:i}=t,{interpolation:o,fillMode:u,fillValue:l,outputShape:c}=n,[h,p,d,f]=a.shape,[m,g]=null!=c?c:[p,d],y=[h,m,g,f],b=r.computeStrides(a.shape),x=b[0],w=b[1],v=b[2],k=r.computeStrides(y),S=k[0],I=k[1],N=k[2],C=r.getTypedArrayFromDType(a.dtype,r.sizeFromShape(y));C.fill(l);const T=s.data.get(a.dataId).values,E=s.data.get(i.dataId).values;for(let r=0;r<h;++r){const e=1===i.shape[0]?E:E.subarray(8*r,8*r+8);for(let t=0;t<m;++t)for(let n=0;n<g;++n)for(let s=0;s<f;++s){let a;const i=e[6]*n+e[7]*t+1;if(0===i)continue;const c=(e[3]*n+e[4]*t+e[5])/i,h=AI((e[0]*n+e[1]*t+e[2])/i,d,u),f=AI(c,p,u);switch(o){case"nearest":a=$I(T,p,d,x,w,v,r,f,h,s,l);break;case"bilinear":a=_I(T,p,d,x,w,v,r,f,h,s,l);break;default:throw new Error("Error in Transform: Expect 'nearest' or 'bilinear', but got "+o)}C[r*S+t*I+n*N+s]=a}return s.makeTensorInfo(y,a.dtype,C)}return{dataId:s.write(C,y,a.dtype),shape:a.shape,dtype:a.dtype}}},fw,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;bx(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=FI(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let l=0;for(let d=0;d<i;d++)d!==a&&(u[l++]=s.shape[d]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const p=new Array(o);for(let d=0;d<p.length;d++){c[a]=d;const e=Fw({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});p[d]=nw({inputs:{x:e},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(e)}return p}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s;bx(a,"unsortedSegmentSum");const u=[],l=[],c=a.shape.length-i.shape.length;let h=i;for(let r=0;r<c;++r){const e=zv({inputs:{input:h},backend:n,attrs:{dim:r+1}});h=e,l.push(e)}for(let d=0;d<o;++d){const e=r.createScalarValue(d,"int32"),t=n.makeTensorInfo([],"int32",e),s=Cv({inputs:{a:t,b:h},backend:n}),i=Kx({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),o=xv({inputs:{a:i,b:a},backend:n}),c=vv({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});u.push(c),l.push(t),l.push(s),l.push(i),l.push(o),l.push(c)}const p=cS({inputs:u,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},uS];for(const X1 of DI)Et(X1);const OI={},MI={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function PI(e,t){if(!(e in OI)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete OI[e]},!1),gt().getBool("SOFTWARE_WEBGL_ENABLED")&&(MI.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",MI)||n.getContext("experimental-webgl",MI):n.getContext("webgl2",MI)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;OI[e]=n}const n=OI[e];return null==n||n.isContextLost()?(delete OI[e],PI(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),OI[e])}var zI,LI,BI;function WI(e,t){return[t,e]}function VI(e){const t=r.sizeFromShape(e),n=Math.ceil(t/4);return r.sizeToSquarishShape(n)}function UI(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function GI(e,t){const n=e;let r,s,a,i,o,u,l,c,h,p;return 2===gt().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function HI(e,t){const n=t();return gt().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),n}function jI(e){return!!(gt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function qI(e,t){return tN(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(zI||(zI={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(LI||(LI={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(BI||(BI={}));const KI=/ERROR: [0-9]+:([0-9]+):/g;function XI(e,t){const n=KI.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map((e,t)=>r.rightPad((t+1).toString(),i)+e);let u=0;for(let r=0;r<o.length;r++)u=Math.max(o[r].length,u);const l=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+r.rightPad(c[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function YI(e,t){if(HI(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function ZI(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(HI(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),HI(e,()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i)),HI(e,()=>e.enableVertexAttribArray(o)),!0)}function QI(e,t,n){HI(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),HI(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function JI(e,t){HI(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),HI(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function eN(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function tN(e,t,n){const r=HI(e,()=>t());if(null==r)throw new Error(n);return r}function nN(e,t=2){return r.sizeFromShape(e.slice(0,e.length-t))}function rN(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function sN(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[nN(e),...rN(e)]),t}function aN(e){return e%2==0}function iN(e,t){if(e=e.slice(-2),t=t.slice(-2),r.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(aN(n)&&aN(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&aN(e[0])&&aN(t[0])}let oN,uN;function lN(e,t){return null!=e.getExtension(t)}function cN(e){try{if(null!=PI(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function hN(e){const t=GI(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function pN(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the WebGL backend.")})}const dN=gt();function fN(){let e,t,n,r,s,a,i,o,u,l;return 2===gt().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o=gt().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function mN(e,t,n="index"){const s=r.computeStrides(t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function gN(e,t,n="index"){const s=r.computeStrides(t);return s.map((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`).join("")}function yN(e){const t=r.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}dN.registerFlag("HAS_WEBGL",()=>dN.getNumber("WEBGL_VERSION")>0),dN.registerFlag("WEBGL_VERSION",()=>cN(2)?2:cN(1)?1:0),dN.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),dN.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===dN.get("WEBGL_VERSION")),dN.registerFlag("WEBGL_CPU_FORWARD",()=>!0),dN.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),dN.registerFlag("WEBGL_PACK",()=>dN.getBool("HAS_WEBGL")),dN.registerFlag("WEBGL_PACK_NORMALIZATION",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_CLIP",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_PACK_REDUCE",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_LAZILY_UNPACK",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_CONV_IM2COL",()=>dN.getBool("WEBGL_PACK")),dN.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==oN){const t=PI(e);oN=t.getParameter(t.MAX_TEXTURE_SIZE)}return oN}(dN.getNumber("WEBGL_VERSION"))),dN.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==uN){const t=PI(e);uN=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,uN)}(dN.getNumber("WEBGL_VERSION"))),dN.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=dN.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=PI(e);return t=lN(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:lN(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),dN.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>dN.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.isMobile()),dN.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=PI(e);if(1===e){if(!lN(t,"OES_texture_float"))return!1}else if(!lN(t,"EXT_color_buffer_float"))return!1;return hN(t)}(dN.getNumber("WEBGL_VERSION"))),dN.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!dN.getBool("WEBGL_FORCE_F16_TEXTURES")&&dN.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),dN.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=PI(e);if(1!==e){if(lN(t,"EXT_color_buffer_float"))return hN(t);const e="EXT_color_buffer_half_float";if(lN(t,e)){const n=t.getExtension(e);return function(e,t){const n=GI(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!lN(t,"OES_texture_float")&&!!lN(t,"WEBGL_color_buffer_float")&&hN(t)}(dN.getNumber("WEBGL_VERSION"))),dN.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=dN.getNumber("WEBGL_VERSION"))&&null!=PI(e).fenceSync;var e}),dN.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>dN.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),dN.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),dN.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>a.isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),dN.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),dN.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),dN.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),dN.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),dN.registerFlag("WEBGL_EXP_CONV",()=>!1),dN.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>dN.getBool("IS_TEST")),dN.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),dN.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),dN.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);const bN="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:xN}=d;const wN="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",vN="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",kN="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",SN="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function IN(e){return"offset"+e}function NN(e){const t=e.name,n=r.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function CN(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function TN(e,t,n){const{newShape:s,keptDims:a}=r.squeezeShape(t),i=t.length,o=e&&3===i&&1===t[0],u=o?t.slice(1):s,l=!e&&i>1&&!r.arraysEqual(t,n)&&s.length<i||o;return{useSqueezeShape:l,uniformShape:l?u:t,keptDims:a}}function EN(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function AN(e,t){return t.map(t=>e[t]).join(", ")}function RN(e,t,n){const r={},s={},a={},i=[];let o,u,l,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===gt().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));for(let p=0;p<t.variableNames.length;p++){const i=t.variableNames[p];r[i]=e.getUniformLocation(n,i,!1),r["offset"+i]=e.getUniformLocation(n,"offset"+i,!1),t.enableShapeUniforms&&(s[i+"Shape"]=e.getUniformLocation(n,i+"Shape",!1),a[i+"TexShape"]=e.getUniformLocation(n,i+"TexShape",!1))}return t.enableShapeUniforms&&(o=e.getUniformLocation(n,"outShape",!1),l=e.getUniformLocation(n,"outShapeStrides",!1),u=e.getUniformLocation(n,"outTexShape",!1)),t.customUniforms&&t.customUniforms.forEach((t,r)=>{i[r]=e.getUniformLocation(n,t.name,!1)}),{uniformLocations:r,customUniformLocations:i,infLoc:c,nanLoc:h,inShapesLocations:s,inTexShapesLocations:a,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}}function $N(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!r.arraysEqual(o,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${u} must match`)})}function _N(e){return gt().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class FN{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=zI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=fN();this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?gN(["r","c","d"],e):mN(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class DN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=zI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=fN();this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?gN(["r","c","d"],e):mN(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ON{constructor(e){this.variableNames=["A"],this.outTexUsage=LI.DOWNLOAD;const t=fN();this.outputShape=e,this.userCode=`\n      ${bN}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class MN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=LI.DOWNLOAD;const t=fN();this.outputShape=e,this.userCode=`\n      ${bN}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class PN{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=fN();this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class zN{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=fN();this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let t=0;t<=1;t++){const s=2*a+t;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":""+e[2]}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":""+e[1]}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${s};\n        }\n    `}}function LN(e,t,n,r,s,a){!function(e,t){const n=gt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return tN(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return HI(e,()=>e.bindTexture(o,i)),HI(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),HI(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),HI(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),HI(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===gt().getNumber("WEBGL_VERSION")?HI(e,()=>e.texImage2D(o,0,r,t,n,0,s,a,null)):HI(e,()=>e.texStorage2D(o,1,r,t,n)),HI(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:i,texShape:[n,t]}}function BN(e){return e.internalFormatFloat}function WN(e){return e.internalFormatHalfFloat}function VN(e){return e.downloadTextureFormat}function UN(e){return e.internalFormatPackedFloat}function GN(e){return e.internalFormatPackedHalfFloat}class HN{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=gt().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){OI[e]=t}(t,e)):this.gl=PI(t);let n="WEBGL_color_buffer_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===gt().getNumber("WEBGL_VERSION")){const e="OES_texture_half_float";if(this.textureFloatExtension=qI(this.gl,"OES_texture_float"),lN(this.gl,e))this.textureHalfFloatExtension=qI(this.gl,e);else if(gt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),lN(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=qI(this.gl,"EXT_color_buffer_half_float");else if(gt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",lN(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!lN(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=function(e){return function(e,t){const n=tN(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return HI(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),HI(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=tN(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return HI(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),HI(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return tN(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=GI(this.gl,this.textureHalfFloatExtension)}get debug(){return gt().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;HI(e,()=>e.finish()),HI(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),HI(e,()=>e.deleteFramebuffer(this.framebuffer)),HI(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),HI(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),HI(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=WI(t,n);return LN(e,s,a,BN(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=WI(t,n);return LN(e,s,a,WN(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=WI(t,n);return LN(e,s,a,VN(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){HI(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?2===gt().getNumber("WEBGL_VERSION")?HI(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data)):HI(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):2===gt().getNumber("WEBGL_VERSION")?HI(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n)):HI(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),HI(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,u;HI(e,()=>e.bindTexture(e.TEXTURE_2D,t)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,u=a.internalFormatPackedFloat),i.set(s),2===gt().getNumber("WEBGL_VERSION")?HI(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,o,i)):HI(e,()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,o,i)),HI(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=UI(t,n);return LN(e,s,a,GN(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=UI(t,n);return LN(e,s,a,UN(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(JI(this.gl,this.framebuffer),this.outputTexture=null),HI(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,r){const[s,a]=WI(t,n),i=new Uint8Array(t*n*4);return HI(e,()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,i,o){const u=e,l=new Float32Array(function(e,t){const[n,r]=UI(e,t);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,s,a)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();HI(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const a=16*t*n;return HI(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),HI(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),HI(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(gt().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const r=new Float32Array(t*n*4);return HI(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=fN();return function(e,t){const n=tN(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(HI(e,()=>e.shaderSource(n,t)),HI(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return tN(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return HI(t,()=>t.attachShader(n,this.vertexShader)),HI(t,()=>t.attachShader(n,e)),function(e,t){if(HI(e,()=>e.linkProgram(t)),!gt().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&YI(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return HI(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),ZI(e,t,"clipSpacePos",n,3,20,0)&&ZI(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&HI(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&YI(this.gl,this.program),HI(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return tN(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),HI(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){HI(e,()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),HI(e,()=>e.activeTexture(e.TEXTURE0+n)),HI(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,r)),HI(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=UI(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&YI(this.gl,this.program),eN(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),HI(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),HI(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=qI(this.gl,2===gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n=void 0;"setTimeoutCustom"in gt().platform&&(n=gt().platform.setTimeoutCustom.bind(gt().platform)),r.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),QI(this.gl,e,this.framebuffer),this.debug&&eN(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(QI(this.gl,this.outputTexture,this.framebuffer),this.debug&&eN(this.gl)):JI(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;QI(r,e,this.framebuffer),this.debug&&eN(r),this.outputTexture=e,HI(r,()=>r.viewport(0,0,t,n)),HI(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),HI(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:jN,bincountImpl:qN,bincountReduceImpl:KN,castImpl:XN,ceilImpl:YN,concatImpl:ZN,equalImpl:QN,expImpl:JN,expm1Impl:eC,floorImpl:tC,gatherNdImpl:nC,gatherV2Impl:rC,greaterImpl:sC,greaterEqualImpl:aC,lessImpl:iC,lessEqualImpl:oC,linSpaceImpl:uC,logImpl:lC,maxImpl:cC,maximumImpl:hC,minimumImpl:pC,multiplyImpl:dC,negImpl:fC,notEqualImpl:mC,prodImpl:gC,raggedGatherImpl:yC,raggedTensorToTensorImpl:bC,rangeImpl:xC,rsqrtImpl:wC,scatterImpl:vC,sigmoidImpl:kC,simpleAbsImpl:SC,sliceImpl:IC,sparseFillEmptyRowsImpl:NC,sparseReshapeImpl:CC,sparseSegmentReductionImpl:TC,sqrtImpl:EC,stridedSliceImpl:AC,stringNGramsImpl:RC,stringSplitImpl:$C,stringToHashBucketFastImpl:_C,subImpl:FC,tileImpl:DC,topKImpl:OC,transposeImpl:MC,uniqueImpl:PC}=M;function zC(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function LC(e,t){return 1===t?[e]:zC(e,t)}class BC{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=_N(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=LC("rc",this.rank),t=CN(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=e[e.length-1-t]+","+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return"rc > "+(this.enableShapeUniforms?"outShape":this.outputShape[0]);let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2);return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class WC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length);let n="";for(let a=0;a<4;a++){let e="thisRC = rc;";a%2==1&&(e+="thisRC.z += 1;"),a>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${a>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${a}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${a>0?"}":""}\n      `}var r,s;this.userCode=`\n      ${r=t,s=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${s?function(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map(e=>`${t}[${e}]`),s=new Array(n-1);s[n-2]=r[n-1];for(let a=n-3;a>=0;--a)s[a]=`(${s[a+1]} * ${r[a+1]})`;return s}(e.map((e,t)=>t),t);return r.map((t,s)=>`int ${e[s]} = ${n} / ${r[s]}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`).join("")}(["r","c","d"],"inputShape"):mN(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class VC{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=GC(t,n),s=HC(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=UC(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===BI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===BI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===BI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===BI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===BI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=GC(n,r),a=HC(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=UC(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=gt().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function UC(e,t,n,r,s){const a=function(e,t){switch(e){case BI.PACKED_2X2_FLOAT32:return UN(t);case BI.PACKED_2X2_FLOAT16:return GN(t);case BI.UNPACKED_FLOAT32:return BN(t);case BI.UNPACKED_FLOAT16:return WN(t);case BI.PACKED_4X1_UNSIGNED_BYTE:return VN(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let i;if(s){const[t,n]=UI(e[0],e[1]);i=t*n}else{const[t,n]=WI(e[0],e[1]);i=t*n}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error("Unknown internal format "+t)}(n,a)}function GC(e,t){if(e===LI.UPLOAD)return BI.PACKED_2X2_FLOAT32;if(e===LI.RENDER||null==e)return function(e){return gt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?BI.PACKED_2X2_FLOAT32:BI.UNPACKED_FLOAT32:e?BI.PACKED_2X2_FLOAT16:BI.UNPACKED_FLOAT16}(t);if(e===LI.DOWNLOAD||e===LI.PIXELS)return BI.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function HC(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class jC{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const qC="return abs(x);",KC="return x;";class XC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class YC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length);const t=e.length,n=LC("rc",t),r=CN(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const ZC=f.whereImpl,QC={},JC=gt().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class eT extends xe{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!gt().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof HN)t=e;else{const n=PI(gt().getNumber("WEBGL_VERSION"),e);t=new HN(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=PI(gt().getNumber("WEBGL_VERSION"));t=new HN(e),this.binaryCache=((n=gt().getNumber("WEBGL_VERSION"))in QC||(QC[n]={}),QC[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new VC(this.gpgpu),this.numMBBeforeWarning=null==gt().global.screen?1024:gt().global.screen.height*gt().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new be(this,Ds())}nextDataId(){return eT.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((gt().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||gt().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:LI.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,s){if(gt().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:LI.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:i,shape:o,isPacked:u}=t;if(null!=i){let t;t=u?new XC(o,KC):new jC(o,KC);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let c,h;if(l&&(c=r.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=d.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=r.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,complexTensorInfos:o,isPacked:u}=t;if(null!=a){let t;t=u?new XC(s,KC):new jC(s,KC);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(gt().getBool("DEBUG")&&!gt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===gt().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==i&&gt().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture.texture,...VI(s))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);c=d.mergeRealAndImagArrays(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=r.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=h){const e=this.gpgpu.gl;HI(e,()=>e.deleteBuffer(h))}const p=this.convertAndCacheOnCPU(e,c),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(e=>e(p)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Ds().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:i,isPacked:o,texture:u}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new XC(s,KC):new jC(s,KC);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:i}],i),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=Ds().makeTensorFromTensorInfo(l),h=this.texData.get(l.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>r.decodeString(e));return Or(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Or(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!jI(n)){if(gt().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=r.sizeFromShape(t);if(gt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...VI(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const i=gt().getBool("WEBGL_PACK")&&!0===s,o=i?sN(t):t,u=i?new MN(o):new ON(o),l=this.runWebGLProgram(u,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}timerAvailable(){return gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=r.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=r.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=r.sum(e),o.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.now(),endMs:null}}endTimer(e){return gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.now(),e)}async getQueryTime(e){return gt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=JC){return gt().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&r.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){d.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ZC(e.shape,t)}packedUnaryOp(e,t,n){const r=new XC(e.shape,t),s=this.compileAndRun(r,[e],n);return Ds().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=SC(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(gt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,qC,e.dtype);const t=new jC(e.shape,qC),n=this.compileAndRun(t,[e]);return Ds().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return Ds().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new YC(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new BC(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[nN(e.shape),...rN(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[nN(t),...rN(t)],a=new WC(s,n),i=this.runWebGLProgram(a,[r],e.dtype,[n],!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:a,dtype:i}=n;if(null!=t){const e=r.sizeFromShape(a);r.assert(e<=t[0]*t[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const o=sN(a);let u;u=s?new DN(o):new FN(o);const l=[null!=t?t:VI(o)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:o,dtype:i,dataId:e}],i,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,a=!1,i){const o=this.makeTensorInfo(e.outputShape,n),u=this.texData.get(o.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===zI.DENSE){const t=null!=i?i:VI(e.outputShape);u.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===r.sizeFromShape(o.shape))return u.values=r.getTypedArrayFromDType(o.dtype,0),o;const l=[],c=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&r.sizeFromShape(t.shape)<=gt().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!iN(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(o.dataId);const h={shape:o.shape,texData:u,isUniform:!1},p=function(e,t,n){let s="";t.concat(n).forEach(t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const i=t.texData.texShape,{useSqueezeShape:o,uniformShape:u,keptDims:l}=TN(e.packedInputs,t.shape,i);let c="",h="",p="";if(1===u.length&&e.packedInputs){const e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){const e=r.computeStrides(u);p=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else h=`${u[0]>1}_${u[1]>1}`;const f=t.shape.length,m=2===u.length&&r.arraysEqual(t.shape,i),g=1===r.sizeFromShape(t.shape),y=d.getBroadcastDims(t.shape,n.shape),b=!e.packedInputs&&f===n.shape.length&&r.arraysEqual(i,n.texData.texShape);s+=`${f}_${b}_${o?l:""}_${u.length}_${g}_${y}_${m}_${c}_${h}_${p}_${e.packedInputs||u.length>2?"":`${i[0]>1}_${i[1]>1}`}_${a}`}else s+=`${t.shape}_${t.isUniform?"uniform":t.texData.texShape}_${a}`});let a=e.constructor.name;return a+="_"+s+"_"+e.userCode+gt().getNumber("WEBGL_VERSION"),a}(e,c,h),f=this.getAndSaveBinary(p,()=>function(e,t,n,s){const a=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),i=a.map(e=>e.shapeInfo),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=function(e,t,n){const s=[];if(e.forEach(e=>{const t=r.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=TN(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const a=s.join("\n"),i=e.map(e=>function(e,t,n=!1,s){let a="";return a+=n?function e(t,n){switch(t.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${fN().texture2D}(${t}, halfCR);\n    }\n  `}(t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=fN();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(t,n);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=e.shapeInfo.texShape,o=i[0],u=i[1],l=fN();if(null!=i&&r.arraysEqual(n,i))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(t,n);case 3:return function(t,n){const r=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=t.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===r[0]){const s=[1,2],i=EN(t,r.slice(1)),o=["b","row","col"];return`\n        ${e(i,n)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${AN(o,s)});\n        }\n      `}const u=fN();if(n)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],c=o[1],h=Math.ceil(r[2]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${c}, ${h*Math.ceil(r[1]/2)}, ${h}, b, row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `}(t,n);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=fN();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=u[0],c=u[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let m=2;m<i-1;m++)d=`int b${m}, `+d,p*=a[i-m-1],f=`b${m} * ${p} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(t,n)}}(e,s):function e(t,n=!1){const s=t.shapeInfo.logicalShape;switch(s.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=IN(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${o}, ${u}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t,n);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${NN(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],i=s[1];if(1===i&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=IN(n);return 1===i?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t,n);case 2:return function(t,n){const s=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),o=t.shapeInfo.texShape;if(null!=o&&r.arraysEqual(s,o))return n?`\n      float ${i}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${i}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;const{newShape:u,keptDims:l}=r.squeezeShape(s);if(u.length<s.length){const r=EN(t,u),s=["row","col"];return`\n      ${e(r,n)}\n      float ${i}(int row, int col) {\n        return ${i}(${AN(s,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${i}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${s[1]}, 1)));\n        ${NN(t)}\n      }\n    `;const c=o[0],h=o[1],p=IN(a);return 1===h?n?`\n      float ${i}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${i}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${s[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `:1===c?n?`\n      float ${i}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${i}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${s[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);\n      return sampleTexture(${a}, uv);\n    }\n  `:n?`\n      float ${i}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n  float ${i}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${s[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${c}, ${h}, index);\n    return sampleTexture(${a}, uv);\n  }\n`}(t,n);case 3:return function(t,n){const s=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),o=s[1]*s[2],u=s[2],{newShape:l,keptDims:c}=r.squeezeShape(s);if(l.length<s.length){const r=EN(t,l),s=["row","col","depth"];return`\n        ${e(r,n)}\n        float ${i}(int row, int col, int depth) {\n          return ${i}(${AN(s,c)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${i}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${u}, 1)));\n        ${NN(t)}\n      }\n    `;const h=t.shapeInfo.texShape,p=h[0],d=h[1],f=t.shapeInfo.flatOffset;if(d===o&&null==f)return n?`\n      float ${i}(int row, int col, int depth) {\n        int stride1 = ${a}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n        float ${i}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${u}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${p}.0);\n          return sampleTexture(${a}, uv);\n        }\n      `;if(d===u&&null==f)return n?`\n      float ${i}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${i}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${s[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;const m=IN(a);return n?`\n    float ${i}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${a}Shape[1] * ${a}Shape[2];\n      int stride1 = ${a}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n      return sampleTexture(${a}, uv);\n    }\n    `:`\n      float ${i}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${u} + depth + ${m};\n        vec2 uv = uvFromFlat(${p}, ${d}, index);\n        return sampleTexture(${a}, uv);\n      }\n  `}(t,n);case 4:return function(t,n){const s=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),o=s[3],u=s[2]*o,l=s[1]*u,{newShape:c,keptDims:h}=r.squeezeShape(s);if(c.length<s.length){const r=EN(t,c),s=["row","col","depth","depth2"];return`\n      ${e(r,n)}\n      float ${i}(int row, int col, int depth, int depth2) {\n        return ${i}(${AN(s,h)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${i}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${l}, ${u}, ${o}, 1)));\n        ${NN(t)}\n      }\n    `;const p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,f=d[0],m=d[1],g=`int stride2 = ${a}Shape[3];`,y=`int stride1 = ${a}Shape[2] * stride2;`,b=`int stride0 = ${a}Shape[1] * stride1;`;if(m===l&&null==p)return n?`\n      float ${i}(int row, int col, int depth, int depth2) {\n        ${g}\n        ${y}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${i}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${u}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(m===o&&null==p)return n?`\n      float ${i}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${i}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s[1]*s[2]}, ${s[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const x=IN(a);return n?`\n    float ${i}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${g}\n      ${y}\n      ${b}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${x});\n      return sampleTexture(${a}, uv);\n    }\n  `:`\n    float ${i}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${u} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${f}, ${m}, index + ${x});\n      return sampleTexture(${a}, uv);\n    }\n  `}(t,n);case 5:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),i=n[4],o=n[3]*i,u=n[2]*o,l=n[1]*u,{newShape:c,keptDims:h}=r.squeezeShape(n);if(c.length<n.length){const n=EN(t,c),r=["row","col","depth","depth2","depth3"];return`\n      ${e(n)}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${AN(r,h)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n          depth3;\n        ${NN(t)}\n      }\n    `;const p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,f=d[0],m=d[1];return m===l&&null==p?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${u}, ${o}, ${i}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:m===i&&null==p?`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${u} + depth * ${o} +\n          depth2 * ${i} + depth3 + ${IN(s)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(t);case 6:return function(t){const n=t.shapeInfo.logicalShape,s=t.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),{newShape:i,keptDims:o}=r.squeezeShape(n);if(i.length<n.length){const n=EN(t,i),r=["row","col","depth","depth2","depth3","depth4"];return`\n      ${e(n)}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${AN(r,o)});\n      }\n    `}const u=n[5],l=n[4]*u,c=n[3]*l,h=n[2]*c,p=n[1]*h;if(t.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${p}, ${h}, ${c}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${u}, 1)));\n        ${NN(t)}\n      }\n    `;const d=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,m=f[0],g=f[1];return g===p&&null==d?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${h}, ${c}, ${l}, ${u})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:g===u&&null==d?`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${g}.0, ${m}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${p} + col * ${h} + depth * ${c} +\n          depth2 * ${l} + depth3 * ${u} + depth4 + ${IN(s)};\n      vec2 uv = uvFromFlat(${m}, ${g}, index);\n      return sampleTexture(${s}, uv);\n    }\n  `}(t);default:throw new Error(s.length+"-D input sampling is not yet supported")}}(e,s),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,u=xN(e.shapeInfo.logicalShape,t.logicalShape),l=CN(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", ");let f="return outputValue;";const m=1===r.sizeFromShape(e.shapeInfo.logicalShape),g=1===r.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=i-2,t=i-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===o&&null==e.shapeInfo.flatOffset&&r.arraysEqual(e.shapeInfo.texShape,t.texShape))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=CN(o),l=xN(e.shapeInfo.logicalShape,t.logicalShape),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";return d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", "),`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      return get${s}(${d});\n    }\n  `}(e,t)),a}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),o=t.texShape,u=fN(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${wN}\n    ${vN}\n    ${kN}\n  `}(u);return t.isPacked?(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `:1===r[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let i=a,o="",u="b, r, c";for(let l=2;l<e.length-1;l++)i*=e[e.length-l-1],o=`\n      int b${l} = index / ${i};\n      index -= b${l} * ${i};\n    `+o,u=`b${l}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return r.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${gN(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const r=mN(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${gN(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const r=mN(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=mN(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=mN(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}}(t.logicalShape,o,n.enableShapeUniforms),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),n.packedInputs&&(p+=SN),[p,l,h,a,c,i,n.userCode].join("\n")}(a,o,t),l=function(e,t){const n=tN(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(HI(e,()=>e.shaderSource(n,t)),HI(e,()=>e.compileShader(n)),gt().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw XI(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,u),c=e.createProgram(l);return gt().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:i,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:i,outShapeInfo:o},RN(e,t,c))}(this.gpgpu,e,c,h)),m=null!=this.activeTimers;let g;m&&(g=this.startTimer()),gt().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,a){t.program.enableShapeUniforms||($N(t.inShapeInfos,n),$N([t.outShapeInfo],[s]));const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,o[0],o[1]):e.setOutputMatrixTexture(i.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===gt().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,s)=>{const a=t.program.variableNames[s],i=t.uniformLocations[a],o=t.uniformLocations["offset"+a],u=t.inShapesLocations[a+"Shape"],l=t.inTexShapesLocations[a+"TexShape"];if(u){const{uniformShape:r}=TN(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(u,new Int32Array(r));break;case 2:e.gl.uniform2iv(u,new Int32Array(r));break;case 3:e.gl.uniform3iv(u,new Int32Array(r));break;case 4:e.gl.uniform4iv(u,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=i)if(n.isUniform)if(r.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,i,s)});const u=t.outShapeLocation;if(u)switch(s.shape.length){case 1:e.gl.uniform1iv(u,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(u,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(u,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(u,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=r.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach((n,r)=>{const s=t.customUniformLocations[r],i=a[r];if("float"===n.type)e.gl.uniform1fv(s,i);else if("vec2"===n.type)e.gl.uniform2fv(s,i);else if("vec3"===n.type)e.gl.uniform3fv(s,i);else if("vec4"===n.type)e.gl.uniform4fv(s,i);else if("int"===n.type)e.gl.uniform1iv(s,i);else if("ivec2"===n.type)e.gl.uniform2iv(s,i);else if("ivec3"===n.type)e.gl.uniform3iv(s,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,i)}}),e.executeProgram()}(this.gpgpu,f,c,h,s),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),m&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=gt().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=r.now();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!gt().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){return this.runWebGLProgram(e,t,n=n||t[0].dtype,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(gt().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ms(()=>{if(!gt().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=gt().getBool("DEBUG");gt().set("DEBUG",!1);const t=this.abs(Ws(1e-8)).dataSync()[0];if(gt().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:u}=t;if(null!=i)return;const l=null!=this.activeTimers;let c;l&&(c=r.now());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=gt().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=gt().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&gt().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map((t,n)=>n>=e.length-2?r.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=r.squeezeShape(e);e=t.newShape}let a=r.sizeFromShape(e),i=null;e.length<=1&&a<=n?i=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?i=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(i=[e[0],e[1]*e[2]*e[3]]);const o=null!=i&&Math.max(...i)>s&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||o)if(t){const t=nN(e);let n=2,s=2;e.length&&([n,s]=rN(e)),a=t*(n/2)*(s/2),i=r.sizeToSquarishShape(a).map(e=>2*e)}else i=r.sizeToSquarishShape(a);return i}(n,u),t.texShape=h),null!=a){const e=sN(n);let i,o=h[1],p=h[0];const d=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!u&&d||([o,p]=UI(h[0],h[1])),i=u?new zN(e,d):new PN(e,d);const f=d?[p,o]:h,m=this.makeTensorInfo(f,s),g=this.texData.get(m.dataId);g.usage=d?LI.PIXELS:LI.UPLOAD,g.texShape=f,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),o,p,a);const y=this.runWebGLProgram(i,[m],s,[[p,o]],!0),b=this.texData.get(y.dataId);t.texShape=b.texShape,t.isPacked=b.isPacked,t.usage=b.usage,gt().get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(t.texture=b.texture,t.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(m),l&&(this.uploadWaitMs+=r.now()-c)}else{const e=this.acquireTexture(h,o,s,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*r.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}});e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await xc(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw XI(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,inShapesLocations:a,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:u,outTexShapeLocation:l}=RN(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.inShapesLocations=a,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}}eT.nextDataId=0,a.isBrowser()&&Ls("webgl",()=>new eT,2);class tT{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=d.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=_N(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class nT{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=d.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=_N(a);let i="";if(s)if(0===a||1===r.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${CN(a)} coords = getOutputCoords();\n        `,1===a)i+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=LC("coords",a);i+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function rT(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const sT={kernelName:"Identity",backendName:"webgl",kernelFunc:rT};function aT(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=rT({inputs:{x:r},backend:n}),u=rT({inputs:{x:s},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const iT={kernelName:"Complex",backendName:"webgl",kernelFunc:aT},oT="return (a < 0.) ? b * a : a;",uT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",lT={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s,o=n.makeTensorInfo([],"float32",r.createScalarValue(i,"float32")),u=gt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nT(uT,a.shape,o.shape):new tT(oT,a.shape,o.shape),l=n.runWebGLProgram(u,[a,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},cT="return (a < 0.) ? b * a : a;",hT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",pT={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=gt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nT(hT,r.shape,s.shape):new tT(cT,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],"float32")}};function dT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,u=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=gt().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new XC(i.shape,t):new jC(i.shape,e),o.runWebGLProgram(l,[i],u)}}function fT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new tT(e,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],bn(n.dtype,r.dtype))}),a=aT({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||bn(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?d.fromUint8ToStringArray(e):e,r="string"===u.dtype?d.fromUint8ToStringArray(t):t,[a,i]=s(u.shape,l.shape,n,r,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=gt().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new nT(t,u.shape,l.shape,n):new tT(e,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}function mT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?hT:cT;if("leakyrelu"===e)return t?uT:oT;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class gT{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=_N(this.outputShape.length);const l=Math.ceil((r?e[1]:e[2])/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class yT{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=d.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const bT="return a * b;";function xT(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=d.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new yT("return areal * breal - aimag * bimag;",r.shape,s.shape),i=new yT("return areal * bimag + aimag * breal;",r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=aT({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=dC(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=gt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nT(bT,r.shape,s.shape):new tT(bT,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const wT={kernelName:"Multiply",backendName:"webgl",kernelFunc:xT};function vT(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=n,u=r.sizeFromShape(a.shape),l=r.inferFromImplicitShape(i,u),c=r.sizeFromShape(l);r.assert(u===c,()=>`The new shape (${l}) has ${c} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`);const h=o.texData.get(a.dataId);return!h.isPacked||iN(a.shape,l)||null!==h.texture&&iN(h.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[nN(e.shape),...rN(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[nN(t),...rN(t)],i=new WC(a,r),o=n.runWebGLProgram(i,[s],e.dtype,[r],!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,l,o)}const kT={kernelName:"Reshape",backendName:"webgl",kernelFunc:vT};class ST{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const o=4*Math.floor(n/4),u=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${r.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class IT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function NT(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=d.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new ST({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new ST({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new IT({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class CT{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const r=CN(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let s=0;s<e.length;s++)r[e[s]]=n[s];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class TT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let l=0;l<n.length;l++)n[l]=e[t[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=CN(this.rank),s=zC("rc",this.rank),a=new Array(this.rank);for(let l=0;l<t.length;l++)a[t[l]]=s[l];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function ET(e,t,n){const r=gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TT(e.shape,t):new CT(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function AT(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;return function(e,t,n,s){const a=e.shape.length,i=r.parseAxisParam(t,e.shape);let o=i;const u=d.getAxesPermutation(o,a),l=null!=u;let c=e;l&&(c=ET(e,u,s),o=d.getInnerMostAxes(o.length,a)),d.assertAxesAreInnerMostDims("sum",o,a);const[h,p]=d.computeOutAndReduceShapes(c.shape,o);let f=h;n&&(f=d.expandShapeToKeepDim(h,i));const m=r.sizeFromShape(p),g=vT({inputs:{x:c},attrs:{shape:[r.sizeFromShape(e.shape)/m,m]},backend:s}),y=NT(g,xn(e.dtype),"sum",s),b=vT({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),l&&s.disposeIntermediateTensorInfo(c),b}(a,i,o,n)}const RT={kernelName:"Sum",backendName:"webgl",kernelFunc:AT};function $T(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=new Array(s.shape.length);for(let l=0;l<o.length;l++)o[l]=s.shape[a[l]];let u;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId),t=MC(e.values,s.shape,s.dtype,a,o);u=i.makeTensorInfo(o,s.dtype),i.texData.get(u.dataId).values=t}else u=ET(s,a,i);return u}const _T={kernelName:"Transpose",backendName:"webgl",kernelFunc:$T};function FT({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:i=null,preluActivationWeights:u=null,leakyreluAlpha:l=0,activation:c=null}){const h=e.shape.length,p=t.shape.length,d=n?e.shape[h-2]:e.shape[h-1],f=s?t.shape[p-1]:t.shape[p-2],m=n?e.shape[h-1]:e.shape[h-2],g=s?t.shape[p-2]:t.shape[p-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=r.sizeFromShape(y),w=r.sizeFromShape(b),v=o.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([m,g]);r.assert(d===f,()=>`Error in matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const k=n?[x,d,m]:[x,m,d],S=s?[w,g,f]:[w,f,g],I=vT({inputs:{x:e},backend:a,attrs:{shape:k}}),N=vT({inputs:{x:t},backend:a,attrs:{shape:S}}),C=[I,N],T=Math.max(x,w),E=n?I.shape[1]:I.shape[2],A=null!=i,R=null!=u,$="leakyrelu"===c,_=null!=c?mT(c,!0):null;let F;if((1===m||1===g)&&E>1e3&&!1===(A||R||$||null!=_)){let e=I,t=N;n&&(e=$T({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),C.push(e)),s&&(t=$T({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),C.push(t));const r=1===g;let i=e;1!==g&&(i=vT({inputs:{x:e},backend:a,attrs:{shape:[T,E,1]}}),C.push(i));const o=1===g?2:1;let u=t;r&&(u=vT({inputs:{x:t},backend:a,attrs:{shape:[T,1,E]}}),C.push(u));const l=xT({inputs:{a:i,b:u},backend:a});F=AT({inputs:{x:l},backend:a,attrs:{axis:o,keepDims:!0}}),C.push(l)}else{const o=bn(e.dtype,t.dtype),c=new gT(k,S,[T,m,g],n,s,A,_,R,$),h=[I,N];if(null!=i&&h.push(i),R&&h.push(u),$){const e=a.makeTensorInfo([],"float32",r.createScalarValue(l,"float32"));h.push(e),C.push(e)}F=a.runWebGLProgram(c,h,o)}const D=vT({inputs:{x:F},backend:a,attrs:{shape:v}});C.push(F);for(const r of C)a.disposeIntermediateTensorInfo(r);return D}const DT={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return FT({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},OT={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=SC(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=gt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new XC(r.shape,"return abs(x);"):new jC(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},MT={kernelName:"Acos",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},PT={kernelName:"Acosh",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},zT="return a + b;",LT={kernelName:"Add",backendName:"webgl",kernelFunc:fT({opSnippet:zT,packedOpSnippet:zT,supportsComplex:!0,cpuKernelImpl:jN})};class BT{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class WT{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const VT={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return rT({inputs:{x:s[0]},backend:r});if(s.length>gt().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map(e=>e.dtype).reduce((e,t)=>bn(e,t)),i=s.map(e=>e.shape),o=gt().getBool("WEBGL_PACK")?new WT(s[0].shape,i):new BT(s[0].shape,i);return r.runWebGLProgram(o,s,a)}},UT={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=d.getAxesPermutation(c,u);let p=a;null!=h&&(p=$T({inputs:{x:a},backend:n,attrs:{perm:h}}),c=d.getInnerMostAxes(c.length,u)),d.assertAxesAreInnerMostDims("all",c,u);const[f,m]=d.computeOutAndReduceShapes(p.shape,c),g=vT({inputs:{x:p},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=NT(g,g.dtype,"all",n);let b;return b=vT(o?{inputs:{x:y},backend:n,attrs:{shape:d.expandShapeToKeepDim(f,l)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(p),b}},GT={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=d.getAxesPermutation(c,u);let p=a;null!=h&&(p=$T({inputs:{x:a},backend:n,attrs:{perm:h}}),c=d.getInnerMostAxes(c.length,u)),d.assertAxesAreInnerMostDims("any",c,u);const[f,m]=d.computeOutAndReduceShapes(p.shape,c),g=vT({inputs:{x:p},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=NT(g,g.dtype,"any",n);let b;return b=vT(o?{inputs:{x:y},backend:n,attrs:{shape:d.expandShapeToKeepDim(f,l)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(p),b}};class HT{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===t?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class jT{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=CN(o),l=LC("coords",o);let c,h;if(1===a){h=o+1;const e=CN(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[o-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(e=>"int "+e),m=LC("sourceLocR",h-1).concat("inIdx.r"),g=LC("sourceLocG",h-1).concat("inIdx.g"),y=LC("sourceLocB",h-1).concat("inIdx.b"),b=LC("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function qT(e,t,n,s){const a=[n];if(d.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!gt().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],i=e.texData.get(t.dataId);let o=t;null!==i&&i.isPacked&&(o=e.unpackTensor(t),n.push(o));const[u,l]=d.computeOutAndReduceShapes(o.shape,a),c=r.sizeFromShape(l),h=vT({inputs:{x:o},backend:e,attrs:{shape:[-1,c]}});n.push(h);const p=function e(t,n,r,s=null){let a=n.shape[0],i=n.shape[1];null!=s&&(a=s.shape[0],i=s.shape[1]);const o=d.computeOptimalWindowSize(i),u={windowSize:o,inSize:i,batchSize:a,outSize:Math.ceil(i/o)},l=new HT(u,r,null==s),c=[n];null!=s&&c.push(s);const h=t.runWebGLProgram(l,c,"int32");if(1===h.shape[1])return h;const p=e(t,n,r,h);return t.disposeIntermediateTensorInfo(h),p}(e,h,s);n.push(p);const f=vT({inputs:{x:p},backend:e,attrs:{shape:u}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),f}return function e(t,n,r,s=null){const a=null!=s?s.shape:n.shape,i=d.computeOptimalWindowSize(a[a.length-1]),o=new jT(a,i,r,null==s),u=t.runWebGLProgram(o,null==s?[n]:[n,s],"int32");if(u.shape.length===n.shape.length){const s=e(t,n,r,u);return t.disposeIntermediateTensorInfo(u),s}return u}(e,t,s)}const KT={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const u=d.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=$T({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=d.getInnerMostAxes(o.length,l.shape.length)),d.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const h=qT(n,l,o[0],"max");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},XT={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const u=d.getAxesPermutation(o,a.shape.length);let l=a;const c=[];null!=u&&(l=$T({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),o=d.getInnerMostAxes(o.length,l.shape.length)),d.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const h=qT(n,l,o[0],"min");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},YT={kernelName:"Asin",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},ZT={kernelName:"Asinh",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},QT={kernelName:"Atan",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},JT={kernelName:"Atan2",backendName:"webgl",kernelFunc:fT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})},eE={kernelName:"Atanh",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class tE{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t;let m="0.0";if(f||(m="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`:`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let g=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(g="avgValue / count");const y=4*Math.floor(a/4),b=a%4,x=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${x}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${x}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class nE{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,S=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const rE={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;pN(a,"avgPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(d.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=d.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return rT({inputs:{x:a},backend:n});const h=new tE(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},sE={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r,c=d.computePool3DInfo(s.shape,a,i,[1,1,1],o,u,l),h=new nE(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class aE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n            wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${e.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterDepth*e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n            wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oE={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=d.computePool3DInfo(i.shape,o,u,[1,1,1],l,c),p=new iE(h);return n.runWebGLProgram(p,[s],i.dtype)}},uE={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;pN([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=d.computePool2DInfo(i.shape,o,u,1,l),h=new aE(c);return n.runWebGLProgram(h,[s],i.dtype)}},lE={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return FT({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class cE{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],d.assertAndGetBroadcastShape(e,t),d.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(d.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(d.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class hE{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],d.assertAndGetBroadcastShape(e,t),d.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(d.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(d.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const pE={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:i,offset:o,scale:u}=e;r.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==u||a.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[s,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=u&&(p=u.shape,c.push(u));const d=gt().getBool("WEBGL_PACK_NORMALIZATION")?new hE(s.shape,a.shape,i.shape,h,p,l):new cE(s.shape,a.shape,i.shape,h,p,l);return t.runWebGLProgram(d,c,c[0].dtype)}};class dE{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=CN(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return fE.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${fE[t]} = start[${t}] + coords.${fE[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const fE=["x","y","z","w","u","v"];class mE{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=CN(this.rank),n=LC("coords",this.rank),r=LC("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function gE(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s,[u,c]=l.parseSliceParams(a,i,o);if(l.assertParamsValid(a,u,c),0===r.sizeFromShape(c))return n.makeTensorInfo(c,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=IC(e.values,u,c,a.shape,a.dtype);return n.makeTensorInfo(c,a.dtype,t)}const{isPacked:h}=n.texData.get(a.dataId),p=l.isSliceContinous(a.shape,u,c);if(h||!p){const e=gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mE(c):new dE(c);return n.runWebGLProgram(e,[a],a.dtype,[u])}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),i=s.makeTensorInfo(n,e.dtype),o=s.texData.get(i.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let u=l.computeFlatOffset(t,r.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const c=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,c+1),i}(a,u,c,n)}const yE={kernelName:"Slice",backendName:"webgl",kernelFunc:gE},bE={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;r.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const u=i.reduce((e,t)=>e*t),l=d.getReshaped(a.shape,i,u),c=d.getPermuted(l.length,i.length),h=d.getReshapedPermuted(a.shape,i,u),p=d.getSliceBeginCoords(o,i.length),f=d.getSliceSize(h,o,i.length),m=[],g=vT({inputs:{x:a},backend:n,attrs:{shape:l}}),y=$T({inputs:{x:g},backend:n,attrs:{perm:c}}),b=vT({inputs:{x:y},backend:n,attrs:{shape:h}}),x=gE({inputs:{x:b},backend:n,attrs:{begin:p,size:f}});return m.push(g),m.push(y),m.push(b),m.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},xE={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),u=n.readSync(a.dataId),l=qN(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,l)}},wE={kernelName:"BroadcastArgs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,a=n.readSync(r.dataId),i=n.readSync(s.dataId),o=d.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},vE=fT({opSnippet:"return float(a != b);",cpuKernelImpl:mC,dtype:"bool"}),kE={kernelName:"NotEqual",backendName:"webgl",kernelFunc:vE};function SE(e){const{inputs:t,backend:n}=e,{input:r}=t;return rT({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const IE={kernelName:"Real",backendName:"webgl",kernelFunc:SE},NE={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return rT({inputs:{x:i},backend:s});const t=fo(i.shape),n=e({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),r=aT({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===i.dtype){const t=SE({inputs:{input:i},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!r.hasEncodingLoss(i.dtype,o)){const e=rT({inputs:{x:i},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([i])){const e=s.texData.get(i.dataId).values,[t,n,r]=XN(e,i.shape,i.dtype,o);return s.makeTensorInfo(t,n,r)}if("int32"===o)return function(e,t){const n=new jC(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",r.getTypedArrayFromDType("bool",1)),t=vE({inputs:{a:i,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},CE="return ceil(x);",TE={kernelName:"Ceil",backendName:"webgl",kernelFunc:dT({opSnippet:CE,packedOpSnippet:CE,cpuKernelImpl:YN})};class EE{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class AE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const RE={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;return o=gt().getBool("WEBGL_PACK_CLIP")?new AE(s.shape):new EE(s.shape),n.runWebGLProgram(o,[s],s.dtype,[[a],[i]])}};class $E{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function _E(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const FE={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new $E(r.shape),i=[_E(r,s.complexTensorInfos.real),_E(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class DE{constructor(e){this.outputShape=[],this.outputShape=d.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let r=1;r<t.length;r++)n.push(`else if (yC < ${t[r]}) setOutput(getT${r}(yR, yC-${t[r-1]}));`);n.push(`else setOutput(getT${t.length}(yR, yC-${t[t.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class OE{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=d.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=CN(r),a=LC("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const o=new Array(e.length-1);o[0]=e[0][t];for(let d=1;d<o.length;d++)o[d]=o[d-1]+e[d][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let d=1;d<o.length;d++){const e=o[d-1];h+=`\n        if (${u} < ${o[d]}  && ${u} >= ${o[d-1]}) {\n          return getChannel(\n            getT${d}(${ME(i,u,e)}),\n            vec2(${ME(l,u,e)}));\n        }`}const p=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${ME(i,u,p)}),\n          vec2(${ME(l,u,p)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function ME(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}function PE(e){const{inputs:t,backend:n}=e,{input:r}=t;return rT({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const zE={kernelName:"Imag",backendName:"webgl",kernelFunc:PE};function LE(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0],o=t.map(e=>e.shape);d.assertParamsConsistent(o,i);const u=d.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(u))return n.makeTensorInfo(u,t[0].dtype,[]);const l=t.filter(e=>r.sizeFromShape(e.shape)>0);return 1===l.length?rT({inputs:{x:l[0]},backend:n}):function e(t,n,s){const a=t[0].dtype;if("complex64"===a){const r=t.map(e=>SE({inputs:{input:e},backend:s})),a=t.map(e=>PE({inputs:{input:e},backend:s})),i=e(r,n,s),o=e(a,n,s),u=aT({inputs:{real:i,imag:o},backend:s});return r.forEach(e=>s.disposeIntermediateTensorInfo(e)),a.forEach(e=>s.disposeIntermediateTensorInfo(e)),s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),u}let i=s.shouldExecuteOnCPU(t);if("string"===a&&(i=!0),i){const e=t.map(e=>{const t=r.sizeFromShape(e.shape.slice(n));return vT({inputs:{x:e},backend:s,attrs:{shape:[-1,t]}})}),i=e.map(e=>({vals:s.readSync(e.dataId),shape:e.shape})),o=d.computeOutShape(e.map(e=>e.shape),1),u=ZN(i,o,a,1===e[0].shape[0]),l=d.computeOutShape(t.map(e=>e.shape),n),c=s.makeTensorInfo(l,a,u);return e.forEach(e=>s.disposeIntermediateTensorInfo(e)),c}const o=gt().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(t.length>o){const r=[];for(let i=0;i<t.length;i+=o){const a=t.slice(i,i+o);r.push(e(a,n,s))}const a=e(r,n,s);for(const e of r)s.disposeIntermediateTensorInfo(e);return a}if(gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){const e=new OE(t.map(e=>e.shape),n);return s.runWebGLProgram(e,t,a)}const{tensors2D:u,outShape:l}=function(e,t,n){const s=d.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>vT({inputs:{x:e},attrs:{shape:[-1,r.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:s}}(t,n,s),c=new DE(u.map(e=>e.shape)),h=s.runWebGLProgram(c,u,a);u.forEach(e=>s.disposeIntermediateTensorInfo(e));const p=vT({inputs:{x:h},attrs:{shape:l},backend:s});return s.disposeIntermediateTensorInfo(h),p}(l,i,n)}const BE={kernelName:"Concat",backendName:"webgl",kernelFunc:LE};class WE{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class VE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class UE{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=_N(this.outputShape.length);const i=e.padInfo.left,o=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,h=c;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let r=0;r<c;r++)p+=`\n           vec4 xTexelC${2*r};\n           int xTexelC${2*r}Ready;\n           vec4 xTexelC${2*r+1};\n           int xTexelC${2*r+1}Ready;\n           vec4 xC${r};`;p+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let r=0;r<c;r++)p+=`\n           xTexelC${2*r} = vec4(0.0);\n           xTexelC${2*r}Ready = 0;\n           xTexelC${2*r+1} = vec4(0.0);\n           xTexelC${2*r+1}Ready = 0;\n           xC${r} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let g=0;g<(h+1)/2;g++){const t=2*g;if(p+=`\n           xC = xCCorner + ${t*u};\n           `,1===o){if(t<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n               `,p+=1===u&&t>0?`\n                 xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                   } else {\n                     xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xC${t} = xTexelC${t};\n                 `,t+1<c)){const e=i%2==0?r.nearestLargerEven(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                     xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${t+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${t+1}Ready = 1;\n                   }\n                   `,p+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                     } else {\n                      xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                     }\n                     `:`\n                     xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                     `):p+=1===e?`\n                     xC${t+1} = xTexelC${t};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                       xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${t+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${t+1}Ready = 1;\n                     }\n\n                     xC${t+1} = xTexelC${t+1};\n                     `}}else t<c&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n               `,t+1<c&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(\n                   xTexelC${t}.xy, xTexelC${t+1}.xy);\n               `,t+1<c&&(p+=`\n                   xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                 `)));t<c&&(p+=`\n             wTexel = getW(r, ${t}, d1, d2);\n             dotProd += xC${t}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${t}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,t+1<c&&(p+=`\n               wTexel = getW(r, ${t+1}, d1, d2);\n               dotProd += xC${t+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${t+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class GE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=_N(this.outputShape.length);const{dataFormat:n}=t,r=fN(),s="channelsLast"===n,a=s?1:2,i=s?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let l=0;l<=1;l++)for(let e=0;e<=1;e++)u+=`\n          blockIndex = rc.z + ${e};\n          pos = rc.y + ${l};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${s}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*l+e}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*l+e}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function HE(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function jE({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=l[0]*l[1]*l[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[];if(null!=i){const e=HE(i.shape,f);null!=e&&(i=vT({inputs:{x:i},backend:s,attrs:{shape:e}}),g.push(i))}if(null!=a){const e=HE(a.shape,f);null!=e&&(a=vT({inputs:{x:a},backend:s,attrs:{shape:e}}),g.push(a))}if((1!==p&&1!==d||!(h>1e3))&&c.isPacked&&f&&null!=c.texture&&l[2]%2!=0&&r.arraysEqual(c.shape.slice(-3),l.slice(-3))){const h={dataId:e.dataId,shape:[1,l[0]*l[1]*(l[2]+1),n.inChannels],dtype:e.dtype},p=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,r.assert(iN(c.shape,h.shape),()=>`packed reshape ${c.shape} to ${h.shape} isn't free`);const d=vT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(d);const f=FT({a:h,b:d,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o}),y=s.texData.get(f.dataId);r.assert(y.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=p,y.shape=n.outShape,m=rT({inputs:{x:f},backend:s}),m.shape=n.outShape,g.push(f)}else{const r=n.outHeight*n.outWidth,l=vT({inputs:{x:e},backend:s,attrs:{shape:f?[n.batchSize,r,n.inChannels]:[n.batchSize,n.inChannels,r]}}),c=vT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=FT({a:f?l:c,b:f?c:l,transposeA:!f,transposeB:!1,backend:s,bias:a,activation:u,preluActivationWeights:i,leakyreluAlpha:o});m=vT({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(h)}for(const r of g)s.disposeIntermediateTensorInfo(r);return m}function qE({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=l*c*h,y=d*p,b=[n.batchSize,g,y],x=[];if(null!=i){const e=HE(i.shape,m);null!=e&&(i=vT({inputs:{x:i},backend:s,attrs:{shape:e}}),x.push(i))}if(null!=a){const e=HE(a.shape,m);null!=e&&(a=vT({inputs:{x:a},backend:s,attrs:{shape:e}}),x.push(a))}const w=vT({inputs:{x:t},backend:s,attrs:{shape:[1,g,r.sizeFromShape(t.shape)/g]}});x.push(w);const v=new GE(b,n),k=s.runWebGLProgram(v,[e],"float32",[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]]),S=vT({inputs:{x:k},backend:s,attrs:{shape:b}});x.push(k),x.push(S);const I=null!=a,N=null!=i,C="leakyrelu"===u,T=u?mT(u,!0):null,E=new gT(m?S.shape:w.shape,m?w.shape:S.shape,m?[n.batchSize,y,n.outChannels]:[n.batchSize,n.outChannels,y],!0,!1,I,T,N,C),A=m?[S,w]:[w,S];if(a&&A.push(a),N&&A.push(i),C){const e=s.makeTensorInfo([],"float32",r.createScalarValue(o,"float32"));A.push(e),x.push(e)}const R=s.runWebGLProgram(E,A,"float32"),$=vT({inputs:{x:R},backend:s,attrs:{shape:n.outShape}});x.push(R);for(const r of x)s.disposeIntermediateTensorInfo(r);return $}const KE={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=d.convertConv2DDataFormat(u),p=d.computeConv2DInfo(s.shape,a.shape,i,l,o,c,!1,h);let f;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===h&&gt().getBool("WEBGL_EXP_CONV")){const e=new UE(p);f=n.runWebGLProgram(e,[s,a],"float32",[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]])}else if(gt().getBool("WEBGL_CONV_IM2COL"))f=qE({x:s,filter:a,convInfo:p,backend:n});else{const e=new WE(p);f=n.runWebGLProgram(e,[s,a],"float32")}else f=jE({x:s,filter:a,convInfo:p,backend:n});const m=vT({inputs:{x:f},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class XE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===e.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class YE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r="channelsLast"===e.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${r?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${r?1:2}], coords[${r?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ZE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${e.strideDepth} - ${e.padInfo.front};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class QE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${e.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const JE={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=d.convertConv2DDataFormat(u),p=d.computeConv2DInfo(s.shape,c,i,1,o,l,!1,h),f=new XE(p);return n.runWebGLProgram(f,[s,a],"float32")}},eA={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=d.convertConv2DDataFormat(l),p=d.computeConv2DInfo(i,a.shape,o,1,u,c,!1,h),f=new YE(p);return n.runWebGLProgram(f,[s,a],"float32")}},tA={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=d.computeConv3DInfo(s.shape,a.shape,i,u,o),c=new VE(l);return n.runWebGLProgram(c,[s,a],"float32")}},nA={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=d.computeConv3DInfo(s.shape,u,i,1,o),c=new ZE(l);return n.runWebGLProgram(c,[s,a],"float32")}},rA={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r,l=d.computeConv3DInfo(u,a.shape,o,1,i),c=new QE(l);return n.runWebGLProgram(c,[s,a],"float32")}},sA={kernelName:"Cos",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},aA={kernelName:"Cosh",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class iA{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const oA={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new iA(s.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[s,a,i],"float32")}};var uA;!function(e){e.Prod="*",e.Sum="+"}(uA||(uA={}));class lA{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,a=n?this.op===uA.Prod?"1.0":"0.0":`getX(${cA(s,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let o="",u="";n?(o=r?"end != "+(i-1):"end != 0",u=r?"end + 1":"end - 1"):(o=r?"end + pow2 < "+i:"end >= pow2",u=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${CN(s)} coords = getOutputCoords();\n        int end = ${hA(s,"coords",this.op)};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${u};\n          ${hA(s,"coords",this.op)} = idx;\n          val ${this.op}= getX(${cA(s,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function cA(e,t,n){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function hA(e,t,n){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function pA(e,t,n,r,s,a){const i=t.shape.length,o=d.getAxesPermutation([r],i);let u=t;null!=o&&(u=$T({inputs:{x:t},backend:n,attrs:{perm:o}}));const l=d.getInnerMostAxes(1,i)[0];if(l!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=`+r);const c=u.shape[l];let h=rT({inputs:{x:u},backend:n});for(let p=0;p<=Math.ceil(Math.log2(c))-1;p++){const t=new lA(e,u.shape,!1,a),r=h;h=n.runWebGLProgram(t,[h],h.dtype,[[p]]),n.disposeIntermediateTensorInfo(r)}if(s){const t=new lA(e,u.shape,s,a),r=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=o){const e=$T({inputs:{x:h},backend:n,attrs:{perm:d.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(u),e}return h}const dA={kernelName:"Cumprod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return pA(uA.Prod,s,n,a,i,o)}},fA={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return pA(uA.Sum,s,n,a,i,o)}},mA={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=qN(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=KN(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+s.shape.length+".")}};class gA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const yA={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r,o=s.shape[0],u=("NHWC"===i?s.shape[1]:s.shape[2])*a,l=("NHWC"===i?s.shape[2]:s.shape[3])*a,c=("NHWC"===i?s.shape[3]:s.shape[1])/(a*a),h=new gA("NHWC"===i?[o,u,l,c]:[o,c,u,l],a,i);return n.runWebGLProgram(h,[s],s.dtype)}};class bA{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=_N(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class xA{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=_N(this.outputShape.length);const i=e.outChannels/e.inChannels,o=e.padInfo.left,u=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,p=h;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let r=0;r<h;r++)d+=`\n          vec4 xTexelC${2*r};\n          int xTexelC${2*r}Ready;\n          vec4 xTexelC${2*r+1};\n          int xTexelC${2*r+1}Ready;\n          vec4 xC${r};`;d+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let r=0;r<h;r++)d+=`\n          xTexelC${2*r} = vec4(0.0);\n          xTexelC${2*r}Ready = 0;\n          xTexelC${2*r+1} = vec4(0.0);\n          xTexelC${2*r+1}Ready = 0;\n          xC${r} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(p+1)/2;y++){const e=2*y;if(d+=`\n          xC = xCCorner + ${e*l};\n          `,1===u){if(e<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,d+=1===l&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<h)){const t=o%2==0?r.nearestLargerEven(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${e+1} = vec4(previous.zw, xTexelC${e+1}.xy);\n                    } else {\n                     xC${e+1} = vec4(0.0, 0.0, xTexelC${e+1}.xy);\n                    }\n                    `:`\n                    xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                    `):d+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<h&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<h&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<h&&(d+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<h&&(d+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<h&&(d+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const wA={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=s;let h=l;null==h&&(h=[1,1]),r.assert(d.eitherStridesOrDilationsAreOne(o,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`);const p=d.computeConv2DInfo(a.shape,i.shape,o,h,u,c,!0);let f;return f=gt().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new xA(p):new bA(p),n.runWebGLProgram(f,[a,i],"float32",[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]])}};class vA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${e.outChannels/e.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${r}; dm++) {\n              int d2 = d1 * ${r} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const SA={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=d.computeConv2DInfo(s.shape,c,i,o,u,l,!0),p=new vA(h);return n.runWebGLProgram(p,[s,a],"float32")}},IA={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=d.computeConv2DInfo(c,a.shape,i,o,u,l,!0),p=new kA(h);return n.runWebGLProgram(p,[s,a],"float32")}};class NA{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const CA={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],i=r.sizeFromShape(s.shape),o=vT({inputs:{x:s},backend:n,attrs:{shape:[i]}}),u=new NA(i),l=n.runWebGLProgram(u,[o],o.dtype),c=vT({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),c}};class TA{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const EA={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=d.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",u);let c;const h=new TA(l);c=n.runWebGLProgram(h,[s,a],"float32");const p=vT({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),p}},AA={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,i=t,{allDims:o,summedDims:u,idDims:l}=d.decodeEinsumEquation(a,i.length);d.checkEinsumDimSizes(o.length,l,i);const{path:c,steps:h}=d.getEinsumComputePath(u,l),p=h.length;let f=null,m=o.length;const g=[];for(let y=0;y<p;++y){for(const e of h[y]){const{permutationIndices:t,expandDims:s}=d.getEinsumPermutation(m,l[e]);let a;d.isIdentityPermutation(t)?a=i[e]:(a=$T({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),g.push(a));const o=a.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);r.arraysEqual(a.shape,o)||(a=vT({inputs:{x:a},backend:n,attrs:{shape:o}}),g.push(a)),null===f?f=a:(f=xT({inputs:{a,b:f},backend:n}),g.push(f))}y<p-1&&(c[y]>=0&&(f=AT({inputs:{x:f},backend:n,attrs:{axis:c[y]-(o.length-m),keepDims:!1}}),g.push(f)),m--)}for(const r of g)r!==f&&n.disposeIntermediateTensorInfo(r);return f}},RA={kernelName:"Elu",backendName:"webgl",kernelFunc:dT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},$A={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=gt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nT("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new tT("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},_A={kernelName:"Equal",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:QN})},FA={kernelName:"Erf",backendName:"webgl",kernelFunc:dT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${d.ERF_P};\n  float a1 = ${d.ERF_A1};\n  float a2 = ${d.ERF_A2};\n  float a3 = ${d.ERF_A3};\n  float a4 = ${d.ERF_A4};\n  float a5 = ${d.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},DA=dT({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:JN,dtype:"float32"}),OA={kernelName:"Exp",backendName:"webgl",kernelFunc:DA};function MA(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,u=i.shape.slice();let l=a;return a<0&&(r.assert(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),l=o+a+1),u.splice(l,0,1),vT({inputs:{x:i},backend:s,attrs:{shape:u}})}const PA={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:MA},zA="return exp(x) - 1.0;",LA={kernelName:"Expm1",backendName:"webgl",kernelFunc:dT({opSnippet:zA,packedOpSnippet:zA,cpuKernelImpl:eC})};class BA{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function WA(e,t,n){const s=n.texData.get(e.dataId),a=r.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=vT({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}),u=o.shape,l=new BA("real",u,t),c=new BA("imag",u,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:u},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:u}],p=n.runWebGLProgram(l,h,"float32"),d=n.runWebGLProgram(c,h,"float32"),f=aT({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=vT({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const VA={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return WA(r,!1,n)}};class UA{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function GA(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:i}=n;if(i=i||r.inferDtype(a),"string"===i){const e=r.getArrayFromDType(i,r.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,i,e)}{const e=new UA(s,a);return t.runWebGLProgram(e,[],i,[[a]])}}const HA={kernelName:"Fill",backendName:"webgl",kernelFunc:GA};class jA{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const qA={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new jA(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},KA="return floor(x);",XA={kernelName:"Floor",backendName:"webgl",kernelFunc:dT({opSnippet:KA,packedOpSnippet:KA,cpuKernelImpl:tC})},YA={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:fT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class ZA{constructor(e){this.variableNames=["A"];const t=fN(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class QA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=fN(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const JA={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];if(o||i){const e=gt().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=eR&&e===tR||(tR=e,eR=document.createElement("canvas").getContext("2d",{willReadFrequently:tR})),eR.canvas.width=u,eR.canvas.height=l,eR.drawImage(s,0,0,u,l),s=eR.canvas}const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=LI.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=gt().getBool("WEBGL_PACK")?new QA(h):new ZA(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let eR,tR=gt().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const nR={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:h,dilations:p,dimRoundingMode:f,activation:m,leakyreluAlpha:g}=s,y=d.convertConv2DDataFormat(h),b=d.computeConv2DInfo(a.shape,i.shape,l,p,c,f,!1,y);let x;const w=[],v=null!=o,k=null!=u,S="leakyrelu"===m,I=()=>{const e=[a,i],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=vT({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return w.push(t),t}return e};if(v&&e.push(t(o,h)),k&&e.push(t(u,h)),S){const t=n.makeTensorInfo([],"float32",r.createScalarValue(g,"float32"));e.push(t),w.push(t)}return e};if(1!==b.filterHeight||1!==b.filterWidth||1!==b.dilationHeight||1!==b.dilationWidth||1!==b.strideHeight||1!==b.strideWidth||"SAME"!==b.padInfo.type&&"VALID"!==b.padInfo.type)if(b.strideWidth<=2&&"channelsLast"===y&&gt().getBool("WEBGL_EXP_CONV")){const e=m?mT(m,!0):null,t=new UE(b,v,e,k,S),r=[[b.padInfo.top,b.padInfo.left],[b.strideHeight,b.strideWidth],[b.dilationHeight,b.dilationWidth],[b.inHeight,b.inWidth]],s=I();x=n.runWebGLProgram(t,s,"float32",r)}else if(gt().getBool("WEBGL_CONV_IM2COL"))x=qE({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:u,leakyreluAlpha:g});else{const e=m?mT(m,!1):null,t=new WE(b,v,e,k,S),r=I();x=n.runWebGLProgram(t,r,"float32")}else x=jE({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:u,leakyreluAlpha:g});const N=vT({inputs:{x},backend:n,attrs:{shape:b.outShape}});return w.push(x),w.forEach(e=>n.disposeIntermediateTensorInfo(e)),N}},rR={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:h,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,g=[];let y=h;null==y&&(y=[1,1]),r.assert(d.eitherStridesOrDilationsAreOne(l,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${y}'`);const b=d.computeConv2DInfo(a.shape,i.shape,l,y,c,p,!0),x=gt().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,w=f?mT(f,x):null,v=[a,i],k=null!=o,S=null!=u,I="leakyrelu"===f;if(k&&v.push(o),S&&v.push(u),I){const e=n.makeTensorInfo([],"float32",r.createScalarValue(m,"float32"));v.push(e),g.push(e)}let N;N=x?new xA(b,k,w,S,I):new bA(b,k,w,S,I);const C=n.runWebGLProgram(N,v,"float32",[[b.padInfo.top,b.padInfo.left],[b.strideHeight,b.strideWidth],[b.dilationHeight,b.dilationWidth],[b.inHeight,b.inWidth]]);return g.forEach(e=>n.disposeIntermediateTensorInfo(e)),C}};class sR{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const s=CN(n.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const aR={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=a.shape,o=i[i.length-1],u=r.sizeFromShape(s.shape),[l,c,h,p]=d.prepareAndValidate(s,a),f=vT({inputs:{x:a},backend:n,attrs:{shape:[c,o]}}),m=vT({inputs:{x:s},backend:n,attrs:{shape:[r.sizeFromShape(s.shape)/h,h]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=nC(e,t,s.dtype,c,o,h,p,s.shape,u);return n.makeTensorInfo(l,s.dtype,r.values)}const g=new sR(o,p,[c,h],s.shape),y=n.runWebGLProgram(g,[m,f],m.dtype),b=vT({inputs:{x:y},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class iR{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=CN(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e.length;s++)r.push(2===s?"index":""+n[s]);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function oR(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:u}=s,l=r.parseAxisParam(o,a.shape)[0];if(gt().get("DEBUG")){const e=n.readSync(i.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){const s=e[n];r.assert(s<=t-1&&s>=0,()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`)}}const c=d.segment_util.collectGatherOpShapeInfo(a,i,l,u),h=r.sizeFromShape(i.shape),p=[],f=vT({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=vT({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});p.push(f),p.push(m);const g=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(m),t=n.bufferSync(f),r=rC(t,e,g);return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const y=new iR(f.shape,g),b=n.runWebGLProgram(y,[f,m],f.dtype);p.push(b);const x=vT({inputs:{x:b},backend:n,attrs:{shape:c.outputShape}});return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}const uR={kernelName:"GatherV2",backendName:"webgl",kernelFunc:oR},lR={kernelName:"Greater",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:sC,dtype:"bool"})},cR={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:aC})},hR={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return WA(r,!0,n)}},pR={kernelName:"IsFinite",backendName:"webgl",kernelFunc:dT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},dR={kernelName:"IsInf",backendName:"webgl",kernelFunc:dT({opSnippet:"return float(isinf(x));",dtype:"bool"})},fR={kernelName:"IsNan",backendName:"webgl",kernelFunc:dT({opSnippet:"return float(isnan(x));",dtype:"bool"})},mR={kernelName:"Less",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:iC,dtype:"bool"})},gR={kernelName:"LessEqual",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:oC,dtype:"bool"})},yR={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=uC(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},bR={kernelName:"Log",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:lC})},xR={kernelName:"Log1p",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"})},wR={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},vR={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:dT({opSnippet:"return float(!(x >= 1.0));"})},kR={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:fT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class SR{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class IR{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const NR={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r,l=gt().getBool("WEBGL_PACK_NORMALIZATION")?new IR(s.shape,a,i,o,u):new SR(s.shape,a,i,o,u);return n.runWebGLProgram(l,[s],s.dtype)}};class CR{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const TR={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new CR(s.shape,o,u,l,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function ER(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=d.getAxesPermutation(c,u),p=null!=h,f=n.shouldExecuteOnCPU([a]);let m=a;if(p){if(f){const e=n.texData.get(m.dataId).values,t=new Array(u);for(let n=0;n<t.length;n++)t[n]=a.shape[h[n]];const r=MC(e,a.shape,a.dtype,h,t);m=n.makeTensorInfo(t,a.dtype),n.texData.get(m.dataId).values=r}else m=ET(a,h,n);c=d.getInnerMostAxes(c.length,u)}d.assertAxesAreInnerMostDims("max",c,u);const[g,y]=d.computeOutAndReduceShapes(m.shape,c);let b,x=g;if(o&&(x=d.expandShapeToKeepDim(g,l)),f){const e=n.texData.get(m.dataId),t=cC(e.values,r.sizeFromShape(y),x,a.dtype);b=n.makeTensorInfo(x,a.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const a=r.sizeFromShape(t),i=vT({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=NT(i,e.dtype,"max",s),u=vT({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),u}(m,y,x,n);return p&&n.disposeIntermediateTensorInfo(m),b}const AR={kernelName:"Max",backendName:"webgl",kernelFunc:ER},RR={kernelName:"Maximum",backendName:"webgl",kernelFunc:fT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:hC})},$R={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;pN(a,"maxPool");const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=s;r.assert(d.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=d.computePool2DInfo(a.shape,i,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return rT({inputs:{x:a},backend:n});const h=new tE(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},_R={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=d.computePool3DInfo(s.shape,a,i,[1,1,1],o,l,u),h=new nE(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class FR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n          wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${t*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n           wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${t*n*r-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${r} +\n                  wR * ${r} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const OR={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=d.computePool3DInfo(i.shape,o,u,[1,1,1],l,c),p=new nE(h,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new DR(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},MR={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;pN([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=d.computePool2DInfo(o.shape,u,l,1,c,h),f=new tE(p,"max",!0),m=n.runWebGLProgram(f,[o],o.dtype),g=new FR(p),y=n.runWebGLProgram(g,[s,m],o.dtype);return n.disposeIntermediateTensorInfo(m),y}},PR={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:u}=t,l=n;r.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];r.assert(d.eitherStridesOrDilationsAreOne(i,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const h=d.computePool2DInfo(s.shape,a,i,c,o),[p,f]=function(e,t,n,r){let s=new tE(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new tE(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(s,u,h,l);return[p,f]}},zR={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:i}=t,o=n,u=s.shape.length,l=r.parseAxisParam(i,s.shape);let c=l;const h=d.getAxesPermutation(c,u),p=null!=h,f=o.shouldExecuteOnCPU([s]),m=[];let g=s;if(p){if(f){const e=o.texData.get(g.dataId).values,t=new Array(u);for(let r=0;r<t.length;r++)t[r]=s.shape[h[r]];const n=MC(e,s.shape,s.dtype,h,t);g=o.makeTensorInfo(t,s.dtype),o.texData.get(g.dataId).values=n}else g=ET(s,h,o);m.push(g),c=d.getInnerMostAxes(c.length,u)}d.assertAxesAreInnerMostDims("sum",c,u);const[y,b]=d.computeOutAndReduceShapes(g.shape,c);let x=y;a&&(x=d.expandShapeToKeepDim(y,l));const w=function(e,t,n,s){const a=r.sizeFromShape(t),i=vT({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=NT(i,"float32","mean",s),u=vT({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),u}(g,b,x,o);for(const r of m)o.disposeIntermediateTensorInfo(r);return w}},LR={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=r.parseAxisParam(i,a.shape);let c=l;const h=d.getAxesPermutation(c,u);let p=a;null!=h&&(p=$T({inputs:{x:a},backend:n,attrs:{perm:h}}),c=d.getInnerMostAxes(c.length,a.shape.length)),d.assertAxesAreInnerMostDims("min",c,u);const[f,m]=d.computeOutAndReduceShapes(p.shape,c),g=vT({inputs:{x:p},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=NT(g,g.dtype,"min",n);let b;return b=vT(o?{inputs:{x:y},backend:n,attrs:{shape:d.expandShapeToKeepDim(f,l)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(p),b}},BR={kernelName:"Minimum",backendName:"webgl",kernelFunc:fT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:pC})};class WR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=CN(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class VR{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=CN(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=LC("rc",r),u=LC("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const UR={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new VR(r.shape,s,a):new WR(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},GR={kernelName:"Mod",backendName:"webgl",kernelFunc:fT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})};class HR{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const jR=fT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),qR={kernelName:"RealDiv",backendName:"webgl",kernelFunc:jR},KR="return a - b;",XR=fT({opSnippet:KR,packedOpSnippet:KR,supportsComplex:!0,cpuKernelImpl:FC}),YR={kernelName:"Sub",backendName:"webgl",kernelFunc:XR};function ZR(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=r.parseAxisParam([i],a.shape),u=ER({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=d.expandShapeToKeepDim(u.shape,o),c=vT({inputs:{x:u},backend:n,attrs:{shape:l}}),h=XR({inputs:{a,b:c},backend:n}),p=DA({inputs:{x:h},backend:n}),f=AT({inputs:{x:p},backend:n,attrs:{axis:o,keepDims:!1}}),m=vT({inputs:{x:f},backend:n,attrs:{shape:l}}),g=jR({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const QR={kernelName:"Softmax",backendName:"webgl",kernelFunc:ZR},JR={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:ZR({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=new HR(u.shape[0],u.shape[1],a),c=n.runWebGLProgram(l,[u],"int32",[[i]]);return o||n.disposeIntermediateTensorInfo(u),c}},e$={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=fC(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=gt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new XC(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new jC(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},t$=f.nonMaxSuppressionV3Impl,n$={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){d.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=t$(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},r$=f.nonMaxSuppressionV4Impl,s$={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){d.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:f}=r$(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},a$=f.nonMaxSuppressionV5Impl,i$={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){d.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),p=i,f=o,m=u,g=l,{selectedIndices:y,selectedScores:b}=a$(c,h,p,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class o${constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const u$={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{dtype:i,depth:o,onValue:u,offValue:l}=s,c=r.sizeFromShape(a.shape),h=new o$(c,o,u,l),p=vT({inputs:{x:a},backend:n,attrs:{shape:[c]}}),d=n.runWebGLProgram(h,[p],i);n.disposeIntermediateTensorInfo(p);const f=vT({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(d),f}};function l$(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=SE({inputs:{input:r},backend:n}),t=l$({inputs:{x:e},backend:n}),s=PE({inputs:{input:r},backend:n}),a=l$({inputs:{x:s},backend:n}),i=aT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return GA({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const c$={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:l$},h$={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=SE({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=PE({inputs:{input:s},backend:r}),i=l$({inputs:{x:a},backend:r}),o=aT({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return GA({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},p$={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return MA({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],l=LE({inputs:t.map(e=>{const t=MA({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t}),backend:n,attrs:{axis:a}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}};class d${constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=CN(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class f${constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=CN(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=LC("rc",r),u=LC("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let f=0,m=1===r?2:4;f<m;f++)d+=`\n        ${h[f]}\n        if (${p}) {\n          result[${f}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${f}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const m$=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;if(0===r.sizeFromShape(a.shape))return GA({backend:n,attrs:{shape:i.map((e,t)=>e[0]+a.shape[t]+e[1]),value:o,dtype:a.dtype}});const u=gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new f$(a.shape,i,o):new d$(a.shape,i,o);return n.runWebGLProgram(u,[a],a.dtype,[[o]])},g$={kernelName:"PadV2",backendName:"webgl",kernelFunc:m$},y$={kernelName:"Pow",backendName:"webgl",kernelFunc:fT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"})},b$={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,u=a.shape.length,l=[],c=r.parseAxisParam(i,a.shape);let h=c;const p=d.getAxesPermutation(h,u);let f,m=a;if(null!=p&&(m=$T({inputs:{x:a},backend:n,attrs:{perm:p}}),h=d.getInnerMostAxes(h.length,u),l.push(m)),d.assertAxesAreInnerMostDims("prod",h,u),n.shouldExecuteOnCPU([m])){const e=n.texData.get(m.dataId).values,{outVals:t,outShape:r,outDtype:s}=gC(m.shape,m.dtype,e,h);f=n.makeTensorInfo(r,s,t)}else{const[e,t]=d.computeOutAndReduceShapes(m.shape,h),s=r.sizeFromShape(t),i=vT({inputs:{x:m},backend:n,attrs:{shape:[-1,s]}}),o=NT(i,xn(a.dtype),"prod",n);f=vT({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(i),l.push(o)}if(o){l.push(f);const e=d.expandShapeToKeepDim(f.shape,c);f=vT({inputs:{x:f},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},x$={kernelName:"RaggedGather",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:s,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=r,u=s.map(e=>n.readSync(e.dataId)),l=s.map(e=>e.shape),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[p,d,f]=yC(u,l,c,a.shape,a.dtype,h,i.shape,o),m=p.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},w$={kernelName:"RaggedTensorToTensor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:s,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),p=o.map(e=>n.readSync(e.dataId)),d=o.map(e=>e.shape),[f,m]=bC(l,s.shape,c,a.shape,a.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,a.dtype,m)}},v$=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=xC(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},k$={kernelName:"Range",backendName:"webgl",kernelFunc:v$},S$={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:dT({opSnippet:"return 1.0 / x;"})},I$={kernelName:"Relu",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},N$={kernelName:"Relu6",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class C${constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class T${constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const E$={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=gt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new T$(s.shape,u,l,a,i):new C$(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],"float32")}};class A${constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const R$={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new A$(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class $${constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class _${constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const F$={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=gt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new _$(s.shape,u,l,a,i):new $$(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class D${constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const O$={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new D$(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class M${constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=CN(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class P${constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=LC("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=CN(n);function o(n){const r=e.map((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const z$={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s,o=a.shape.length,u=r.parseAxisParam(i,a.shape);if(0===o)return rT({inputs:{x:a},backend:n});const l=gt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new P$(a.shape,u):new M$(a.shape,u);return n.runWebGLProgram(l,[a],a.dtype)}};class L${constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const B$={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new L$(r.shape,a),[l,c]=d.getImageCenter(i,r.shape[1],r.shape[2]),h=[[l,c,Math.sin(s),Math.cos(s)]];return o.runWebGLProgram(u,[r],r.dtype,h)}},W$={kernelName:"Round",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},V$={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:dT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:wC})};class U${constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=CN(s.length),u=CN(a.length);let l="";1===n?l="i":2===n&&(l="i, j");let c="";1===r?c="i":2===r&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(getIndices(${l}));\n              flattenedIndex += index * ${t>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${c});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const G$={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=d.calculateShapes(a,s,i),p=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const f=vT({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),m=vT({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new U$(u,o,f.shape.length,m.shape.length,c,p),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=vT({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class H${constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===gt().getNumber("WEBGL_VERSION")?"while (left < right) {":s;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const j$={kernelName:"SearchSorted",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:i}=r,o=new H$(s.shape[0],s.shape[1],a.shape[1],i);return n.runWebGLProgram(o,[s,a],"int32",[[s.shape[1]]])}};class q${constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(""+n[r]),r<e&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=CN(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const K$={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new q$(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],bn(s.dtype,a.dtype))}},X$={kernelName:"Selu",backendName:"webgl",kernelFunc:dT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${d.SELU_SCALEALPHA};\n  float scale = ${d.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},Y$={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:kC})},Z$={kernelName:"Sign",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},Q$={kernelName:"Sin",backendName:"webgl",kernelFunc:dT({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},J$={kernelName:"Sinh",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},e_={kernelName:"Softplus",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},t_={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;r.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const u=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...o);for(let r=1+i.length;r<a.shape.length;++r)l.push([0,0]);const c=[],h=m$({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),p=d.getReshaped(h.shape,i,u,!1),f=d.getPermuted(p.length,i.length,!1),m=d.getReshapedPermuted(h.shape,i,u,!1),g=vT({inputs:{x:h},backend:n,attrs:{shape:p}}),y=$T({inputs:{x:g},backend:n,attrs:{perm:f}}),b=vT({inputs:{x:y},backend:n,attrs:{shape:m}});return c.push(h),c.push(g),c.push(y),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},n_={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error("Dense shape must be a vector, saw:\n         "+a.shape);if(2!==r.shape.length)throw new Error("Indices must be a matrix, saw:\n         "+r.shape);if(1!==s.shape.length)throw new Error("Values must be a vector, saw:\n         "+s.shape);if(0!==i.shape.length)throw new Error("Default value must be a scalar, saw:\n        "+i.shape);const o=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=NC(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(p,r.dtype,h),n.makeTensorInfo([p[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},r_={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error("Input indices should be a matrix but received shape "+r.shape);if(1!==s.shape.length)throw new Error("Input shape should be a vector but received shape "+s.shape);if(1!==a.shape.length)throw new Error("Target shape should be a vector but received shape "+a.shape);const i=Array.from(n.readSync(s.dataId)),o=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,h]=CC(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},s_={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n              "+s.shape);if(1!==a.shape.length)throw new Error("Segment ids should be a vector but received shape\n              "+a.shape);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=TC(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},a_={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n             "+s.shape);if(1!==a.shape.length)throw new Error("Segment ids should be a vector but received shape\n             "+a.shape);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=TC(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}},i_={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:i,defaultValue:o}=t,{outputShape:u}=s,{sliceRank:l,numUpdates:c,sliceSize:h,strides:p,outputSize:f}=d.calculateShapes(i,a,u);if("string"===i.dtype){const e=n.bufferSync(a),t=n.bufferSync(i),s=r.decodeString(n.readSync(o.dataId)[0]),d=vC(e,t,u,f,h,c,l,p,s,!1);return n.makeTensorInfo(u,d.dtype,d.values)}const m=new U$(c,l,a.shape.length,i.shape.length,p,[f,1],!1),g=n.runWebGLProgram(m,[i,a,o],i.dtype),y=vT({inputs:{x:g},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(g),y}},o_={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,u=r.parseAxisParam(o,a.shape)[0],l=d.prepareSplitSize(a,i,u),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{const t=[...h];t[u]=e;const r=gE({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r})}},u_="return sqrt(x);",l_={kernelName:"Sqrt",backendName:"webgl",kernelFunc:dT({opSnippet:u_,packedOpSnippet:u_,cpuKernelImpl:EC})},c_={kernelName:"Square",backendName:"webgl",kernelFunc:dT({opSnippet:"return x * x;"})},h_={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:fT({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})},p_={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=new jC(r.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return n.runWebGLProgram(s,[r],r.dtype)}};class d_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=CN(n.length),a=CN(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const f_={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,end:o,strides:u,beginMask:c,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:f}=s,{finalShapeSparse:m,finalShape:g,isIdentity:y,sliceDim0:b,isSimpleSlice:x,begin:w,end:v,strides:k}=l.sliceInfo(a.shape,i,o,u,c,h,p,d,f);let S;if(y)S=vT({inputs:{x:a},backend:n,attrs:{shape:g}});else if(b||x){r.assert(a.shape.length>=1,()=>"Input must have rank at least 1, got: "+a.shape.length);const e=l.computeOutShape(w,v,k),t=gE({inputs:{x:a},backend:n,attrs:{begin:w,size:e}});S=vT({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=Or(a.shape,a.dtype,e),r=AC(m,t,k,w);S=n.makeTensorInfo(g,a.dtype,r.values)}else{const e=new d_(w,k,m);S=n.runWebGLProgram(e,[a],a.dtype)}const I=vT({inputs:{x:S},backend:n,attrs:{shape:g}});return n.disposeIntermediateTensorInfo(S),I}},m_={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=RC(p,d,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},g_={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error("Input must be a vector, got shape: "+a.shape);if(0!==i.shape.length)throw new Error("Delimiter must be a scalar, got shape: "+i.shape);const o=n.readSync(a.dataId),u=n.readSync(i.dataId)[0],[l,c,h]=$C(o,u,s),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},y_={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=_C(i,s);return n.makeTensorInfo(a.shape,"int32",o)}},b_={kernelName:"Tan",backendName:"webgl",kernelFunc:dT({opSnippet:"return tan(x);"})},x_={kernelName:"Tanh",backendName:"webgl",kernelFunc:dT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class w_{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const r=CN(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<e.length;s++)r.push(`imod(${n[s]}, ${e[s]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function v_(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:i}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map(e=>r.decodeString(e)):e,s=Or(a.shape,a.dtype,t),o=DC(s,i);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new w_(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const k_={kernelName:"Tile",backendName:"webgl",kernelFunc:v_};class S_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class I_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function N_(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function C_(e){let t=1;for(;t<e;)t*=2;return t}const T_={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:i,sorted:o}=s,u=gt().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=gt().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=a.shape,h=c[c.length-1];if(n.shouldExecuteOnCPU([a])||h<u||i>l){const e=n.readSync(a.dataId),[t,r]=OC(e,c,a.dtype,i,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===i)return c[c.length-1]=0,[n.makeTensorInfo(c,a.dtype,[]),n.makeTensorInfo(c,"int32",[])];if(1===h)return[a,GA({attrs:{shape:c,dtype:"int32",value:0},backend:n})];const p=n.texData.get(a.dataId),d=null!==p&&p.isPacked,f=d?n.unpackTensor(a):a,m=r.sizeFromShape(c)/h,g=vT({inputs:{x:f},attrs:{shape:[m,h]},backend:n});d&&N_(n,f);const y=C_(i),b=C_(h);let x=null;const w=()=>null===x?[g,g]:[g,x],v=(e,t,r)=>{const s=w(),a=new S_(r),i=x;x=n.runWebGLProgram(a,s,"int32",[[h],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]]),N_(n,i)};for(let r=1;r<y;r*=2){const e=2*r;for(let t=r;t>=1;t/=2)v(e,t,[m,b])}for(let r=b;r>y;r/=2){const e=w(),t=new I_([m,r/2]),s=x;x=n.runWebGLProgram(t,e,"int32",[[h],[null===x?1:0],[y]]),N_(n,s);const a=y/2,i=2*a;for(let n=a;n>=1;n/=2)v(i,n,x.shape)}let k=x;x=gE({inputs:{x},backend:n,attrs:{begin:0,size:[m,i]}}),N_(n,k);let S=oR({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});N_(n,g);const I=c.slice(0,-1);I.push(i),k=x,x=vT({inputs:{x},attrs:{shape:I},backend:n}),N_(n,k);const N=S;return S=vT({inputs:{x:S},attrs:{shape:I},backend:n}),N_(n,N),[S,x]}};class E_{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(r){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const A_={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=r,[c,h,p,d]=s.shape,[f,m]=null!=l?l:[h,p],g=new E_(h,p,i,o,u,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}},R_={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;pN(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=PC(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},$_={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(l[c++]=i.shape[m]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(u);for(let m=0;m<f.length;m++){p[a]=m;const e=gE({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),t=vT({inputs:{x:e},backend:n,attrs:{shape:l}});f[m]=t,h.push(e)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class __{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const F_=[DT,OT,MT,PT,LT,VT,UT,GT,KT,XT,YT,ZT,QT,JT,eE,rE,sE,oE,uE,lE,pE,bE,xE,wE,NE,TE,RE,iT,FE,BE,KE,JE,eA,tA,nA,rA,sA,aA,oA,dA,fA,mA,yA,wA,SA,IA,CA,EA,AA,RA,$A,_A,FA,OA,PA,LA,VA,HA,qA,XA,YA,JA,nR,rR,aR,uR,lR,cR,sT,hR,zE,pR,dR,fR,lT,mR,gR,yR,bR,xR,wR,vR,kR,NR,TR,AR,RR,$R,_R,OR,MR,PR,zR,LR,BR,UR,GR,JR,wT,e$,n$,s$,i$,kE,u$,h$,p$,g$,y$,pT,b$,x$,w$,k$,IE,qR,S$,I$,N$,kT,E$,R$,F$,O$,z$,B$,W$,V$,G$,j$,K$,X$,Y$,Z$,Q$,J$,yE,QR,e_,t_,n_,r_,s_,a_,i_,o_,l_,c_,h_,p_,f_,m_,g_,y_,YR,RT,b_,x_,k_,T_,A_,_T,R_,$_,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s,u=a.shape.length,l=[];let c=0;const h=d.getAxesPermutation([c],u);let p=a;null!=h&&(p=$T({inputs:{x:a},backend:n,attrs:{perm:h}}),l.push(p),c=d.getInnerMostAxes(1,u)[0]);const f=d.segment_util.computeOutShape(p.shape,c,o),m=r.sizeFromShape([p.shape[c]]),g=vT({inputs:{x:p},backend:n,attrs:{shape:[-1,m]}});l.push(g);const y=xn(a.dtype),b=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],u=d.segment_util.segOpComputeOptimalWindowSize(o,a),c=new __({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(l.push(h),h.shape[1]===a)return h;const p=v$({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),f=v_({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(f),b(h,t,f,s,a)},x=vT({inputs:{x:b(g,"unsortedSegmentSum",i,y,o)},backend:n,attrs:{shape:f}});let w=x;if(null!=h){l.push(x);const e=d.getUndoAxesPermutation(h);w=$T({inputs:{x:w},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),w}},c$];for(const X1 of F_)Et(X1);var D_=n("luXu");class O_{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class M_{refCount(e){return P_("refCount")}incRef(e){return P_("incRef")}timerAvailable(){return!0}time(e){return P_("time")}read(e){return P_("read")}readSync(e){return P_("readSync")}readToGPU(e,t){return P_("readToGPU")}numDataIds(){return P_("numDataIds")}disposeData(e,t){return P_("disposeData")}write(e,t,n){return P_("write")}move(e,t,n,r,s){return P_("move")}createTensorFromGPUData(e,t,n){return P_("createTensorFromGPUData")}memory(){return P_("memory")}floatPrecision(){return P_("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return P_("dispose")}}function P_(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function z_(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,V_(e,t,n)}function L_(e,t){if(e.length!==t.length)throw new Error("Array sizes must match to be shuffled together First array length was "+e.length+"Second array length was "+t.length);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,V_(e,n,r),V_(t,n,r)}function B_(e,t,n){return Math.max(e,Math.min(t,n))}function W_(e){return e%2==0?e:e+1}function V_(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function U_(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function G_(e,t){const n=Math.random();return t*n+(1-n)*e}function H_(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function j_(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function q_(e,t,n=""){j_(Q_(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function K_(e){j_(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function X_(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function Y_(e){return 0===e.length}function Z_(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function Q_(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function J_(e){return e%1==0}function eF(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function tF(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function nF(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return z_(t),t}function rF(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function sF(e,t=(e=>0),n,r){return new Promise((s,a)=>{let i=0;const o=()=>{if(e())return void s();i++;const u=t(i);null!=n&&i>=n?a():null!=r?r(o,u):setTimeout(o,u)};o()})}function aF(e,t){let n=1,r=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function iF(e,t){const n=t.length;return j_((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),j_(e.every(e=>J_(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function oF(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:iF(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),r.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),r.push(o))}return{newShape:n,keptDims:r}}function uF(e,t){return lF(e,t)}function lF(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function cF(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function hF(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function pF(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function dF(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function fF(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function mF(e){return"string"==typeof e||e instanceof String}function gF(e){return"boolean"==typeof e}function yF(e){return"number"==typeof e}function bF(e){return Array.isArray(e)?bF(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":yF(e)?"float32":mF(e)?"string":gF(e)?"bool":"float32"}function xF(e){return!!(e&&e.constructor&&e.call&&e.apply)}function wF(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function vF(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function kF(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return function e(t,n,r,s=!1){const a=new Array;if(1===n.length){const e=n[0]*(s?2:1);for(let n=0;n<e;n++)a[n]=r[t+n]}else{const i=n[0],o=n.slice(1),u=o.reduce((e,t)=>e*t)*(s?2:1);for(let n=0;n<i;n++)a[n]=e(t+n*u,o,r,s)}return a}(0,e,t,n)}function SF(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error("Unknown dtype "+t)}function IF(e,t){const n=NF(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function NF(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function CF(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return kF(e,new Float32Array(n));if("int32"===t)return kF(e,new Int32Array(n));if("bool"===t)return kF(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function TF(e){e.forEach(t=>{j_(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function EF(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=n[s]*e[s];return r}function AF(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(e/n[s]),e-=r[s]*n[s];return r[r.length-1]=e,r}function RF(e){return e&&e.then&&"function"==typeof e.then}class $F{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=_F,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(FF().getBool("IS_TEST")||FF().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];FF().getBool("IS_TEST")||FF().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(RF(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)})}}function _F(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function FF(){return OF}let DF,OF=null;function MF(){if(null==DF){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}DF=e}return DF}function PF(e,t){const n=function(){const e=MF();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}function zF(...e){FF().getBool("IS_TEST")||FF().getBool("PROD")||console.warn(...e)}function LF(...e){FF().getBool("IS_TEST")||FF().getBool("PROD")||console.log(...e)}const BF=PF("kernelRegistry",()=>new Map),WF=PF("gradRegistry",()=>new Map);function VF(e,t){const n=jF(e,t);return BF.get(n)}function UF(e){return WF.get(e)}function GF(e){const t=BF.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function HF(e){const{kernelName:t,backendName:n}=e,r=jF(t,n);BF.has(r)&&zF(`The kernel '${t}' for backend '${n}' is already registered`),BF.set(r,e)}function jF(e,t){return`${t}_${e}`}function qF(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}const KF=_t.a||$t;function XF(e){return KF.fromString(e,!0,16)}const YF=XF("c3a5c85c97cb3127"),ZF=XF("b492b66fbe98f273"),QF=XF("9ae16a3b2f90404f");function JF(e){return e.xor(e.shru(47))}function eD(e,t,n){const r=e.slice(t,t+n);return KF.fromBytes(Array.from(r),!0,!0)}function tD(e,t){return eD(e,t,8)}function nD(e,t){return eD(e,t,4)}function rD(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function sD(e,t,n=XF("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function aD(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=rD(a.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(n),a=a.add(rD(s,44)),[s.add(r),a.add(i)]}(tD(e,t),tD(e,t+8),tD(e,t+16),tD(e,t+24),n,r)}function iD(e,t=e.length){const n=KF.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=QF.add(2*t),r=tD(e,0).add(QF),s=tD(e,t-8);return sD(rD(s,37).mul(n).add(r),rD(r,25).add(s).mul(n),n)}if(t>=4){const n=QF.add(2*t);return sD(nD(e,0).shl(3).add(t),nD(e,t-4),n)}if(t>0){const n=t+(e[t-1]<<2);return JF(QF.mul(e[0]+(e[t>>1]<<8)).xor(YF.mul(n))).mul(QF)}return QF}(e,t):function(e,t=e.length){const n=QF.add(2*t),r=tD(e,0).mul(ZF),s=tD(e,8),a=tD(e,t-8).mul(n),i=tD(e,t-16).mul(QF);return sD(rD(r.add(s),43).add(rD(a,30)).add(i),r.add(rD(s.add(QF),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=QF.add(2*t),r=tD(e,0).mul(QF),s=tD(e,8),a=tD(e,t-8).mul(n),i=tD(e,t-16).mul(QF),o=rD(r.add(s),43).add(rD(a,30)).add(i),u=sD(o,r.add(rD(s.add(QF),18)).add(a),n),l=tD(e,16).mul(n),c=tD(e,24),h=o.add(tD(e,t-32)).mul(n),p=u.add(tD(e,t-24)).mul(n);return sD(rD(l.add(c),43).add(rD(h,30)).add(p),l.add(rD(c.add(r),18)).add(h),n)}(e,t);let r=n,s=n.mul(ZF).add(113),a=JF(s.mul(QF).add(113)).mul(QF),i=[KF.UZERO,KF.UZERO],o=[KF.UZERO,KF.UZERO];r=r.mul(QF).add(tD(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=rD(r.add(s).add(i[0]).add(tD(e,u+8)),37).mul(ZF),s=rD(s.add(i[1]).add(tD(e,u+48)),42).mul(ZF),r=r.xor(o[1]),s=s.add(i[0]).add(tD(e,u+40)),a=rD(a.add(o[0]),33).mul(ZF),i=aD(e,u,i[1].mul(ZF),r.add(o[0])),o=aD(e,u+32,a.add(o[1]),s.add(tD(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const h=ZF.add(a.and(255).shl(1));return u=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=rD(r.add(s).add(i[0]).add(tD(e,u+8)),37).mul(h),s=rD(s.add(i[1]).add(tD(e,u+48)),42).mul(h),r=r.xor(o[1].mul(9)),s=s.add(i[0].mul(9).add(tD(e,u+40))),a=rD(a.add(o[0]),33).mul(h),i=aD(e,u,i[1].mul(h),r.add(o[0])),o=aD(e,u+32,a.add(o[1]),s.add(tD(e,u+16))),[a,r]=[r,a],sD(sD(i[0],o[0],h).add(JF(s).mul(YF)).add(a),sD(i[1],o[1],h).add(r),h)}function oD(e,t){return"string"===t?hD(e):uD([e],t)}function uD(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=fD(e)),FF().getBool("DEBUG")&&cF(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function lD(){return FF().platform.now()}function cD(e,t){return FF().platform.fetch(e,t)}function hD(e,t="utf-8"){return t=t||"utf-8",FF().platform.encode(e,t)}function pD(e,t="utf-8"){return t=t||"utf-8",FF().platform.decode(e,t)}function dD(e){return null!=FF().platform.isTypedArray?FF().platform.isTypedArray(e):qF(e)}function fD(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||RF(e)||null==e||dD(e)&&n)t.push(e);else if(Array.isArray(e)||dD(e))for(let r=0;r<e.length;++r)fD(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let s=0;s<=r;s++)fD(e[s],t,n)}return t}class mD{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new yD)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const i=lD();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:lD()-i})}if(FF().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let o=0;o<r.length;o++){const t=r[o];t.data().then(n=>{gD(n,t.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}function gD(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class yD{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?rF(r+"ms",9):r.error,o=rF(e,25),u=t.rank,l=t.size,c=rF(t.shape.toString(),14);let h="";for(const p in s){const e=s[p];if(null!=e){const n=e.shape||t.shape,r=n.length;h+=`${p}: ${r}D ${r>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function bD(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":mF(e)?`'${e}'`:"bool"===n?xD(e):parseFloat(e.toFixed(7)).toString(),rF(r,t)}function xD(e){return 0===e?"false":"true"}function wD(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class vD{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=X_(e),null!=n){const e=n.length;j_(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||lF(t,this.size),this.strides=vF(e)}set(e,...t){0===t.length&&(t=[0]),j_(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const r of e){if(r<0||r>=this.shape[t])throw new Error(`Requested out of range element at ${e}.   Buffer shape=`+this.shape);t++}let n=e[e.length-1];for(let r=0;r<e.length-1;++r)n+=this.strides[r]*e[r];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return kD().makeTensor(this.values,this.shape,this.dtype)}}let kD=null,SD=null,ID=null;class ND{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=X_(e),this.strides=vF(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return SD.buffer(this.shape,this.dtype,e)}bufferSync(){return SD.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return kF(this.shape,e,"complex64"===this.dtype)}arraySync(){return kF(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=kD().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>pD(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),kD().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=kD().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>pD(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await kD().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),kD().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return SD.print(this,e)}clone(){return this.throwIfDisposed(),SD.clone(this)}toString(e=!1){return function(e,t,n,r){const s=vF(t),a=function(e,t,n,r){const s=X_(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?wD(e):e;if(o>1)for(let l=0;l<s/a;l++){const e=l*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],bD(u[e+t],0,n).length)}return i}(e,t,n,s),i=t.length,o=function e(t,n,r,s,a,i=!0){const o="complex64"===r?2:1,u=n[0],l=n.length;if(0===l)return"complex64"===r?[bD(wD(t)[0],0,r)]:"bool"===r?[xD(t[0])]:[t[0].toString()];if(1===l){if(u>20){let e=Array.from(t.slice(0,3*o)),n=Array.from(t.slice((u-3)*o,u*o));return"complex64"===r&&(e=wD(e),n=wD(n)),["["+e.map((e,t)=>bD(e,a[t],r)).join(", ")+", ..., "+n.map((e,t)=>bD(e,a[u-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?wD(t):Array.from(t)).map((e,t)=>bD(e,a[t],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),p=s[0]*o,d=[];if(u>20){for(let n=0;n<3;n++){const s=n*p;d.push(...e(t.slice(s,s+p),c,r,h,a,!1))}d.push("...");for(let n=u-3;n<u;n++){const s=n*p;d.push(...e(t.slice(s,s+p),c,r,h,a,n===u-1))}}else for(let g=0;g<u;g++){const n=g*p;d.push(...e(t.slice(n,n+p),c,r,h,a,g===u-1))}const f=2===l?",":"";d[0]="["+(u>0?d[0]+f:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+f;let m=",\n";for(let g=2;g<l;g++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(e,t,n,s,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+i),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map(e=>"    "+e).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),SD.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),kD().makeVariable(this,e,t,n)}}function CD(){return PF("Tensor",()=>ND)}Object.defineProperty(ND,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),CD();class TD extends ND{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Q_(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);kD().disposeTensor(this),this.dataId=e.dataId,kD().incRef(this,null)}dispose(){kD().disposeVariable(this),this.isDisposedInternal=!0}}var ED,AD,RD,$D,_D;Object.defineProperty(TD,Symbol.hasInstance,{value:e=>e instanceof ND&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ED||(ED={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(AD||(AD={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(RD||(RD={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}($D||($D={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(_D||(_D={}));const FD={float32:$D,int32:AD,bool:RD,complex64:_D};function DD(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return FD[e][t]}function OD(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function MD(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function PD(e,t){if(e.dtype===t.dtype)return[e,t];const n=DD(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function zD(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof ND)return void n.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=t;for(const i in a){const t=a[i];r.has(t)||(r.add(t),e(t,n,r))}}(e,t,new Set),t}function LD(e){return null!=e.kernelName}class BD{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class WD{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new BD}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(zF(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new mD(this.backendInstance),!0}setupRegisteredKernels(){GF(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){GF(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof M_||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,zF(`Initialization of backend ${e} failed`),zF(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(K1){return zF(`Initialization of backend ${e} failed`),zF(K1.stack||K1.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return WD.nextTensorId++}nextVariableId(){return WD.nextVariableId++}clone(e){const t=UD.runKernel("Identity",{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>UD.runKernel("Cast",{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){if(null==VF(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=r-t-s-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const u=LD(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(LD(e)){const{kernelName:t,inputs:s,attrs:a}=e,u=VF(t,this.backendName);j_(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy(()=>t(this.backend,s));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=LD(e)?null:e.backwardsFunc;let p;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,l,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()}),r&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(e=>null!=l[e]?l[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=UF(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(j_(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>s[t]);return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");r=r||this.backend;let s=e;"string"===(n=n||"float32")&&mF(e[0])&&(s=e.map(e=>hD(e)));const a=r.write(s,t,n),i=new ND(t,n,a,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=fF(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){return this.makeTensorFromTensorInfo({dataId:e,shape:t,dtype:n=n||"float32"},r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new ND(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new TD(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*dF(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof TD||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*dF(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=UF(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=NF(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=zD(e),n=new Set(t.map(e=>e.id));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(j_(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));j_(s instanceof ND,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(r[i.id]){n.outputs.forEach(e=>r[e.id]=!0),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let u=0;u<e.length;u++){const t=e[u];if(s[t.id]&&i[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=IF(X_(e),"float32");return UD.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n(()=>o[t]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!Q_(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,e=>this.tidy(e),GD);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return j_(xF(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;j_(t.every(e=>e instanceof ND),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),j_(n.value instanceof ND,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),j_(xF(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];j_(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),j_(a.every(e=>e instanceof ND),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=lD(),n=await this.backend.time(e);return n.wallMs=lD()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new BD;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function VD(){const e=MF();if(null==e._tfengine){const t=new $F(e);e._tfengine=new WD(t)}return OF=e._tfengine.ENV,kD=()=>e._tfengine,e._tfengine}WD.nextTensorId=0,WD.nextVariableId=0;const UD=VD();function GD(e,t){return UD.runKernel("Add",{a:e,b:t})}const HD=FF();function jD(e,t){let n=e;if(dD(e))return"string"===t?[]:[e.length];if(OD(e))return[e.height,e.width*(e.channels||"RGBA").length];if(MD(e))return[e.buffer.size/(null==t?4:dF(t))];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||dD(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&FF().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!dD(t))return void j_(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);j_(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),j_(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);const s=n.slice(1);for(let a=0;a<t.length;++a)e(t[a],s,r.concat(a))}(e,r,[]),r}function qD(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function KD(e,t,n,r="numeric"){if(e instanceof CD())return qD(r,e.dtype,t,n),e;let s=bF(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),qD(r,s,t,n),null==e||!dD(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=jD(e,s);dD(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?uD(e,s):fD(e,[],!0);return UD.makeTensor(i,a,s)}function XD(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,s)=>KD(e,`${t}[${s}]`,n,r))}HD.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),HD.registerFlag("IS_BROWSER",()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope),HD.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),HD.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),HD.registerFlag("IS_SAFARI",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),HD.registerFlag("PROD",()=>!1),HD.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>HD.getBool("DEBUG")),HD.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),HD.registerFlag("IS_TEST",()=>!1),HD.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>HD.getBool("DEBUG")),HD.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),HD.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),HD.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const YD="__op";function ZD(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=YD;const s=(...e)=>{UD.startScope(n);try{const t=r(...e);return RF(t)&&console.error("Cannot return a Promise inside of tidy."),UD.endScope(t),t}catch(t){throw UD.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const QD=ZD({complex_:function(e,t){const n=KD(e,"real","complex"),r=KD(t,"imag","complex");return q_(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),UD.runKernel("Complex",{real:n,imag:r})}});function JD(e,t,n,r){if(null==r)r=bF(e);else if("complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(MD(e)||OD(e)){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${r}.`);return UD.backend.createTensorFromGPUData(e,t||n,r)}if(!dD(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){TF(t);const e=X_(t),r=X_(n);j_(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==X_(t.slice(s));j_(n[s]===t[s]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return dD(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?uD(e,r):fD(e,[],!0),UD.makeTensor(e,t,r)}function eO(e,t,n){return JD(e,t,jD(e,n),n)}const tO={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class nO{static join(e){return new nO(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map(e=>dD(e)?e.buffer:e)).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const r=e[n];n!==e.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=t+r.byteLength;this.shards.push({buffer:r,start:t,end:s}),t=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error("Could not find start shard for byte "+e);const r=new ArrayBuffer(t-e),s=new Uint8Array(r);let a=0;for(let i=n;i<this.shards.length;i++){const n=this.shards[i],r=e+a-n.start,o=a,u=Math.min(t,n.end),l=new Uint8Array(n.buffer,r,u-n.start-r);if(s.set(l,o),a+=l.length,t<n.end)break}return r}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,r=e.length;for(;n<=r;){const s=Math.floor((r-n)/2)+n,a=t(e[s]);if(0===a)return s;a<0?r=s:n=s+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function rO(){return UD}function sO(e,t){return UD.tidy(e,t)}function aO(e){zD(e).forEach(e=>e.dispose())}function iO(e){return UD.keep(e)}function oO(){return UD.backendName}function uO(){return UD.backend}async function lO(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),s+=4,r.set(e,s),s+=e.length}e(r)});r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:gO(await Promise.all(r)),specs:n}}function cO(e,t){const n=new nO(e),r={};let s=0;for(const a of t){const e=hO(a,(e,t)=>n.slice(s+e,s+t));r[a.name]=dO(a,n.slice(s,s+e)),s+=e}return r}function hO(e,t){const n=X_(e.shape);let r;if("quantization"in e)r=tO[e.quantization.dtype];else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(t(e,e+4))[0];return e}r=tO[e.dtype]}return n*r}async function pO(e,t){const n=X_(e.shape);let r;if("quantization"in e)r=tO[e.quantization.dtype];else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(await t(e,e+4))[0];return e}r=tO[e.dtype]}return n*r}function dO(e,t){const n=e.name,r=e.dtype,s=e.shape,a=X_(s);let i,o=0;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==r)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${r}.`)}const u=tO[s.dtype],l="uint8"===s.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===r)if("uint8"===s.dtype||"uint16"===s.dtype){i=new Float32Array(l.length);for(let e=0;e<l.length;e++)i[e]=l[e]*s.scale+s.min}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);i=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i];a[i]=e[n[s>>10]+(1023&s)]+t[s>>10]}return new Float32Array(s)}}()(l)}else{if("int32"!==r)throw new Error(`Unsupported dtype in weight '${n}': ${r}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);i=new Int32Array(l.length);for(let e=0;e<l.length;e++)i[e]=Math.round(l[e]*s.scale+s.min)}o+=a*u}else if("string"===r){const n=X_(e.shape);i=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(o,o+4))[0];o+=4;const n=new Uint8Array(t.slice(o,o+e));i.push(n),o+=e}}else{const e=tO[r];if("float32"===r)i=new Float32Array(t);else if("int32"===r)i=new Int32Array(t);else{if("bool"!==r){if("complex64"===r){i=new Float32Array(t);const e=new Float32Array(i.length/2),n=new Float32Array(i.length/2);for(let t=0;t<e.length;t++)e[t]=i[2*t],n[t]=i[2*t+1];const r=eO(e,s,"float32"),a=eO(n,s,"float32"),o=QD(r,a);return r.dispose(),a.dispose(),o}throw new Error(`Unsupported dtype in weight '${n}': ${r}`)}i=new Uint8Array(t)}o+=a*e}return eO(i,s,r)}async function fO(e,t,n){let r=new Uint8Array(t);for(;r.byteLength<n;){const{done:t,value:s}=await e.read();if(t&&null==s)throw new Error(`Reader is done but ${n-r.byteLength} bytes are still expected`);const a=new Uint8Array(r.length+s.byteLength);a.set(r,0),a.set(new Uint8Array(s),r.length),r=a}return r.buffer}async function mO(e,t){const n={},r=e.getReader();let s=new ArrayBuffer(0);for(const a of t){const e=await pO(a,async(e,t)=>(s=await fO(r,s,t),s.slice(e,t)));s=await fO(r,s,e);const t=s.slice(0,e);s=s.slice(e);const i=dO(a,t);if(n[a.name]=i,"webgpu"===oO()){const e=uO();"uploadToGPU"in e&&X_(i.shape)>=FF().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(i.dataId)}}return n}function gO(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}ID=function(e){FF().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const yO="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function bO(e){return yO?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function xO(e){return nO.join(e)}function wO(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function vO(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function kO(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function SO(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),kO(e,n,r)}function IO(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:bO(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:bO(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new nO(e.weightData).byteLength}}function NO(e){const t=[];for(const n of e)t.push(...n.weights);return t}class CO{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==CO.instance&&(CO.instance=new CO),CO.instance}static registerSaveRouter(e){CO.getInstance().saveRouters.push(e)}static registerLoadRouter(e){CO.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return CO.getHandlers(e,"save")}static getLoadHandlers(e,t){return CO.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?CO.getInstance().loadRouters:CO.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}const TO=e=>CO.registerSaveRouter(e),EO=e=>CO.registerLoadRouter(e),AO=e=>CO.getSaveHandlers(e),RO=(e,t)=>CO.getLoadHandlers(e,t);function $O(){if(!FF().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function _O(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class FO{constructor(e){if(this.indexedDB=$O(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>_O(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{t.weightData=nO.join(t.weightData);const r=IO(t),i=s.transaction("model_info_store","readwrite");let o,u,l=i.objectStore("model_info_store");try{o=l.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(a){return n(a)}o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store");let c;try{c=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r})}catch(a){return n(a)}c.onsuccess=()=>e({modelArtifactsInfo:r}),c.onerror=e=>{l=i.objectStore("model_info_store");const t=l.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(c.error)),t.onerror=e=>(s.close(),n(c.error))}},o.onerror=e=>(s.close(),n(o.error)),i.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}FO.URL_SCHEME="indexeddb://";const DO=e=>{return FF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(FO.URL_SCHEME)?(t=e.slice(FO.URL_SCHEME.length),new FO(t)):null;var t};CO.registerSaveRouter(DO),CO.registerLoadRouter(DO);class OO{constructor(){this.indexedDB=$O()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>_O(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(FO.URL_SCHEME)?t.slice(FO.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>_O(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}const MO="tensorflowjs_models",PO="info",zO="model_topology",LO="weight_specs",BO="weight_data",WO="model_metadata";function VO(e){return{info:[MO,e,PO].join("/"),topology:[MO,e,zO].join("/"),weightSpecs:[MO,e,LO].join("/"),weightData:[MO,e,BO].join("/"),modelMetadata:[MO,e,WO].join("/")}}function UO(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function GO(e){const t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}class HO{constructor(e){if(!FF().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=VO(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=IO(e),s=nO.join(e.weightData);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(yO)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(s)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:r}}catch(K1){throw UO(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(yO){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(a),t}}HO.URL_SCHEME="localstorage://";const jO=e=>{return FF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(HO.URL_SCHEME)?(t=e.slice(HO.URL_SCHEME.length),new HO(t)):null;var t};CO.registerSaveRouter(jO),CO.registerLoadRouter(jO);class qO{constructor(){j_(FF().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),j_("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=MO+"/",n="/"+PO;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[GO(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=VO(e=(t=e).startsWith(HO.URL_SCHEME)?t.slice(HO.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return UO(n),r}}class KO{constructor(){this.managers={}}static getInstance(){return null==KO.instance&&(KO.instance=new KO),KO.instance}static registerManager(e,t){j_(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),j_(e.length>0,()=>"scheme must not be an empty string.");const n=KO.getInstance();j_(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=KO.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(KO.getInstance().managers)}}function XO(e){if(-1===e.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+KO.getSchemes().join(","));return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function YO(e,t,n=!1){j_(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=CO.getLoadHandlers(e);j_(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),j_(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const s=r[0],a=CO.getSaveHandlers(t);j_(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),j_(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const i=a[0],o=XO(e).scheme,u=XO(e).path,l=o===XO(e).scheme,c=await s.load();n&&l&&await KO.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await KO.getManager(o).removeModel(u),h.modelArtifactsInfo}async function ZO(){const e=KO.getSchemes(),t={};for(const n of e){const e=await KO.getManager(n).listModels();for(const r in e)t[n+"://"+r]=e[r]}return t}async function QO(e){const t=XO(e);return KO.getManager(t.scheme).removeModel(t.path)}async function JO(e,t){return YO(e,t,!1)}async function eM(e,t){return YO(e,t,!0)}class tM{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&FF().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}isTypedArray(e){return qF(e)}}if(FF().get("IS_BROWSER")){FF().setPlatform("browser",new tM);try{KO.registerManager(HO.URL_SCHEME,new qO)}catch(K1){}try{KO.registerManager(FO.URL_SCHEME,new OO)}catch(K1){}}let nM;function rM(e,t="float32",n){return t=t||"float32",TF(e),new vD(e,t,n)}FF().get("IS_NODE")&&!FF().get("IS_BROWSER")&&FF().setPlatform("node",new class{constructor(){this.util=n(12),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=FF().global.fetch?FF().global.fetch(e,t):(null==nM&&(nM=n(11)),nM(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const sM=ZD({cast_:function(e,t){const n=KD(e,"x","cast");if(!hF(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return UD.runKernel("Cast",{x:n},{dtype:t})}}),aM=ZD({clone_:function(e){const t=KD(e,"x","clone","string_or_numeric");return UD.runKernel("Identity",{x:t})}});function iM(e,t=!1){console.log(e.toString(t))}VD(),function(e){SD=e}({buffer:rM,cast:sM,clone:aM,print:iM});const oM=ZD({add_:function(e,t){let n=KD(e,"a","add"),r=KD(t,"b","add");return[n,r]=PD(n,r),UD.runKernel("Add",{a:n,b:r})}}),uM=ZD({floorDiv_:function(e,t){let n=KD(e,"a","floorDiv"),r=KD(t,"b","floorDiv");return[n,r]=PD(n,r),UD.runKernel("FloorDiv",{a:n,b:r})}}),lM=ZD({div_:function(e,t){let n=KD(e,"a","div"),r=KD(t,"b","div");return[n,r]=PD(n,r),"int32"===n.dtype&&"int32"===r.dtype?uM(n,r):UD.runKernel("RealDiv",{a:n,b:r},{})}}),cM=ZD({mul_:function(e,t){let n=KD(e,"a","mul"),r=KD(t,"b","mul");return[n,r]=PD(n,r),UD.runKernel("Multiply",{a:n,b:r})}}),hM=ZD({sqrt_:function(e){const t=KD(e,"x","sqrt","float32");return UD.runKernel("Sqrt",{x:t})}}),pM=ZD({square_:function(e){const t=KD(e,"x","square");return UD.runKernel("Square",{x:t},{})}}),dM=ZD({zerosLike_:function(e){const t=KD(e,"x","zerosLike");return UD.runKernel("ZerosLike",{x:t})}});function fM(e){return UD.customGrad(e)}function mM(e,t){if((dD(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&dD(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return JD(e,[],[],t)}const gM=new Map,yM=new Map;class bM{constructor(){this.classNameMap={}}static getMap(){return null==bM.instance&&(bM.instance=new bM),bM.instance}static register(e){bM.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function xM(e,t,n){j_(null!=e.className,()=>"Class being registered does not have the static className property defined."),j_("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),j_(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const r=t+">"+n;return bM.register(e),gM.set(r,e),yM.set(e,r),e}class wM extends class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:s[e.name]}));this.applyGradients(e)}else this.applyGradients(s);return aO(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){j_(xF(e),()=>"The f passed in variableGrads(f) must be a function"),j_(null==t||Array.isArray(t)&&t.every(e=>e instanceof TD),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in UD.registeredVariables)t.push(UD.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,s=t.length;j_((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=UD.gradients(e,t,null,!0);j_(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),j_(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&aO(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:mM(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}function vM(e,t,n){return TF(e),n=n||bF(t),UD.runKernel("Fill",{},{shape:e,value:t,dtype:n})}Object.defineProperty(wM,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const kM=ZD({pow_:function(e,t){let n=KD(e,"base","pow"),r=KD(t,"exp","pow");return[n,r]=PD(n,r),UD.runKernel("Pow",{a:n,b:r})}}),SM=ZD({sub_:function(e,t){let n=KD(e,"a","sub"),r=KD(t,"b","sub");return[n,r]=PD(n,r),UD.runKernel("Sub",{a:n,b:r})}}),IM=ZD({abs_:function(e){const t=KD(e,"x","abs");return UD.runKernel("complex64"===t.dtype?"ComplexAbs":"Abs",{x:t})}});function NM(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function CM(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function TM(e,t){const n=Math.max(e.length,t.length),r=new Array(n);for(let s=0;s<n;s++){let a=e[e.length-s-1];null==a&&(a=1);let i=t[t.length-s-1];if(null==i&&(i=1),1===a)r[n-s-1]=i;else if(1===i)r[n-s-1]=a;else{if(a!==i)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);r[n-s-1]=a}}return r}const EM=ZD({maximum_:function(e,t){let n=KD(e,"a","maximum"),r=KD(t,"b","maximum");return[n,r]=PD(n,r),"bool"===n.dtype&&(n=sM(n,"int32"),r=sM(r,"int32")),TM(n.shape,r.shape),UD.runKernel("Maximum",{a:n,b:r})}});class AM extends wM{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=UD.registeredVariables[t];sO(()=>{const e=oM(cM(this.c,r),s);s.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=iO(mM(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}const RM=[class extends wM{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=UD.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=UD.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:sO(()=>dM(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:sO(()=>dM(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;sO(()=>{const e=oM(cM(a,this.rho),cM(pM(s),1-this.rho)),t=cM(lM(hM(oM(i,this.epsilon)),hM(oM(a,this.epsilon))),s),n=oM(cM(i,this.rho),cM(pM(t),1-this.rho));a.assign(e),i.assign(n);const o=oM(cM(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(aO(this.accumulatedGrads.map(e=>e.variable)),aO(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}},class extends wM{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=UD.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:sO(()=>vM(r.shape,this.initialAccumulatorValue).variable(e))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;sO(()=>{const e=oM(a,pM(s));a.assign(e);const t=oM(cM(lM(s,hM(oM(e,UD.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&aO(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}},class extends wM{static get className(){return"Adam"}constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],sO(()=>{this.accBeta1=mM(t).variable(),this.accBeta2=mM(n).variable()}),null==r&&(this.epsilon=UD.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);sO(()=>{const n=SM(1,this.accBeta1),r=SM(1,this.accBeta2);t.forEach((t,s)=>{const a=UD.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:sO(()=>dM(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:t+"/v",variable:sO(()=>dM(a).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=oM(cM(o,this.beta1),cM(i,1-this.beta1)),c=oM(cM(u,this.beta2),cM(pM(i),1-this.beta2)),h=lM(l,n),p=lM(c,r);o.assign(l),u.assign(c);const d=oM(cM(lM(h,oM(hM(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(cM(this.accBeta1,this.beta1)),this.accBeta2.assign(cM(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&aO(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&aO(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),sO(()=>{this.accBeta1.assign(kM(this.beta1,this.iterations_+1)),this.accBeta2.assign(kM(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}},class extends wM{static get className(){return"Adamax"}constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],sO(()=>{this.iteration=mM(0).variable(),this.accBeta1=mM(t).variable()}),null==r&&(this.epsilon=UD.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);sO(()=>{const n=SM(1,this.accBeta1),r=lM(-this.learningRate,oM(cM(this.iteration,this.decay),1));t.forEach((t,s)=>{const a=UD.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:dM(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:t+"/v",variable:dM(a).variable(!1)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=oM(cM(o,this.beta1),cM(i,1-this.beta1)),c=cM(u,this.beta2),h=IM(i),p=EM(c,h);o.assign(l),u.assign(p);const d=oM(cM(lM(r,n),lM(l,oM(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(oM(this.iteration,1)),this.accBeta1.assign(cM(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&aO(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&aO(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}},class extends AM{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=mM(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=UD.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:sO(()=>dM(r).variable(e))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&sO(()=>{let e;const t=oM(cM(this.m,s),a);e=oM(cM(this.c,this.useNesterov?oM(a,cM(t,this.m)):t),r),s.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&aO(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}},class extends wM{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=UD.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=UD.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:sO(()=>dM(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:sO(()=>dM(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:sO(()=>dM(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;sO(()=>{const e=oM(cM(a,this.decay),cM(pM(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,o=oM(cM(t,this.decay),cM(s,1-this.decay)),u=lM(cM(s,this.learningRate),hM(SM(e,oM(pM(o),this.epsilon)))),l=oM(cM(i,this.momentum),u);a.assign(e),t.assign(o),i.assign(l);const c=SM(r,l);r.assign(c)}else{const e=oM(cM(a,this.decay),cM(pM(s),1-this.decay)),t=oM(cM(i,this.momentum),lM(cM(s,this.learningRate),hM(oM(e,this.epsilon))));a.assign(e),i.assign(t);const n=SM(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&aO(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&aO(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&aO(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}},AM];function $M(e){return new Promise(e=>setTimeout(e)).then(e)}class _M{constructor(e){if(!FF().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(_M.URL_SCHEME)&&(e=e.slice(_M.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=nO.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=vO(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await $M(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await $M(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:IO(e)}}}}_M.URL_SCHEME="downloads://";class FM{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error("modelTopology field is missing from file "+this.jsonFile.name));if(null==r.weightsManifest)return void t(new Error("weightManifest field is missing from file "+this.jsonFile.name));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=SO(r,e=>this.loadWeights(e));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(s).then(e=>[t,e])}loadWeightsFile(e,t){return new Promise((n,r)=>{const s=new FileReader;s.onload=e=>{n(e.target.result)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>wO(e.name)),r={};for(const s of e)s.paths.forEach(e=>{const s=wO(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function DM(e){return new FM(e)}function OM(e,t,n,r){!function(e){j_(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){j_(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),j_(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),j_(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++s/e.length*(r-n);return t(i),a}),a)))}async function MM(e,t){null==t&&(t={});const n=null==t.fetchFunc?FF().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await OM(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await OM(s,t.onProgress,.5,1)}async function PM(e,t="",n,r){return zM(e=>MM(e,{requestInit:r}))(e,t,n)}function zM(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u=tO["quantization"in e?e.quantization.dtype:e.dtype]*X_(e.shape),l=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((t,n)=>{t===e.name&&(l(),i[n]=!0)}):l(),o.push(e.name),n+=u})}),!i.every(e=>e)){const e=r.filter((e,t)=>!i[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const c=await e(l),h={};let p=0;return u.forEach(e=>{const n=t[e].paths.length,r=new nO(c.slice(p,p+n));a[e].forEach(e=>{const t=cO(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]}),p+=n}),h}}CO.registerSaveRouter(e=>FF().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(_M.URL_SCHEME)?function(e="model"){return new _M(e)}(e.slice(_M.URL_SCHEME.length)):null);class LM{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(j_("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=FF().platform.fetch,j_(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&j_(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=vO(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=nO.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:IO(e),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(n){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}if(null==t.modelTopology&&null==t.weightsManifest)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){return this.loadOptions.streamWeights?this.loadStream():SO(await this.loadModelJSON(),e=>this.loadWeights(e))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=NO(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const r=null==t.fetchFunc?FF().platform.fetch:t.fetchFunc;let s,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var i;a<e.length;){if(!s){const n=(await r(e[a],t.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:o,value:u}=await s.read();if(!o)return void n.enqueue(u);a++,s=void 0,null===(i=t.onProgress)||void 0===i||i.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[],i=[];for(const o of e)for(const e of o.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(s+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[NO(e),await MM(t,this.loadOptions)]}}function BM(e){return null!=e.match(LM.URL_SCHEME_REGEX)}LM.URL_SCHEME_REGEX=/^https?:\/\//;const WM=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>BM(e)):BM(e),n)return VM(e,t)}return null};function VM(e,t){return new LM(e,t)}function UM(e,t){return VM(e,t)}CO.registerSaveRouter(WM),CO.registerLoadRouter(WM);class GM{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class HM{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class jM{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function qM(e,t,n,r){const s=arguments;return new jM(KM(...s))}function KM(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new GM(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new GM({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new GM({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function XM(e){return new HM(e)}function YM(e){return new HM(e)}function ZM(e,t,n){if(K_(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=jD(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return JD(e,t,r,n)}let QM,JM=!1;function eP(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(null!=VF("FromPixels",UD.backendName))return UD.runKernel("FromPixels",{pixels:e},{numChannels:t});const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(a||s||o){if(null==QM)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");QM=new OffscreenCanvas(1,1).getContext("2d")}else QM=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});QM.canvas.width=u,QM.canvas.height=l,QM.drawImage(e,0,0,u,l),c=QM.getImageData(0,0,u,l).data}if(4===t)h=new Int32Array(c);else{const e=u*l;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return ZM(h,[l,u,t],"int32")}async function tP(e,t=3){let n=null;if(FF().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(r){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return eP(n,t)}function nP(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+t);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function rP(e,t){let n=KD(e,"img","toPixels");if(!(e instanceof ND)){const e=n;n=sM(e,"int32"),e.dispose()}nP(n);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2],i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let l=0;l<r*s;++l){const e=[0,0,0,255];for(let r=0;r<a;r++){const t=i[l*a+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[r]=t*o}const t=4*l;u[t+0]=Math.round(e[0]),u[t+1]=Math.round(e[1]),u[t+2]=Math.round(e[2]),u[t+3]=Math.round(e[3])}if(null!=t){JM||null!=VF("Draw",UD.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),JM=!0),t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}function sP(e,t,n){let r=KD(e,"img","draw");if(!(e instanceof ND)){const e=r;r=sM(e,"int32"),e.dispose()}nP(r),function(e){const t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions),UD.runKernel("Draw",{image:r},{canvas:t,options:n})}const aP=ZD({fromPixels_:eP});function iP(e,t,n){const r=e.shape.length;j_(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),j_(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)j_(t[s]+n[s]<=e.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`)}function oP(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function uP(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function lP(e,t,n,r){const s=[...e];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<n;a++)0===a?s[t]=1:(s.splice(t,0,1),s.pop());return s}function cP(e,t,n){return n<=e?n:n-(t-1)}function hP(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function pP(e,t,n,r,s,a,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=dP(i,u,l,r,e),h=fP(o,u,l,s,e),p=lP(a,u,l,e)}else for(let d=0;d<l;d++)c[d]=gP(i,r,a,e,d,u),h[d]=yP(o,s,a,e,d,u),p[d]=mP(a,d,u);return{begin:c,end:h,strides:p}}function dP(e,t,n,r,s){const a=[...s],i=hP(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const s=cP(t,n,o);let i=r[s];e&1<<s&&(i=0),a[o]=i}return a}function fP(e,t,n,r,s){const a=[...s],i=hP(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const s=cP(t,n,o);let i=r[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=s[o];a[o]<0&&(a[o]+=e),a[o]=B_(0,a[o],s[o])}return a}function mP(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function gP(e,t,n,r,s,a){let i=t[s];(e&1<<s||a&1<<s||null==i)&&(i=(n[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return i<0&&(i+=o),i=B_(0,i,o-1),i}function yP(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?B_(0,i,u):B_(-1,i,u-1),i}function bP(e,t,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function xP(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function wP(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach(e=>{j_(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(j_(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function vP(e,t,n,r,s,a,i,o,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};for(let b=0;b<h.dims;b++)c&&0!=(1<<b&o)&&h.numAddAxisAfterEllipsis++,1<<b&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let b=0;b<e.length;++b){if(0===p.strides[b])throw Error(`strides[${b}] must be non-zero`);const t=!!(p.shrinkAxisMask&1<<b),n=e[b];if(-1===n){g.push(t?1:-1);continue}const r=[p.beginMask&1<<b,p.endMask&1<<b],s=[p.strides[b]>0?0:-1,p.strides[b]>0?n:n-1];if(t&&p.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[b];const a=!!(p.beginMask&1<<b&&p.endMask&1<<b);if(p.beginValid&&p.endValid){if(t){const e=p.begin[b]<0?n+p.begin[b]:p.begin[b];if(p.begin[b]=e,p.end[b]=p.begin[b]+1,e<0||e>=n)throw Error(`slice index ${p.begin[b]} of dimension ${b} out of bounds.`)}else p.begin[b]=kP(p.begin[b],0,p.strides[b],n,r,s),p.end[b]=kP(p.end[b],1,p.strides[b],n,r,s);const e=1===p.strides[b]&&0===p.begin[b]&&p.end[b]===n;d=d&&e,f=f&&(0===b&&1===p.strides[b]||e)}else d=d&&1===p.strides[b]&&a,f=f&&(0===b&&1===p.strides[b]||a);let i,o=!1;if(p.beginValid&&p.endValid?(i=p.end[b]-p.begin[b],o=!0):t?(i=1,o=!0):a&&n>=0&&(i=p.strides[b]<0?-n:n,o=!0),o){let e;e=0===i||i<0!=p.strides[b]<0?0:Math.trunc(i/p.strides[b])+(i%p.strides[b]!=0?1:0),g.push(e)}else g.push(-1)}for(let b=0;b<p.finalShapeGatherIndices.length;++b){const e=p.finalShapeGatherIndices[b];e>=0?y.push(g[e]):-2===e&&y.push(1)}return{finalShapeSparse:y.filter((e,t)=>-2!==p.finalShapeGatherIndices[t]),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function kP(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const SP=ZD({acos_:function(e){const t=KD(e,"x","acos");return UD.runKernel("Acos",{x:t})}}),IP=ZD({acosh_:function(e){const t=KD(e,"x","acosh");return UD.runKernel("Acosh",{x:t})}}),NP=ZD({addN_:function(e){j_(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),j_(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>KD(e,"tensors"+t,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!Q_(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),UD.runKernel("AddN",t)}}),CP=ZD({all_:function(e,t=null,n=!1){const r=KD(e,"x","all","bool");return UD.runKernel("All",{x:r},{axis:t,keepDims:n})}}),TP=ZD({any_:function(e,t=null,n=!1){const r=KD(e,"x","any","bool");return UD.runKernel("Any",{x:r},{axis:t,keepDims:n})}}),EP=ZD({argMax_:function(e,t=0){const n=KD(e,"x","argMax");return UD.runKernel("ArgMax",{x:n},{axis:t})}}),AP=ZD({argMin_:function(e,t=0){const n=KD(e,"x","argMin");return UD.runKernel("ArgMin",{x:n},{axis:t})}}),RP=ZD({asin_:function(e){const t=KD(e,"x","asin");return UD.runKernel("Asin",{x:t})}}),$P=ZD({asinh_:function(e){const t=KD(e,"x","asinh");return UD.runKernel("Asinh",{x:t})}}),_P=ZD({atan_:function(e){const t=KD(e,"x","atan");return UD.runKernel("Atan",{x:t})}}),FP=ZD({atan2_:function(e,t){let n=KD(e,"a","atan2"),r=KD(t,"b","atan2");return[n,r]=PD(n,r),UD.runKernel("Atan2",{a:n,b:r})}}),DP=ZD({atanh_:function(e){const t=KD(e,"x","atanh");return UD.runKernel("Atanh",{x:t})}});function OP(e,t,n,r,s="NHWC",a){return zP(e,[...t,e[3]],n,a,r,null,null,KP(s))}function MP(e,t,n,r,s,a,i="channelsLast"){const[o,u]=WP(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);l=[o,u,e[1],e[1]]}return zP(e,l,n,r,s,a,!1,i)}function PP(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=VP(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return LP(e,c,n,r,s,!1,h,a)}function zP(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,l,c]=e}const[p,d,,f]=t,[m,g]=WP(n),[y,b]=WP(r),x=UP(p,y),w=UP(d,b),{padInfo:v,outHeight:k,outWidth:S}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=BP(e,t,n));const a=e[1];return[GP((e[0]-t+2*r)/n+1,s),GP((a-t+2*r)/n+1,s)]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),p=e-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const p="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=GP((t-a+p+d)/r+1,o),h=GP((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),I=i?f*h:f;let N;return"channelsFirst"===o?N=[u,I,k,S]:"channelsLast"===o&&(N=[u,k,S,I]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:S,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function LP(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,p,l,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=VP(n),[w,v,k]=VP(r),S=UP(d,w),I=UP(f,v),N=UP(m,k),{padInfo:C,outDepth:T,outHeight:E,outWidth:A}=function(e,t,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("valid"===e&&(e=0),"number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,r,s,a){null==s&&(s=BP(e,t[0],r[0]));const i=[0,0,0,1];for(let o=0;o<3;o++)e[o]+2*s>=t[o]&&(i[o]=GP((e[o]-t[o]+2*s)/r[o]+1,a));return i}([t,n,r,1],[o,u,l],0,[s,a,i],e,c);p=m[0],d=m[1],f=m[2]}else{if("same"!==e)throw Error("Unknown padding parameter: "+e);{p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,S,I,N,o),R=a?g*p:g;let $;return"channelsFirst"===i?$=[u,R,T,E,A]:"channelsLast"===i&&($=[u,T,E,A,R]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:E,outWidth:A,outChannels:R,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:I,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:$,filterShape:t}}function BP(e,t,n,r=1){const s=UP(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function WP(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function VP(e){return"number"==typeof e?[e,e,e]:e}function UP(e,t){return t<=1?e:e+(e-1)*(t-1)}function GP(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function HP(e){const[t,n,r]=WP(e);return 1===t&&1===n&&1===r}function jP(e,t){return HP(e)||HP(t)}function qP(e){return WP(e).every(e=>e>0)}function KP(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}function XP(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)j_(J_(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{j_(J_(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}const YP=ZD({reshape_:function(e,t){const n=KD(e,"x","reshape","string_or_numeric");return UD.runKernel("Reshape",{x:n},{shape:t})}}),ZP=ZD({avgPool_:function(e,t,n,r,s){const a=KD(e,"x","avgPool","float32");j_(jP(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=YP(a,[1,a.shape[0],a.shape[1],a.shape[2]])),j_(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),XP("avgPool",r,s);let u=UD.runKernel("AvgPool",{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return u=sM(u,a.dtype),o?YP(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),QP=ZD({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=KD(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=YP(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j_(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),j_("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),j_("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`),XP("avgPool3d",r,s);let l=UD.runKernel("AvgPool3D",{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return l=sM(l,o.dtype),u?YP(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),JP=ZD({concat_:function(e,t=0){j_(e.length>=1,()=>"Pass at least one tensor to concat");const n=XD(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?aM(n[0]):UD.runKernel("Concat",n,{axis:t})}}),ez=ZD({matMul_:function(e,t,n=!1,r=!1){let s=KD(e,"a","matMul"),a=KD(t,"b","matMul");return[s,a]=PD(s,a),UD.runKernel("BatchMatMul",{a:s,b:a},{transposeA:n,transposeB:r})}}),tz=ZD({sigmoid_:function(e){const t=KD(e,"x","sigmoid","float32");return UD.runKernel("Sigmoid",{x:t})}}),nz=ZD({slice_:function(e,t,n){const r=KD(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");return UD.runKernel("Slice",{x:r},{begin:t,size:n})}}),rz=ZD({tanh_:function(e){const t=KD(e,"x","tanh","float32");return UD.runKernel("Tanh",{x:t})}}),sz=ZD({basicLSTMCell_:function(e,t,n,r,s,a){const i=KD(e,"forgetBias","basicLSTMCell"),o=KD(t,"lstmKernel","basicLSTMCell"),u=KD(n,"lstmBias","basicLSTMCell"),l=KD(r,"data","basicLSTMCell"),c=KD(s,"c","basicLSTMCell"),h=KD(a,"h","basicLSTMCell"),p=JP([l,h],1),d=ez(p,o),f=oM(d,u),m=f.shape[1]/4,g=[f.shape[0],m],y=nz(f,[0,0],g),b=nz(f,[0,m],g),x=nz(f,[0,2*m],g),w=nz(f,[0,3*m],g),v=oM(cM(tz(y),rz(b)),cM(c,tz(oM(i,x))));return[v,cM(rz(v),tz(w))]}}),az=ZD({batchToSpaceND_:function(e,t,n){const r=KD(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);return j_(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),j_(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),j_(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`),UD.runKernel("BatchToSpaceND",{x:r},{blockShape:t,crops:n})}}),iz=ZD({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=KD(e,"x","batchNorm"),o=KD(t,"mean","batchNorm"),u=KD(n,"variance","batchNorm");let l,c;null!=s&&(l=KD(s,"scale","batchNorm")),null!=r&&(c=KD(r,"offset","batchNorm")),j_(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),j_(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),j_(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){let t;return t=0===e.rank||1===e.rank?YP(e,[1,1,1,e.size]):2===e.rank?YP(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?YP(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p=UD.runKernel("FusedBatchNorm",{x:h,scale:l,offset:c,mean:o,variance:u},{varianceEpsilon:a});return YP(p,i.shape)}}),oz=ZD({batchNorm2d_:function(e,t,n,r,s,a){const i=KD(e,"x","batchNorm"),o=KD(t,"mean","batchNorm"),u=KD(n,"variance","batchNorm");let l,c;return null!=s&&(l=KD(s,"scale","batchNorm")),null!=r&&(c=KD(r,"offset","batchNorm")),j_(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),j_(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),j_(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&j_(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&j_(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),iz(i,o,u,c,l,a)}}),uz=ZD({batchNorm3d_:function(e,t,n,r,s,a){const i=KD(e,"x","batchNorm"),o=KD(t,"mean","batchNorm"),u=KD(n,"variance","batchNorm");let l,c;return null!=s&&(l=KD(s,"scale","batchNorm")),null!=r&&(c=KD(r,"offset","batchNorm")),j_(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),j_(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),j_(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&j_(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&j_(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),iz(i,o,u,c,l,a)}}),lz=ZD({batchNorm4d_:function(e,t,n,r,s,a){const i=KD(e,"x","batchNorm"),o=KD(t,"mean","batchNorm"),u=KD(n,"variance","batchNorm");let l,c;return null!=s&&(l=KD(s,"scale","batchNorm")),null!=r&&(c=KD(r,"offset","batchNorm")),j_(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),j_(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),j_(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&j_(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&j_(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),iz(i,o,u,c,l,a)}}),cz=ZD({bincount_:function(e,t,n){const r=KD(e,"x","bincount"),s=KD(t,"weights","bincount");return j_("int32"===r.dtype,()=>"Error in bincount: input dtype must be int32, but got "+r.dtype),j_(n>=0,()=>`size must be non-negative, but got ${n}.`),j_(s.size===r.size||0===s.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: `+s.shape+"."),UD.runKernel("Bincount",{x:r,weights:s},{size:n})}}),hz=ZD({bitwiseAnd_:function(e,t){const n=KD(e,"x","bitwiseAnd"),r=KD(t,"y","bitwiseAnd");if(!Q_(n.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${r.shape}`);if("int32"!==n.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${r.dtype}`);return UD.runKernel("BitwiseAnd",{a:n,b:r})}}),pz=ZD({broadcastArgs_:function(e,t){const n=KD(e,"s0","broadcastArgs","int32"),r=KD(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error("broadcastArgs(): first input must be a vector (rank=1). Has rank "+n.rank);if(1!==r.rank)throw new Error("broadcastArgs(): second input must be a vector (rank=1). Has rank "+r.rank);return UD.runKernel("BroadcastArgs",{s0:n,s1:r})}}),dz=ZD({broadcastTo_:function(e,t){let n=KD(e,"broadcastTo","x");const r=n.shape;if(TF(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=YP(n,e)}const s=n.shape,a=Array.from(t);for(let i=t.length-1;i>=0;i--)if(s[i]===t[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?aM(n):UD.runKernel("Tile",{x:n},{reps:a})}}),fz=ZD({ceil_:function(e){const t=KD(e,"x","ceil","float32");return UD.runKernel("Ceil",{x:t})}}),mz=ZD({clipByValue_:function(e,t,n){const r=KD(e,"x","clipByValue");return j_(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n?vM(r.shape,t,r.dtype):UD.runKernel("ClipByValue",{x:r},{clipValueMin:t,clipValueMax:n})}}),gz=ZD({concat1d_:function(e){return JP(e,0)}}),yz=ZD({concat2d_:function(e,t){return JP(e,t)}}),bz=ZD({concat3d_:function(e,t){return JP(e,t)}}),xz=ZD({concat4d_:function(e,t){return JP(e,t)}}),wz=ZD({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=KD(e,"x","conv2d","float32"),u=KD(t,"filter","conv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=YP(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j_(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),j_(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),XP("conv2d",r,i);const h="NHWC"===s?l.shape[3]:l.shape[1];j_(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),j_(jP(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),j_(qP(a),()=>"Error in conv2D: Dilated rates should be larger than 0."),j_(qP(n),()=>"Error in conv2D: Strides should be larger than 0.");const p=UD.runKernel("Conv2D",{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?YP(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),vz=ZD({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=KD(e,"x","conv1d"),u=KD(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=YP(o,[1,o.shape[0],o.shape[1]])),j_(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),j_(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),XP("conv1d",r,i),j_(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),j_(jP(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),j_(qP(a),()=>"Error in conv1D: Dilated rates should be larger than 0."),j_(qP(n),()=>"Error in conv1D: Stride should be larger than 0."),j_("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=YP(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=YP(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=wz(p,h,[1,n],r,"NHWC",[1,a],i);return YP(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),kz=ZD({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){j_(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=YP(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),j_(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),j_(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),j_(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];j_(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),j_(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),XP("conv2dDerInput",s,i);const p=UD.runKernel("Conv2DBackpropInput",{dy:u,filter:n},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o});return l?YP(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Sz=ZD({conv2dTranspose_:function(e,t,n,r,s,a){const i=KD(e,"x","conv2dTranspose"),o=KD(t,"filter","conv2dTranspose");return kz(n,i,o,r,s,"NHWC",a)}}),Iz=ZD({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=KD(e,"x","conv3d"),o=KD(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=YP(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j_(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),j_(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),j_(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),j_(jP(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),j_("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`),j_(qP(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),j_(qP(n),()=>"Error in conv3D: Strides should be larger than 0.");const c=UD.runKernel("Conv3D",{x:u,filter:o},{strides:n,pad:r,dataFormat:s,dilations:a});return l?YP(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Nz=ZD({conv3DBackpropInput_:function(e,t,n,r,s){j_(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=YP(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=i.shape[4];j_(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),j_(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),j_(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),j_(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),j_(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c=UD.runKernel("Conv3DBackpropInputV2",{dy:i,filter:n},{pad:s,strides:r,inputShape:a});return o?YP(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Cz=ZD({conv3dTranspose_:function(e,t,n,r,s){const a=KD(e,"x","conv3dTranspose"),i=KD(t,"filter","conv3dTranspose");return Nz(n,a,i,r,s)}}),Tz=ZD({cos_:function(e){const t=KD(e,"x","cos","float32");return UD.runKernel("Cos",{x:t})}}),Ez=ZD({cosh_:function(e){const t=KD(e,"x","cosh","float32");return UD.runKernel("Cosh",{x:t})}}),Az=ZD({cumprod_:function(e,t=0,n=!1,r=!1){const s=KD(e,"x","cumprod");return UD.runKernel("Cumprod",{x:s},{axis:t,exclusive:n,reverse:r})}}),Rz=ZD({cumsum_:function(e,t=0,n=!1,r=!1){const s=KD(e,"x","cumsum");return UD.runKernel("Cumsum",{x:s},{axis:t,exclusive:n,reverse:r})}}),$z=ZD({denseBincount_:function(e,t,n,r=!1){const s=KD(e,"x","denseBincount"),a=KD(t,"weights","denseBincount");return j_("int32"===s.dtype,()=>"Error in denseBincount: input dtype must be int32, but got "+s.dtype),j_(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),j_(n>=0,()=>`size must be non-negative, but got ${n}.`),j_(a.size===s.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: `+a.shape+"."),UD.runKernel("DenseBincount",{x:s,weights:a},{size:n,binaryOutput:r})}}),_z=ZD({depthToSpace_:function(e,t,n="NHWC"){const r=KD(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return j_(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t),j_(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),j_(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),j_(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),UD.runKernel("DepthToSpace",{x:r},{blockSize:t,dataFormat:n})}}),Fz=ZD({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=KD(e,"x","depthwiseConv2d","float32"),u=KD(t,"filter","depthwiseConv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=YP(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j_(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),j_(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+".");const h="NHWC"===s?l.shape[3]:l.shape[1];j_(h===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${u.shape[2]}.`),XP("depthwiseConv2d",r,i);const p=UD.runKernel("DepthwiseConv2dNative",{x:l,filter:u},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?YP(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Dz=ZD({diag_:function(e){const t=KD(e,"x","diag");return UD.runKernel("Diag",{x:t})}}),Oz=ZD({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=KD(e,"x","dilation2d"),o=KD(t,"filter","dilation2d");j_(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),j_(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),j_("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let u=i,l=!1;3===i.rank&&(u=YP(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0),j_(u.shape[3]===o.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${o.shape[2]}`);const c=UD.runKernel("Dilation2D",{x:u,filter:o},{strides:n,pad:r,dilations:s});return l?YP(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Mz=ZD({equal_:function(e,t){let n=KD(e,"a","equal","string_or_numeric"),r=KD(t,"b","equal","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("Equal",{a:n,b:r})}}),Pz=ZD({where_:function(e,t,n){const r=KD(t,"a","where"),s=KD(n,"b","where"),a=KD(e,"condition","where","bool"),i=TM(TM(a.shape,r.shape),s.shape),o=dz(a,i),u=dz(r,i),l=dz(s,i);return UD.runKernel("Select",{condition:o,t:u,e:l})}}),zz=ZD({divNoNan_:function(e,t){let n=KD(e,"a","div"),r=KD(t,"b","div");[n,r]=PD(n,r);const s=lM(n,r),a=dM(s),i=Mz(r,a);return Pz(i,a,s)}}),Lz=ZD({dot_:function(e,t){const n=KD(e,"t1","dot"),r=KD(t,"t2","dot");j_(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(j_(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const e=YP(n,[1,-1]),t=YP(r,[-1,1]),s=ez(e,t);return YP(s,[])}if(1===n.rank&&2===r.rank){const e=YP(n,[1,-1]),t=YP(r,[r.shape[0],r.shape[1]]),s=ez(e,t);return YP(s,[s.size])}if(2===n.rank&&1===r.rank){const e=YP(r,[-1,1]),t=ez(n,e);return YP(t,[t.size])}{const e=YP(r,[r.shape[0],r.shape[1]]);return ez(n,e)}}}),Bz=ZD({einsum_:function(e,...t){const n=t.map((e,t)=>KD(e,"tensors"+t,"einsum"));return UD.runKernel("Einsum",n,{equation:e})}}),Wz=ZD({elu_:function(e){const t=KD(e,"x","elu","float32");return UD.runKernel("Elu",{x:t})}}),Vz=ZD({ensureShape_:function(e,t){const n=KD(e,"x","ensureShape","string_or_numeric");if(!Z_(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}}),Uz=ZD({erf_:function(e){let t=KD(e,"x","erf");return j_("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=sM(t,"float32")),UD.runKernel("Erf",{x:t})}});function Gz(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Hz(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function jz(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map(t=>e[t])]}function qz(e,t){return Hz(e,t.map(e=>1),t)}function Kz(e,t,n){j_(Gz(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function Xz(e,t){if(Gz(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function Yz(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Zz(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Qz=ZD({max_:function(e,t=null,n=!1){const r=KD(e,"x","max");return UD.runKernel("Max",{x:r},{reductionIndices:t,keepDims:n})}}),Jz=ZD({min_:function(e,t=null,n=!1){const r=KD(e,"x","min");return UD.runKernel("Min",{x:r},{axis:t,keepDims:n})}}),eL=ZD({sum_:function(e,t=null,n=!1){let r=KD(e,"x","sum");return"bool"===r.dtype&&(r=sM(r,"int32")),UD.runKernel("Sum",{x:r},{axis:t,keepDims:n})}}),tL=ZD({norm_:function(e,t="euclidean",n=null,r=!1){const s=function e(t,n,r=null){if(0===t.rank)return IM(t);if(1!==t.rank&&null===r)return e(YP(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return eL(IM(t),r);if(n===1/0)return Qz(IM(t),r);if(n===-1/0)return Jz(IM(t),r);if("euclidean"===n||2===n)return hM(eL(kM(IM(t),mM(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return Qz(eL(IM(t),r[0]),r[1]-1);if(n===1/0)return Qz(eL(IM(t),r[1]),r[0]);if(n===-1/0)return Jz(eL(IM(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return hM(eL(pM(t),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(e=KD(e,"x","norm"),t,n);let a=s.shape;if(r){const t=iF(n,e.shape);a=qz(s.shape,t)}return YP(s,a)}}),nL=ZD({euclideanNorm_:function(e,t=null,n=!1){return tL(e,"euclidean",t,n)}}),rL=ZD({exp_:function(e){const t=KD(e,"x","exp");return UD.runKernel("Exp",{x:t})}}),sL=ZD({expandDims_:function(e,t=0){const n=KD(e,"x","expandDims","string_or_numeric");return j_(t<=n.rank,()=>"Axis must be <= rank of the tensor"),UD.runKernel("ExpandDims",{input:n},{dim:t})}}),aL=ZD({expm1_:function(e){const t=KD(e,"x","expm1");return UD.runKernel("Expm1",{x:t})}}),iL=ZD({tile_:function(e,t){const n=KD(e,"x","tile","string_or_numeric");return j_(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),UD.runKernel("Tile",{x:n},{reps:t})}}),oL=ZD({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=rM([e,t],r),a=e<=t?e:t;for(let o=0;o<a;++o)s.set(1,o,o);const i=YP(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return iL(sL(i,0),[n[0],1,1]);if(2===n.length)return iL(sL(sL(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return iL(sL(sL(sL(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),uL=ZD({floor_:function(e){const t=KD(e,"x","floor","float32");return UD.runKernel("Floor",{x:t})}}),lL=ZD({gather_:function(e,t,n=0,r=0){const s=KD(e,"x","gather"),a=KD(t,"indices","gather","int32");return UD.runKernel("GatherV2",{x:s,indices:a},{axis:n,batchDims:r})}}),cL=ZD({greater_:function(e,t){let n=KD(e,"a","greater","string_or_numeric"),r=KD(t,"b","greater","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("Greater",{a:n,b:r})}}),hL=ZD({greaterEqual_:function(e,t){let n=KD(e,"a","greaterEqual","string_or_numeric"),r=KD(t,"b","greaterEqual","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("GreaterEqual",{a:n,b:r})}}),pL=ZD({imag_:function(e){const t=KD(e,"input","imag");return UD.runKernel("Imag",{input:t})}}),dL=ZD({isFinite_:function(e){const t=KD(e,"x","isFinite");return UD.runKernel("IsFinite",{x:t})}}),fL=ZD({isInf_:function(e){const t=KD(e,"x","isInf");return UD.runKernel("IsInf",{x:t})}}),mL=ZD({isNaN_:function(e){const t=KD(e,"x","isNaN");return UD.runKernel("IsNan",{x:t})}}),gL=ZD({leakyRelu_:function(e,t=.2){const n=KD(e,"x","leakyRelu");return UD.runKernel("LeakyRelu",{x:n},{alpha:t})}}),yL=ZD({less_:function(e,t){let n=KD(e,"a","less","string_or_numeric"),r=KD(t,"b","less","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("Less",{a:n,b:r})}}),bL=ZD({lessEqual_:function(e,t){let n=KD(e,"a","lessEqual","string_or_numeric"),r=KD(t,"b","lessEqual","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("LessEqual",{a:n,b:r})}});function xL(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");return UD.runKernel("LinSpace",{},{start:e,stop:t,num:n})}const wL=ZD({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=KD(e,"x","localResponseNormalization");j_(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),j_(J_(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=YP(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u=UD.runKernel("LRN",{x:i},{depthRadius:t,bias:n,alpha:r,beta:s});return o?YP(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),vL=ZD({log_:function(e){const t=KD(e,"x","log","float32");return UD.runKernel("Log",{x:t})}}),kL=ZD({log1p_:function(e){const t=KD(e,"x","log1p");return UD.runKernel("Log1p",{x:t})}}),SL=ZD({neg_:function(e){const t=KD(e,"x","neg");return UD.runKernel("Neg",{x:t})}}),IL=ZD({softplus_:function(e){const t=KD(e,"x","softplus");return UD.runKernel("Softplus",{x:t})}}),NL=ZD({logSigmoid_:function(e){const t=KD(e,"x","logSigmoid");return fM(e=>({value:SL(IL(SL(e))),gradFunc:t=>cM(t,tz(SL(e)))}))(t)}}),CL=ZD({logSoftmax_:function(e,t=-1){const n=KD(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return fM((e,n)=>{const r=Qz(e,t,!0),s=SM(e,r),a=SM(sM(s,"float32"),vL(eL(rL(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=rL(r);return SM(e,cM(eL(e,t,!0),s))}}})(n)}}),TL=ZD({logSumExp_:function(e,t=null,n=!1){const r=KD(e,"x","logSumExp"),s=iF(t,r.shape),a=Qz(r,s,!0),i=SM(r,a),o=rL(i),u=eL(o,s),l=vL(u),c=oM(YP(a,l.shape),l);if(n){const e=qz(c.shape,s);return YP(c,e)}return c}}),EL=ZD({logicalAnd_:function(e,t){const n=KD(e,"a","logicalAnd","bool"),r=KD(t,"b","logicalAnd","bool");return TM(n.shape,r.shape),UD.runKernel("LogicalAnd",{a:n,b:r})}}),AL=ZD({logicalNot_:function(e){const t=KD(e,"x","logicalNot","bool");return UD.runKernel("LogicalNot",{x:t})}}),RL=ZD({logicalOr_:function(e,t){const n=KD(e,"a","logicalOr","bool"),r=KD(t,"b","logicalOr","bool");return TM(n.shape,r.shape),UD.runKernel("LogicalOr",{a:n,b:r})}}),$L=ZD({logicalXor_:function(e,t){const n=KD(e,"a","logicalXor","bool"),r=KD(t,"b","logicalXor","bool");return TM(n.shape,r.shape),EL(RL(e,t),AL(EL(e,t)))}}),_L=ZD({searchSorted_:function(e,t,n="left"){const r=KD(e,"sortedSequence","searchSorted"),s=KD(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=YP(r,[-1,r.shape[r.shape.length-1]]),o=YP(s,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==o.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(X_(o.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=2147483648)throw new Error("trailing dim_size must less than 2147483648 for int32 output type, was "+i.shape[1]);return UD.runKernel("SearchSorted",{sortedSequence:i,values:o},{side:n})}});function FL(e,t){return _L(e,t,"left")}const DL=ZD({maxPool_:function(e,t,n,r,s){const a=KD(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=YP(a,[1,a.shape[0],a.shape[1],a.shape[2]])),j_(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),j_(jP(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),XP("maxPool",r,s);const u=UD.runKernel("MaxPool",{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return o?YP(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),OL=ZD({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=KD(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=YP(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j_(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),j_("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),XP("maxPool3d",r,s);const l=UD.runKernel("MaxPool3D",{x:o},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a});return u?YP(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}}),ML=ZD({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a=KD(e,"x","maxPoolWithArgmax"),i=UD.runKernel("MaxPoolWithArgmax",{x:a},{filterSize:t,strides:n,pad:r,includeBatchInIndex:s});return{result:i[0],indexes:i[1]}}}),PL=ZD({mean_:function(e,t=null,n=!1){const r=KD(e,"x","mean");return UD.runKernel("Mean",{x:r},{axis:t,keepDims:n})}});function zL(e,t="float32"){if(TF(e),"complex64"===t){const t=zL(e,"float32"),n=zL(e,"float32");return QD(t,n)}const n=NF(X_(e),t);return UD.makeTensor(n,e,t)}function LL(e,t="float32"){if(TF(e),"complex64"===t){const t=LL(e,"float32"),n=zL(e,"float32");return QD(t,n)}const n=IF(X_(e),t);return UD.makeTensor(n,e,t)}function BL(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(n+" is not a valid third argument to meshgrid");if(void 0===e)return[];let r=KD(e,"x","meshgrid",e instanceof ND?e.dtype:"float32");if(void 0===t)return[r];let s=KD(t,"y","meshgrid",t instanceof ND?t.dtype:"float32");const a=X_(r.shape),i=X_(s.shape);return"xy"===n?(r=YP(r,[1,-1]),s=YP(s,[-1,1]),[ez(LL([i,1],r.dtype),r),ez(s,LL([1,a],s.dtype))]):(r=YP(r,[-1,1]),s=YP(s,[1,-1]),[ez(r,LL([1,i],r.dtype)),ez(LL([a,1],s.dtype),s)])}const WL=ZD({minimum_:function(e,t){let n=KD(e,"a","minimum"),r=KD(t,"b","minimum");return[n,r]=PD(n,r),"bool"===n.dtype&&(n=sM(n,"int32"),r=sM(r,"int32")),TM(n.shape,r.shape),UD.runKernel("Minimum",{a:n,b:r})}}),VL=ZD({mirrorPad_:function(e,t,n){j_("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const r=KD(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");j_(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const s="reflect"===n?1:0;for(let a=0;a<r.rank;a++)j_(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),j_(t[a][0]>=0&&t[a][0]<=r.shape[a]-s&&t[a][1]>=0&&t[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal to ${r.shape[a]-s} or less than 0 for input of shape `+r.shape);return UD.runKernel("MirrorPad",{x:r},{paddings:t,mode:n})}}),UL=ZD({mod_:function(e,t){let n=KD(e,"a","mod"),r=KD(t,"b","mod");return[n,r]=PD(n,r),UD.runKernel("Mod",{a:n,b:r})}}),GL=ZD({moments_:function(e,t=null,n=!1){const r=iF(t,(e=KD(e,"x","moments")).shape),s=PL(e,r,n);let a=s.shape;n||(a=qz(s.shape,r));const i=pM(SM(sM(e,"float32"),YP(s,a)));return{mean:s,variance:PL(i,r,n)}}}),HL=ZD({multiRNNCell_:function(e,t,n,r){const s=KD(t,"data","multiRNNCell"),a=XD(n,"c","multiRNNCell"),i=XD(r,"h","multiRNNCell");let o=s;const u=[];for(let h=0;h<e.length;h++){const t=e[h](o,a[h],i[h]);u.push(t[0]),u.push(t[1]),o=t[1]}const l=[],c=[];for(let h=0;h<u.length;h+=2)l.push(u[h]),c.push(u[h+1]);return[l,c]}}),jL=ZD({multinomial_:function(e,t,n,r=!1){const s=KD(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?YP(s,[1,-1]):s,u=UD.runKernel("Multinomial",{logits:o},{numSamples:t,seed:n,normalized:r});return 1===i?YP(u,[u.size]):u}}),qL=ZD({notEqual_:function(e,t){let n=KD(e,"a","notEqual","string_or_numeric"),r=KD(t,"b","notEqual","string_or_numeric");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("NotEqual",{a:n,b:r})}}),KL=ZD({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const a=KD(e,"indices","oneHot","int32");return UD.runKernel("OneHot",{indices:a},{dtype:s,depth:t,onValue:n,offValue:r})}}),XL=ZD({onesLike_:function(e){const t=KD(e,"x","onesLike");return UD.runKernel("OnesLike",{x:t})}}),YL=ZD({outerProduct_:function(e,t){const n=KD(e,"v1","outerProduct"),r=KD(t,"v2","outerProduct");j_(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=YP(n,[-1,1]),a=YP(r,[1,-1]);return ez(s,a)}}),ZL=ZD({pad_:function(e,t,n=0){const r=KD(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return UD.runKernel("PadV2",{x:r},{paddings:t,constantValue:n})}}),QL=ZD({pad1d_:function(e,t,n=0){return j_(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),ZL(e,[t],n)}}),JL=ZD({pad2d_:function(e,t,n=0){return j_(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),ZL(e,t,n)}}),eB=ZD({pad3d_:function(e,t,n=0){return j_(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),ZL(e,t,n)}}),tB=ZD({pad4d_:function(e,t,n=0){return j_(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),ZL(e,t,n)}}),nB=ZD({spaceToBatchND_:function(e,t,n){const r=KD(e,"x","spaceToBatchND");return j_(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),j_(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),j_(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),UD.runKernel("SpaceToBatchND",{x:r},{blockShape:t,paddings:n})}}),rB=ZD({pool_:function(e,t,n,r,s,a,i){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const o=KD(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=YP(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j_(jP(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const c=MP(u.shape,t,a,s,r),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),i=t.map((e,t)=>(e-a[t]%e)%e),o=s.map((e,t)=>e+i[t]);return[t.map((e,t)=>[r[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([c.inHeight,c.inWidth],h,p),g=d?r:"valid",y=d?u:nB(u,h,f),b=("avg"===n?()=>ZP(y,t,a,g,i):()=>DL(y,t,a,g,i))(),x=d?b:az(b,h,m);return l?YP(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),sB=ZD({prelu_:function(e,t){const n=KD(e,"x","prelu"),r=KD(t,"alpha","prelu");return UD.runKernel("Prelu",{x:n,alpha:r})}}),aB=ZD({prod_:function(e,t=null,n=!1){let r=KD(e,"x","prod");return"bool"===r.dtype&&(r=sM(r,"int32")),UD.runKernel("Prod",{x:r},{axis:t,keepDims:n})}}),iB=ZD({raggedGather_:function(e,t,n,r){const s=e.map((e,t)=>KD(e,"tensors"+t,"raggedGather","int32")),a=KD(t,"paramsDenseValues","raggedGather"),i=KD(n,"indices","raggedGather","int32"),o=UD.runKernel("RaggedGather",{paramsNestedSplits:s,paramsDenseValues:a,indices:i},{outputRaggedRank:r});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),oB=ZD({raggedRange_:function(e,t,n){const r=KD(e,"starts","raggedRange"),s=KD(t,"limits","raggedRange",r.dtype),a=KD(n,"deltas","raggedRange",r.dtype),i=UD.runKernel("RaggedRange",{starts:r,limits:s,deltas:a});return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),uB=ZD({raggedTensorToTensor_:function(e,t,n,r,s){const a=KD(e,"shape","raggedTensorToTensor","int32"),i=KD(t,"values","raggedTensorToTensor"),o=KD(n,"defaultValue","raggedTensorToTensor",i.dtype),u=r.map((e,t)=>KD(e,"tensors"+t,"raggedTensorToTensor","int32"));return UD.runKernel("RaggedTensorToTensor",{shape:a,values:i,defaultValue:o,rowPartitionTensors:u},{rowPartitionTypes:s})}}),lB=ZD({rand_:function(e,t,n){TF(e);const r=X_(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=t();return UD.makeTensor(s,e,n)}});class cB{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Lo.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class hB{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Lo.alea(s.toString()),this.randn=new cB(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class pB{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Lo.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const dB=ZD({randomGamma_:function(e,t,n=1,r="float32",s){if(TF(e),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new hB(t,n,r,s),i=rM(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),fB=ZD({randomNormal_:function(e,t=0,n=1,r,s){if(TF(e),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new cB(t,n,r,!1,s),i=rM(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),mB=ZD({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error("Unsupported data type "+t);return fB(e,0,1,t,n)}}),gB=ZD({randomUniform_:function(e,t=0,n=1,r="float32",s){TF(e);const a=rM(e,r),i=new pB(t,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}}),yB=ZD({randomUniformInt_:function(e,t,n,r){return gB(e,t,n,"int32",r)}});function bB(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");return UD.runKernel("Range",{},{start:e,stop:t,step:n,dtype:r})}const xB=ZD({real_:function(e){const t=KD(e,"input","real");return UD.runKernel("Real",{input:t})}}),wB=ZD({reciprocal_:function(e){const t=KD(e,"x","reciprocal");return UD.runKernel("Reciprocal",{x:t})}}),vB=ZD({relu_:function(e){const t=KD(e,"x","relu");return UD.runKernel("Relu",{x:t})}}),kB=ZD({relu6_:function(e){const t=KD(e,"x","relu6");return UD.runKernel("Relu6",{x:t})}}),SB=ZD({reverse_:function(e,t){const n=KD(e,"x","reverse");return UD.runKernel("Reverse",{x:n},{dims:t})}}),IB=ZD({reverse1d_:function(e){const t=KD(e,"x","reverse");return j_(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),SB(t,0)}}),NB=ZD({reverse2d_:function(e,t){const n=KD(e,"x","reverse");return j_(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),SB(n,t)}}),CB=ZD({reverse3d_:function(e,t){const n=KD(e,"x","reverse");return j_(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),SB(n,t)}}),TB=ZD({reverse4d_:function(e,t){const n=KD(e,"x","reverse");return j_(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),SB(n,t)}}),EB=ZD({round_:function(e){const t=KD(e,"x","round");return UD.runKernel("Round",{x:t})}}),AB=ZD({rsqrt_:function(e){const t=KD(e,"x","rsqrt","float32");return UD.runKernel("Rsqrt",{x:t})}}),RB=ZD({selu_:function(e){const t=KD(e,"x","selu");return UD.runKernel("Selu",{x:t})}}),$B=ZD({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=KD(e,"x","separableConv2d"),u=KD(t,"depthwiseFilter","separableConv2d"),l=KD(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=YP(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");j_(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),j_(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),j_(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),j_(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),j_(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const p=u.shape[2],d=u.shape[3];j_(l.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`);const f=Fz(c,u,r,s,i,a),m=wz(f,l,1,"valid",i);return h?YP(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),_B=async function(e,t){const n=KD(e,"x","setdiff1d"),r=KD(t,"y","setdiff1d");j_(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),j_(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),j_(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let c=0;c<s.length;c++)i.has(s[c])||o++;const u=new vD([o],n.dtype),l=new vD([o],"int32");for(let c=0,h=0;c<s.length;c++)i.has(s[c])||(u.values[h]=s[c],l.values[h]=c,h++);return[u.toTensor(),l.toTensor()]},FB=ZD({sign_:function(e){const t=KD(e,"x","sign");return UD.runKernel("Sign",{x:t})}}),DB=ZD({sin_:function(e){const t=KD(e,"x","sin","float32");return UD.runKernel("Sin",{x:t})}}),OB=ZD({sinh_:function(e){const t=KD(e,"x","sinh");return UD.runKernel("Sinh",{x:t})}}),MB=ZD({slice1d_:function(e,t,n){const r=KD(e,"x","slice1d");return j_(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),nz(r,[t],[n])}}),PB=ZD({slice2d_:function(e,t,n){const r=KD(e,"x","slice2d");return j_(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),nz(r,t,n)}}),zB=ZD({slice3d_:function(e,t,n){const r=KD(e,"x","slice3d");return j_(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),nz(r,t,n)}}),LB=ZD({slice4d_:function(e,t,n){const r=KD(e,"x","slice4d");return j_(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),nz(r,t,n)}}),BB=ZD({softmax_:function(e,t=-1){const n=KD(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);return UD.runKernel("Softmax",{logits:n},{dim:t})}}),WB=ZD({fft_:function(e){return j_("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),UD.runKernel("FFT",{input:e})}}),VB=ZD({ifft_:function(e){return j_("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),UD.runKernel("IFFT",{input:e})}}),UB=ZD({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=YP(e,[n,t]);r=VB(s)}else{const s=[n,2*(t-1)],a=YP(xB(e),[n,t]),i=YP(pL(e),[n,t]),o=SB(nz(a,[0,1],[n,t-2]),1),u=cM(SB(nz(i,[0,1],[n,t-2]),1),mM(-1)),l=JP([a,o],1),c=JP([i,u],1),h=YP(QD(l,c),[s[0],s[1]]);r=VB(h)}if(r=xB(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=YP(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),GB=ZD({split_:function(e,t,n=0){const r=KD(e,"x","split");return UD.runKernel("SplitV",{x:r},{numOrSizeSplits:t,axis:n})}}),HB=ZD({rfft_:function(e,t){j_("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=nz(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=JP([e,zL(r)],e.shape.length-1),n=t}else s=e;const a=dM(s),i=YP(QD(s,a),[r,n]),o=WB(i),u=Math.floor(n/2)+1,l=xB(o),c=pL(o),h=GB(l,[u,n-u],l.shape.length-1),p=GB(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,YP(QD(h[0],p[0]),d)}}),jB=ZD({squaredDifference_:function(e,t){let n=KD(e,"a","squaredDifference"),r=KD(t,"b","squaredDifference");return[n,r]=PD(n,r),TM(n.shape,r.shape),UD.runKernel("SquaredDifference",{a:n,b:r},{})}}),qB=ZD({squeeze_:function(e,t){const n=KD(e,"x","squeeze","string_or_numeric");return YP(n,oF(n.shape,t).newShape)}}),KB=ZD({stack_:function(e,t=0){const n=XD(e,"tensors","stack","string_or_numeric");return j_(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&j_(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),UD.runKernel("Pack",n,{axis:t})}}),XB=ZD({step_:function(e,t=0){const n=KD(e,"x","step");return UD.runKernel("Step",{x:n},{alpha:t})}}),YB=ZD({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l=KD(e,"x","stridedSlice","string_or_numeric");return UD.runKernel("StridedSlice",{x:l},{begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u})}}),ZB=ZD({tan_:function(e){const t=KD(e,"x","tan","float32");return UD.runKernel("Tan",{x:t})}});function QB(e,t){K_(e);const n=jD(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return JD(e,null,n,t)}function JB(e,t,n){if(K_(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=jD(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return JD(e,t,r,n)}function eW(e,t,n){if(K_(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=jD(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return JD(e,t,r,n)}function tW(e,t,n){if(K_(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=jD(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return JD(e,t,r,n)}function nW(e,t,n){if(K_(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=jD(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return JD(e,t=t||r,r,n)}function rW(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let i=0;i<s;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==e[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${e[i+s]})`)}function sW(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}rW(n,t,e)}function aW(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let u=s;u<a;++u)i*=n[u];const o=s<1?1:s;return{sliceRank:s,numUpdates:X_(t.shape)/o,sliceSize:i,strides:[...vF(n.slice(0,s)),1],outputSize:X_(n)}}const iW=ZD({tensorScatterUpdate_:function(e,t,n){const r=KD(e,"tensor","tensorScatterupdate"),s=KD(t,"indices","tensorScatterupdate","int32"),a=KD(n,"updates","tensorScatterupdate");if(sW(a,s,r.shape),r.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${a.dtype}.`);return UD.runKernel("TensorScatterUpdate",{tensor:r,indices:s,updates:a},{})}}),oW=ZD({topk_:function(e,t=1,n=!0){const r=KD(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error("'k' passed to topk() must be >= 0 but got "+t);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+t);const a={x:r},i={k:t,sorted:n},[o,u]=UD.runKernel("TopK",a,i);return{values:o,indices:u}}}),uW=ZD({truncatedNormal_:function(e,t=0,n=1,r,s){if(TF(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new cB(t,n,r,!0,s),i=rM(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),lW=ZD({unique_:function(e,t=0){const n=KD(e,"x","unique","string_or_numeric");j_(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},s={axis:t},[a,i]=UD.runKernel("Unique",r,s);return{values:a,indices:i}}}),cW=ZD({unsortedSegmentSum_:function(e,t,n){const r=KD(e,"x","unsortedSegmentSum"),s=KD(t,"segmentIds","unsortedSegmentSum","int32");return j_(J_(n),()=>"numSegments must be of dtype int"),UD.runKernel("UnsortedSegmentSum",{x:r,segmentIds:s},{numSegments:n})}}),hW=ZD({unstack_:function(e,t=0){const n=KD(e,"x","unstack","string_or_numeric");return j_(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),UD.runKernel("Unpack",{value:n},{axis:t})}});function pW(e,t){return _L(e,t,"right")}function dW(e,t=!0,n,r){return UD.makeVariable(e,t,n,r)}function fW(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const r=rM(e,"int32"),s=rM([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=r.indexToLoc(n[a]);s.values.set(t,a*e.length)}return s.toTensor()}const mW=async function(e){const t=KD(e,"condition","whereAsync","bool"),n=await t.data(),r=fW(t.shape,n);return e!==t&&t.dispose(),r},gW=async function(e,t,n){const r=KD(e,"tensor","boolMask"),s=KD(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;j_(i>0,()=>"mask cannot be scalar"),q_(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let m=a;m<a+i;m++)u*=o[m];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=YP(r,l),h=YP(s,[-1]),p=await mW(h),d=qB(p,[1]),f=lL(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},yW=ZD({transpose_:function(e,t,n){const r=KD(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),j_(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{j_(e>=0&&e<r.rank,()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+" but got "+t)}),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?sO(()=>{let e=xB(r),t=pL(r);return e=UD.runKernel("Transpose",{x:e},a),t=UD.runKernel("Transpose",{x:t},a),n&&(t=SL(t)),QD(e,t)}):UD.runKernel("Transpose",s,a)}}),bW=ZD({movingAverage_:function(e,t,n,r,s=!0){const a=KD(e,"v","movingAverage"),i=KD(t,"x","movingAverage"),o=KD(n,"decay","movingAverage");var u,l;j_((u=a).dtype===(l=i).dtype,()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`),j_(Q_(a.shape,i.shape),()=>"Shape mismatch in v and x");const c=mM(1),h=SM(c,o);let p=cM(SM(i,a),h);if(s){j_(null!=r,()=>"When using zeroDebias: true, step is required.");const e=KD(r,"step","movingAverage");p=lM(p,SM(c,kM(o,e)))}return oM(a,p)}}),xW=ZD({scatterND_:function(e,t,n){TF(n);const r=KD(e,"indices","scatterND","int32"),s=KD(t,"updates","scatterND");return sW(s,r,n),UD.runKernel("ScatterNd",{indices:r,updates:s},{shape:n})}}),wW=ZD({sparseToDense_:function(e,t,n,r=0){TF(n);const s=KD(e,"sparseIndices","sparseToDense","int32"),a=KD(t,"sparseValues","sparseToDense","string_or_numeric"),i=KD(r,"defaultValue","sparseToDense",a.dtype);return function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);if(0!==t.rank&&(1!==t.rank||t.size!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),UD.runKernel("SparseToDense",{sparseIndices:s,sparseValues:a,defaultValue:i},{outputShape:n})}}),vW=ZD({gatherND_:function(e,t){const n=KD(t,"indices","gatherND","int32"),r=KD(e,"x","gatherND","string_or_numeric");return UD.runKernel("GatherNd",{params:r,indices:n})}}),kW=ZD({dropout_:function(e,t,n,r){const s=KD(e,"x","dropout");if(j_("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),j_(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof ND?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(Q_(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)n.push(null==t[r]&&null!=e.shape[r]?e.shape[r]:t[r]);return n}return t}(s,n),i=1-t,o=lM(uL(oM(gB(a,0,1,"float32",r),i)),i);return cM(s,o)}});function SW(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function IW(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return QB(s,"float32")}const NW=async function(e,t,n=1){const r=KD(e,"predictions","inTopK"),s=KD(t,"targets","inTopK");j_(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),j_(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),q_(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];j_(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=uF("bool",u);for(let h=0;h<u;h++){const e=h*l,t=i.subarray(e,e+l),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort((e,t)=>t.value-e.value),c[h]=0;for(let s=0;s<n;s++)if(r[s].index===o[h]){c[h]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),eO(c,s.shape,"bool")},CW=ZD({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=YP(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=YP(t,[1,t.shape[0],t.shape[1],t.shape[2]])),j_(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),j_(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),j_(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];return j_(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),j_(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),XP("conv2dDerFilter",s,i),UD.runKernel("Conv2DBackpropFilter",{x:o,dy:u},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n})}});function TW(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return cM(e,XB(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function EW(e,t){let n=t;const r=CM(e.shape,t.shape);return r.length>0&&(n=eL(n,r)),YP(n,e.shape)}function AW(e,t,n,r){if("linear"===t)return e;if("relu"===t)return vB(e);if("elu"===t)return Wz(e);if("relu6"===t)return kB(e);if("prelu"===t)return sB(e,n);if("leakyrelu"===t)return gL(e,r);if("sigmoid"===t)return tz(e);throw new Error(`Unknown fused activation ${t}.`)}const RW=(e,t)=>!(e>0)||"linear"===t,$W=ZD({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===RW(UD.state.gradientDepth,u=u||"linear")){j_("NHWC"===s,()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let h=wz(e,t,n,r,s,a,i);return null!=o&&(h=oM(h,o)),AW(h,u,l,c)}const h=KD(e,"x","conv2d","float32"),p=KD(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=YP(h,[1,h.shape[0],h.shape[1],h.shape[2]])),j_(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),j_(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+p.rank+"."),XP("fused conv2d",r,i);const m="NHWC"===s?d.shape[3]:d.shape[1];j_(p.shape[2]===m,()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`),j_(jP(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const g=zP(d.shape,p.shape,n,a,r,i);let y,b;if(null!=o&&(y=KD(o,"bias","fused conv2d"),[y]=PD(y,h),"NHWC"===s?TM(g.outShape,y.shape):(j_(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),j_(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`))),null!=l){const e=l.shape;if(j_(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)j_(1===e[0]||e[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`);else if(3===e.length)try{TM(e,g.outShape)}catch(k){throw Error(`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`)}b=KD(l,"prelu weights","fused conv2d")}const x=(e,t)=>{j_("NHWC"===s,()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[i,o,l,c]=t,h=TW(e,l,u);j_(HP(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const p=[kz(o.shape,h,i,n,r),CW(o,h,i.shape,n,r)];if(null!=c){const e=EW(c,h);p.push(e)}return p},w={x:d,filter:p,bias:y,preluActivationWeights:b},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?fM((e,t,n)=>{let r=UD.runKernel("FusedConv2D",w,v);return n([t,e,r]),f&&(r=YP(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}})(d,p):fM((e,t,n,r)=>{let s=UD.runKernel("FusedConv2D",w,v);return r([t,e,s,n]),f&&(s=YP(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}})(d,p,y)}}),_W=ZD({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=YP(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;return 3===u.rank&&(u=YP(t,[1,t.shape[0],t.shape[1],t.shape[2]])),UD.runKernel("DepthwiseConv2dNativeBackpropFilter",{x:o,dy:u},{strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n})}}),FW=ZD({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=YP(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l=UD.runKernel("DepthwiseConv2dNativeBackpropInput",{dy:o,filter:n},{strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e});return u?YP(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),DW=ZD({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===RW(UD.state.gradientDepth,u)){let h=Fz(e,t,n,r,s,a,i);return null!=o&&(h=oM(h,o)),AW(h,u,l,c)}const h=KD(e,"x","depthwiseConv2d","float32"),p=KD(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=YP(h,[1,h.shape[0],h.shape[1],h.shape[2]])),j_(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),j_(4===p.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`),j_(d.shape[3]===p.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`),null==a&&(a=[1,1]),j_(jP(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),XP("fused depthwiseConv2d",r,i);const m=zP(d.shape,p.shape,n,a,r,i,!0);let g,y;null!=o&&(g=KD(o,"bias","fused conv2d"),[g]=PD(g,h),TM(m.outShape,g.shape)),null!=l&&(y=KD(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{j_(HP(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[s,o,l,c]=t,h=TW(e,l,u),p=FW(o.shape,h,s,n,r,a,i),d=_W(o,h,s.shape,n,r,a,i);return null!=c?[p,d,EW(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};return null==o?fM((e,t,n)=>{let r=UD.runKernel("FusedDepthwiseConv2D",x,w);return n([t,e,r]),f&&(r=YP(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p):fM((e,t,n,r)=>{let s=UD.runKernel("FusedDepthwiseConv2D",x,w);return r([t,e,s,n]),f&&(s=YP(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p,g)}}),OW=ZD({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===RW(UD.state.gradientDepth,a)){let u=ez(e,t,n,r);return null!=s&&(u=oM(u,s)),AW(u,a,i,o)}let u=KD(e,"a","fused matMul"),l=KD(t,"b","fused matMul");[u,l]=PD(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],p=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=X_(f),y=X_(m);j_(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const b=TM(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([p,d]),x=YP(u,n?[g,c,p]:[g,p,c]),w=YP(l,r?[y,d,h]:[y,h,d]);let v,k;null!=s&&(v=KD(s,"bias","fused matMul"),[v]=PD(v,u),TM(b,v.shape)),null!=i&&(k=KD(i,"prelu weights","fused matMul"));const S=(e,t)=>{const[i,o,u,l]=t,c=TW(YP(e,u.shape),u,a);let h,p;return n||r?!n&&r?(h=ez(c,o,!1,!1),p=ez(c,i,!0,!1)):n&&!r?(h=ez(o,c,!1,!0),p=ez(i,c,!1,!1)):(h=ez(o,c,!0,!0),p=ez(c,i,!0,!0)):(h=ez(c,o,!1,!0),p=ez(i,c,!0,!1)),null!=s?[h,p,EW(l,c)]:[h,p]},I={a:x,b:w,bias:v,preluActivationWeights:k},N={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};return null==s?fM((e,t,n)=>{const r=UD.runKernel("_FusedMatMul",I,N);return n([e,t,r]),{value:YP(r,b),gradFunc:S}})(x,w):fM((e,t,n,r)=>{const s=UD.runKernel("_FusedMatMul",I,N);return r([e,t,s,n]),{value:YP(s,b),gradFunc:S}})(x,w,v)}}),MW=ZD({hammingWindow_:function(e){return IW(e,.54,.46)}}),PW=ZD({hannWindow_:function(e){return IW(e,.5,.5)}}),zW=ZD({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(nz(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=JP([nz(e,a,t-r),vM([r],s)]);i.push(o),a+=n}return 0===i.length?JB([],[0,t]):YP(JP(i),[i.length,t])}}),LW=ZD({stft_:function(e,t,n,r,s=PW){null==r&&(r=SW(t));const a=zW(e,t,n),i=cM(a,s(t));return HB(i,r)}}),BW=ZD({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=KD(e,"image","cropAndResize"),o=KD(t,"boxes","cropAndResize","float32"),u=KD(n,"boxInd","cropAndResize","int32"),l=o.shape[0];return j_(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),j_(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`),j_(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`),j_(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),j_(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),j_("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),UD.runKernel("CropAndResize",{image:i,boxes:o,boxInd:u},{method:s,extrapolationValue:a,cropSize:r})}}),WW=ZD({flipLeftRight_:function(e){const t=KD(e,"image","flipLeftRight","float32");return j_(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),UD.runKernel("FlipLeftRight",{image:t},{})}}),VW=ZD({grayscaleToRGB_:function(e){const t=KD(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];j_(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),j_(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,iL(t,s)}}),UW=ZD({rgbToGrayscale_:function(e){const t=KD(e,"image","RGBToGrayscale"),n=t.shape[t.rank-1];j_(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),j_(3===n,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${n}.`);const r=t.dtype,s=sM(t,"float32"),a=QB([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Bz("ij,j->i",s,a);break;case 3:i=Bz("ijk,k->ij",s,a);break;case 4:i=Bz("ijkl,l->ijk",s,a);break;case 5:i=Bz("ijklm,m->ijkl",s,a);break;case 6:i=Bz("ijklmn,n->ijklm",s,a);break;default:throw new Error("Not a valid tensor rank.")}return i=sL(i,-1),sM(i,r)}}),GW=ZD({rotateWithOffset_:function(e,t,n=0,r=.5){const s=KD(e,"image","rotateWithOffset","float32");return j_(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`),UD.runKernel("RotateWithOffset",{image:s},{radians:t,fillValue:n,center:r})}});function HW(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),j_(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),j_(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),j_(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),j_(1===t.rank,()=>"scores must be a 1D tensor"),j_(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+t.shape[0]),j_(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const jW=ZD({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=KD(e,"boxes","nonMaxSuppression","float32"),i=KD(t,"scores","nonMaxSuppression","float32"),o=HW(a,i,n,r,s);return UD.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold})}});function qW(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||KW)}(e,t,n);e.splice(r<0?-(r+1):r,0,t)}function KW(e,t){return e>t?1:e<t?-1:0}function XW(e,t,n,r,s){return QW(e,t,n,r,s,0)}function YW(e,t,n,r,s,a){return QW(e,t,n,r,s,0,!1,a,!0)}function ZW(e,t,n,r,s,a){return QW(e,t,n,r,s,a,!0)}function QW(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let g=0;g<t.length;g++)t[g]>s&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(tV);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let u=h.length-1;u>=i;--u){const n=JW(e,a,h[u]);if(n>=r){o=!0;break}if(t.score=t.score*eV(r,c,n),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&qW(l,t,tV))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),u&&(m.validOutputs=d),m}function JW(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function eV(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function tV(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const nV=ZD({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=KD(e,"boxes","nonMaxSuppression"),o=KD(t,"scores","nonMaxSuppression"),u=HW(i,o,n,r,s,a),l=UD.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},{maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma});return{selectedIndices:l[0],selectedScores:l[1]}}}),rV=ZD({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=KD(e,"boxes","nonMaxSuppression"),o=KD(t,"scores","nonMaxSuppression"),u=HW(i,o,n,r,s,null),l=UD.runKernel("NonMaxSuppressionV4",{boxes:i,scores:o},{maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:l[0],validOutputs:l[1]}}}),sV=ZD({resizeBilinear_:function(e,t,n=!1,r=!1){const s=KD(e,"images","resizeBilinear");j_(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),j_(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."),j_(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=YP(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=UD.runKernel("ResizeBilinear",{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?YP(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),aV=ZD({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=KD(e,"images","resizeNearestNeighbor");j_(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),j_(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),j_("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),j_(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=YP(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=UD.runKernel("ResizeNearestNeighbor",{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?YP(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),iV=ZD({threshold_:function(e,t="binary",n=!1,r=.5){const s=KD(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,o,u,l,c=cM(QB([r]),255);if(j_(3===s.rank,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),j_(3===s.shape[2]||1===s.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),j_("int32"===s.dtype||"float32"===s.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),j_("otsu"===t||"binary"===t,()=>"Method must be binary or otsu, but was "+t),3===s.shape[2]){[i,o,u]=GB(s,[1,1,1],-1);const e=cM(i,.2989),t=cM(o,.587),n=cM(u,.114);l=oM(oM(e,t),n)}else l=e;"otsu"===t&&(c=function(e,t){let n,r,s,a,i,o,u=QB([-1]),l=QB([0]),c=QB([0]);for(let h=0;h<e.size-1;h++){n=nz(e,0,h+1),r=nz(e,h+1),i=lM(eL(n),t),o=lM(eL(r),t);const p=eL(cM(n,bB(0,n.size)));s=lM(p,eL(n));const d=vM(r.shape,n.size),f=oM(bB(0,r.size),d),m=cM(r,f);a=lM(eL(m),eL(r));const g=SM(s,a),y=SM(s,a),b=cM(i,o);c=cM(cM(b,g),y);const x=cL(c,l);l=Pz(x,c,l),u=Pz(x,QB([h]),u)}return u}(cz(sM(EB(l),"int32"),eO([]),256),a));const h=n?bL(l,c):cL(l,c);return sM(cM(h,255),"int32")}}),oV=ZD({transform_:function(e,t,n="nearest",r="constant",s=0,a){const i=KD(e,"image","transform","float32"),o=KD(t,"transforms","transform","float32");return j_(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),j_(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),j_(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`),UD.runKernel("Transform",{image:i,transforms:o},{interpolation:n,fillMode:r,fillValue:s,outputShape:a})}}),uV=ZD({bandPart_:function(e,t,n){const r=KD(e,"a","bandPart");j_(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);let o,u;"number"==typeof t?(j_(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),j_(t<=a,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`),o=KD(t<0?a:t,"numLower","bandPart")):(j_("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),o=Pz(yL(t,0),a,WL(t,a))),"number"==typeof n?(j_(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`),j_(n<=i,()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`),u=KD(n<0?i:n,"numUpper","bandPart")):(j_("int32"===n.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),u=Pz(yL(n,0),i,WL(n,i)));const l=YP(bB(0,a,1,"int32"),[-1,1]),c=bB(0,i,1,"int32"),h=SM(l,c),p=EL(bL(h,o),hL(h,SL(u))),d=zL([a,i],r.dtype);return YP(KB(hW(YP(r,[-1,a,i])).map(e=>Pz(p,e,d))),s)}}),lV=ZD({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,j_(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)j_(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=GB(e,e.shape[0],0).map(e=>qB(e,[0]));j_(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let s=0;s<e.length;++s)n.push(UD.tidy(()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=cM(eL(cM(n[t],e)),n[t]);e=SM(e,r)}return lM(e,tL(e,"euclidean"))}));return t?KB(n,0):n}});function cV(e,t=!1){return UD.tidy(()=>{j_(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=oL(n),a=aM(e);const i=JB([[1]],[1,1]);let o=aM(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=o,l=s;[o,a,s]=UD.tidy(()=>{const t=nz(a,[e,e],[n-e,1]),u=tL(t),l=nz(a,[e,e],[1,1]),c=Pz(cL(l,0),JB([[-1]]),JB([[1]])),h=SM(l,cM(c,u)),p=lM(t,h);o=1===p.shape[0]?aM(i):JP([i,nz(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=SL(lM(ez(c,h),u)),f=nz(a,[e,0],[n-e,r]),m=cM(d,o),g=yW(o);if(0===e)a=SM(f,ez(m,ez(g,f)));else{const t=SM(f,ez(m,ez(g,f)));a=JP([nz(a,[0,0],[e,r]),t],0)}const y=yW(m),b=nz(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=SM(b,ez(ez(b,o),y));else{const t=SM(b,ez(ez(b,o),y));s=JP([nz(s,[0,0],[n,e]),t],1)}return[o,a,s]}),aO([t,u,l])}return!t&&n>r&&(s=nz(s,[0,0],[n,r]),a=nz(a,[0,0],[r,r])),[s,a]})}const hV=ZD({qr_:function(e,t=!1){if(j_(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return cV(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=hW(YP(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach(e=>{const[n,r]=cV(e,t);s.push(n),a.push(r)}),[YP(KB(s,0),e.shape),YP(KB(a,0),e.shape)]}}});var pV;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(pV||(pV={}));const dV=ZD({computeWeightedLoss_:function(e,t,n=pV.SUM_BY_NONZERO_WEIGHTS){const r=KD(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=KD(t,"weights","computeWeightedLoss"));const a=null==s?r:cM(r,s);if(n===pV.NONE)return a;if(n===pV.SUM)return eL(a);if(n===pV.MEAN){if(null==s)return PL(a);{const e=r.size/s.size,t=lM(eL(a),eL(s));return e>1?lM(t,mM(e)):t}}if(n===pV.SUM_BY_NONZERO_WEIGHTS){if(null==s)return lM(eL(a),mM(r.size));{const e=cM(s,LL(r.shape)),t=sM(eL(qL(e,mM(0))),"float32");return lM(eL(a),t)}}throw Error("Unknown reduction: "+n)}}),fV=ZD({absoluteDifference_:function(e,t,n,r=pV.SUM_BY_NONZERO_WEIGHTS){const s=KD(e,"labels","absoluteDifference"),a=KD(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=KD(n,"weights","absoluteDifference")),q_(s.shape,a.shape,"Error in absoluteDifference: ");const o=IM(SM(s,a));return dV(o,i,r)}}),mV=ZD({cosineDistance_:function(e,t,n,r,s=pV.SUM_BY_NONZERO_WEIGHTS){const a=KD(e,"labels","cosineDistance"),i=KD(t,"predictions","cosineDistance");let o=null;null!=r&&(o=KD(r,"weights","cosineDistance")),q_(a.shape,i.shape,"Error in cosineDistance: ");const u=mM(1),l=SM(u,eL(cM(a,i),n,!0));return dV(l,o,s)}}),gV=ZD({hingeLoss_:function(e,t,n,r=pV.SUM_BY_NONZERO_WEIGHTS){let s=KD(e,"labels","hingeLoss");const a=KD(t,"predictions","hingeLoss");let i=null;null!=n&&(i=KD(n,"weights","hingeLoss")),q_(s.shape,a.shape,"Error in hingeLoss: ");const o=mM(1);s=SM(cM(mM(2),s),o);const u=vB(SM(o,cM(s,a)));return dV(u,i,r)}}),yV=ZD({huberLoss_:function(e,t,n,r=1,s=pV.SUM_BY_NONZERO_WEIGHTS){const a=KD(e,"labels","huberLoss"),i=KD(t,"predictions","huberLoss");let o=null;null!=n&&(o=KD(n,"weights","huberLoss")),q_(a.shape,i.shape,"Error in huberLoss: ");const u=mM(r),l=IM(SM(i,a)),c=WL(l,u),h=SM(l,c),p=oM(cM(mM(.5),pM(c)),cM(u,h));return dV(p,o,s)}}),bV=ZD({logLoss_:function(e,t,n,r=1e-7,s=pV.SUM_BY_NONZERO_WEIGHTS){const a=KD(e,"labels","logLoss"),i=KD(t,"predictions","logLoss");let o=null;null!=n&&(o=KD(n,"weights","logLoss")),q_(a.shape,i.shape,"Error in logLoss: ");const u=mM(1),l=mM(r),c=SL(cM(a,vL(oM(i,l)))),h=cM(SM(u,a),vL(oM(SM(u,i),l))),p=SM(c,h);return dV(p,o,s)}}),xV=ZD({meanSquaredError_:function(e,t,n,r=pV.SUM_BY_NONZERO_WEIGHTS){const s=KD(e,"labels","meanSquaredError"),a=KD(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=KD(n,"weights","meanSquaredError")),q_(s.shape,a.shape,"Error in meanSquaredError: ");const o=jB(s,a);return dV(o,i,r)}}),wV=ZD({sigmoidCrossEntropy_:function(e,t,n,r=0,s=pV.SUM_BY_NONZERO_WEIGHTS){let a=KD(e,"multiClassLabels","sigmoidCrossEntropy");const i=KD(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=KD(n,"weights","sigmoidCrossEntropy")),q_(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=mM(r),t=mM(1),n=mM(.5);a=oM(cM(a,SM(t,e)),cM(n,e))}const u=function(e,t){const n=KD(e,"labels","sigmoidCrossEntropyWithLogits"),r=KD(t,"logits","sigmoidCrossEntropyWithLogits");q_(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=vB(r),a=cM(r,n),i=kL(rL(SL(IM(r))));return oM(SM(s,a),i)}(a,i);return dV(u,o,s)}}),vV=ZD({softmaxCrossEntropy_:function(e,t,n,r=0,s=pV.SUM_BY_NONZERO_WEIGHTS){let a=KD(e,"onehotLabels","softmaxCrossEntropy");const i=KD(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=KD(n,"weights","softmaxCrossEntropy")),q_(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=mM(r),t=mM(1),n=mM(a.shape[1]);a=oM(cM(a,SM(t,e)),lM(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return fM((e,t,r)=>{const s=TL(t,[n],!0),a=SM(sM(t,"float32"),s);r([e,a]);const i=SL(cM(a,e));return{value:eL(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=qz(e.shape,[n]);return[cM(YP(e,a),SM(sM(r,"float32"),rL(s))),cM(YP(e,a),SM(rL(s),sM(r,"float32")))]}}})(e,t)}(a,i);return dV(u,o,s)}}),kV={fft:WB,ifft:VB,rfft:HB,irfft:UB},SV={hammingWindow:MW,hannWindow:PW,frame:zW,stft:LW},IV={flipLeftRight:WW,grayscaleToRGB:VW,resizeNearestNeighbor:aV,resizeBilinear:sV,rgbToGrayscale:UW,rotateWithOffset:GW,cropAndResize:BW,nonMaxSuppression:jW,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=KD(e,"boxes","nonMaxSuppressionAsync"),i=KD(t,"scores","nonMaxSuppressionAsync"),o=HW(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=XW(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),QB(h,"int32")},nonMaxSuppressionWithScore:nV,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=KD(e,"boxes","nonMaxSuppressionAsync"),o=KD(t,"scores","nonMaxSuppressionAsync"),u=HW(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:p,selectedScores:d}=ZW(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:QB(p,"int32"),selectedScores:QB(d)}},nonMaxSuppressionPadded:rV,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=KD(e,"boxes","nonMaxSuppressionAsync"),o=KD(t,"scores","nonMaxSuppressionAsync"),u=HW(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=YW(p,d,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:QB(f,"int32"),validOutputs:mM(m,"int32")}},threshold:iV,transform:oV},NV={bandPart:uV,gramSchmidt:lV,qr:hV},CV={absoluteDifference:fV,computeWeightedLoss:dV,cosineDistance:mV,hingeLoss:gV,huberLoss:yV,logLoss:bV,meanSquaredError:xV,sigmoidCrossEntropy:wV,softmaxCrossEntropy:vV},TV={sparseFillEmptyRows:ZD({sparseFillEmptyRows_:function(e,t,n,r){const s=KD(e,"indices","sparseFillEmptyRows","int32"),a=KD(t,"values","sparseFillEmptyRows"),i=KD(n,"denseShape","sparseFillEmptyRows","int32"),o=KD(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error("Indices should be Tensor2D but received shape\n        "+s.shape);if(1!==a.rank)throw new Error("Values should be Tensor1D but received shape "+a.shape);if(1!==i.rank)throw new Error("Dense shape should be Tensor1D but received shape "+i.shape);if(0!==o.rank)throw new Error("Default value should be a scalar but received shape "+o.shape);const u=UD.runKernel("SparseFillEmptyRows",{indices:s,values:a,denseShape:i,defaultValue:o});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:ZD({sparseReshape_:function(e,t,n){const r=KD(e,"inputIndices","sparseReshape","int32"),s=KD(t,"inputShape","sparseReshape","int32"),a=KD(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error("Input indices should be Tensor2D but received shape\n        "+r.shape);if(1!==s.rank)throw new Error("Input shape should be Tensor1D but received shape "+s.shape);if(1!==a.rank)throw new Error("New shape should be Tensor1D but received shape "+a.shape);const i=UD.runKernel("SparseReshape",{inputIndices:r,inputShape:s,newShape:a});return{outputIndices:i[0],outputShape:i[1]}}}),sparseSegmentMean:ZD({sparseSegmentMean_:function(e,t,n){const r=KD(e,"data","sparseSegmentMean"),s=KD(t,"indices","sparseSegmentMean","int32"),a=KD(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n          "+s.shape);if(1!==a.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          "+a.shape);return UD.runKernel("SparseSegmentMean",{data:r,indices:s,segmentIds:a})}}),sparseSegmentSum:ZD({sparseSegmentSum_:function(e,t,n){const r=KD(e,"data","sparseSegmentSum"),s=KD(t,"indices","sparseSegmentSum","int32"),a=KD(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n         "+s.shape);if(1!==a.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         "+a.shape);return UD.runKernel("SparseSegmentSum",{data:r,indices:s,segmentIds:a})}})},EV={stringNGrams:ZD({stringNGrams_:function(e,t,n,r,s,a,i,o){const u=KD(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error("Data must be a vector, saw: "+u.shape);const l=KD(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c=UD.runKernel("StringNGrams",{data:u,dataSplits:l},{separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:i,preserveShortSequences:o});return{nGrams:c[0],nGramsSplits:c[1]}}}),stringSplit:ZD({stringSplit_:function(e,t,n=!0){const r=KD(e,"input","stringSplit","string"),s=KD(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error("Input should be Tensor1D but received shape "+r.shape);if(0!==s.rank)throw new Error("Delimiter should be a scalar but received shape "+s.shape);const a=UD.runKernel("StringSplit",{input:r,delimiter:s},{skipEmpty:n});return{indices:a[0],values:a[1],shape:a[2]}}}),stringToHashBucketFast:ZD({stringToHashBucketFast_:function(e,t){const n=KD(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return UD.runKernel("StringToHashBucketFast",{input:n},r)}}),staticRegexReplace:ZD({staticRegexReplace_:function(e,t,n,r=!0){const s=KD(e,"input","staticRegexReplace","string");return UD.runKernel("StaticRegexReplace",{x:s},{pattern:t,rewrite:n,replaceGlobal:r})}})};function AV(e,t){const n=e[0].length;e.forEach((e,t)=>{j_(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),j_(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,s)=>{for(let a=0;a<n;a++)j_(a===t||e[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function RV(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var $V;function _V(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],i=r[r.length-n.length+s],o=r[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${o}`)}else r[i]=a}return r}function FV(e){const t={FIRST_DIM_SIZE:$V.FIRST_DIM_SIZE,VALUE_ROWIDS:$V.VALUE_ROWIDS,ROW_LENGTHS:$V.ROW_LENGTHS,ROW_SPLITS:$V.ROW_SPLITS,ROW_LIMITS:$V.ROW_LIMITS,ROW_STARTS:$V.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function DV(e){return 0===e.length?0:e[0]===$V.FIRST_DIM_SIZE?e.length-1:e.length}function OV(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}($V||($V={}));const MV=30;function PV(e){return e<=MV?e:wF(e,Math.floor(Math.sqrt(e)))}function zV(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function LV(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function BV(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function WV(e,t,n,r=!0){const s=[];s.push(r?e[0]/n:e[0]*n);for(let a=1;a<e.length;++a)s.push(a<=t.length?r?t[a-1]*e[a]:e[a]/t[a-1]:e[a]);return s}function VV(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function UV(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function GV(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===X_(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let h=0;h<s.length-1;++h)i*=s[h];const o=e.shape,u=s.slice();u.pop();let l=1;for(let h=a;h<n;++h)l*=o[h],u.push(o[h]);const c=[...vF(e.shape).map(e=>e/l),1].slice(0,a);return[u,i,l,c]}const HV=1.7580993408473768,jV=1.0507009873554805,qV=.3275911,KV=.254829592,XV=-.284496736,YV=1.421413741,ZV=-1.453152027,QV=1.061405429;function JV(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function eU(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function tU(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function nU(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function rU(e,t){return{real:e[2*t],imag:e[2*t+1]}}function sU(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function aU(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function iU(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const oU=/->/g;function uU(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(oU,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split("->");j_(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const a=r.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let h=0;h<s.length;++h){const e=s[h];if(!a.some(t=>-1!==t.indexOf(e)))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let h=0;h<r.length;++h){const e=r[h];-1===o.indexOf(e)&&","!==e&&o.push(e)}const u=new Array(a.length);for(let h=0;h<i;++h){if(new Set(a[h].split("")).size!==a[h].length)throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);u[h]=[];for(let e=0;e<a[h].length;++e)u[h].push(o.indexOf(a[h][e]))}const l=o.length,c=[];for(let h=s.length;h<l;++h)c.push(h);return{allDims:o,summedDims:c,idDims:u}}function lU(e,t){let n=new Array(e);n.fill(-1);for(let s=0;s<t.length;++s)n[t[s]]=s;const r=[];for(let s=0;s<e;++s)-1===n[s]&&r.push(s);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:r}}function cU(e,t,n){const r=new Array(e);for(let s=0;s<n.length;++s){const e=n[s].shape;for(let n=0;n<t[s].length;++n)void 0===r[t[s][n]]?r[t[s][n]]=e[n]:j_(r[t[s][n]]===e[n],()=>`Expected dimension ${r[t[s][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension `+e[n])}}function hU(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let i=0;i<s;++i)r.push([]);const a=[];for(let i=0;i<n.length;++i){const e=dU(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(r[i].push(t),a.push(t))}return{path:n,steps:r}}function pU(e){return e.every((e,t)=>e===t)}function dU(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function fU(e,t,n=0){let r=[];if("number"==typeof t)j_(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{j_(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}j_(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function mU(e){return"Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = "+e}function gU(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function yU(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function bU(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function xU(e,t){return`size ${e} must be non-negative, not ${t}`}function wU(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function vU(e,t){return`Input to reshape is a SparseTensor with ${X_(e)}\n  dense values, but the requested shape requires a multiple of ${X_(t)}. inputShape=${e} outputShape= ${t}`}function kU(e,t){return`Input to reshape is a tensor with ${X_(e)} dense values, but the requested shape has ${X_(t)}. inputShape=${e} outputShape=${t}`}function SU(){return"segment ids must be >= 0"}function IU(){return"segment ids are not increasing"}function NU(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function CU(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function TU(e,t){let n,r=!1;for(e<=MV?(n=e,r=!0):n=wF(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=wF(e,n+1);return n}function EU(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)r.push(a!==t?e[a]:n);return r}function AU(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let h=0;h<r;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let h=0;h<r;++h)o.push(e.shape[h]),u*=e.shape[h];for(let h=r;h<n;h++)o.push(e.shape[h]),l*=e.shape[h];for(let h=r;h<s;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function RU(e){try{return e.map(e=>pD(e))}catch(K1){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+K1)}}function $U(e){return e.map(e=>hD(e))}var _U,FU;!function(){for(const e of RM)xM(e)}(),FF().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(_U||(_U={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(FU||(FU={}));const DU={};function OU(e){return DU[e]}function MU(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return PU(t.inputNames[o],n,r,s);if("tensors"===a.type){const a=t.inputs.slice(e,i);return t.inputNames.slice(e,i).filter((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)}).map(e=>PU(e,n,r,s))}const u=PU(t.inputNames[o],n,r,s),l=u.dataSync();return"number"===a.type?l[0]:P.toNestedArray(u.shape,l)}const i=t.attrParams[e];return i&&i.value}function PU(e,t,n,r){const[s,a]=WU(e,n);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find(e=>!!t[BU(s,e)]);return void 0!==i?t[BU(s,i)][a]:void 0}function zU(e,t,n){return t[BU(e,n.currentContextId)]}function LU(e,t){const[n,r,s]=WU(e,t);return[BU(n,t&&t.currentContextId),r,s]}function BU(e,t){return t?`${e}-${t}`:e}function WU(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const r=e.split(":");let s;if(1===r.length)s=[e,0,void 0];else{const e=3===r.length?r[1]:void 0;s=[r[0],Number(r[r.length-1]),e]}return n&&t.parseNodeNameCache.set(e,s),s}function VU(e,t,n){let r=MU("pad",e,t,n);if("explicit"===r){r=MU("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function UU(e){return e.kept?e:aM(e)}const GU=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],HU=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],jU=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],qU=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],KU=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],XU=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],YU=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],ZU=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],QU=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],JU=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],eG=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],tG=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],nG=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],rG=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],sG=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],aG=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],iG=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],oG=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],uG=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class lG{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[j,q,K,X,Y,Z,Q,J,ee,te,ne,re,se,ae,ie,oe,ue,le,ce].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=[],r=[],s=[],a=e.node.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e),{});let i=[];const o=[];let u={},l={};null!=t&&(u=this.mapSignatureEntries(t.inputs),l=this.mapSignatureEntries(t.outputs));const c=Object.keys(a);c.forEach(e=>{const t=a[e];t.inputNames.forEach((e,n)=>{const[r,,s]=LU(e),i=a[r];if(null!=i.outputs){const e=i.outputs.indexOf(s);-1!==e&&(t.inputNames[n]=`${r}:${e}`)}t.inputs.push(i),i.children.push(t)})}),0===Object.keys(l).length?c.forEach(e=>{const t=a[e];0===t.children.length&&o.push(t)}):Object.keys(l).forEach(e=>{const[t]=LU(e),n=a[t];null!=n&&(n.signatureKey=l[e],o.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{const[t]=LU(e),n=a[t];n&&(n.signatureKey=u[e],i.push(n))}):i=n;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const p={nodes:a,inputs:i,outputs:o,weights:r,placeholders:n,signature:t,functions:h};return s.length>0&&(p.initNodes=s),p}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=OU(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=hG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=hG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=vG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=vG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=dG(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=dG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=wG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=wG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=pG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=pG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=SG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=SG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=xG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=xG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=kG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=kG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=gG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=yG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=mG(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=mG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const s=[],a=[];e.signature.inputArg.forEach(e=>{const[t]=LU(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:fG(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}),Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach((e,n)=>{const[s,,a]=LU(e),i=r[s];if(null!=i.outputs){const e=i.outputs.indexOf(a);-1!==e&&(t.inputNames[n]=`${s}:${e}`)}t.inputs.push(i),i.children.push(t)})});const i=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=LU(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))});const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function cG(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=FF().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function hG(e,t,n,r=!1){const s=e[t];return null!=s?cG(s.s,r):n}function pG(e,t,n){const r=e[t];return r?r.b:n}function dG(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function fG(e){switch("string"==typeof e&&(e=_U[e]),e){case _U.DT_FLOAT:case _U.DT_HALF:return"float32";case _U.DT_INT32:case _U.DT_INT64:case _U.DT_INT8:case _U.DT_UINT8:return"int32";case _U.DT_BOOL:return"bool";case _U.DT_DOUBLE:return"float32";case _U.DT_STRING:return"string";case _U.DT_COMPLEX64:case _U.DT_COMPLEX128:return"complex64";default:return null}}function mG(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function gG(e,t,n){const r=e[t];return r&&r.type?fG(r.type):n}function yG(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>fG(e)):n}function bG(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function xG(e,t,n){const r=e[t];return r&&r.shape?bG(r.shape):n}function wG(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function vG(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>cG(e,r)):n}function kG(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>bG(e)):n}function SG(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class IG{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return PU(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return PU(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return dG(this.node.rawAttrs,e,t);if(null!=n.s)return hG(this.node.rawAttrs,e,t);if(null!=n.b)return pG(this.node.rawAttrs,e,t);if(null!=n.shape)return xG(this.node.rawAttrs,e,t);if(null!=n.type)return gG(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return wG(this.node.rawAttrs,e,t);if(null!=n.list.s)return vG(this.node.rawAttrs,e,t);if(null!=n.list.shape)return kG(this.node.rawAttrs,e,t);if(null!=n.list.b)return SG(this.node.rawAttrs,e,t);if(null!=n.list.type)return yG(this.node.rawAttrs,e,t)}return t}}function NG(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){P.assert(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let r=0;r<e.length;r++){const s=e[r],a=t[r];P.assert(s<0||a<0||s===a,()=>n+` Shapes ${e} and ${t} must match`)}}}function CG(e){return"number"!=typeof e&&!e.some(e=>e<0)}function TG(e,t,n){let r=EG(e,n);const s=!CG(r);if(s&&0===t.length)throw new Error("Tried to calculate elements of an empty list with non-fully-defined elementShape: "+r);if(s&&t.forEach(e=>{r=EG(e.shape,r)}),!CG(r))throw new Error("Non-fully-defined elementShape: "+r);return r}function EG(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class AG{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=mM(0),iO(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),NG(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,iO(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return eO([],[0].concat(this.elementShape));const n=this.readMany(e);return NG(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),KB(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return eO([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return NG(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),JP(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,hW(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];sO(()=>{t=YP(t,[1,n,s]);for(let n=0;n<e.length;++n)a[n]=YP(nz(t,[0,0===n?0:r[n-1],0],[1,e[n],s]),this.elementShape);return a});const i=[];for(let o=0;o<e.length;o++)i[o]=o;this.writeMany(i,a)}}class RG{get id(){return this.idTensor.id}constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);NG(t,e.shape,"TensorList shape mismatch: "),iO(e)}),this.idTensor=mM(0),this.maxNumElements=r,iO(this.idTensor)}copy(){return new RG([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);NG(e,this.elementShape,"TensorList shape mismatch: ");const r=TG(this.elementShape,this.tensors,e);return sO(()=>{const e=this.tensors.map(e=>YP(e,r));return KB(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=TG(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,NG(r.shape,e,"TensorList shape mismatch: "),YP(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(NG(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");iO(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new RG([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);NG(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=TG(this.elementShape,this.tensors,t);return YP(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);NG(this.elementShape,t.shape,"TensorList shape mismatch: "),iO(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);NG(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=TG(this.elementShape,this.tensors,n);return 0===e.length?eO([],[0].concat(r)):sO(()=>{const t=e.map(e=>YP(this.tensors[e],r));return KB(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);NG(this.elementShape,t,"TensorList shape mismatch: ");const n=TG(this.elementShape,this.tensors,t);return 0===this.size()?eO([],[0].concat(n)):sO(()=>{const e=this.tensors.map(e=>YP(e,n));return JP(e,0)})}}function $G(e,t,n){const[r,s]=MU("fusedOps",e,t,n),a="biasadd"===r,i=!a,o="prelu"===s,u="fusedbatchnorm"===r,l=MU("numArgs",e,t,n);if(a){if(o&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=MU("strides",e,t,n),h=VU(e,t,n),p=MU("dataFormat",e,t,n).toUpperCase(),d=MU("dilations",e,t,n);let[f,m]=MU("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:MU("leakyreluAlpha",e,t,n)}}function _G(e,t,n){return{boxes:MU("boxes",e,t,n),scores:MU("scores",e,t,n),maxOutputSize:MU("maxOutputSize",e,t,n),iouThreshold:MU("iouThreshold",e,t,n),scoreThreshold:MU("scoreThreshold",e,t,n),softNmsSigma:MU("softNmsSigma",e,t,n)}}class FG{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=mM(0),this.tensorMap=new Map,iO(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return mM(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),sO(()=>{const e=hW(t),r=n.length,s=e.length;P.assert(r===s,()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`);for(let t=0;t<r;t++){const r=n[t],s=e[t];iO(s),this.tensorMap.set(r,s)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return sO(()=>{const e=[];for(let r=0;r<n.length;r++){const s=this.findWithDefault(n[r],t);e.push(s)}return KB(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+e.dtype);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+t.dtype)}}function DG(e,t,n,r,s=sO){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(MU("a",e,t,n),MU("b",e,t,n))];case"AddN":return[r.addN(MU("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(MU("a",e,t,n),MU("b",e,t,n))];case"Mul":return[r.mul(MU("a",e,t,n),MU("b",e,t,n))];case"RealDiv":case"Div":return[r.div(MU("a",e,t,n),MU("b",e,t,n))];case"DivNoNan":return[r.divNoNan(MU("a",e,t,n),MU("b",e,t,n))];case"FloorDiv":return[r.floorDiv(MU("a",e,t,n),MU("b",e,t,n))];case"Sub":return[r.sub(MU("a",e,t,n),MU("b",e,t,n))];case"Minimum":return[r.minimum(MU("a",e,t,n),MU("b",e,t,n))];case"Maximum":return[r.maximum(MU("a",e,t,n),MU("b",e,t,n))];case"Pow":return[r.pow(MU("a",e,t,n),MU("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(MU("a",e,t,n),MU("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"basic_math":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(MU("x",e,t,n))];case"Acos":return[r.acos(MU("x",e,t,n))];case"Acosh":return[r.acosh(MU("x",e,t,n))];case"Asin":return[r.asin(MU("x",e,t,n))];case"Asinh":return[r.asinh(MU("x",e,t,n))];case"Atan":return[r.atan(MU("x",e,t,n))];case"Atan2":return[r.atan2(MU("x",e,t,n),MU("y",e,t,n))];case"Atanh":return[r.atanh(MU("x",e,t,n))];case"Ceil":return[r.ceil(MU("x",e,t,n))];case"Complex":return[r.complex(MU("real",e,t,n),MU("imag",e,t,n))];case"Cos":return[r.cos(MU("x",e,t,n))];case"Cosh":return[r.cosh(MU("x",e,t,n))];case"Elu":return[r.elu(MU("x",e,t,n))];case"Erf":return[r.erf(MU("x",e,t,n))];case"Exp":return[r.exp(MU("x",e,t,n))];case"Expm1":return[r.expm1(MU("x",e,t,n))];case"Floor":return[r.floor(MU("x",e,t,n))];case"Log":return[r.log(MU("x",e,t,n))];case"Log1p":return[r.log1p(MU("x",e,t,n))];case"Imag":return[r.imag(MU("x",e,t,n))];case"Neg":return[r.neg(MU("x",e,t,n))];case"Reciprocal":return[r.reciprocal(MU("x",e,t,n))];case"Real":return[r.real(MU("x",e,t,n))];case"Relu":return[r.relu(MU("x",e,t,n))];case"Round":return[r.round(MU("x",e,t,n))];case"Selu":return[r.selu(MU("x",e,t,n))];case"Sigmoid":return[r.sigmoid(MU("x",e,t,n))];case"Sin":return[r.sin(MU("x",e,t,n))];case"Sign":return[r.sign(MU("x",e,t,n))];case"Sinh":return[r.sinh(MU("x",e,t,n))];case"Softplus":return[r.softplus(MU("x",e,t,n))];case"Sqrt":return[r.sqrt(MU("x",e,t,n))];case"Square":return[r.square(MU("x",e,t,n))];case"Tanh":return[r.tanh(MU("x",e,t,n))];case"Tan":return[r.tan(MU("x",e,t,n))];case"ClipByValue":return[r.clipByValue(MU("x",e,t,n),MU("clipValueMin",e,t,n),MU("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(MU("x",e,t,n))];case"Rsqrt":return[r.rsqrt(PU(e.inputNames[0],t,n))];case"LeakyRelu":return[r.leakyRelu(MU("x",e,t,n),MU("alpha",e,t,n))];case"Prelu":return[r.prelu(MU("x",e,t,n),MU("alpha",e,t,n))];case"IsNan":return[r.isNaN(PU(e.inputNames[0],t,n))];case"IsInf":return[r.isInf(PU(e.inputNames[0],t,n))];case"IsFinite":return[r.isFinite(PU(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=MU("thenBranch",e,t,n),s=MU("elseBranch",e,t,n),a=MU("cond",e,t,n),i=MU("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=MU("body",e,t,n),s=MU("cond",e,t,n),a=MU("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(e=>e.id);let u=await i[0].data();i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return l}case"LoopCond":return[UU(MU("pred",e,t,n))];case"Switch":{const r=MU("pred",e,t,n);let s=MU("data",e,t,n);return s.kept||(s=UU(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==PU(e,t,n));return r?[UU(PU(r,t,n))]:void 0}case"Enter":{const r=MU("frameName",e,t,n),s=MU("tensor",e,t,n);return n.enterFrame(r),[UU(s)]}case"Exit":{const r=MU("tensor",e,t,n);return n.exitFrame(),[UU(r)]}case"NextIteration":{const r=MU("tensor",e,t,n);return n.nextIteration(),[UU(r)]}case"TensorArrayV3":{const r=MU("size",e,t,n),s=MU("dtype",e,t,n),a=MU("elementShape",e,t,n),i=MU("dynamicSize",e,t,n),o=MU("clearAfterRead",e,t,n),u=MU("identicalElementShapes",e,t,n),l=MU("name",e,t,n),c=new AG(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,mM(1)]}case"TensorArrayWriteV3":{const r=MU("tensorArrayId",e,t,n),s=MU("index",e,t,n),a=MU("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=MU("tensorArrayId",e,t,n),s=MU("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=MU("tensorArrayId",e,t,n),s=MU("indices",e,t,n),a=MU("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=MU("tensorArrayId",e,t,n),s=MU("indices",e,t,n),a=MU("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=MU("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=MU("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=MU("tensorArrayId",e,t,n),s=MU("tensor",e,t,n),a=MU("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=MU("tensorArrayId",e,t,n);return[mM(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=MU("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=MU("tensorListId",e,t,n),s=MU("index",e,t,n),a=MU("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=MU("tensorListId",e,t,n),s=MU("index",e,t,n),a=MU("elementShape",e,t,n),i=MU("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=MU("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new RG([],n,e.dtype,r),i=hW(e,0);return t.forEach((e,t)=>{a.setItem(e,i[t])}),a}(MU("tensor",e,t,n),r,MU("elementShape",e,t,n),MU("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=MU("elementShape",e,t,n),s=MU("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=MU(a,e,t,n),o=function(e,t,n,r){return new RG([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=MU("tensorListId",e,t,n),s=MU("indices",e,t,n),a=MU("elementShape",e,t,n),i=MU("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=MU("tensorListId",e,t,n),s=MU("elementShape",e,t,n),a=MU("elementDType",e,t,n),i=MU("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);NG(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=hW(e);return new RG(s,t,r)}(MU("tensor",e,t,n),MU("elementShape",e,t,n),MU("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=MU("tensorListId",e,t,n),s=n.getTensorList(r.id),a=MU("dtype",e,t,n),i=MU("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=MU("tensorListId",e,t,n),s=MU("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=MU("tensorListId",e,t,n),s=MU("elementShape",e,t,n),a=MU("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=MU("tensor",e,t,n),s=MU("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map(e=>(r+=e,r));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=EG(e.shape.slice(1),n),i=0===r?0:e.size/r,o=sO(()=>{const n=[];e=YP(e,[1,r,i]);for(let r=0;r<t.length;++r)n[r]=YP(nz(e,[0,0===r?0:s[r-1],0],[1,t[r],i]),a);return e.dispose(),n}),u=new RG([],n,e.dtype,t.length);for(let l=0;l<o.length;l++)u.setItem(l,o[l]);return u}(r,MU("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=MU("tensorListId",e,t,n);return[mM(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=MU("tensorListId",e,t,n),s=MU("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Conv1D":{const s=MU("stride",e,t,n),a=MU("pad",e,t,n),i=MU("dataFormat",e,t,n).toUpperCase(),o=MU("dilation",e,t,n);return[r.conv1d(MU("x",e,t,n),MU("filter",e,t,n),s,a,i,o)]}case"Conv2D":{const s=MU("strides",e,t,n),a=VU(e,t,n),i=MU("dataFormat",e,t,n).toUpperCase(),o=MU("dilations",e,t,n);return[r.conv2d(MU("x",e,t,n),MU("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=$G(e,t,n);return[r.fused.conv2d({x:MU("x",e,t,n),filter:MU("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=$G(e,t,n);return[r.fused.depthwiseConv2d({x:MU("x",e,t,n),filter:MU("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=MU("outputShape",e,t,n),a=MU("strides",e,t,n),i=VU(e,t,n);return[r.conv2dTranspose(MU("x",e,t,n),MU("filter",e,t,n),s,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=MU("strides",e,t,n),a=VU(e,t,n),i=MU("dilations",e,t,n),o=MU("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(MU("input",e,t,n),MU("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("dataFormat",e,t,n).toUpperCase(),o=MU("dilations",e,t,n);return[r.conv3d(MU("x",e,t,n),MU("filter",e,t,n),[s[1],s[2],s[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("kernelSize",e,t,n);return[r.avgPool(MU("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("kernelSize",e,t,n);return[r.maxPool(MU("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("kernelSize",e,t,n),o=MU("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(MU("x",e,t,n),[i[1],i[2]],[s[1],s[2]],a,o);return[u,l]}case"AvgPool3D":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("kernelSize",e,t,n);return[r.avgPool3d(MU("x",e,t,n),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("kernelSize",e,t,n);return[r.maxPool3d(MU("x",e,t,n),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=MU("strides",e,t,n),a=MU("pad",e,t,n),i=MU("dilations",e,t,n),o=s[1],u=s[2],l=i[1],c=i[2];return[r.dilation2d(MU("x",e,t,n),MU("filter",e,t,n),[o,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"creation":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Fill":{const s=MU("shape",e,t,n),a=MU("dtype",e,t,n),i=MU("value",e,t,n);return[r.fill(s,i,a)]}case"LinSpace":{const s=MU("start",e,t,n),a=MU("stop",e,t,n),i=MU("num",e,t,n);return[r.linspace(s,a,i)]}case"Multinomial":{const s=MU("logits",e,t,n),a=MU("numSamples",e,t,n),i=MU("seed",e,t,n);return[r.multinomial(s,a,i)]}case"OneHot":{const s=MU("indices",e,t,n),a=MU("depth",e,t,n),i=MU("onValue",e,t,n),o=MU("offValue",e,t,n),u=MU("dtype",e,t,n);return[r.oneHot(s,a,i,o,u)]}case"Ones":return[r.ones(MU("shape",e,t,n),MU("dtype",e,t,n))];case"OnesLike":return[r.onesLike(MU("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(MU("shape",e,t,n),MU("dtype",e,t,n),MU("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(MU("shape",e,t,n),MU("minval",e,t,n),MU("maxval",e,t,n),MU("dtype",e,t,n))];case"RandomUniformInt":return[r.randomUniformInt(MU("shape",e,t,n),MU("minval",e,t,n),MU("maxval",e,t,n),MU("seed",e,t,n))];case"Range":{const s=MU("start",e,t,n),a=MU("stop",e,t,n),i=MU("step",e,t,n);return[r.range(s,a,i,MU("dtype",e,t,n))]}case"TruncatedNormal":{const s=MU("shape",e,t,n),a=MU("mean",e,t,n),i=MU("stdDev",e,t,n),o=MU("seed",e,t,n);return[r.truncatedNormal(s,a,i,MU("dtype",e,t,n),o)]}case"Zeros":return[r.zeros(MU("shape",e,t,n),MU("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(MU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"dynamic":return(async(e,t,n,r,s=he)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=_G(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,i,o,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=_G(e,t,n),l=MU("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,i,o,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=_G(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,i,o,u)]}case"Where":{const r=s.cast(MU("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(MU("x",e,t,n),MU("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"LowerBound":{const s=MU("sortedSequence",e,t,n),a=MU("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=MU("x",e,t,n),a=MU("k",e,t,n),i=MU("sorted",e,t,n),o=r.topk(s,a,i);return[o.values,o.indices]}case"UpperBound":{const s=MU("sortedSequence",e,t,n),a=MU("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=MU("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=MU("x",e,t,n),a=MU("axis",e,t,n),i=r.unique(s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"image":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"ResizeBilinear":{const s=MU("images",e,t,n),a=MU("size",e,t,n),i=MU("alignCorners",e,t,n),o=MU("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const s=MU("images",e,t,n),a=MU("size",e,t,n),i=MU("alignCorners",e,t,n),o=MU("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],i,o)]}case"CropAndResize":{const s=MU("image",e,t,n),a=MU("boxes",e,t,n),i=MU("boxInd",e,t,n),o=MU("cropSize",e,t,n),u=MU("method",e,t,n),l=MU("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,i,o,u,l)]}case"ImageProjectiveTransformV3":{const s=MU("images",e,t,n),a=MU("transforms",e,t,n),i=MU("outputShape",e,t,n),o=MU("fillValue",e,t,n),u=MU("interpolation",e,t,n),l=MU("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"graph":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=MU("default",e,t,n);return[PU(e.name,t,n)||s];case"Placeholder":return[PU(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[UU(MU("x",e,t,n))];case"IdentityN":return MU("x",e,t,n).map(e=>UU(e));case"Snapshot":return[UU(MU("x",e,t,n))];case"Shape":return[r.tensor1d(MU("x",e,t,n).shape,"int32")];case"ShapeN":return MU("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(MU("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(MU("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=MU("x",e,t,n),i=MU("data",e,t,n),o=MU("message",e,t,n),u=MU("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"logical":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Equal":return[r.equal(MU("a",e,t,n),MU("b",e,t,n))];case"NotEqual":return[r.notEqual(MU("a",e,t,n),MU("b",e,t,n))];case"Greater":return[r.greater(MU("a",e,t,n),MU("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(MU("a",e,t,n),MU("b",e,t,n))];case"Less":return[r.less(MU("a",e,t,n),MU("b",e,t,n))];case"LessEqual":return[r.lessEqual(MU("a",e,t,n),MU("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(MU("a",e,t,n),MU("b",e,t,n))];case"LogicalNot":return[r.logicalNot(MU("a",e,t,n))];case"LogicalOr":return[r.logicalOr(MU("a",e,t,n),MU("b",e,t,n))];case"Select":case"SelectV2":return[r.where(MU("condition",e,t,n),MU("a",e,t,n),MU("b",e,t,n))];case"BitwiseAnd":return[r.bitwiseAnd(MU("a",e,t,n),MU("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"matrices":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(MU("a",e,t,n),MU("b",e,t,n),MU("transposeA",e,t,n),MU("transposeB",e,t,n))];case"Einsum":return[r.einsum(MU("equation",e,t,n),...MU("tensors",e,t,n))];case"Transpose":return[r.transpose(MU("x",e,t,n),MU("perm",e,t,n))];case"_FusedMatMul":const[s,a]=MU("fusedOps",e,t,n),i="biasadd"===s,o="prelu"===a,u=MU("numArgs",e,t,n),l=MU("leakyreluAlpha",e,t,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=MU("args",e,t,n);return[r.fused.matMul({a:MU("a",e,t,n),b:MU("b",e,t,n),transposeA:MU("transposeA",e,t,n),transposeB:MU("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:h,leakyreluAlpha:l})];case"MatrixBandPart":return[r.linalg.bandPart(MU("a",e,t,n),MU("numLower",e,t,n),MU("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"normalization":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(MU("x",e,t,n),MU("axis",e,t,n),MU("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(MU("x",e,t,n),MU("mean",e,t,n),MU("variance",e,t,n),MU("offset",e,t,n),MU("scale",e,t,n),MU("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(MU("x",e,t,n),MU("radius",e,t,n),MU("bias",e,t,n),MU("alpha",e,t,n),MU("beta",e,t,n))];case"Softmax":return[r.softmax(MU("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(MU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"ragged":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:a}=r.raggedGather(MU("paramsNestedSplits",e,t,n),MU("paramsDenseValues",e,t,n),MU("indices",e,t,n),MU("outputRaggedRank",e,t,n));return s.concat(a)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:a}=r.raggedRange(MU("starts",e,t,n),MU("limits",e,t,n),MU("splits",e,t,n));return[s,a]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(MU("shape",e,t,n),MU("values",e,t,n),MU("defaultValue",e,t,n),MU("rowPartitionTensors",e,t,n),MU("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"reduction":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Max":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.max(MU("x",e,t,n),s,a)]}case"Mean":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.mean(MU("x",e,t,n),s,a)]}case"Min":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.min(MU("x",e,t,n),s,a)]}case"Sum":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.sum(MU("x",e,t,n),s,a)]}case"All":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.all(MU("x",e,t,n),s,a)]}case"Any":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.any(MU("x",e,t,n),s,a)]}case"ArgMax":{const s=MU("axis",e,t,n);return[r.argMax(MU("x",e,t,n),s)]}case"ArgMin":{const s=MU("axis",e,t,n);return[r.argMin(MU("x",e,t,n),s)]}case"Prod":{const s=MU("axis",e,t,n),a=MU("keepDims",e,t,n);return[r.prod(MU("x",e,t,n),s,a)]}case"Cumprod":{const s=MU("axis",e,t,n),a=MU("exclusive",e,t,n),i=MU("reverse",e,t,n);return[r.cumprod(MU("x",e,t,n),s,a,i)]}case"Cumsum":{const s=MU("axis",e,t,n),a=MU("exclusive",e,t,n),i=MU("reverse",e,t,n);return[r.cumsum(MU("x",e,t,n),s,a,i)]}case"Bincount":const s=MU("x",e,t,n),a=MU("weights",e,t,n),i=MU("size",e,t,n);return[r.bincount(s,a,i)];case"DenseBincount":{const s=MU("x",e,t,n),a=MU("weights",e,t,n),i=MU("size",e,t,n),o=MU("binaryOutput",e,t,n);return[r.denseBincount(s,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"slice_join":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=MU("n",e,t,n),a=MU("axis",e,t,n);let i=MU("tensors",e,t,n);return i=i.slice(0,s),[r.concat(i,a)]}case"Gather":{const s=MU("x",e,t,n),a=MU("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=MU("axis",e,t,n),a=MU("batchDims",e,t,n),i=MU("x",e,t,n),o=MU("indices",e,t,n);return[r.gather(i,r.cast(o,"int32"),s,a)]}case"Reverse":{const s=MU("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const i=MU("x",e,t,n);return[r.reverse(i,a)]}case"ReverseV2":{const s=MU("axis",e,t,n),a=MU("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=MU("begin",e,t,n),a=MU("size",e,t,n);return[r.slice(MU("x",e,t,n),s,a)]}case"StridedSlice":{const s=MU("begin",e,t,n),a=MU("end",e,t,n),i=MU("strides",e,t,n),o=MU("beginMask",e,t,n),u=MU("endMask",e,t,n),l=MU("ellipsisMask",e,t,n),c=MU("newAxisMask",e,t,n),h=MU("shrinkAxisMask",e,t,n),p=MU("x",e,t,n);return[r.stridedSlice(p,s,a,i,o,u,l,c,h)]}case"Pack":return sO(()=>{const s=MU("axis",e,t,n),a=MU("tensors",e,t,n),i=a[0].shape,o=r.squeeze(a[0]).shape,u=a.map(e=>{const t=P.arraysEqual(e.shape,i);if(!t&&!P.arraysEqual(r.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,i)});return[r.stack(u,s)]});case"Unpack":{const s=MU("axis",e,t,n),a=MU("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=MU("reps",e,t,n);return[r.tile(MU("x",e,t,n),s)]}case"Split":case"SplitV":{const s=MU("axis",e,t,n),a=MU("numOrSizeSplits",e,t,n),i=MU("x",e,t,n);return r.split(i,a,s)}case"ScatterNd":{const s=MU("indices",e,t,n),a=MU("values",e,t,n),i=MU("shape",e,t,n);return[r.scatterND(s,a,i)]}case"GatherNd":{const s=MU("x",e,t,n),a=MU("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=MU("sparseIndices",e,t,n),a=MU("outputShape",e,t,n),i=MU("sparseValues",e,t,n),o=MU("defaultValue",e,t,n);return[r.sparseToDense(s,i,a,i.dtype===o.dtype?o:r.cast(o,i.dtype))]}case"TensorScatterUpdate":{const s=MU("indices",e,t,n),a=MU("values",e,t,n),i=MU("tensor",e,t,n);return[r.tensorScatterUpdate(i,s,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"sparse":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=r.sparse.sparseFillEmptyRows(MU("indices",e,t,n),MU("values",e,t,n),MU("denseShape",e,t,n),MU("defaultValue",e,t,n));return[s,a,i,o]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(MU("inputIndices",e,t,n),MU("inputShape",e,t,n),MU("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(MU("data",e,t,n),MU("indices",e,t,n),MU("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(MU("data",e,t,n),MU("indices",e,t,n),MU("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"spectral":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"FFT":return[r.fft(MU("x",e,t,n))];case"IFFT":return[r.ifft(MU("x",e,t,n))];case"RFFT":return[r.rfft(MU("x",e,t,n))];case"IRFFT":return[r.irfft(MU("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"string":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(MU("input",e,t,n),MU("pattern",e,t,n),MU("rewrite",e,t,n),MU("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(MU("data",e,t,n),MU("dataSplits",e,t,n),MU("separator",e,t,n),MU("nGramWidths",e,t,n),MU("leftPad",e,t,n),MU("rightPad",e,t,n),MU("padWidth",e,t,n),MU("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:i}=r.string.stringSplit(MU("input",e,t,n),MU("delimiter",e,t,n),MU("skipEmpty",e,t,n));return[s,a,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(MU("input",e,t,n),MU("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"transformation":return s(()=>((e,t,n,r=he)=>{switch(e.op){case"Cast":return[r.cast(MU("x",e,t,n),MU("dtype",e,t,n))];case"ExpandDims":{const s=MU("axis",e,t,n);return[r.expandDims(MU("x",e,t,n),s)]}case"Squeeze":{const s=MU("axis",e,t,n);return[r.squeeze(MU("x",e,t,n),s)]}case"Reshape":return[r.reshape(MU("x",e,t,n),MU("shape",e,t,n))];case"EnsureShape":return[r.ensureShape(MU("x",e,t,n),MU("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(MU("x",e,t,n),MU("padding",e,t,n),MU("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(MU("x",e,t,n),MU("padding",e,t,n),MU("constantValue",e,t,n))];case"SpaceToBatchND":{const s=MU("blockShape",e,t,n),a=MU("paddings",e,t,n);return[r.spaceToBatchND(MU("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=MU("blockShape",e,t,n),a=MU("crops",e,t,n);return[r.batchToSpaceND(MU("x",e,t,n),s,a)]}case"DepthToSpace":{const s=MU("blockSize",e,t,n),a=MU("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(MU("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(MU("x",e,t,n),MU("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(MU("s0",e,t,n),MU("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=r.getHashTableHandleByName(e.name);if(null!=s)return[s];{const s=MU("keyDType",e,t,n),a=MU("valueDType",e,t,n),i=new FG(s,a);return r.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=MU("tableHandle",e,t,n,r),a=MU("keys",e,t,n),i=MU("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=MU("tableHandle",e,t,n,r),a=MU("keys",e,t,n),i=MU("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=MU("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=OU(e.op);if(a&&a.customExecutor)return a.customExecutor(new IG(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return P.isPromise(a)?a.then(e=>[].concat(e)):[].concat(a)}class OG{constructor(e={},t={},n={},r={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function MG(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=new Set(Object.keys(e).map(e=>WU(e)[0]));r=r||[];const c=new Set(r.map(e=>WU(e.name)[0])),h=[...t];for(;h.length>0;){const e=h.pop();(WG(e)||VG(e)||UG(e))&&null==i&&(i=e,o=i.children.map(e=>e.name).filter(e=>s.has(e))),s.add(e.name),null==n[e.name]&&(l.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach(e=>{u.has(e.name)||(u.add(e.name),h.push(e))}):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}class PG extends Error{constructor(e){super("NodesExecutionOrderError: "+e)}}const zG=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),LG=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),BG=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function WG(e){return zG.has(e.op)}function VG(e){return LG.has(e.op)}function UG(e){return BG.has(e.op)}class GG{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new GG(e.functions[t],this)})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(e,t){const n=MG(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}const i=function(e,t){const{usedNodes:n,inputs:r}=t,s=e=>n.has("string"==typeof e?e:e.name);function a(e){return[...new Map(e.map(e=>[e.name,e])).values()]}const i=a([...Object.keys(r).map(e=>WU(e)[0]).map(t=>e.nodes[t]),...e.weights,...e.initNodes||[]]).filter(s),o=a([...i,...Object.values(e.nodes)]).filter(s),u=new Map(o.map(e=>[e.name,e])),l={};for(const d of o){l[d.name]=l[d.name]||0;for(const e of d.children)s(e)||(l[e.name]=Number.POSITIVE_INFINITY),l[e.name]=(l[e.name]||0)+1}const c=Object.entries(l).filter(([,e])=>0===e).map(([e])=>e),h=[...c];for(;c.length>0;){const e=c.pop(),t=u.get(e);for(const n of t.children.filter(s))0==--l[n.name]&&(h.push(n.name),c.push(n.name))}const p=function(e,t){const n=new Map(e.map(e=>[e.name,e])),r=t.map(e=>e.name),s=new Set(r);for(;r.length>0;){const e=r.pop(),t=n.get(e);for(const a of t.children)n.has(a.name)&&!s.has(a.name)&&(s.add(a.name),r.push(a.name))}return e.filter(e=>s.has(e.name))}(h.map(e=>u.get(e)),i);return function(e,t){const n=new Map(e.map((e,t)=>[e.name,t])),r=new Set(t.map(e=>e.name)),s=e=>r.has("string"==typeof e?e:e.name),a=new Set(e.map(e=>e.name)),i=e=>a.has("string"==typeof e?e:e.name);for(const o of e){for(const e of o.children.filter(i)){if(!n.has(e.name))throw new PG(`Child ${e.name} of node ${o.name} is unreachable.`);if(n.get(o.name)>n.get(e.name))throw new PG(`Node ${o.name} is scheduled to run after its child ${e.name}.`)}if(!s(o))for(const e of o.inputs){if(!n.has(e.name))throw new PG(`Input ${e.name} of node ${o.name} is unreachable.`);if(n.get(e.name)>n.get(o.name))throw new PG(`Node ${o.name} is scheduled to run before its input ${e.name}.`)}}}(p,i),p}(this.graph,n),o=function(e){const t=new Map(e.map((e,t)=>[e.name,t])),n=Number.MAX_SAFE_INTEGER,r=e.map((e,t)=>WG(e)?n:t),s=e=>{const n=r[t.get(e.name)];return null==n?-1:n},a=e.map((e,t)=>e.children.map(s).reduce((e,t)=>Math.max(e,t),r[t])),i=new Map;for(let o=0;o<e.length;++o){const t=a[o];if(t===n)continue;const r=e[o],s=e[t];i.has(s.name)||i.set(s.name,[]),i.get(s.name).push(r)}return i}(i);return{orderedNodes:i,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return iO(t),t}cloneTensorList(e){return e?e.map(e=>this.cloneAndKeepTensor(e)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.cloneTensorList(t)]))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map(e=>this.graph.nodes[WU(e)[0]]),s=t.map(e=>WU(e)[0]),a=new Set(s);let i=s.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const o=this.getCompilationKey(r,i);let u=this.compiledMap.get(o);null==u&&(u=this.compile(e,i),this.compiledMap.set(o,u));try{this.keepIntermediateTensors=FF().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const l={},c={};return sO(()=>{const n=new OG(this.weightMap,l,c,this.functionExecutorMap,this.parseNodeNameCache),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(t=>{const[s,a]=WU(t,n),i=[];i[a]=e[t],r[s]=i,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(i))});const s=this.getFrozenTensorIds(r),{orderedNodes:i,nodeLiveUntilMap:o}=u;for(const e of i){if(r[e.name])continue;const t=DG(e,r,n,this._resourceManager);if(P.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,r,n,s,a,o.get(e.name))}return null==this.parent&&n.dispose(s),t.map(e=>PU(e,r,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){if(!WG(t)&&!a.has(e)){for(const r of n[e])null!=r&&(i[r.id]=(i[r.id]||0)+t.children.length);for(const e of t.inputs){if(WG(e))continue;const t=zU(e.name,n,r);if(null!=t)for(const e of t){if(!e||e.kept||s.has(e.id))continue;const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,r,s,a){function i(e){return WG(e)||s.has(e.name)}if(!WG(e)&&null!=a)for(const o of a){if(i(o))continue;const e=zU(o.name,t,n);for(const t of e)!t||t.kept||r.has(t.id)||t.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,r={},s={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=FF().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const a=new OG(this.weightMap,r,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map(e=>PU(e,i,a)),u=o.map(e=>e.id),l=Object.keys(e).map(t=>e[t].id),c=new Set([...u,...l,...this.weightIds]);return Object.values(i).forEach(e=>{e.forEach(e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map(e=>this.graph.nodes[WU(e)[0]]),i=n.map(e=>WU(e)[0]),o=new Set(i);let u=i.map(e=>this.graph.nodes[e]);0===u.length&&(u=this._outputs);const{usedNodes:l,missingInputs:c,dynamicNode:h,syncInputs:p}=MG(e,u,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),f=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=WU(t),s=[];s[r]=e[t],f[n]=s});const m={},g=this.getFrozenTensorIds(f),y={};for(;d.length>0;){const e=this.processStack(a,d,t,f,y,g,o,m,l);await Promise.all(e)}null!=h||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=u.filter(e=>!WG(e)&&!PU(e.name,f,t)).map(e=>e.name);if(b.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,r,s,a,i,o,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&MU("isConstant",e.node,r,n)&&([c]=LU(e.node.name,n)),null==r[e.node.name]){const h=DG(e.node,r,n,this._resourceManager);c||([c]=LU(e.node.name,n));const p=n.currentContext;P.isPromise(h)?l.push(h.then(l=>(r[c]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(l)),n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u),l))):(r[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach(e=>{const[i]=LU(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!PU(e,r,n))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!PU(e,r,n))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[r]=WU(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);P.assert(t,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&P.assert(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){var t,n;const r={};for(const s in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[s];null!=a?r[a.name]=e[s]:r[s]=e[s]}return r}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=WU(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{var t,n;const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=r?r.name:e},{})}checkOutputs(e){e.forEach(e=>{const[t]=WU(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class HG{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class jG{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=L){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new HG}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return P.isPromise(e)?e.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await mO(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let r=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(r=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=r,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new GG(lG.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=lG.Instance.transformGraph(e.modelInitializer);this.initializer=new GG(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof ND?[e]:e).forEach((e,n)=>t[this.structuredOutputKeys[n]]=e),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof ND||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const r=n[t];null!=r.resourceId&&(e[t]=this.resourceIdToCapturedInput[r.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((t,n)=>{var s,a,i;const o=null===(i=null===(a=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[r++],t},{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:this.initializer.executeAsync({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let r=0;r<n.length;r++)this.resourceIdToCapturedInput[t[n[r]].resourceId]=e[r]}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&aO(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function qG(e,t={},n=L){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),e+"model.json?tfjs-format=file"}(e));const r=new jG(e,t,n);return await r.load(),r}const KG=FF();KG.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),KG.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),KG.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),KG.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0),KG.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),KG.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),KG.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),KG.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),KG.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),KG.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1),KG.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1),KG.registerFlag("WEBGPU_PRINT_SHADER",()=>""),KG.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);class XG{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class YG{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,n=!1,r=!0){let s;const a=ZG(e,t);return r?(this.freeBuffers.has(a)||this.freeBuffers.set(a,[]),this.freeBuffers.get(a).length>0?(s=this.freeBuffers.get(a).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e)):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e),this.usedBuffers.has(a)||this.usedBuffers.set(a,[]),this.usedBuffers.get(a).push(s),this.numUsedBuffers++,this.numBytesUsed+=e,s}releaseBuffer(e,t=!0){if(0===this.freeBuffers.size)return;const n=e.size,r=ZG(n,e.usage),s=this.usedBuffers.get(r),a=s.indexOf(e);if(a<0)throw new Error("Cannot find the buffer in buffer manager");s[a]=s[s.length-1],s.pop(),this.numUsedBuffers--,this.numBytesUsed-=n,t?(this.freeBuffers.get(r).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=n)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function ZG(e,t){return`${e}_${t}`}class QG{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,n,r){const s=e*t*eH(n),a=JG(e,t,n,r);if(this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.usedTextures.has(a)||this.usedTextures.set(a,[]),this.numBytesUsed+=s,this.numUsedTextures++,this.freeTextures.get(a).length>0){this.numFreeTextures--;const e=this.freeTextures.get(a).shift();return this.usedTextures.get(a).push(e),e}this.numBytesAllocated+=s;const i=this.device.createTexture({size:[e,t],format:n,usage:r});return this.usedTextures.get(a).push(i),i}releaseTexture(e){if(0===this.freeTextures.size)return;const t=e.width,n=e.height,r=e.format,s=JG(t,n,r,e.usage);this.freeTextures.has(s)||this.freeTextures.set(s,[]),this.freeTextures.get(s).push(e),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures.get(s),i=a.indexOf(e);if(i<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(i,1);const o=eH(r);this.numBytesUsed-=t*n*o}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function JG(e,t,n,r){return`${e}_${t}_${n}_${r}`}function eH(e){if("rgba8unorm"===e)return 16;throw new Error(e+" is not supported!")}function tH(e,t){if(Math.max(...e)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");const n=e.length,r=e.map(e=>`${t}.${"xyzwuv"[e]}`),s=new Array(n-1);s[n-2]=r[n-1];for(let a=n-3;a>=0;--a)s[a]=`(${s[a+1]} * ${r[a+1]})`;return s}const nH=(e,t,n)=>"int32"===n?`atomicAdd(${e}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;var rH;!function(e){e[e.FROM_PIXELS=0]="FROM_PIXELS",e[e.DRAW=1]="DRAW"}(rH||(rH={}));const sH=(e,t="f32")=>{switch(e){case 1:return""+t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component ${t} is not supported.`)}};function aH(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error(`GPU for rank ${e} is not yet supported`)}function iH(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error(`Index ${e} is not yet supported`)}function oH(...e){let t;switch(e.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${e[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function uH(e,t){let n;return n=`\n     ${function(e){return`\n  @compute @workgroup_size(${e.workgroupSize[0]}, ${e.workgroupSize[1]}, ${e.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${e?"main(getGlobalIndex());":"main();"};\n      }\n    `,n}const lH="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n";function cH(e,t=""){const n=e.length,r=""!==t?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",s=""!==t?t.charAt(0).toLowerCase()+t.slice(1)+"ShapeStrides":"outShapeStrides";if(n<=1)return`fn ${r}(index : i32) -> i32 { return index; }`;const a=P.computeStrides(e),i=aH(n),o=[];for(let l=0;l<n;l++)o.push("d"+l);if(1===a.length)return`    fn ${r}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${s}; let d1 = index - d0 * uniforms.${s};\n      return vec2<i32>(d0, d1);\n    }`;let u;return u="var index2 = index;"+a.map((e,t)=>`let ${o[t]} = index2 / uniforms.${s}.${iH(t)}; ${t===a.length-1?`let ${o[t+1]} = index2 - ${o[t]} * uniforms.${s}.${iH(t)}`:`index2 = index2 - ${o[t]} * uniforms.${s}.${iH(t)}`};`).join(""),`\n    fn ${r}(index : i32) -> ${i} {\n      ${u}\n      return ${i}(${o.join(",")});\n    }\n  `}function hH(e){let t="";switch(e){case 0:case 1:t+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:t+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:t+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:t+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:t+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:t+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:P.assert(!1,()=>`Unsupported ${e}D shape`)}return t}function pH(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function dH(e,t=1){if("float32"===e)return sH(t,"f32");if("int32"===e||"bool"===e)return sH(t,"i32");throw new Error(`type ${e} is not supported.`)}function fH(e){return!(e.dispatchLayout.hasOwnProperty("y")&&0!==e.dispatchLayout.y.length||e.dispatchLayout.hasOwnProperty("z")&&0!==e.dispatchLayout.z.length)}const mH=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t};function gH(e,t){if(e.length!==t.length)throw new Error("Cannot compute whether rank "+e.length+` tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every((t,n)=>t%e[n]==0)}function yH(e,t,n=[1,1,1],r=[1,1,1]){const[s,a,i]=[Math.ceil(mH(e.x.map(e=>t[e]))/(n[0]*r[0])),e.y?Math.ceil(mH(e.y.map(e=>t[e]))/(n[1]*r[1])):1,e.z?Math.ceil(mH(e.z.map(e=>t[e]))/(n[2]*r[2])):1];return[s,a,i]}function bH(e,t,n,r=!1){const s=[8,8,1],a=[4,4,1];return r||(e<=8&&(a[1]=1),t<=16&&n<=16&&(s[0]=4)),{workgroupSize:s,elementsPerThread:a}}function xH(e,t,n=!1){if(n)return[8,8,1];const r=mH(e.x.map(e=>t[e])),s=mH(e.y.map(e=>t[e]));return r<=4?[4,16,1]:s<=4?[16,4,1]:[16,16,1]}function wH(e,t,n=!1){if(n)return[4,4,1];const r=mH(e.x.map(e=>t[e])),s=mH(e.y.map(e=>t[e]));return r<=4?[1,2,1]:s<=4?[2,1,1]:[2,2,1]}function vH(e){return{x:e.map((e,t)=>t)}}function kH(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error("Unknown dtype "+e)}function SH(){return!("undefined"==typeof globalThis||!globalThis.navigator||!globalThis.navigator.gpu)}function IH(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&P.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the WebGPU backend.")})}var NH;!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(NH||(NH={}));const CH=FF().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");class TH extends M_{nextDataId(){return TH.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!SH())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new XG(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new YG(this.device),this.textureManager=new QG(this.device),this.tensorMap=new O_(this,rO()),FF().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;const n=this.tensorMap.get(e);return t?n.refCount=0:n.refCount--,!(n.refCount>0||(null!=n.complexTensorInfos&&(this.disposeData(n.complexTensorInfos.real.dataId),this.disposeData(n.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),0):(this.releaseResource(e),this.tensorMap.delete(e),0)))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const t=this.tensorMap.get(e);t&&t.resource&&(t.external||(t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource)),t.resource=null)}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){this.tensorMap.has(e)&&this.tensorMap.get(e).refCount--}write(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.tensorMap.set(r,{dtype:n,shape:t,values:e,refCount:1}),r}move(e,t,n,r,s){if("complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:r,shape:n,values:t,refCount:s})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(t){throw new Error(t.message)}Object.keys(this.pipelineCache).map((t,n)=>{this.pipelineCache[t]=e[n]})}async getBufferData(e){if(FF().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;const t=e.size,n=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),await n.mapAsync(GPUMapMode.READ);const r=n.getMappedRange().slice(0);return n.unmap(),null!=n&&this.bufferManager.releaseBuffer(n),FF().getBool("WEBGPU_USE_PROFILE_TOOL")&&(P.assert(void 0!==this.dummyContext,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),r}convertAndCacheOnCPU(e,t){const n=this.tensorMap.get(e);return n.values=t,n.values}readSync(e){const t=this.tensorMap.get(e),{values:n,complexTensorInfos:r}=t;if(null!=n||"string"===t.dtype)return n;if("complex64"===t.dtype){const t=this.readSync(r.real.dataId),n=this.readSync(r.imag.dataId),s=P.convertBackendValuesAndArrayBuffer(G.mergeRealAndImagArrays(t,n).buffer,"float32");return this.convertAndCacheOnCPU(e,s),s}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));const s=["opaque","premultiplied"],a=t.resource,i=a.size;P.assert(i%4==0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");const o=i/4,u=new ArrayBuffer(i),l=s.map(e=>new OffscreenCanvas(256,256)),c=new OffscreenCanvas(256,256);this.endComputePassEncoder(),l.map((e,t)=>{const n=e.getContext("webgpu");return n.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:s[t]}),n.getCurrentTexture()}).map((e,t)=>{const n=(n,r,i)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:a,bytesPerRow:1024,offset:i},{texture:e},{width:n,height:r}),this.submitQueue();const o=c.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,n,r),o.drawImage(l[t],0,0);const h=o.getImageData(0,0,n,r).data,p=s[t],d=new Uint8ClampedArray(u,i,n*r*4);for(let e=0;e<d.length;e+=4)if("premultiplied"===p)d[e+3]=h[e+3];else{const t=h[e];d[e]=h[e+2],d[e+1]=h[e+1],d[e+2]=t}},r=Math.floor(o/65536);let i=256,h=256,p=0;for(let s=0;s<r;s++)n(i,h,p),p+=262144;const d=o%65536;h=Math.floor(d/256),h>0&&(n(i,h,p),p+=1024*h),i=d%256,i>0&&n(i,1,p)});const h=P.convertBackendValuesAndArrayBuffer(u,t.dtype);return this.convertAndCacheOnCPU(e,h),h}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const t=this.tensorMap.get(e),{values:n}=t;if(null!=n)return n;let r;if("complex64"===t.dtype){const e=await Promise.all([this.read(t.complexTensorInfos.real.dataId),this.read(t.complexTensorInfos.imag.dataId)]);r=G.mergeRealAndImagArrays(e[0],e[1])}else{const e=await this.getBufferData(t.resource);r=P.convertBackendValuesAndArrayBuffer(e,t.dtype)}return this.convertAndCacheOnCPU(e,r),r}copyBuffer(e){const t=e.size,n=this.bufferManager.acquireBuffer(t,e.usage);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),n}createTensorFromGPUData(e,t,n){let r=e.buffer;if("complex64"===n)throw new Error("Cannot write to a complex64 dtype. ");const s={id:this.nextDataId()};this.tensorMap.set(s,{dtype:n,shape:t,values:null,refCount:1,external:e.zeroCopy});const a=this.tensorMap.get(s),i=kH(a.dtype)*P.sizeFromShape(a.shape);if(e.buffer.size<i)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${i})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(r=this.copyBuffer(r)),a.resource=r,rO().makeTensorFromDataId(s,t,n,this)}readToGPU(e){const t=this.tensorMap.get(e),{values:n,dtype:r,shape:s,resource:a}=t;if("complex64"===r)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==a)throw null!=n?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const i=a.size,o=this.bufferManager.acquireBuffer(i,a.usage);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,o,0,i),this.submitQueue();const u=this.makeTensorInfo(s,r),l=rO().makeTensorFromTensorInfo(u);return this.tensorMap.get(u.dataId).resource=o,{tensorRef:l,buffer:o}}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>P.decodeString(e));return rM(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return rM(e.shape,e.dtype,t)}async time(e){this.supportTimestampQuery||this.hasTimestampQueryWarned||(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=P.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),a=P.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},o=await Promise.all(s);return i.kernelMs=P.sum(o),i.getExtraProfileInfo=()=>o.map((e,t)=>({name:a[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,i}makeTensorInfo(e,t,n){return"string"===t&&null!=n&&n.length>0&&P.isString(n[0])&&(n=n.map(e=>P.encodeString(e))),{dataId:this.write(n,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;const t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t}uploadToGPU(e){const t=this.tensorMap.get(e);if(null!=t.resource)return;const n=kH(t.dtype)*P.sizeFromShape(t.shape);let r;const s=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(t.values){if(r=this.bufferManager.acquireBuffer(n,s,!0),"unmapped"===r.mapState){const e=this.bufferManager.acquireBuffer(n,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),s=e.getMappedRange();"int32"===t.dtype||"bool"===t.dtype?new Int32Array(s).set(t.values):new Float32Array(s).set(t.values),e.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,r,0,n),this.stagingPendingDisposal.push(e)}else{const e=r.getMappedRange();"int32"===t.dtype||"bool"===t.dtype?new Int32Array(e).set(t.values):new Float32Array(e).set(t.values),r.unmap()}t.values=null}else r=this.bufferManager.acquireBuffer(n,s);t.resource=r}makeUniforms(e){let t=0,n=0;const r=[];let s=1;e.forEach(e=>{let a;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:a=4;break;case 2:a=8;break;case 3:case 4:case 5:case 6:a=16;break;default:P.assert(!1,()=>`Unsupported ${e.data.length}D shape`)}5!==n&&6!==n||(a=16),a>s&&(s=a),t=Math.ceil(t/a)*a,n=e.data.length,r.push(t),t+=4*e.data.length}),t=Math.ceil(t/s)*s;const a=new ArrayBuffer(t);e.forEach((e,t)=>{const n=r[t];"int32"===e.type?new Int32Array(a,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(a,n,e.data.length).set(e.data):new Float32Array(a,n,e.data.length).set(e.data)});const i=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(i,0,a,0,t),this.uniformPendingDisposal.push(i),{offset:0,size:t,buffer:i}}runWebGPUProgram(e,t,n,r,s){if(s||(s=this.makeTensorInfo(e.outputShape,n)),0===P.sizeFromShape(s.shape))return this.tensorMap.get(s.dataId).values=P.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),e.dispatch=((e,t)=>{const n=this.device.limits.maxComputeWorkgroupsPerDimension,r=t.dispatchLayout,s=t.dispatch;if(s.every(e=>e<=n))return s;P.assert(s[0]>n&&void 0===r.y&&void 0===r.z,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let a=Math.ceil(Math.sqrt(s[0]));return a>n?(a=Math.ceil(Math.cbrt(s[0])),P.assert(a<=n,()=>"Total dispatch size exceeds WebGPU maximum."),[a,a,a]):[a,a,1]})(0,e);const a=t.map((t,n)=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}});e.shaderKey=function(e,t,n){let r=e.shaderKey;if(null!=e.pixelsOpType)return r;const s=[],a=[];t.forEach(e=>{s.push(e.shape),a.push(e.dtype)}),s.push(n.shape),a.push(n.dtype);const i=t.map(e=>G.getBroadcastDims(e.shape,n.shape)),o=t.map(e=>P.arraysEqual(e.shape,n.shape)).join("_"),u=i.map(e=>e.join("_")).join(";"),l=pH(e)?"flatDispatch":"";return r+="_"+(e.workgroupSize?e.workgroupSize.join(","):"")+s.map(e=>e.length).join(",")+a.join(",")+e.variableNames.join(",")+u+o+l,r}(e,a,s);const i=FF().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=((e,t,n,r,s)=>{const a=function(e,t,n){const r=[],s=n.workgroupSize[0]*n.workgroupSize[1]*n.workgroupSize[2];if(n.outputComponent=n.outputComponent?n.outputComponent:1,r.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${pH(n)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${s}u +\n                localIndex);\n        `}\n      }\n    `),null!=n.pixelsOpType){const s=n.pixelsOpType===rH.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${dH(t.dtype,n.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${dH(e[0].dtype,n.outputComponent)}>;`;r.push(`\n        struct Uniform {\n          outShapeStrides : ${3===t.shape.length?"vec2<i32>":"i32"},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${s}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);const a=fH(n);return[lH,r.join("\n"),cH(t.shape),n.getUserCode(),uH(a,n)].join("\n")}let a,i,o="struct Uniforms { NAN : f32, INFINITY : f32, ";n.variableNames.forEach((t,n)=>{const r=aH(e[n].shape.length);o+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${r}, `,a=e[n].shape.length-1,i=aH(a),o+=`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides: ${i}, `});const u=aH(t.shape.length);o+=`outShape : ${u}, `,a=t.shape.length-1,i=aH(a),o+=`\n         outShapeStrides: ${i}, `,n.size&&(o+="size : i32, "),n.uniforms&&(o+=n.uniforms),o+="};",o=o.replace(/(\w+)\s*:\s*vec(5|6)/g,e=>"@align(16) "+e).replace(/vec(5|6)\s*,\s*(\w+)/g,(e,t,n)=>`vec${t}, @align(16) ${n}`),r.push(o),r.push(n.atomic?"\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    ":`\n      @group(0) @binding(0) var<storage, read_write> result: array<${dH(t.dtype,n.outputComponent)}>;\n    `),n.variableNames.forEach((t,s)=>{r.push(`\n      @group(0) @binding(${1+s}) var<storage, read> ${t}: array<${dH(e[s].dtype,n.variableComponents?n.variableComponents[s]:n.outputComponent)}>;\n        `)}),""!==o&&r.push(`\n      @group(0) @binding(${1+n.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);const l=function(e,t){const{x:n,y:r=[],z:s=[]}=t,a=e.length,i=n.length+r.length+s.length;if(i!==a)return"";if(n.length===a)return`fn getOutputCoords() -> ${aH(a)}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;let o="";const u=[n,r,s];for(let p=0;p<u.length;p++){const e=u[p];if(0!==e.length)if(1===e.length)o+=`let d${e[0]} = i32(globalId[${p}]);`;else{const t=tH(e,"uniforms.outShape");o+=`var index${p} = i32(globalId[${p}]);`;for(let n=0;n<t.length;n++)o+=`let d${e[n]} = index${p} / ${t[n]};`,o+=n===t.length-1?`let d${e[n+1]} = index${p} - d${e[n]} * ${t[n]};`:`index${p} = index${p} - d${e[n]} * ${t[n]};`}}const l=[];for(let p=0;p<i;p++)l.push("d"+p);const c=aH(i);let h=`fn getOutputCoords() -> ${c} {\n  ${o}\n`;return h+=0===l.length?`return ${c}(0); }`:`return ${c}(${l.join(",")}); }`,h}(t.shape,n.dispatchLayout),c=[lH,r.join("\n")+"\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n",cH(t.shape),l,hH(t.shape.length)];n.atomic||c.push(function(e,t,n){const r=e.length,s=dH(t,n);let a=`fn setOutputAtIndex(flatIndex : i32, value : ${sH(n)}) {\n      result[flatIndex] = ${s}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${sH(n,"i32")}) {\n      result[flatIndex] = ${s}(value);\n    }\n    `;if(r>=2){const e=["d0","d1","d2","d3","d4","d5"].slice(0,r),t=aH(r);a+=`\n      fn setOutputAtCoords(${e.map(e=>e+" : i32").join(", ")}, value : ${sH(n)}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex${1===n?"":" / "+n}, value);\n      }\n      fn setOutputAtCoordsI32(${e.map(e=>e+" : i32").join(", ")}, value : ${sH(n,"i32")}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex${1===n?"":" / "+n}, value);\n      }\n    `}return a}(t.shape,t.dtype,n.outputComponent)),n.variableNames.forEach((t,n)=>{c.push(""+cH(e[n].shape,t))});const h=e.map((e,r)=>function(e,t,n,r){let s=function(e,t){const n=e.name,r=e.shape.length,s=aH(r),a="get"+n.charAt(0).toUpperCase()+n.slice(1),i=["d0","d1","d2","d3","d4","d5"].slice(0,r),o=i.map(e=>e+" : i32").join(", ");if(r<1)return`\n      fn ${a}() -> ${sH(t)} {\n        return ${sH(t)}(${n}[0]);\n      }\n    `;const u=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`;let l=r+"D";return 0===r&&(l="1D"),`\n    fn ${a}(${o}) -> ${sH(t)} {\n      return ${sH(t)}(${n}[getIndexFromCoords${l}(${s}(${i.join(",")}),\n        ${u})${1===t?"":" / "+t}]);\n    }\n   `}(e,n);return e.shape.length<=t.length&&(s+=function(e,t,n,r){const s=e.name,a=s.charAt(0).toUpperCase()+s.slice(1),i="get"+a+"ByOutput",o=e.shape.length,u=t.length,l=aH(u);if(P.arraysEqual(e.shape,t)&&r)return`\n    fn ${i}Index(globalIndex : i32) -> ${sH(n)} {\n      return ${sH(n)}(${s}[globalIndex]);\n    }\n\n    fn ${i}Coords(coords : ${l}) -> ${sH(n)} {\n      return ${sH(n)}(${s}[${u>1?"getOutputIndexFromCoords(coords)":"coords"}${1===n?"":" / "+n}]);\n    }\n    `;const c=G.getBroadcastDims(e.shape,t),h=u-o;let p="";if(0===o)return`\n    fn ${i}Index(globalIndex : i32) -> ${sH(n)}{\n      return get${a}();\n    }\n\n    fn ${i}Coords(coords : ${l}) -> ${sH(n)}{\n      return get${a}();\n    }\n  `;p=u<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${iH(e+h)} = 0;`).join("\n");let d="";d=u<2&&o>0?"coords":u>1?`${aH(o)}(${e.shape.map((e,t)=>"coords."+iH(t+h)).join(", ")})`:"coords";const f=`uniforms.${s.charAt(0).toLowerCase()+s.slice(1)}Shape`,m=o+"D";return`\n  fn ${i}Index(globalIndex : i32) -> ${sH(n)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${p}\n    return ${sH(n)}(${s}[getIndexFromCoords${m}(${d}, ${f})${1===n?"":" / "+n}]);\n  }\n\n  fn ${i}Coords(coordsIn : ${l}) -> ${sH(n)} {\n    var coords = coordsIn;\n    ${p}\n    return ${sH(n)}(${s}[getIndexFromCoords${m}(${d}, ${f})${1===n?"":" / "+n}]);\n  }\n`}(e,t,n,r)),s}(e,t.shape,n.variableComponents?n.variableComponents[r]:n.outputComponent,n.dispatchLayout.x.length===t.shape.length)).join("\n");c.push(h),c.push(n.getUserCode());const p=fH(n);return c.push(uH(p,n)),c.join("\n")}(n,{dtype:r.dtype,shape:r.shape},t),i=e.createShaderModule({code:a,label:t.constructor.name});let o=FF().get("WEBGPU_PRINT_SHADER");if(""!==o){o=o.toLowerCase();const e=o.split(",");("all"===o||e.some(e=>t.shaderKey.toLowerCase().includes(e)))&&(console.group(t.shaderKey),console.debug(a),console.groupEnd())}return s?e.createComputePipelineAsync({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})})(this.device,e,a,s,i)),e.pipeline=this.pipelineCache[e.shaderKey],i||this.recordAndSubmit(e,s,t,r),s}recordAndSubmit(e,t,n,r){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let s=[],a=[];if(null==e.pixelsOpType){s.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=n.concat(t).map(e=>e.shape);const e="int32";a.map(t=>{s.push({type:e,data:t});const n=P.computeStrides(t);s.push({type:e,data:n})})}else{const e=P.computeStrides(t.shape);s.push({type:"int32",data:e})}if(e.size){const t=P.sizeFromShape(e.outputShape);s.push({type:"int32",data:[e.outputComponent?t/e.outputComponent:t]})}r&&(s=[...s,...r]);const i=[this.tensorToBinding(t),...n.map(e=>this.tensorToBinding(e)),this.makeUniforms(s)];n.forEach(e=>{this.commandQueueOwnedIds.add(e.dataId)}),this.commandQueueOwnedIds.add(t.dataId);const o=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:i.map((e,t)=>({binding:t,resource:e}))}),u=null!=this.activeTimers;this.ensureCommandEncoderReady();const l={};u&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),l.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(l)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(l)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,o),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(u||FF().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===rH.DRAW)&&(this.endComputePassEncoder(),u?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);const e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);const t=new BigUint64Array(e.getMappedRange()),n=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),n}shouldExecuteOnCPU(e,t=CH){return FF().getBool("WEBGPU_CPU_FORWARD")&&e.every(e=>null==this.tensorMap.get(e.dataId).resource&&P.sizeFromShape(e.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}var EH,AH;function RH(e,t){let n;do{switch(e){case EH.ATAN2:n="let resultTemp = atan2(a, b);";break;case EH.MAX:n="let resultTemp = max(a, b);";break;case EH.MIN:n="let resultTemp = min(a, b);";break;case EH.MOD:n=t?"\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n":"\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n";break;case EH.NOT_EQUAL:n=t?"\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n":"\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n";break;case EH.POW:n=t?"\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n":"\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n";break;default:continue}let r,s,a;return t?(r="isnanVec4",s="vec4<f32>",a="vec4<bool>"):(r="isnan",s="f32",a="bool"),`\n      let aIsNaN = ${r}(a);\n      let aPostLegalization = select(a, ${s}(42), aIsNaN);\n      let bIsNaN = ${r}(b);\n      let bPostLegalization = select(b, ${s}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${n}\n        return select(\n            resultTemp, ${s}(valueForNaN),\n            ${a}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `}while(0);switch(e){case EH.ADD:n="let resultTemp = a + b;";break;case EH.COMPLEX_MULTIPLY_IMAG:n="let resultTemp = areal * bimag + aimag * breal;";break;case EH.COMPLEX_MULTIPLY_REAL:n="let resultTemp = areal * breal - aimag * bimag;";break;case EH.DIV:n="let resultTemp = a / b;";break;case EH.ELU_DER:n="let resultTemp = select(a * (b + 1.0), a, b >= b - b);";break;case EH.EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n";break;case EH.FLOOR_DIV:n="\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n";break;case EH.GREATER:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n";break;case EH.GREATER_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n";break;case EH.LESS:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n";break;case EH.LESS_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n";break;case EH.LOGICAL_AND:return t?"return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));":"return f32(a >= 1.0 && b >= 1.0);";case EH.LOGICAL_OR:return t?"return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));":"return f32(a >= 1.0 || b >= 1.0);";case EH.MUL:n="let resultTemp = a * b;";break;case EH.PRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return b * a; }  return a;";case EH.SQUARED_DIFFERENCE:n="let resultTemp = (a - b) * (a - b);";break;case EH.SUB:n="let resultTemp = a - b;"}return`\n    ${n}\n    return resultTemp;\n  `}TH.nextDataId=0,SH()&&function(e,t,n=1){UD.registerBackend("webgpu",t,n)}(0,async()=>{const e={powerPreference:FF().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(e),n={},r=[];t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("bgra8unorm-storage")&&r.push(["bgra8unorm-storage"]),n.requiredFeatures=r;const s=t.limits;n.requiredLimits={maxComputeWorkgroupStorageSize:s.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:s.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:s.maxStorageBufferBindingSize,maxBufferSize:s.maxBufferSize,maxComputeWorkgroupSizeX:s.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:s.maxComputeInvocationsPerWorkgroup};const a=await t.requestDevice(n),i=await t.requestAdapterInfo();return new TH(a,i)},3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.ELU_DER=5]="ELU_DER",e[e.EQUAL=6]="EQUAL",e[e.FLOOR_DIV=7]="FLOOR_DIV",e[e.GREATER=8]="GREATER",e[e.GREATER_EQUAL=9]="GREATER_EQUAL",e[e.LESS=10]="LESS",e[e.LESS_EQUAL=11]="LESS_EQUAL",e[e.LOGICAL_AND=12]="LOGICAL_AND",e[e.LOGICAL_OR=13]="LOGICAL_OR",e[e.MAX=14]="MAX",e[e.MIN=15]="MIN",e[e.MOD=16]="MOD",e[e.MUL=17]="MUL",e[e.NOT_EQUAL=18]="NOT_EQUAL",e[e.POW=19]="POW",e[e.PRELU=20]="PRELU",e[e.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",e[e.SUB=22]="SUB"}(EH||(EH={})),function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(AH||(AH={}));const $H=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${G.ERF_P};\n  let a1 = ${G.ERF_A1};\n  let a2 = ${G.ERF_A2};\n  let a3 = ${G.ERF_A3};\n  let a4 = ${G.ERF_A4};\n  let a5 = ${G.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,_H=`\n  if (a >= 0.0) {\n    return ${G.SELU_SCALE} * a;\n  } else {\n    return ${G.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;function FH(e,t){switch(e){case AH.ABS:return"return abs(a);";case AH.ACOS:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n";case AH.ACOSH:return"\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n";case AH.ASIN:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n";case AH.ASINH:return"return asinh(a);";case AH.ATAN:return"\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n";case AH.ATANH:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n";case AH.COS:return"return cos(a);";case AH.COSH:return"\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n";case AH.CEIL:return"return ceil(a);";case AH.ELU:return t?"\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n":"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case AH.ERF:return $H;case AH.EXP:return"return exp(a);";case AH.EXPM1:return"return exp(a) - 1.0;";case AH.FLOOR:return"return floor(a);";case AH.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case AH.IS_INF:return"return f32(isinf(a));";case AH.IS_NAN:return"return f32(isnan(a));";case AH.LINEAR:return"return a;";case AH.LOG:return"if (a < 0.0) { return uniforms.NAN; }\n  return log(a);";case AH.LOG1P:return"\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n";case AH.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case AH.NEG:return"return -a;";case AH.LEAKYRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return uniforms.alpha * a; } return a;";case AH.RECIPROCAL:return"return 1.0 / a;";case AH.RELU:return t?"\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n":"return select(a, 0.0, a < 0.0);";case AH.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case AH.ROUND:return"return round(a);";case AH.RSQRT:return"return inverseSqrt(a);";case AH.SELU:return _H;case AH.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case AH.SIGN:return"return sign(a);";case AH.SIN:return"return sin(a);";case AH.SINH:return"\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n";case AH.SOFTPLUS:return"\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n";case AH.SQRT:return"return sqrt(a);";case AH.SQUARE:return"return a * a;";case AH.STEP:return"\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n";case AH.TAN:return"return tan(a);";case AH.TANH:return"\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n";case AH.TO_INT:return"return f32(i32((a)));";default:throw new Error(`BinaryType ${e} is not implemented!`)}}function DH(e,t=!1,n=!1,r=3){if(null===e)return"";let s="";if("linear"===e)s=FH(AH.LINEAR);else if("relu"===e)s=FH(AH.RELU,n);else if("elu"===e)s=FH(AH.ELU,n);else if("relu6"===e)s=FH(AH.RELU6,n);else if("prelu"===e)s=RH(EH.PRELU,n);else if("sigmoid"===e)s=FH(AH.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);s=FH(AH.LEAKYRELU,n)}const a=sH(n?4:1);let i="";return i=t?`\n      fn activation(a : ${a}, coords : vec${r}<i32>) -> ${a} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${s}\n      }`:`\n      fn activation(a : ${a}, coords : vec${r}<i32>) -> ${a} {\n        ${s}\n      }`,i}function OH(e,t){return`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function MH(e,t,n=!1,r=!1,s=!1,a=1){P.assert(e&&1===a||!e,()=>`transposeA ${e} is not compatible with component size ${a}`);const i=`\n      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,o=t?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${sH(a)} {\n    var value = ${sH(a)}(0.0);\n    ${n&&s?i:`\n    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${i}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${sH(a)} {\n    var value = ${sH(a)}(0.0);\n    ${o}\n    return value;\n  }\n  `}function PH(e,t,n,r,s=!1,a=!1,i=!1,o=1){return`\n  ${MH(n,r,s,a,i,o)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${sH(o)}) {\n    ${s&&a?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${OH(e,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function zH(e,t,n=!1,r=32,s=!1,a=32,i=!1){const o=t[1]*e[1],u=t[0]*e[0],l=n?o:r,c=n?r:o,h=l/t[0],p=r/t[1],d=e[1],f=e[0];return P.assert((n&&4===h&&4===e[1]||!n&&(3===h||4===h))&&l%t[0]==0&&r%t[1]==0&&4===e[0],()=>`If transposeA ${n} is true, innerElementSize ${h} and workPerThread[1] ${e[1]} must be 4.\n          Otherwise, innerElementSize ${h} must be 3 or 4.\n      tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`),`\n  var<workgroup> mm_Asub : array<array<vec${h}<f32>, ${l/h}>, ${c}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${u/e[0]}>, ${r}>;\n\n  ${oH()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${d};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${d};\n    let globalCol = i32(globalId.x) * ${f};\n    let batch = ${s?"0":"i32(globalId.z)"};\n    let batchA = ${s||!i?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${s||!i?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${o};\n\n    let numTiles = ${s?""+Math.ceil(a/r):`(uniforms.dimInner - 1) / ${r} + 1`};\n    var kStart = ${s?"i32(globalId.z) * "+a:"0"};\n\n    var acc: array<vec4<f32>, ${d}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${p};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${d}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${t});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${t});\n        `)(n,h)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${((e,t,n,r)=>{if(e)return`\n      for (var k = 0; k < ${r}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${n}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;{let e="",s="";for(let n=0;n<t;n++)e+=`let BCached${n} = mm_Bsub[k * ${t} + ${n}][tileCol];`,s+=`acc[i] = fma(BCached${n}, vec4<f32>(ACached[${n}]), acc[i]);`;return`\n      for (var k = 0; k < ${r/t}; k++) {\n        ${e}\n        for (var i = 0; i < ${n}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${s}\n        }\n      }`}})(n,h,d,r)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${d}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}const LH=e=>e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function BH(e,t,n=!1,r=32,s=!1,a=32,i=!1,o=!1){const u=e[1]*t[1],l=e[0]*t[0],c=n?u:r,h=n?r:u;P.assert(h%t[1]==0&&c%t[0]==0&&r%t[1]==0,()=>`tileAHight ${h} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${r} must be divisible by workgroupSize[1]${t[1]}`);const p=h/t[1],d=c/t[0],f=r/t[1],m=e[1],g=e[0],y=i?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${u};\n      let globalColStart = i32(workgroupId.x) * ${l};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${t[1]}) {\n          for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\n            ${LH(n)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${t[1]}) {\n              for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${g}>;\n        for (var k = 0; k < ${r}; k++) {\n          for (var inner = 0; inner < ${g}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n            let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${t[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${m};\n  let tileCol = i32(localId.x) * ${g};\n\n  let globalRow = i32(globalId.y) * ${m};\n  let globalCol = i32(globalId.x) * ${g};\n  let globalRowStart = i32(workgroupId.y) * ${u};\n\n  let tileRowA = i32(localId.y) * ${p};\n  let tileColA = i32(localId.x) * ${d};\n  let tileRowB = i32(localId.y) * ${f};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${d}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${LH(n)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${r};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${g}>;\n    for (var k = 0; k < ${r}; k++) {\n      for (var inner = 0; inner < ${g}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(n)}\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${c}>, ${h}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${r}>;\n\n    ${oH()} {\n      let batch = ${s?"0":"i32(globalId.z)"};\n      let batchA = ${s||!o?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${s||!o?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${s?""+Math.ceil(a/r):`(uniforms.dimInner - 1) / ${r} + 1`};\n      var kStart = ${s?"i32(globalId.z) * "+a:"0"};\n\n      var acc : array<array<f32, ${g}>, ${m}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${g}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${y}\n    }\n  `}class WH{constructor(e,t,n=!1,r=!1,s=null,a=null,i=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};const u=n?e[1]:e[2];if(this.isVec4=(u%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!r,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const e=bH(t[1],u,t[2],n);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const l=null!=s,c=null!=i;l&&this.variableNames.push("bias"),c&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=n,this.transposeB=r,this.addBias=l,this.activation=a,this.hasPreluActivationWeights=c,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${n}_${r}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,n){const r=this.workgroupSize[1]*this.elementsPerThread[1],s=this.workgroupSize[0]*this.elementsPerThread[0];return this.tileInner=!this.isVec4&&this.isVectorA?4*this.workgroupSize[0]:s,[e%r==0,t%s==0,n%this.tileInner==0]}getUserCode(){return`\n      ${DH(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${PH(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?zH(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,t=!1){P.assert(1===e[1]&&1===e[2],()=>`A linear work group size is required. But got ${e}.`);const n=4*e[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;\n\n    ${oH()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${n} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${n} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(e=>e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(t)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${n/4}; k++) {\n          let rowB = t * ${n} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):BH(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `}}class VH{constructor(e,t=!1,n=!1,r=null,s=null,a=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize);const i=null!=r,o=null!=a;i&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=i,this.activation=s,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${n}`}getUserCode(){var e;return`\n      ${DH(this.activation,this.hasPreluActivationWeights)}\n      ${PH(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${e=this.workgroupSize[0],`\n    var<workgroup> sumValues : array<f32, ${e}>;\n    ${oH()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${e}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${e/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}\n    `}}class UH{constructor(e,t,n,r=!1,s=!1,a=null,i=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];const u=null!=a;u&&this.variableNames.push("bias");const l=null!=o;l&&this.variableNames.push("preluActivationWeights"),this.transposeA=r,this.transposeB=s,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=l,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${r}_${s}`}getUserCode(){return`\n      ${DH(this.activation,this.hasPreluActivationWeights)}\n      ${PH(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){const t=e[1],n=e[0],r=t>n?t:n;return`\n  var<workgroup> mm_Asub : array<array<f32, ${r}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${n}>, ${r}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${oH()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${r} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${r};\n    globalRowB = globalRowB + ${r};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${r};\n      globalRowB = globalRowB + ${r};\n\n      for (var k = 0; k < ${r}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}}class GH{constructor(e,t,n=!1,r=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,P.assert(1===e[0],()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};const s=(n&&this.outputShape[1]%4==0||!n&&t%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=s?4:1,s||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=yH(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=n,this.transposeB=r,this.shaderKey=`matMulSplitK_${n}_${r}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){const e=this.outputComponent;return`\n      ${MH(!1,this.transposeB,!1,!1,!1,e)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${sH(e)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${e}; i = i + 1) {\n            ${nH("&result[flatIndex + i]",e>1?"value[i]":"value","float32")}\n          }\n        }\n      }\n      ${4===e?zH(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):BH(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}}class HH{constructor(e,t=null,n=null,r=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=r,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey="biasActivation_"+n}getUserCode(){return`\n    ${DH(this.activation,this.hasPreluActivationWeights)}\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${OH(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}}class jH{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}}function qH(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||P.inferDtype(s),"string"===a){const e=P.getArrayFromDType(a,P.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new jH(r);return t.runWebGPUProgram(e,[],a,[{type:"float32",data:[s]}])}}const KH={kernelName:"Fill",backendName:"webgpu",kernelFunc:qH};function XH(e){const{inputs:t,attrs:n}=e,{x:r}=t,{shape:s}=n,a=P.sizeFromShape(r.shape),i=P.inferFromImplicitShape(s,a),o=P.sizeFromShape(i);return P.assert(a===o,()=>`The new shape (${i}) has ${o} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.backend.incRef(r.dataId),{dataId:r.dataId,shape:i,dtype:r.dtype}}const YH={kernelName:"Reshape",backendName:"webgpu",kernelFunc:XH};function ZH({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,h=n?e.shape[l-2]:e.shape[l-1],p=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=P.sizeFromShape(m),b=P.sizeFromShape(g),x=z.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);P.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`);const w=n?[y,h,d]:[y,d,h],v=r?[b,f,p]:[b,p,f],k=XH({inputs:{x:e},backend:s,attrs:{shape:w}}),S=XH({inputs:{x:t},backend:s,attrs:{shape:v}}),I=[k,S],N=Math.max(y,b),C=[k,S],T=[{type:"int32",data:[d]},{type:"int32",data:[f]},{type:"int32",data:[h]}];let E,A;const R=[N,d,f];let $=FF().get("WEBGPU_MATMUL_PROGRAM_TYPE");if($<0){const e=FF().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),t=e>0?e:s.thresholdToIncreaseWorkgroups,n=N*Math.ceil(d/32)*Math.ceil(f/32);$=n<=t||d<=8&&n<=2*t?N*d*f<=128?NH.MatMulReduceProgram:1===N&&p>=2e3?NH.MatMulSplitKProgram:NH.MatMulSmallOutputSizeProgram:NH.MatMulPackedProgram}switch($){case NH.MatMulReduceProgram:E=new VH(R,n,r,a,u,i);break;case NH.MatMulSplitKProgram:if(A=qH({backend:s,attrs:{shape:R,value:0,dtype:e.dtype}}),E=new GH(R,p,n,r),a||u){A=s.runWebGPUProgram(E,C,e.dtype,T,A);const t=new HH(A.shape,a,u,i);let n=null;const r=[A];a&&r.push(a),i&&r.push(i),"leakyrelu"===u&&(n=[{type:"float32",data:[o]}],t.uniforms+=" alpha : f32,");const l=s.runWebGPUProgram(t,r,A.dtype,n);I.push(A);const c=XH({inputs:{x:l},backend:s,attrs:{shape:x}});I.push(l);for(const e of I)s.disposeData(e.dataId);return c}break;case NH.MatMulSmallOutputSizeProgram:E=new UH(w,v,R,n,r,a,u,i);break;case NH.MatMulPackedProgram:const t=s.adapterInfo.isIntel();E=new WH(w,R,n,r,a,u,i,t);break;default:throw new Error(`Unsupported MatMulProgramType ${$}.`)}a&&C.push(a),i&&C.push(i),"leakyrelu"===u&&(T.push({type:"float32",data:[o]}),E.uniforms+=" alpha : f32,"),A=s.runWebGPUProgram(E,C,e.dtype,T,A);const _=XH({inputs:{x:A},backend:s,attrs:{shape:x}});I.push(A);for(const F of I)s.disposeData(F.dataId);return _}const QH={kernelName:"_FusedMatMul",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return ZH({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}};class JH{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=G.assertAndGetBroadcastShape(t,n),this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="binaryOpComplex_"+e,this.op=e}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${RH(this.op,!1)}\n      }\n\n      ${oH("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}}class ej{constructor(e,t,n){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=G.assertAndGetBroadcastShape(t,n),this.dispatchLayout=vH(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&n.length>1&&t[0]<128,this.useSharedMemoryWithB=n.length<=1&&t.length>1&&n[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?n[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{const r=t.length>0&&t[t.length-1]%4==0,s=n.length>0&&n[n.length-1]%4==0;r&&s?(this.outputComponent=4,this.variableComponents=[4,4]):r&&(P.isScalarShape(n)||1===n[n.length-1])||s&&(P.isScalarShape(t)||1===t[t.length-1])?(this.outputComponent=4,this.variableComponents=r?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e;const t=4===this.outputComponent?"vec4<f32>":"f32",n=`\n    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {\n      ${RH(this.op,4===this.outputComponent)}\n    };\n    `;if("shared"===this.type){const t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",r=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];\n          let b = getBByOutputIndex(index);`;e=`\n        ${n}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${oH("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${r}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else e=`\n       ${n}\n       ${oH("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${t}(getAByOutputCoords(coords));\n           let b = ${t}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return e}}function tj(e){const{inputs:t}=e,{x:n}=t;return e.backend.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}const nj={kernelName:"Identity",backendName:"webgpu",kernelFunc:tj};function rj(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.tensorMap.get(a.dataId),o=tj({inputs:{x:r},backend:n}),u=tj({inputs:{x:s},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const sj={kernelName:"Complex",backendName:"webgpu",kernelFunc:rj};class aj{constructor(e,t,n=""){this.variableNames=["A"],this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey="unary_"+t}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${FH(this.op,!1)}\n      }\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}}function ij({opType:e,cpuKernelImpl:t,dtype:n}){return({inputs:r,backend:s})=>{const{x:a}=r,i=s,o=n||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=t){const e=i.tensorMap.get(a.dataId),n=t(e.values,o);return i.makeTensorInfo(a.shape,o,n)}const u=new aj(a.shape,e);return i.runWebGPUProgram(u,[a],o)}}function oj({opType:e,cpuKernelImpl:t,supportsComplex:n=!1,dtype:r}){return({inputs:s,backend:a})=>{const{a:i,b:o}=s,u=a;if(n&&"complex64"===i.dtype){const t=u.tensorMap.get(i.dataId),n=u.tensorMap.get(o.dataId);let r,s;if(e!==EH.MUL)[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:i.shape},a={dataId:r.dataId,dtype:r.dtype,shape:o.shape},l=new ej(e,i.shape,o.shape);return u.runWebGPUProgram(l,[s,a],DD(n.dtype,r.dtype))});else{const e=new JH(EH.COMPLEX_MULTIPLY_REAL,i.shape,o.shape),a=new JH(EH.COMPLEX_MULTIPLY_IMAG,i.shape,o.shape),l=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:i.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:i.shape},{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o.shape}];r=u.runWebGPUProgram(e,l,"float32"),s=u.runWebGPUProgram(a,l,"float32")}const a=rj({inputs:{real:r,imag:s},backend:u});return u.disposeData(r.dataId),u.disposeData(s.dataId),a}const l=r||DD(i.dtype,o.dtype);if(("string"===i.dtype||"string"===o.dtype||u.shouldExecuteOnCPU([i,o]))&&null!=t){const e=u.tensorMap.get(i.dataId).values,n=u.tensorMap.get(o.dataId).values,r="string"===i.dtype?G.fromUint8ToStringArray(e):e,s="string"===i.dtype?G.fromUint8ToStringArray(n):n,[a,c]=t(i.shape,o.shape,r,s,l);return u.makeTensorInfo(c,l,a)}const c=new ej(e,i.shape,o.shape);return u.runWebGPUProgram(c,[i,o],l)}}function uj(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&P.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the CPU backend.")})}function lj(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}function cj(e){return(t,n,r,s,a)=>{const i=G.assertAndGetBroadcastShape(t,n),o=i.length,u=P.computeStrides(i),l=P.sizeFromShape(i),c=P.getTypedArrayFromDType(a,l),h=t.length,p=n.length,d=P.computeStrides(t),f=P.computeStrides(n),m=G.getBroadcastDims(t,i),g=G.getBroadcastDims(n,i);if(m.length+g.length===0)for(let y=0;y<c.length;++y)c[y]=e(r[y%r.length],s[y%s.length]);else for(let y=0;y<c.length;++y){const t=P.indexToLoc(y,o,u),n=t.slice(-h);m.forEach(e=>n[e]=0);const a=P.locToIndex(n,h,d),i=t.slice(-p);g.forEach(e=>i[e]=0);const l=P.locToIndex(i,p,f);c[y]=e(r[a],s[l])}return[c,i]}}function hj(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}function pj(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function dj(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=P.toTypedArray([0],n),[s,a]=cj((e,t)=>e!==t?1:0)(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function fj(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return pj({inputs:{x:s},backend:n});const e=function e(t,n,r="float32"){if("complex64"===r)return hj({inputs:{real:e(t,n,"float32"),imag:e(t,n,"float32")},backend:t});const s=P.makeZerosTypedArray(P.sizeFromShape(n),r);return t.makeTensorInfo(n,r,s)}(n,s.shape,s.dtype),t=fj({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=hj({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}({inputs:{input:s},backend:n}),t=fj({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!P.hasEncodingLoss(s.dtype,a)){const e=pj({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(s.dataId).values,[o,u,l]=dj(i,s.shape,s.dtype,a);return n.makeTensorInfo(o,u,l)}function mj(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:i}=n,o=s;uj([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c="string"===a.dtype?G.fromUint8ToStringArray(u):u,h="string"===a.dtype?G.fromUint8ToStringArray(l):l,p=r||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:s})=>{const{a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=fj({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.imag,s=o.data.get(t.complexTensorInfos.real.dataId).values,u=o.data.get(r.dataId).values,l=fj({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(l.dataId),h=c.complexTensorInfos.imag,p=o.data.get(c.complexTensorInfos.real.dataId).values,d=o.data.get(h.dataId).values,[f,m,g]=n(a.shape,i.shape,s,u,p,d),y=o.makeTensorInfo(g,"float32",f),b=o.makeTensorInfo(g,"float32",m),x=hj({inputs:{real:y,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(l),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(b),x}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function gj(e){return(t,n,r,s,a,i)=>{const o=G.assertAndGetBroadcastShape(t,n),u=P.sizeFromShape(o),l=o.length,c=P.computeStrides(o),h=P.getTypedArrayFromDType("float32",u),p=P.getTypedArrayFromDType("float32",u),d=G.getBroadcastDims(t,o),f=G.getBroadcastDims(n,o),m=G.mergeRealAndImagArrays(r,s),g=G.mergeRealAndImagArrays(a,i),y=t.length,b=P.computeStrides(t),x=n.length,w=P.computeStrides(n);if(d.length+f.length===0)for(let v=0;v<h.length;v++){const t=v%m.length,n=v%g.length,r=e(m[2*t],m[2*t+1],g[2*n],g[2*n+1]);h[v]=r.real,p[v]=r.imag}else for(let v=0;v<h.length;v++){const t=P.indexToLoc(v,l,c),n=t.slice(-y);d.forEach(e=>n[e]=0);const r=P.locToIndex(n,y,b),s=t.slice(-x);f.forEach(e=>s[e]=0);const a=P.locToIndex(s,x,w),i=e(m[2*r],m[2*r+1],g[2*a],g[2*a+1]);h[v]=i.real,p[v]=i.imag}return[h,p,o]}}const yj=cj((e,t)=>e+t),bj=gj((e,t,n,r)=>({real:e+n,imag:t+r}));function xj(e,t,n,r,s){const a=P.sizeFromShape(r),i=P.makeZerosTypedArray(s,n);for(let o=0;o<e.length;o++){const n=e[o];if(n<0)throw new Error("Input x must be non-negative!");n>=s||(i[n]+=a>0?t[o]:1)}return i}function wj(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=rM([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(r?1:t.size>0?i.get(o,a)+t.get(o,s):i.get(o,a)+1,o,a)}return i}mj("Add",yj,bj);const vj=cj((e,t)=>e&t);function kj(e){return(t,n,r)=>{const s=P.getArrayFromDType(n,t.length);for(let a=0;a<t.length;++a)s[a]=e(t[a],r);return s}}function Sj(e,t,n){return Ij(e,kj(t),n)}function Ij(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;uj(i,e);const o=a,u=o.data.get(i.dataId).values;let l;if("string"===i.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");l=G.fromUint8ToStringArray(u)}else l=u;const c=n||i.dtype,h=t(l,c,s);return o.makeTensorInfo(i.shape,c,h)}}mj("BitwiseAnd",vj);const Nj=kj(e=>Math.ceil(e));function Cj(e,t,n,r){const s=P.getArrayFromDType(n,P.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach(e=>{const n=P.sizeFromShape(e.shape);s.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{const a="string"===n?G.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[o+t]=a[i++]}r+=e.shape[1]})}return s}Ij("Ceil",Nj);const Tj=cj((e,t)=>e===t?1:0),Ej=(mj("Equal",Tj,null,"bool"),kj(e=>Math.exp(e))),Aj=(Ij("Exp",Ej,"float32"),kj(e=>Math.expm1(e))),Rj=(Ij("Expm1",Aj),kj(e=>Math.floor(e))),$j=(Ij("Floor",Rj),cj((e,t)=>Math.floor(e/t)));function _j(e,t,n,r,s,a,i,o,u){const l=rM([r,a],n);for(let c=0;c<r;c++){const n=[];let r=0;for(let t=0;t<s;t++){const a=e[c*s+t];r+=a*i[t],n.push(a)}if(r<0||r>=u/a)throw new Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<a;e++)l.values[c*a+e]=t.get(...t.indexToLoc(r*a+e))}return l}function Fj(e,t,n){const r=rM(n,e.dtype);for(let s=0;s<r.size;++s){const n=r.indexToLoc(s).slice(),a=t.locToIndex([n[0],n[2]]);n[2]=t.values[a];const i=e.locToIndex(n);0<=i&&i<e.values.length&&(r.values[s]=e.values[i])}return r}mj("FloorDiv",$j,null,"int32");const Dj=cj((e,t)=>e>t?1:0),Oj=(mj("Greater",Dj,null,"bool"),cj((e,t)=>e>=t?1:0)),Mj=(mj("GreaterEqual",Oj,null,"bool"),cj((e,t)=>e<t?1:0)),Pj=(mj("Less",Mj,null,"bool"),cj((e,t)=>e<=t?1:0));function zj(e,t,n){const r=(t-e)/(n-1),s=P.makeZerosTypedArray(n,"float32");s[0]=e;for(let a=1;a<s.length;a++)s[a]=s[a-1]+r;return s}mj("LessEqual",Pj,null,"bool");const Lj=kj(e=>Math.log(e));function Bj(e,t,n,r){const s=P.getTypedArrayFromDType(r,P.sizeFromShape(n));for(let a=0;a<s.length;++a){const n=a*t;let r=e[n];for(let s=0;s<t;++s){const t=e[n+s];(Number.isNaN(t)||t>r)&&(r=t)}s[a]=r}return s}Ij("Log",Lj);const Wj=cj((e,t)=>Math.max(e,t)),Vj=(mj("Maximum",Wj),cj((e,t)=>Math.min(e,t))),Uj=(mj("Minimum",Vj),cj((e,t)=>e*t)),Gj=gj((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}));function Hj(e,t,n){const r=P.createScalarValue(-1,n);return Uj([],t,r,e,n)}mj("Multiply",Uj,Gj);const jj=cj((e,t)=>e!==t?1:0);function qj(e,t,n,r,s){const a=t.length,i=P.sizeFromShape(t),o=P.computeStrides(t),u=P.computeStrides(s),l=P.getTypedArrayFromDType(n,P.sizeFromShape(s));for(let c=0;c<i;++c){const t=P.indexToLoc(c,a,o),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[r[e]];l[P.locToIndex(n,a,u)]=e[c]}return l}function Kj(e,t,n,r){const[s,a]=G.computeOutAndReduceShapes(e,r),i=DD(t,"int32"),o=P.makeZerosTypedArray(P.sizeFromShape(s),i),u=P.sizeFromShape(a);for(let l=0;l<o.length;++l){const e=l*u;let t=1;for(let r=0;r<u;++r)t*=n[e+r];o[l]=t}return{outVals:o,outShape:s,outDtype:i}}function Xj(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function Yj(e,t,n,r,s,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach((e,r)=>{if(e<0||e>=n){const s=P.indexToLoc(r,t.length,P.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}})}(a,i,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:h}=function(e,t,n,r){const s=[];let a=0;const i=new Array(t.length-1+n.length).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let o=1;for(let u=0;u<t.length-1;++u){o*=t[u];const e=t[u+1];for(let t=1;t<o+1;++t)i[u].push(t*e)}for(let u=0;u<e.length;++u){let r=e[u],o=e[u]+1;for(let e=0;e<n.length;++e){const s=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-s[r];for(let n=r;n<o;++n)i[a].push(s[n+1]+t)}r=s[r],o=s[o]}o!==r&&(s.push([r,o]),a+=o-r)}return{outSplits:i,valueSlices:s,numValues:a}}(a,i,e,u),p=function(e){const t=[];for(let n=0;n<e.length;++n){const r=P.getArrayFromDType("int32",e[n].length);t.push(r),e[n].forEach((e,t)=>r[t]=e)}return t}(l),d=function(e,t,n,r,s){const a=t.slice();a[0]=s;const i=P.getArrayFromDType(n,P.sizeFromShape(a)),o=e.length;return function(e,t,n,r,s,a){const i=Xj(t,2)[1],o=Xj(a,2)[1];let u=0;for(const l of n)for(let t=l[0];t<l[1];++t){for(let n=0;n<r;++n)s[u*o+n]=e[t*i+n];++u}}(e,t,r,0===o?0:o/t[0],i,a),[i,a]}(n,r,s,c,h);return[p,d[0],d[1]]}function Zj(e,t,n,r,s,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,u=0===s.length,l=0===i.length,c=[];o||c.push(t[0]),u||c.push(s[0]),l||c.push(i[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],p=P.getArrayFromDType("int32",h+1);p[0]=0;for(let m=0;m<h;++m){const t=o?e[0]:e[m],n=u?r[0]:r[m],s=l?a[0]:a[m];if(0===s)throw new Error("Requires delta != 0");let i;if(s>0&&n<t||s<0&&n>t)i=0;else if(i=Math.ceil(Math.abs((n-t)/s)),i>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");p[m+1]=p[m]+i}const d=P.getArrayFromDType(n,p[h]);let f=0;for(let m=0;m<h;++m){const t=p[m+1]-p[m];let n=o?e[0]:e[m];const r=l?a[0]:a[m];for(let e=0;e<t;++e)d[f++]=n,n+=r}return[p,d]}mj("NotEqual",jj,null,"bool");var Qj=G.RowPartitionType;class Jj{constructor(e,t,n,r,s,a,i,o,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=G.getRowPartitionTypesHelper(l),this.raggedRank=G.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Qj.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Qj.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Qj.VALUE_ROWIDS:return Jj.getMaxWidthValueRowID(t);case Qj.ROW_SPLITS:return Jj.getMaxWidthRowSplit(t);default:throw new Error("Cannot handle partition type "+Qj[this.getRowPartitionTypeByDimension(e-1)])}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return tq(e,n)}calculateOutputSize(e){const t=this.valuesShape;G.validateDefaultValueShape(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=G.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);r[0]<0&&(r[0]=e);for(let s=1;s<=this.raggedRank;++s)r[s]<0&&(r[s]=this.getMaxWidth(s));return r}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let i=0;i<r;++i,a+=t)s.push(a);for(let i=r;i<e;++i)s.push(-1);return P.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let i=0;i<s-1;++i){const s=e[i+1]-e[i];let o=Math.min(r,s),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)a.push(u),u+=n;for(let e=0;e<s-o;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===o)u>=0&&(++i,i<r?u+=n:u=-1);else{if(i=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Qj.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case Qj.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error("Unsupported partition type: "+Qj[a])}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Qj.FIRST_DIM_SIZE:return e[0];case Qj.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Qj.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error("Cannot handle type "+Qj[t])}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let a=n.length-2;a>=0;--a)n[a]=n[a+1]*t[a+1];const r=tq(t,!1),s=P.getArrayFromDType(this.valuesDType,P.sizeFromShape(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let i=r.slice();i=i.slice(e+1);const o=P.sizeFromShape(i),u=t.length;let l=this.defaultValue;if(l.length!==o&&1!==l.length){const e=this.defaultValueShape;sO(()=>{const t=YP(l,e),n=dz(t,i);l=n.dataSync()})}let c=0,h=0,p=0;for(let d=0;d<=u;++d){let e=d<u?t[d]:-1;if(e!==p){if(h<p){const e=s.subarray(c*o);eq(a.subarray(h*o),e,(p-h)*o)}if(d>=u&&(e=Math.floor(n.length/o)),e>p)if(1===this.defaultValue.length)a.subarray(p*o,e*o).fill(this.defaultValue[0]),p=e;else for(;e>p;)eq(a.slice(p*o),l,o),++p;e<0?(c=d+1,h=p):(c=d,h=p,p=h+1)}else++p}}}function eq(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function tq(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function nq(e,t,n,r,s,a,i,o,u,l){return new Jj(e,t,n,r,s,a,i,o,u,l).compute()}function rq(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return P.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),a=P.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),a[0]=e;for(let i=1;i<a.length;i++)a[i]=a[i-1]+n;return a}const sq=kj(e=>1/Math.sqrt(e));function aq(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,p=t.values;if(0===r)return rM(n,t.dtype);const d=u instanceof vD?u:rM(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=r/s)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[a*s+n]+=p[f*s+n]:d.values[a*s+n]=0===t.rank?p[0]:p[f*s+n]}return d}Ij("Rsqrt",sq);const iq=kj(e=>1/(1+Math.exp(-e)));function oq(e,t,n,r,s){const a=W.isSliceContinous(r,t,n),i=P.sizeFromShape(n),o=P.computeStrides(r);if(a){const n=W.computeFlatOffset(t,o);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const u=rM(r,s,"string"===s?G.fromUint8ToStringArray(e):e),l=rM(n,s);for(let c=0;c<l.size;++c){const e=l.indexToLoc(c),n=e.map((e,n)=>e+t[n]);l.set(u.get(...n),...e)}return"string"===s?G.fromStringArrayToUint8(l.values):l.values}function uq(e,t,n,r,s,a,i){const o=t[0],u=a[0],l=new Array(u),c=new Array(o),h=t[1];if(0===u){if(0!==o)throw new Error(G.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[P.getArrayFromDType(n,0),[0,h],P.getArrayFromDType(s,0),l,c]}let p=!0,d=0;const f=new Array(u).fill(0);for(let g=0;g<o;++g){const t=e[g*h];if(t<0)throw new Error(G.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,t));if(t>=u)throw new Error(G.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,t,u));++f[t],p=p&&t>=d,d=t}let m=!0;for(let g=0;g<u;++g){const e=0===f[g];l[g]=e,m=m&&!e,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(m&&p){const t=e,n=r;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,l,c]}{const t=f[u-1],a=P.getArrayFromDType(n,t*h),p=P.getArrayFromDType(s,t),d=new Array(u).fill(0);for(let n=0;n<o;++n){const t=e[n*h],s=(0===t?0:f[t-1])+d[t];d[t]++;for(let r=0;r<h;++r)a[s*h+r]=e[n*h+r];p[s]=r[n],c[n]=s}for(let e=0;e<u;++e)if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}return[a,[t,h],p,l,c]}}function lq(e,t,n,r,s){const a=P.sizeFromShape(r),i=t[0],o=s.length,u=[];let l=1,c=-1;for(let m=0;m<o;++m){const e=s[m];if(-1===e){if(-1!==c)throw new Error(G.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,m));c=m,u.push(1)}else{if(e<0)throw new Error(G.getSparseReshapeNegativeOutputDimErrorMessage(m,e));l*=e,u.push(e)}}if(-1!==c){if(l<=0)throw new Error(G.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/l);if(l*e!==a)throw new Error(G.getSparseReshapeInputOutputMultipleErrorMessage(r,u));u[c]=e}if(P.sizeFromShape(u)!==a)throw new Error(G.getSparseReshapeInputOutputMismatchErrorMessage(r,u));const h=r.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*r[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=P.getArrayFromDType(n,i*o);for(let m=0;m<i;++m){let t=0;for(let n=0;n<h;++n)t+=e[m*h+n]*p[n];for(let e=0;e<o;++e)f[m*o+e]=Math.trunc(t/d[e]),t%=d[e]}return[f,[i,o],u]}function cq(e,t,n,r,s,a=!1,i=0){const o=r.length,u=[t[0],e.length/t[0]],l=u[1],c=o>0?s[o-1]+1:0;if(c<0)throw new Error(G.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=c;const p=h.reduce((e,t)=>e*t,1),d=P.getArrayFromDType(n,p);if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error(G.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=s[f];for(;;){let t=0;if(m<o){if(t=s[m],y===t){++m;continue}if(y>=t)throw new Error(G.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(G.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(i,g*l,y*l);for(let n=f;n<m;++n){const t=r[n];if(t<0||t>=u[0])throw new Error(G.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,r[n],u[0]));for(let n=0;n<l;n++)d[y*l+n]+=e[t*l+n]}if(a)for(let e=0;e<l;e++)d[y*l+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<c&&d.fill(i,g*l,c*l),[d,h]}Sj("Sigmoid",e=>1/(1+Math.exp(-e)));const hq=kj(e=>Math.sqrt(e)),pq=(Sj("Sqrt",e=>Math.sqrt(e)),cj((e,t)=>{const n=e-t;return n*n})),dq=(mj("SquaredDifference",pq),kj((e,t)=>{const{pattern:n,replaceGlobal:r,rewrite:s}=t;return e.replace(new RegExp(n,r?"g":""),s)}));function fq(e,t,n,r){const s=rM(e,t.dtype);for(let a=0;a<s.size;a++){const e=s.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+r[t];s.set(t.get(...i),...e)}return s}Ij("StaticRegexReplace",dq);class mq{constructor(e,t,n,r,s,a){this.separator=P.encodeString(e),this.nGramWidths=t,this.leftPad=P.encodeString(n),this.rightPad=P.encodeString(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let i=0;i<s;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),l=Math.max(0,o-(s-(i+1))),c=a-(u+l),h=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=l*this.rightPad.length,p+=(u+l+c-1)*this.separator.length,n[r+i]=new Uint8Array(p);const d=n[r+i];let f=0;const m=e=>e.forEach(e=>d[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error("First split value must be 0, got "+e);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=P.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let t=0;t<=s;++t)a[t]=0;return[e,a]}a[0]=0;for(let o=1;o<=s;++o){const e=t[o]-t[o-1];let n=0;this.nGramWidths.forEach(t=>{n+=this.getNumNGrams(e,t)}),this.preserveShort&&e>0&&0===n&&(n=1),a[o]=a[o-1]+n}const i=new Array(a[s]);for(let o=0;o<s;++o){const n=t[o];let r=a[o];if(this.nGramWidths.forEach(s=>{const a=this.getNumNGrams(t[o+1]-t[o],s);this.createNGrams(e,n,i,r,a,s),r+=a}),this.preserveShort&&r===a[o]){const s=t[o+1]-t[o];if(0===s)continue;this.createNGrams(e,n,i,r,1,s+2*this.padWidth)}}return[i,a]}}function gq(e,t,n,r,s,a,i,o){return new mq(n,r,s,a,i,o).compute(e,t)}function yq(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function bq(e,t,n){const r=e.length,s=[];let a=0,i=0;const o=new Array(r);for(let p=0;p<r;++p){const r=s.length;yq(e[p],t,n,s);const u=s.length-r;o[p]=u,a+=u,i=Math.max(i,u)}const u=P.getArrayFromDType("int32",2*a),l=new Array(a),c=[r,i];let h=0;for(let p=0;p<r;++p)for(let e=0;e<o[p];++e)u[2*h]=p,u[2*h+1]=e,l[h]=s[h],++h;return[u,l,c]}function xq(e,t){const n=P.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=P.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const wq=cj((e,t)=>e-t),vq=gj((e,t,n,r)=>({real:e-n,imag:t-r}));function kq(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const r=rM(n,e.dtype);for(let s=0;s<r.values.length;++s){const t=r.indexToLoc(s),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const a=e.locToIndex(n);r.values[s]=e.values[a]}return r}mj("Sub",wq,vq);const Sq=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function Iq(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,i=Math.log(s),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(s-o)/s)*Math.sign(a-s/2);Iq(e,t,Math.max(n,Math.floor(t-a*o/s+u)),Math.min(r,Math.floor(t+(s-a)*o/s+u)))}const s=e[t];let a=n,i=r;for(P.swap(e,n,t),Sq(e[r],s)>0&&P.swap(e,n,r);a<i;){for(P.swap(e,a,i),a++,i--;Sq(e[a],s)<0;)a+=1;for(;Sq(e[i],s)>0;)i-=1}0===Sq(e[n],s)?P.swap(e,n,i):(i+=1,P.swap(e,i,r)),i<=t&&(n=i+1),t<=i&&(r=i-1)}}function Nq(e,t,n,r,s){const a=t[t.length-1],[i,o]=[e.length/a,a],u=P.getTypedArrayFromDType(n,i*r),l=P.getTypedArrayFromDType("int32",i*r);for(let h=0;h<i;h++){const t=h*o,n=e.subarray(t,t+o);let a=new Array(n.length);n.forEach((e,t)=>a[t]={value:e,index:t}),r<a.length&&(Iq(a,r),a=a.slice(0,r)),s&&a.sort(Sq);const i=h*r,c=u.subarray(i,i+r),p=l.subarray(i,i+r);for(let e=0;e<r;e++)c[e]=a[e].value,p[e]=a[e].index}const c=t.slice();return c[c.length-1]=r,[rM(c,n,u),rM(c,"int32",l)]}function Cq(e,t,n,r){const s=P.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let f=0;f<s;f++)a[0]*=n[f];a[1]=n[s];for(let f=s+1;f<n.length;f++)a[2]*=n[f];const i=new Map,o=new Int32Array(n[s]),u=new vD(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let f=0;f<n[s];f++){let t;if(c)t=e[f].toString();else{const e=[];for(let t=0;t<a[0];t++)for(let n=0;n<a[2];n++)e.push(u.get(t,f,n));t=e.join(",")}const n=i.get(t);if(null!=n)o[f]=n;else{const e=i.size;i.set(t,e),o[f]=e,l.push(f)}}const h=a.slice();h[1]=i.size;const p=new vD(h,r);l.forEach((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(u.get(n,e,r),n,t,r)});const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const{addImpl:Tq,castImpl:Eq,ceilImpl:Aq,concatImpl:Rq,equalImpl:$q,expImpl:_q,expm1Impl:Fq,floorImpl:Dq,floorDivImpl:Oq,gatherNdImpl:Mq,gatherV2Impl:Pq,greaterEqualImpl:zq,greaterImpl:Lq,lessEqualImpl:Bq,lessImpl:Wq,logImpl:Vq,maxImpl:Uq,maximumImpl:Gq,minimumImpl:Hq,multiplyImpl:jq,negImpl:qq,notEqualImpl:Kq,prodImpl:Xq,rangeImpl:Yq,rsqrtImpl:Zq,scatterImpl:Qq,simpleAbsImpl:Jq,sliceImpl:eK,stridedSliceImpl:tK,stringNGramsImpl:nK,subImpl:rK,tileImpl:sK,topKImpl:aK,transposeImpl:iK}=de,oK={kernelName:"Abs",backendName:"webgpu",kernelFunc:ij({opType:AH.ABS,cpuKernelImpl:Jq})},uK={kernelName:"Acos",backendName:"webgpu",kernelFunc:ij({opType:AH.ACOS})},lK={kernelName:"Acosh",backendName:"webgpu",kernelFunc:ij({opType:AH.ACOSH})},cK={kernelName:"Add",backendName:"webgpu",kernelFunc:oj({opType:EH.ADD,cpuKernelImpl:Tq,supportsComplex:!0})};class hK{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((e,t)=>"T"+t),this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const e=[];this.variableNames.forEach(t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)});const t=this.variableNames.map(e=>"v"+e).join(" + ");return`\n      ${oH("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${e.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${t});\n          }\n        }\n      }\n    `}}const pK={kernelName:"AddN",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;if(1===r.length)return tj({inputs:{x:r[0]},backend:n});const s=r.map(e=>e.dtype).reduce((e,t)=>DD(e,t)),a=r.map(e=>e.shape),i=new hK(a);return n.runWebGPUProgram(i,r,s)}};class dK{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){P.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);const e=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${oH()} {\n        var x = i32(workgroupId.x) * ${e} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${e} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${e} + i32(localId.x);\n        y = i32(workgroupId.x) * ${e} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}}class fK{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey="transpose_"+t}getUserCode(){const e=aH(this.outputShape.length),t=mK(this.newDim);return`\n      ${oH("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${e}(${t}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}}function mK(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=new Array(t);for(let r=0;r<e.length;r++)n[e[r]]="coords."+iH(r);return n.join()}function gK(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=new Array(s.shape.length);for(let l=0;l<o.length;l++)o[l]=s.shape[a[l]];if(n.shouldExecuteOnCPU([s])){const e=i.tensorMap.get(s.dataId),t=iK(e.values,s.shape,s.dtype,a,o);return n.makeTensorInfo(o,s.dtype,t)}if(2===s.shape.length&&P.arraysEqual(a,[1,0])){const e=new dK(s.shape,a);return i.runWebGPUProgram(e,[s],s.dtype)}const u=new fK(s.shape,a);return i.runWebGPUProgram(u,[s],s.dtype)}const yK={kernelName:"Transpose",backendName:"webgpu",kernelFunc:gK};class bK{constructor(e,t,n){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];const[r]=G.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===r.length?[1]:r,this.workgroupSize=e.inSize>=32768&&n>=512?[512,1,1]:e.inSize>=4096?[256,1,1]:[64,1,1],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey="reduce_"+t}getUserCode(){let e="",t="0.0";const n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");const r="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       \n         var<workgroup> xBestValues : array<f32, ${n}>;\n       \n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${oH("index")} {\n         let outputIndex = index / ${n};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${t};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${n}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${n}) {\n           let candidate = f32(x[offset + k]);\n           ${e}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${n}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${e}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${r}\n        }\n       }\n     `}}const xK={mean:"float32",all:"bool",any:"bool"};function wK(e,t,n,r,s){const a=e.shape.length,i=[],o=P.parseAxisParam(t,e.shape);let u=o;const l=G.getAxesPermutation(u,a);let c=e;null!=l&&(c=gK({inputs:{x:e},attrs:{perm:l},backend:s}),u=G.getInnerMostAxes(u.length,a),i.push(c)),G.assertAxesAreInnerMostDims(r,u,a);const[h,p]=G.computeOutAndReduceShapes(c.shape,u);let d,f=h;if(n&&(f=G.expandShapeToKeepDim(h,o)),"max"!==r&&"prod"!==r||!s.shouldExecuteOnCPU([c])){const t=P.sizeFromShape(p),n={windowSize:t,inSize:t,batchSize:P.sizeFromShape(c.shape)/t,outSize:1},a=xK[r]||DD(e.dtype,"int32"),o=[{type:"int32",data:[t]}],u=new bK(n,r,s.device.limits.maxComputeWorkgroupSizeX),l=s.runWebGPUProgram(u,[c],a,o);i.push(l),d=XH({inputs:{x:l},attrs:{shape:f},backend:s})}else{const t=s.tensorMap.get(c.dataId).values;switch(r){case"max":const n=Uq(t,P.sizeFromShape(p),f,e.dtype);d=s.makeTensorInfo(f,e.dtype,n);break;case"prod":const{outVals:a,outShape:i,outDtype:o}=Xq(c.shape,c.dtype,t,u);d=s.makeTensorInfo(i,o,a);break;default:throw new Error(r+" CPU implementation is not yet supported.")}}return i.forEach(e=>s.disposeData(e.dataId)),d}const vK={kernelName:"All",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:a,axis:i}=r;return wK(s,i,a,"all",n)}},kK={kernelName:"Any",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:a,axis:i}=r;return wK(s,i,a,"any",n)}};class SK{constructor(e,t,n){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const r=[t];this.op="min"===n?"<":">";const[s,a]=G.computeOutAndReduceShapes(e,r);this.outputShape=0===s.length?[1]:s,this.dispatchLayout=vH(this.outputShape),P.sizeFromShape(a)<32?(this.type="plain",this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=yH(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":"uniforms.xShape."+iH(this.inputShape.length-1),n=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${iH(t)},`;return e};return"shared"===this.type?`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      \n      var<workgroup> xBestIndices : array<i32, ${e}>;\n      var<workgroup> xBestValues : array<f32, ${e}>;\n    \n\n      ${oH("index")} {\n        let outputIndex = index / ${e};\n        let reduceLength = ${t()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${e}) {\n          let candidate = getX(${n()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${e}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `:`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${n()} 0);\n          let reduceLength = ${t()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${n()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}}const IK={kernelName:"ArgMax",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=P.parseAxisParam(a,s.shape);const o=G.getAxesPermutation(i,s.shape.length);let u=s;const l=[];null!=o&&(u=gK({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=G.getInnerMostAxes(i.length,u.shape.length)),G.assertAxesAreInnerMostDims("argMax",[i[0]],u.shape.length);const c=new SK(u.shape,i[0],"max"),h=n.runWebGPUProgram(c,[u],"int32",[{type:"float32",data:[Number.NEGATIVE_INFINITY]}]);return l.forEach(e=>n.disposeData(e.dataId)),h}},NK={kernelName:"ArgMin",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=P.parseAxisParam(a,s.shape);const o=G.getAxesPermutation(i,s.shape.length);let u=s;const l=[];null!=o&&(u=gK({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=G.getInnerMostAxes(i.length,u.shape.length)),G.assertAxesAreInnerMostDims("argMin",[i[0]],u.shape.length);const c=new SK(u.shape,i[0],"min"),h=n.runWebGPUProgram(c,[u],"int32",[{type:"float32",data:[Number.POSITIVE_INFINITY]}]);return l.forEach(e=>n.disposeData(e.dataId)),h}},CK={kernelName:"Asin",backendName:"webgpu",kernelFunc:ij({opType:AH.ASIN})},TK={kernelName:"Asinh",backendName:"webgpu",kernelFunc:ij({opType:AH.ASINH})},EK={kernelName:"Atan",backendName:"webgpu",kernelFunc:ij({opType:AH.ATAN})},AK={kernelName:"Atan2",backendName:"webgpu",kernelFunc:oj({opType:EH.ATAN2})},RK={kernelName:"Atanh",backendName:"webgpu",kernelFunc:ij({opType:AH.ATANH})};class $K{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}class _K{constructor(e,t,n=!1,r=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=r,this.includeBatchIndex=s,this.shaderKey=`pool2D_${t}_${n}_${r}_${s}`}getUserCode(){let e;e="avg"===this.poolType?"resultValue = resultValue + value; count = count + 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};\n      }`:"resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${e}\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}}class FK{constructor(e,t,n=!1,r=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=r,this.includeBatchIndex=s,this.shaderKey=`pool3D_${t}_${n}_${r}_${s}`}getUserCode(){let e;e="avg"===this.poolType?"resultValue += value; count += 1.0;":this.computePositions?`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};\n      }`:"resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${e}\n              }\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}}function DK(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r;return wK(s,a,i,"max",n)}const OK={kernelName:"Max",backendName:"webgpu",kernelFunc:DK};function MK(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:a,axis:i}=r;return wK(s,i,a,"mean",n)}const PK={kernelName:"Mean",backendName:"webgpu",kernelFunc:MK};function zK(e,t,n,r){if(1===t.filterWidth&&1===t.filterHeight&&P.arraysEqual(t.inShape,t.outShape))return tj({inputs:{x:e},backend:r});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){const s=e.shape.length,a=XH({inputs:{x:e},backend:r,attrs:{shape:[e.shape[s-3]*e.shape[s-2],e.shape[s-1]]}});let i;"avg"===n?i=MK({inputs:{x:a},backend:r,attrs:{axis:0,keepDims:!1}}):(P.assert("max"===n,()=>"Invalid pool type "+n),i=DK({inputs:{x:a},backend:r,attrs:{reductionIndices:0,keepDims:!1}}));const o=XH({inputs:{x:i},backend:r,attrs:{shape:t.outShape}});return r.disposeData(a.dataId),r.disposeData(i.dataId),o}let s;const a=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?s=new $K(t):("avg"===n?s=new _K(t,"avg"):(P.assert("max"===n,()=>"Invalid pool type "+n),s=new _K(t,"max")),a.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),r.runWebGPUProgram(s,[e],e.dtype,a)}const LK={kernelName:"AvgPool",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;return zK(s,G.computePool2DInfo(s.shape,a,i,1,o,u),"avg",n)}},BK={kernelName:"AvgPool3D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=G.computePool3DInfo(s.shape,a,i,[1,1,1],o,l,u),h=new FK(c,"avg");return n.runWebGPUProgram(h,[s],s.dtype,[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}])}};class WK{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class VK{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const UK={kernelName:"AvgPool3DGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=G.computePool3DInfo(i.shape,o,u,1,l,c),p=new VK(h);return n.runWebGPUProgram(p,[s],i.dtype,[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterDepth-1-h.padInfo.front,h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"float32",data:[1/(h.filterDepth*h.filterHeight*h.filterWidth)]}])}},GK={kernelName:"AvgPoolGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;IH([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=G.computePool2DInfo(i.shape,o,u,1,l),h=new WK(c);return n.runWebGPUProgram(h,[s],i.dtype,[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"float32",data:[1/(c.filterHeight*c.filterWidth)]}])}},HK={kernelName:"BatchMatMul",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return ZH({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class jK{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${aH(e.length)}, `,this.shaderKey="slice"}getUserCode(){const e=aH(this.rank),t=function(e){if(1===e)return"sourceLoc";if(e<=6)return qK.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let n;return n=this.outputShape.map(1===this.start.length?(e,t)=>"sourceLoc = uniforms.start + coords;":(e,t)=>`sourceLoc.${qK[t]} = uniforms.start.${iH(t)} + coords.${qK[t]};`),`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${e};\n          let coords = getCoordsFromIndex(index);\n          ${n.join("\n")}\n          setOutputAtIndex(index, getSource(${t}));\n        }\n      }\n    `}}const qK=["x","y","z","w","u","v"];function KK(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r,[o,u]=W.parseSliceParams(s,a,i);if(W.assertParamsValid(s,o,u),n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.tensorMap.get(s.dataId),t=eK(e.values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}if(0===P.sizeFromShape(u))return n.makeTensorInfo(u,s.dtype,[]);const l=new jK(o,u);return n.runWebGPUProgram(l,[s],s.dtype,[{type:"int32",data:o}])}const XK={kernelName:"Slice",backendName:"webgpu",kernelFunc:KK},YK={kernelName:"BatchToSpaceND",backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;P.assert(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");const o=a.reduce((e,t)=>e*t),u=G.getReshaped(s.shape,a,o),l=G.getPermuted(u.length,a.length),c=G.getReshapedPermuted(s.shape,a,o),h=G.getSliceBeginCoords(i,a.length),p=G.getSliceSize(c,i,a.length),d=[],f=XH({inputs:{x:s},backend:n,attrs:{shape:u}}),m=gK({inputs:{x:f},backend:n,attrs:{perm:l}}),g=XH({inputs:{x:m},backend:n,attrs:{shape:c}}),y=KK({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach(e=>n.disposeData(e.dataId)),y}},ZK=`\n  fn bincount_write(index: i32, value: f32) {\n    ${nH("&result[index]","value","float32")}\n  }\n`;class QK{constructor(e,t,n=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":ZK}\n  ${oH("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}}const JK={kernelName:"Bincount",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=P.sizeFromShape(s.shape),u=P.sizeFromShape(a.shape)>0,l=a.dtype,c=qH({backend:n,attrs:{shape:[i],value:0,dtype:l}}),h=new QK([o],u);return n.runWebGPUProgram(h,u?[s,a]:[s],l,[{type:"int32",data:[i]}],c)}};class eX{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`\n  ${oH("index")} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `}}const tX={kernelName:"BroadcastArgs",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t;if(n.shouldExecuteOnCPU([r,s])){const e=n.tensorMap.get(r.dataId),t=n.tensorMap.get(s.dataId).values,a=G.assertAndGetBroadcastShape(Array.from(e.values),Array.from(t));return n.makeTensorInfo([a.length],"int32",Int32Array.from(a))}const a=P.sizeFromShape(r.shape),i=P.sizeFromShape(s.shape),o=Math.max(a,i),u=new eX(o);return n.runWebGPUProgram(u,[r,s],"int32",[{type:"int32",data:[a]},{type:"int32",data:[i]}])}},nX=oj({opType:EH.NOT_EQUAL,dtype:"bool",cpuKernelImpl:Kq}),rX={kernelName:"NotEqual",backendName:"webgpu",kernelFunc:nX};function sX(e){const{inputs:t,backend:n}=e,{input:r}=t;return tj({inputs:{x:n.tensorMap.get(r.dataId).complexTensorInfos.real},backend:n})}const aX={kernelName:"Real",backendName:"webgpu",kernelFunc:sX},iX={kernelName:"Cast",backendName:"webgpu",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return tj({inputs:{x:a},backend:r});const t=zL(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=rj({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeData(n.dataId),s}if("complex64"===a.dtype){const t=sX({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeData(t.dataId),n}if(!P.hasEncodingLoss(a.dtype,i)){const e=tj({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(r.shouldExecuteOnCPU([a])){const e=r.tensorMap.get(a.dataId).values,[t,n,s]=Eq(e,a.shape,a.dtype,i);return r.makeTensorInfo(t,n,s)}if("int32"===i)return function(e,t){const n=new aj(e.shape,AH.TO_INT),r=t.runWebGPUProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",P.getTypedArrayFromDType("bool",1)),t=nX({inputs:{a,b:e},backend:r});return r.disposeData(e.dataId),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},oX={kernelName:"Ceil",backendName:"webgpu",kernelFunc:ij({opType:AH.CEIL,cpuKernelImpl:Aq})};class uX{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${oH("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}class lX{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${oH("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}const cX={kernelName:"ClipByValue",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;const u=[{type:"float32",data:[a]},{type:"float32",data:[i]}];return o=P.sizeFromShape(s.shape)%4==0?new uX(s.shape):new lX(s.shape),n.runWebGPUProgram(o,[s],s.dtype,u)}};class hX{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `}}function pX(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const dX={kernelName:"ComplexAbs",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.tensorMap.get(r.dataId),a=new hX(r.shape),i=[pX(r,s.complexTensorInfos.real),pX(r,s.complexTensorInfos.imag)];return n.runWebGPUProgram(a,i,i[0].dtype)}};class fX{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=G.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t),this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let t=0;t<this.offsetLength;t++)this.uniforms+=`offset${t} : i32,`;this.shaderKey="concat"}getUserCode(){const e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${this.offsetLength}(yR, yC - uniforms.offset${this.offsetLength-1})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${oH("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${e.join("\n        ")}\n          }\n        }\n      }\n    `}}function mX(e){const{inputs:t,backend:n}=e,{input:r}=t;return tj({inputs:{x:n.tensorMap.get(r.dataId).complexTensorInfos.imag},backend:n})}const gX={kernelName:"Imag",backendName:"webgpu",kernelFunc:mX};function yX(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=P.parseAxisParam(s,t[0].shape)[0],i=t.map(e=>e.shape);G.assertParamsConsistent(i,a);const o=G.computeOutShape(t.map(e=>e.shape),a);if(0===P.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const u=t.filter(e=>P.sizeFromShape(e.shape)>0);return 1===u.length?tj({inputs:{x:u[0]},backend:n}):function e(t,n,r){const s=t[0].dtype;if("complex64"===s){const s=t.map(e=>sX({inputs:{input:e},backend:r})),a=t.map(e=>mX({inputs:{input:e},backend:r})),i=e(s,n,r),o=e(a,n,r),u=rj({inputs:{real:i,imag:o},backend:r});return s.forEach(e=>r.disposeData(e.dataId)),a.forEach(e=>r.disposeData(e.dataId)),r.disposeData(i.dataId),r.disposeData(o.dataId),u}let a=r.shouldExecuteOnCPU(t);if("string"===s&&(a=!0),a){const e=t.map(e=>{const t=P.sizeFromShape(e.shape.slice(n));return XH({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}),a=e.map(e=>({vals:r.readSync(e.dataId),shape:e.shape})),i=G.computeOutShape(e.map(e=>e.shape),1),o=Rq(a,i,s,1===e[0].shape[0]),u=G.computeOutShape(t.map(e=>e.shape),n),l=r.makeTensorInfo(u,s,o);return e.forEach(e=>r.disposeData(e.dataId)),l}const i=r.device.limits.maxStorageBuffersPerShaderStage-1;if(t.length>i){const s=[];for(let o=0;o<t.length;o+=i){const a=t.slice(o,o+i);s.push(e(a,n,r))}const a=e(s,n,r);for(const e of s)r.disposeData(e.dataId);return a}const{tensors2D:o,outShape:u}=function(e,t,n){const r=G.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>XH({inputs:{x:e},backend:n,attrs:{shape:[P.sizeFromShape(e.shape.slice(0,t)),P.sizeFromShape(e.shape.slice(t))]}})),outShape:r}}(t,n,r),l=o.map(e=>e.shape),c=new fX(l),h=[],p=new Array(l.length-1);if(p.length>0){p[0]=l[0][1],h.push({type:"int32",data:[p[0]]});for(let e=1;e<p.length;e++)p[e]=p[e-1]+l[e][1],h.push({type:"int32",data:[p[e]]})}const d=r.runWebGPUProgram(c,o,o[0].dtype,h);o.forEach(e=>r.disposeData(e.dataId));const f=XH({inputs:{x:d},backend:r,attrs:{shape:u}});return r.disposeData(d.dataId),f}(u,a,n)}const bX={kernelName:"Concat",backendName:"webgpu",kernelFunc:yX};class xX{constructor(e,t,n,r,s=!1,a=null,i=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=xH(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=wH(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),s&&(this.variableNames.push("bias"),this.variableComponents.push(4)),i&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=s,this.activation=a,this.hasPreluActivationWeights=i,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=r%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const e=this.isVec4?zH(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):BH(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function(e,t,n,r,s=!1,a=null,i=!1,o=4,u=4,l=4){const c=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",h=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",p=e?"uniforms.xShape[1]":"uniforms.xShape[2]",d=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",m=e?"col":"row",g=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${f} / outWidth;\n      let outCol = ${f} % outWidth;\n\n      let WRow = ${m} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${m} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${m} % inChannels;\n      var resData = ${sH(o)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${p} && xCol >= 0 && xCol < ${d}) {\n        ${c}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(e=>{switch(e){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n      }\n      return resData;`,y=e?t&&r?"\n      "+g:`\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${sH(o)}(0.0);`:r&&n?"\n      "+g:`\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${sH(o)}(0.0);`,b=""+(e=>{switch(e){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u),x=sH(l),w=sH(e?o:u),v=sH(e?u:o);return`\n      ${DH(a,i,4===l,4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${w} {\n        ${e?y:b}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${v} {\n        ${e?b:y}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${x}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${h}\n        ${OH(s,a)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}\n    ${e}\n  `}}class wX{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=r,t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${DH(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${OH(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${oH("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}class vX{constructor(e,t){this.variableNames=["x"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey="im2col_"+this.isChannelsLast}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",r=this.isChannelsLast?"coords[2]":"coords[1]",s=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${oH("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${n};\n        let col = ${r};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {\n            value = ${s};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}function kX(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function SX({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u=null!=s,l=null!=a,c="channelsLast"===n.dataFormat,h=c&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type,p=FF().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!p&&(h||1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type)))return function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u="channelsLast"===n.dataFormat,l=!u,c=[];let h,p;if(u&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type){const s=n.inHeight*n.inWidth*n.inChannels;h=XH({inputs:{x:e},backend:r,attrs:{shape:[1,n.batchSize,s]}}),p=XH({inputs:{x:t},backend:r,attrs:{shape:[1,s,n.outChannels]}})}else h=XH({inputs:{x:e},backend:r,attrs:{shape:u?[n.batchSize,n.inHeight*n.inWidth,n.inChannels]:[n.batchSize,n.inChannels,n.inHeight*n.inWidth]}}),p=XH({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});if(c.push(h),c.push(p),null!=a){const e=kX(a.shape,u);null!=e&&(a=XH({inputs:{x:a},backend:r,attrs:{shape:e}}),c.push(a))}if(null!=s){const e=kX(s.shape,u);null!=e&&(s=XH({inputs:{x:s},backend:r,attrs:{shape:e}}),c.push(s))}const d=ZH({a:u?h:p,b:u?p:h,transposeA:l,transposeB:!1,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),f=XH({inputs:{x:d},backend:r,attrs:{shape:n.outShape}});c.push(d);for(const m of c)r.disposeData(m.dataId);return f}({x:e,filter:t,convInfo:n,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i});const d=FF().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),f=d>-1?d:r.thresholdToIncreaseWorkgroups,m=n.batchSize*Math.ceil(n.outHeight*n.outWidth/32)*Math.ceil(n.outChannels/32);if(FF().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||m<=f)return function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:c,strideWidth:h,strideHeight:p,padInfo:d,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:y,dataFormat:b}=n,x="channelsLast"===b,w=u*l*c,v=m*f,k=new vX(x?[n.batchSize,v,w]:[n.batchSize,w,v],x),S=r.runWebGPUProgram(k,[e],e.dtype,[{type:"int32",data:[d.top,d.left]},{type:"int32",data:[p,h]},{type:"int32",data:[y,g]},{type:"int32",data:[f]},{type:"int32",data:[c*u]},{type:"int32",data:[c]}]),I=[];I.push(S);const N=XH({inputs:{x:t},backend:r,attrs:{shape:[1,w,-1]}});if(I.push(N),null!=a){const e=kX(a.shape,x);null!=e&&(a=XH({inputs:{x:a},backend:r,attrs:{shape:e}}),I.push(a))}if(null!=s){const e=kX(s.shape,x);null!=e&&(s=XH({inputs:{x:s},backend:r,attrs:{shape:e}}),I.push(s))}const C=ZH({a:x?S:N,b:x?N:S,transposeA:!x,transposeB:!1,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),T=XH({inputs:{x:C},backend:r,attrs:{shape:n.outShape}});I.push(C);for(const E of I)r.disposeData(E.dataId);return T}({x:e,filter:t,convInfo:n,backend:r,bias:s,preluActivationWeights:a,leakyreluAlpha:i,activation:o});let g;const y=[{type:"int32",data:[n.filterHeight,n.filterWidth]},{type:"int32",data:[n.padInfo.top,n.padInfo.left]},{type:"int32",data:[n.strideHeight,n.strideWidth]},{type:"int32",data:[n.dilationHeight,n.dilationWidth]}];if(p)g=new wX(n,u,o,l);else{const e=c?n.outHeight*n.outWidth:n.outChannels,t=c?n.outChannels:n.outHeight*n.outWidth,s=n.filterHeight*n.filterWidth*n.inChannels;y.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[s]});const a=r.adapterInfo.isIntel();g=new xX(n,e,t,s,u,o,l,a)}const b=[],x=[e,t];u&&(c||1!==s.shape.length||(s=XH({inputs:{x:s},backend:r,attrs:{shape:[s.shape[0],1,1]}}),b.push(s)),x.push(s)),l&&(c||1!==a.shape.length||(a=XH({inputs:{x:a},backend:r,attrs:{shape:[a.shape[0],1,1]}}),b.push(a)),x.push(a)),"leakyrelu"===o&&(y.push({type:"float32",data:[i]}),g.uniforms+=" alpha : f32,");const w=r.runWebGPUProgram(g,x,e.dtype,y);for(const v of b)r.disposeData(v.dataId);return w}const IX={kernelName:"Conv2D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=n,h=G.convertConv2DDataFormat(u);return SX({x:s,filter:a,convInfo:G.computeConv2DInfo(s.shape,a.shape,i,l,o,c,!1,h),backend:r})}};class NX{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1,r=`\n    ${oH()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;return this.isVec4?`\n    ${r}\n    `:`\n    ${oH("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${n}];\n\n        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class CX{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey="conv2DDerFilter_"+this.isChannelsLast}getUserCode(){return`\n    ${oH("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class TX{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`\n    ${oH("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class EX{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`\n    ${oH("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}const AX={kernelName:"Conv2DBackpropFilter",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=G.convertConv2DDataFormat(u),p=G.computeConv2DInfo(s.shape,c,i,1,o,l,!1,h),d=new CX(p);return n.runWebGPUProgram(d,[s,a],s.dtype,[{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]}])}};class RX{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,P.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=xH(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=wH(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const e=this.isVec4?zH(this.elementsPerThread,this.workgroupSize):BH(this.elementsPerThread,this.workgroupSize);return`\n    ${function(e=4){const t=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        \n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${sH(e)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${sH(e)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];\n      }\n      return ${sH(e)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${sH(e)} {\n    ${t}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${sH(e)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(e)}\n    }\n    return ${sH(e)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${sH(e)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${e}\n    `}}const $X={kernelName:"Conv2DBackpropInput",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=G.convertConv2DDataFormat(l),p=G.computeConv2DInfo(i,a.shape,o,1,u,c,!1,h),d=[{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize,p.outHeight,p.outWidth,p.outChannels]}];let f;return FF().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==p.dataFormat?f=new NX(p):(f=new RX(p),d.push({type:"uint32",data:[p.inHeight*p.inWidth]},{type:"uint32",data:[p.inChannels]},{type:"uint32",data:[p.filterHeight*p.filterWidth*p.outChannels]})),n.runWebGPUProgram(f,[s,a],"float32",d)}};class _X{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`}}const FX={kernelName:"Conv3D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=G.computeConv3DInfo(s.shape,a.shape,i,u,o),c=[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationDepth,l.dilationHeight,l.dilationWidth]}],h=new _X(l),p=DD(s.dtype,a.dtype);return n.runWebGPUProgram(h,[s,a],p,c)}},DX={kernelName:"Conv3DBackpropFilterV2",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=G.computeConv3DInfo(s.shape,u,i,1,o),c=new TX(l);return n.runWebGPUProgram(c,[s,a],a.dtype,[{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.batchSize]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.inDepth]},{type:"int32",data:[l.inHeight]},{type:"int32",data:[l.inWidth]}])}},OX={kernelName:"Conv3DBackpropInputV2",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,pad:o,inputShape:u}=r,l=G.computeConv3DInfo(u,a.shape,i,1,o),c=new EX(l);return n.runWebGPUProgram(c,[s,a],s.dtype,[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[l.filterDepth-1-l.padInfo.front,l.filterHeight-1-l.padInfo.top,l.filterWidth-1-l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.outChannels]}])}},MX={kernelName:"Cos",backendName:"webgpu",kernelFunc:ij({opType:AH.COS})},PX={kernelName:"Cosh",backendName:"webgpu",kernelFunc:ij({opType:AH.COSH})};class zX{constructor(e,t,n,r){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[s]=t;this.outputShape=[s,n[0],n[1],e],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===r?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[n,r,s]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+e],[a,i,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+t];return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${n});\n        let width_ratio = f32(${a});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${r};\n        let width_scale = ${i};\n        let in_y = ${s};\n        if( in_y < 0.0 || in_y > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${o};\n        if( in_x < 0.0 || in_x > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}const LX={kernelName:"CropAndResize",backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new zX(s.shape[3],a.shape,o,u);return n.runWebGPUProgram(c,[s,a,i],"float32",[{type:"float32",data:[l]}])}};var BX;!function(e){e.Prod="*",e.Sum="+"}(BX||(BX={}));class WX{constructor(e,t,n,r){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=r,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const e=this.outputShape.length,t=this.exclusive?this.op===BX.Prod?"1.0":"0.0":`getX(${VX(e,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1];let r="",s="";return this.exclusive?(r=this.reverse?"end != "+(n-1):"end != 0",s=this.reverse?"end + 1":"end - 1"):(r=this.reverse?"end + pow2 < "+n:"end >= pow2",s=this.reverse?"end + pow2":"end - pow2"),`\n      ${oH("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${UX(e,"coords",this.op)};\n         var val = ${t};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${r}) {\n           let idx = ${s};\n           ${UX(e,"coords",this.op)} = idx;\n           val ${this.op}= getX(${VX(e,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}}function VX(e,t,n){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function UX(e,t,n){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function GX(e,t,n,r,s,a){const i=t.shape.length,o=G.getAxesPermutation([r],i);let u=t;null!=o&&(u=gK({inputs:{x:t},backend:n,attrs:{perm:o}}));const l=G.getInnerMostAxes(1,i)[0];if(l!==i-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=`+r);const c=u.shape[l];let h=tj({inputs:{x:u},backend:n});for(let p=0;p<=Math.ceil(Math.log2(c))-1;p++){const t=new WX(e,u.shape,!1,a),r=h;h=n.runWebGPUProgram(t,[h],h.dtype,[{type:"float32",data:[p]}]),n.disposeData(r.dataId)}if(s){const t=new WX(e,u.shape,s,a),r=h;h=n.runWebGPUProgram(t,[h],h.dtype,[{type:"float32",data:[0]}]),n.disposeData(r.dataId)}if(null!=o){const e=gK({inputs:{x:h},backend:n,attrs:{perm:G.getUndoAxesPermutation(o)}});return n.disposeData(h.dataId),n.disposeData(u.dataId),e}return h}const HX={kernelName:"Cumprod",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return GX(BX.Prod,s,n,a,i,o)}},jX={kernelName:"Cumsum",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;return GX(BX.Sum,s,n,a,i,o)}},qX={kernelName:"DenseBincount",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r,u=1===s.shape.length,l=P.sizeFromShape(a.shape)>0,c=a.dtype,h=u?[s.shape[0]]:[s.shape[0],s.shape[1]],p=qH({backend:n,attrs:{shape:u?[i]:[s.shape[0],i],value:0,dtype:c}}),d=new QK(h,l,o);return n.runWebGPUProgram(d,l?[s,a]:[s],c,[{type:"int32",data:[i]}],p)}};class KX{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthToSpace_"+t,this.dataFormat=t}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const XX={kernelName:"DepthToSpace",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r,o=s.shape[0],u=("NHWC"===i?s.shape[1]:s.shape[2])*a,l=("NHWC"===i?s.shape[2]:s.shape[3])*a,c=("NHWC"===i?s.shape[3]:s.shape[1])/(a*a),h=[{type:"int32",data:[a]}],p=new KX("NHWC"===i?[o,u,l,c]:[o,c,u,l],i);return n.runWebGPUProgram(p,[s],s.dtype,h)}};class YX{constructor(e,t,n,r=!1,s=null,a=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),r&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.addBias=r,this.activation=s,this.hasPreluActivation=a,this.filterHeight=t,this.filterWidth=n,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,r=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${DH(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${r}>, ${n}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${oH()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${r}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${OH(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}class ZX{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;const s=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=vH(s),this.dispatch=yH(this.dispatchLayout,s,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),P.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=r,this.shaderKey=`depthwiseVec4_${n}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return`\n      ${DH(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${oH("index")} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${n}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${e}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${e}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${n} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${OH(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}}class QX{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=r,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${DH(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${OH(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}const JX={kernelName:"DepthwiseConv2dNative",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=G.convertConv2DDataFormat(u);let p=l;null==p&&(p=[1,1]);const d=G.computeConv2DInfo(s.shape,a.shape,i,p,o,c,!0,h),f=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],m="channelsLast"===d.dataFormat;let g;return!m&&d.inHeight>16&&d.inWidth>16&&1===d.strideHeight&&1===d.strideWidth&&1===d.dilationWidth&&1===d.dilationHeight&&d.inChannels===d.outChannels?g=new YX(d.outShape,d.filterHeight,d.filterWidth):m&&d.outHeight>4&&d.outWidth>4&&d.strideWidth<=2&&d.inChannels===d.outChannels&&1===d.dilationHeight&&1===d.dilationWidth&&d.inChannels%4==0?(g=new ZX(d),f.push({type:"int32",data:[g.virtualWidth]})):(g=new QX(d),f.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),n.runWebGPUProgram(g,[s,a],s.dtype,f)}};class eY{constructor(e){this.variableNames=["x","dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class tY{constructor(e){this.variableNames=["dy","W"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const nY={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=G.computeConv2DInfo(s.shape,c,i,o,u,l,!0),p=new eY(h);return n.runWebGPUProgram(p,[s,a],"float32",[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.inHeight]},{type:"int32",data:[h.inWidth]},{type:"int32",data:[h.batchSize]},{type:"int32",data:[h.outChannels/h.inChannels]}])}},rY={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=G.computeConv2DInfo(c,a.shape,i,o,u,l,!0),p=new tY(h);return n.runWebGPUProgram(p,[s,a],s.dtype,[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.filterHeight-1-h.padInfo.top,h.filterWidth-1-h.padInfo.left]},{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"int32",data:[h.outChannels/h.inChannels]}])}};class sY{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}const aY={kernelName:"Diag",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=P.sizeFromShape(r.shape),i=XH({inputs:{x:r},backend:n,attrs:{shape:[a]}}),o=new sY(a),u=n.runWebGPUProgram(o,[i],i.dtype),l=XH({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeData(i.dataId),n.disposeData(u.dataId),l}};class iY{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${oH("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}const oY={kernelName:"Dilation2D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=G.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",u),c=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]}],h=new iY(l);return n.runWebGPUProgram(h,[s,a],s.dtype,c)}};class uY{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(e.outShape),this.dispatch=yH(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`\n       ${oH("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${nH("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}class lY{constructor(e,t,n){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=vH(e.outShape),this.dispatch=yH(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${n} type.`);this.type=n,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`\n       ${oH("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${nH("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}const cY={kernelName:"Dilation2DBackpropFilter",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,dy:i}=t,{strides:o,pad:u,dilations:l}=r,c=G.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l),h=a.dtype,p=new lY(c,a.shape,h),d=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[P.sizeFromShape(c.outShape)]}],f=qH({backend:n,attrs:{shape:a.shape,value:0,dtype:h}});return n.runWebGPUProgram(p,[s,a,i],h,d,f)}},hY={kernelName:"Dilation2DBackpropInput",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,dy:i}=t,{strides:o,pad:u,dilations:l}=r,c=G.computeDilation2DInfo(s.shape,a.shape,o,u,"NHWC",l),h=s.dtype,p=new uY(c,h),d=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[P.sizeFromShape(c.outShape)]}],f=qH({backend:n,attrs:{shape:c.inShape,value:0,dtype:h}});return n.runWebGPUProgram(p,[s,a,i],h,d,f)}};class pY{constructor(e,t,n){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=rH.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=n,this.shaderKey=`draw_${t}_${n}`}getUserCode(){let e;const t="float32"===this.type?"value":"value / 255.0";return e=`\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${t};\n        rgba[1] = ${t};\n        rgba[2] = ${t};\n      } else {\n        rgba[d] = ${t};\n      }`,`\n       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;\n       ${oH("index")} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${e}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `}}const dY={kernelName:"Draw",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s}=t,{canvas:a,options:i}=r,[o,u]=s.shape.slice(0,2),{imageOptions:l}=i||{},c=(null==l?void 0:l.alpha)||1,h=n.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",p=[o,u],d=new pY(p,s.dtype,h);a.width=u,a.height=o;let f,m=a.getContext("webgpu");m||(f=new OffscreenCanvas(u,o),m=f.getContext("webgpu"));const g=3===s.shape.length?s.shape[2]:1;m.configure({device:n.device,format:h,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});const y=n.makeTensorInfo(p,"int32"),b=n.tensorMap.get(y.dataId);if(b.resource=m.getCurrentTexture(),b.external=!0,n.runWebGPUProgram(d,[s],"int32",[{type:"uint32",data:[g]},{type:"float32",data:[c]}],y),f){const e=a.getContext("2d");if(!e)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");e.drawImage(f,0,0)}return n.disposeData(y.dataId),s}},fY=oj({opType:EH.MUL,cpuKernelImpl:jq,supportsComplex:!0}),mY={kernelName:"Multiply",backendName:"webgpu",kernelFunc:fY};function gY(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return wK(s,a,i,"sum",n)}const yY={kernelName:"Sum",backendName:"webgpu",kernelFunc:gY},bY={kernelName:"Einsum",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:i,summedDims:o,idDims:u}=G.decodeEinsumEquation(s,a.length);G.checkEinsumDimSizes(i.length,u,a);const{path:l,steps:c}=G.getEinsumComputePath(o,u),h=c.length;let p=null,d=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:r}=G.getEinsumPermutation(d,u[e]);let s;G.isIdentityPermutation(t)?s=a[e]:(s=gK({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);P.arraysEqual(s.shape,i)||(s=XH({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===p?p=s:(p=fY({inputs:{a:s,b:p},backend:n}),f.push(p))}m<h-1&&(l[m]>=0&&(p=gY({inputs:{x:p},backend:n,attrs:{axis:l[m]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const m of f)m!==p&&n.disposeData(m.dataId);return p}},xY={kernelName:"Elu",backendName:"webgpu",kernelFunc:ij({opType:AH.ELU})},wY={kernelName:"EluGrad",backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=new ej(EH.ELU_DER,r.shape,s.shape);return n.runWebGPUProgram(a,[r,s],r.dtype)}},vY={kernelName:"Equal",backendName:"webgpu",kernelFunc:oj({opType:EH.EQUAL,dtype:"bool",cpuKernelImpl:$q})},kY={kernelName:"Erf",backendName:"webgpu",kernelFunc:ij({opType:AH.ERF})},SY={kernelName:"Exp",backendName:"webgpu",kernelFunc:ij({opType:AH.EXP,cpuKernelImpl:_q,dtype:"float32"})};function IY(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let u=s;return s<0&&(P.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+s+1),o.splice(u,0,1),XH({inputs:{x:a},backend:r,attrs:{shape:o}})}const NY={kernelName:"ExpandDims",backendName:"webgpu",kernelFunc:IY},CY={kernelName:"Expm1",backendName:"webgpu",kernelFunc:ij({opType:AH.EXPM1,cpuKernelImpl:Fq})};class TY{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey="fft_"+e}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}}function EY(e,t,n){const r=n.tensorMap.get(e.dataId),s=P.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=[],o=XH({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}});i.push(o);const u=o.shape,l=new TY("real",u),c=new TY("imag",u),h=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?u[1]:1]}],d=n.runWebGPUProgram(l,h,"float32",p);i.push(d);const f=n.runWebGPUProgram(c,h,"float32",p);i.push(f);const m=rj({inputs:{real:d,imag:f},backend:n});i.push(m);const g=XH({inputs:{x:m},backend:n,attrs:{shape:e.shape}});return i.forEach(e=>n.disposeData(e.dataId)),g}const AY={kernelName:"FFT",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return EY(r,!1,n)}};class RY{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}const $Y={kernelName:"FlipLeftRight",backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new RY(n.shape);return r.runWebGPUProgram(s,[n],n.dtype)}},_Y={kernelName:"Floor",backendName:"webgpu",kernelFunc:ij({opType:AH.FLOOR,cpuKernelImpl:Dq})},FY={kernelName:"FloorDiv",backendName:"webgpu",kernelFunc:oj({opType:EH.FLOOR_DIV,cpuKernelImpl:Oq,dtype:"int32"})};class DY{constructor(e,t,n=!1){this.pixelsOpType=rH.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey="fromPixels_"+this.importVideo}getUserCode(){const e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${oH("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${e};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}const OY={kernelName:"FromPixels",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r;if(null==s)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,u="undefined"!=typeof HTMLCanvasElement&&s instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&s instanceof OffscreenCanvas,l="undefined"!=typeof ImageBitmap&&s instanceof ImageBitmap,[c,h]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],p=[h,c,a],d=FF().getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&i,f=i||o;if(l||u||f){let e;if(d)e=n.device.importExternalTexture({source:s});else{if(f){const e=FF().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=MY&&e===PY||(PY=e,MY=document.createElement("canvas").getContext("2d",{willReadFrequently:PY})),MY.canvas.width=c,MY.canvas.height=h,MY.drawImage(s,0,0,c,h),s=MY.canvas}const t=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,r=n.textureManager.acquireTexture(p[1],p[0],"rgba8unorm",t);n.queue.copyExternalImageToTexture({source:s},{texture:r},[p[1],p[0]]),e=r}const t=P.sizeFromShape(p),r=P.computeStrides(p),i=new DY(p,a,d),o=[{type:"uint32",data:[t]},{type:"uint32",data:[a]},{type:"uint32",data:[...r]}],u=n.makeTensorInfo([h,c],"int32");n.tensorMap.get(u.dataId).resource=e;const l=n.runWebGPUProgram(i,[u],"int32",o);return n.disposeData(u.dataId),l}const m=s.data;let g=m;if(null!=a&&4!==a){g=new Uint8Array(s.width*s.height*a);const e=m.length;let t=0;for(let n=0;n<e;n++)n%4<a&&(g[t++]=m[n])}const y=n.makeTensorInfo(p,"int32",new Int32Array(g));return n.uploadToGPU(y.dataId),y}};let MY,PY=FF().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class zY{constructor(e,t,n,r,s){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],G.assertAndGetBroadcastShape(e,t),G.assertAndGetBroadcastShape(e,n),this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=r&&(G.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset")),null!=s&&(G.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale")),this.offsetShape=r,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";return null!=this.scaleShape&&(t="getScaleByOutputIndex(index)"),`\n      ${oH("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${e};\n          let scaleValue = ${t};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}const LY={kernelName:"FusedBatchNorm",backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r,scale:s,offset:a,mean:i,variance:o}=e,{varianceEpsilon:u}=t,l=n,c=[r,i,o];let h=null;null!=a&&(h=a.shape,c.push(a));let p=null;null!=s&&(p=s.shape,c.push(s));const d=new zY(r.shape,i.shape,o.shape,h,p);return l.runWebGPUProgram(d,c,r.dtype,[{type:"float32",data:[u]}])}},BY={kernelName:"FusedConv2D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r,m=G.convertConv2DDataFormat(c);return SX({x:s,filter:a,convInfo:G.computeConv2DInfo(s.shape,a.shape,u,h,l,p,!1,m),backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:f,activation:d})}},WY={kernelName:"FusedDepthwiseConv2D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=r;let f=c;null==f&&(f=[1,1]),P.assert(G.eitherStridesOrDilationsAreOne(u,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${f}'`);const m=G.computeConv2DInfo(s.shape,a.shape,u,f,l,h,!0),g=[s,a],y=null!=i,b=null!=o;y&&g.push(i),b&&g.push(o);const x=[{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.inHeight,m.inWidth]}];let w;return m.outHeight>4&&m.outWidth>4&&m.strideWidth<=2&&m.inChannels===m.outChannels&&1===m.dilationHeight&&1===m.dilationWidth&&m.inChannels%4==0?(w=new ZX(m,y,p,b),x.push({type:"int32",data:[w.virtualWidth]})):(w=new QX(m,y,p,b),x.push({type:"int32",data:[m.filterHeight]},{type:"int32",data:[m.filterWidth]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]})),"leakyrelu"===p&&(x.push({type:"float32",data:[d]}),w.uniforms+=" alpha : f32,"),n.runWebGPUProgram(w,g,"float32",x)}};class VY{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gathernd_"+e,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${aH(e)},`}getUserCode(){let e;return e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides",`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${e};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}const UY={kernelName:"GatherNd",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,i=a[a.length-1],o=P.sizeFromShape(r.shape),[u,l,c,h]=G.prepareAndValidate(r,s),p=XH({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),d=XH({inputs:{x:r},backend:n,attrs:{shape:[P.sizeFromShape(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=Mq(e,t,r.dtype,l,i,c,h,r.shape,o);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new VY(i,[l,c]),m=n.runWebGPUProgram(f,[d,p],d.dtype,[{type:"int32",data:[i]},{type:"int32",data:h}]),g=XH({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeData(p.dataId),n.disposeData(d.dataId),n.disposeData(m.dataId),g}};class GY{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const e=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let r=0;r<e.length;r++)n.push(2===r?"indexZ":""+t[r]);return n.join()}(this.aShape);return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${e}));\n        }\n      }\n    `}}function HY(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r,u=P.parseAxisParam(i,s.shape)[0],l=G.segment_util.collectGatherOpShapeInfo(s,a,u,o),c=P.sizeFromShape(a.shape),h=[],p=XH({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=XH({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});h.push(p),h.push(d);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,a])){const e=n.tensorMap.get(d.dataId),t=rM(d.shape,d.dtype,e.values),r=n.tensorMap.get(p.dataId),s=rM(p.shape,p.dtype,r.values),a=Pq(s,t,f);return h.forEach(e=>n.disposeData(e.dataId)),n.makeTensorInfo(l.outputShape,a.dtype,a.values)}const m=new GY(p.shape,f),g=n.runWebGPUProgram(m,[p,d],p.dtype);h.push(g);const y=XH({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return h.forEach(e=>n.disposeData(e.dataId)),y}const jY={kernelName:"GatherV2",backendName:"webgpu",kernelFunc:HY},qY={kernelName:"Greater",backendName:"webgpu",kernelFunc:oj({opType:EH.GREATER,cpuKernelImpl:Lq,dtype:"bool"})},KY={kernelName:"GreaterEqual",backendName:"webgpu",kernelFunc:oj({opType:EH.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:zq})},XY={kernelName:"IFFT",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return EY(r,!0,n)}},YY={kernelName:"IsFinite",backendName:"webgpu",kernelFunc:ij({opType:AH.IS_FINITE,dtype:"bool"})},ZY={kernelName:"IsInf",backendName:"webgpu",kernelFunc:ij({opType:AH.IS_INF,dtype:"bool"})},QY={kernelName:"IsNan",backendName:"webgpu",kernelFunc:ij({opType:AH.IS_NAN,dtype:"bool"})},JY={kernelName:"LeakyRelu",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,i=[{type:"float32",data:[a]}],o=new aj(s.shape,AH.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(o,[s],"float32",i)}},eZ={kernelName:"Less",backendName:"webgpu",kernelFunc:oj({opType:EH.LESS,dtype:"bool",cpuKernelImpl:Wq})},tZ={kernelName:"LessEqual",backendName:"webgpu",kernelFunc:oj({opType:EH.LESS_EQUAL,dtype:"bool",cpuKernelImpl:Bq})};class nZ{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}const rZ={kernelName:"LinSpace",backendName:"webgpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=(s-r)/(a-1),o=new nZ(a);return t.runWebGPUProgram(o,[],"float32",[{type:"float32",data:[r]},{type:"float32",data:[i]}])}},sZ={kernelName:"Log",backendName:"webgpu",kernelFunc:ij({opType:AH.LOG,cpuKernelImpl:Vq})},aZ={kernelName:"Log1p",backendName:"webgpu",kernelFunc:ij({opType:AH.LOG1P})},iZ={kernelName:"LogicalAnd",backendName:"webgpu",kernelFunc:oj({opType:EH.LOGICAL_AND,dtype:"bool"})},oZ={kernelName:"LogicalNot",backendName:"webgpu",kernelFunc:ij({opType:AH.LOGICAL_NOT})},uZ={kernelName:"LogicalOr",backendName:"webgpu",kernelFunc:oj({opType:EH.LOGICAL_OR})},lZ="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n";class cZ{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${lZ}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}class hZ{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,P.assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=yH(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${oH()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${lZ}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}const pZ={kernelName:"LRN",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r;let l;return l=a>16?new cZ(s.shape):new hZ(s.shape,a),n.runWebGPUProgram(l,[s],s.dtype,[{type:"int32",data:[a]},{type:"float32",data:[i]},{type:"float32",data:[o]},{type:"float32",data:[u]}])}};class dZ{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `}}const fZ={kernelName:"LRNGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new dZ(s.shape);return n.runWebGPUProgram(h,[s,a,i],s.dtype,[{type:"int32",data:[o]},{type:"float32",data:[u]},{type:"float32",data:[l]},{type:"float32",data:[c]}])}},mZ={kernelName:"Maximum",backendName:"webgpu",kernelFunc:oj({opType:EH.MAX,cpuKernelImpl:Gq})},gZ={kernelName:"MaxPool",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;return zK(s,G.computePool2DInfo(s.shape,a,i,1,o,u),"max",n)}},yZ={kernelName:"MaxPool3D",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=G.computePool3DInfo(s.shape,a,i,[1,1,1],o,l,u),h=new FK(c,"max");return n.runWebGPUProgram(h,[s],s.dtype,[{type:"int32",data:[c.strideDepth,c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.front,c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.inDepth,c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth]}])}};class bZ{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class xZ{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`\n      ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const wZ={kernelName:"MaxPool3DGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=G.computePool3DInfo(i.shape,o,u,[1,1,1],l,c),p=new FK(h,"max",!0);let d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];const f=n.runWebGPUProgram(p,[i],"int32",d),m=new xZ(h);d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterDepth-1-h.padInfo.front,h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]}];const g=n.runWebGPUProgram(m,[s,f],i.dtype,d);return n.disposeData(f.dataId),g}},vZ={kernelName:"MaxPoolGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;IH([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=G.computePool2DInfo(o.shape,u,l,1,c,h),d=new _K(p,"max",!0);let f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.inHeight,p.inWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]}];const m=n.runWebGPUProgram(d,[o],"int32",f),g=new bZ(p);f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]}];const y=n.runWebGPUProgram(g,[s,m],o.dtype,f);return n.disposeData(m.dataId),y}},kZ={kernelName:"MaxPoolWithArgmax",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=r,{x:u}=t;P.assert(4===u.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${u.shape.length}.`);const l=[1,1];P.assert(G.eitherStridesOrDilationsAreOne(a,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);const c=G.computePool2DInfo(u.shape,s,a,l,i),h=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]}];let p=new _K(c,"max",!1);const d=n.runWebGPUProgram(p,[u],u.dtype,h);return p=new _K(c,"max",!0,!0,o),[d,n.runWebGPUProgram(p,[u],"int32",h)]}},SZ={kernelName:"Min",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return wK(s,a,i,"min",n)}},IZ={kernelName:"Minimum",backendName:"webgpu",kernelFunc:oj({opType:EH.MIN,cpuKernelImpl:Hq})};class NZ{constructor(e,t,n){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]),this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.offset="reflect"===n?0:1,this.shaderKey="mirrorPad_"+n}getUserCode(){const e=this.xShape.length,t=this.xShape.map((e,t)=>`uniforms.pad${t}[0]`).join(","),n=this.xShape.map((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`).join(","),r=1===e?"start":"start[i]",s=1===e?"end":"end[i]",a=1===e?"outC":"outC[i]",i=aH(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let start = ${i}(${t});\n          let end = ${i}(${n});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${e}; i = i + 1) {\n            if (${a} < ${r}) {\n              ${a} = ${r} * 2 - ${a} - ${this.offset};\n            } else if(${a} >= ${s}) {\n              ${a} = (${s} - 1) * 2 - ${a} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${o}));\n        }\n      }\n    `}}const CZ={kernelName:"MirrorPad",backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{paddings:s,mode:a}=t,i=n,o=s.map(e=>({type:"int32",data:[e[0],e[1]]})),u=new NZ(r.shape,s,a);return i.runWebGPUProgram(u,[r],r.dtype,o)}},TZ={kernelName:"Mod",backendName:"webgpu",kernelFunc:oj({opType:EH.MOD})};class EZ{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `}}class AZ{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.workgroupSize=this.outputShape[1]>=4096?[256,1,1]:[64,1,1],this.shaderKey="softmax"}getUserCode(){return`\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${oH("index")} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `}}function RZ(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=XH({inputs:{x:s},backend:n,attrs:{shape:[P.sizeFromShape(s.shape)/s.shape[a],s.shape[a]]}}),o=new AZ(i.shape),u=n.runWebGPUProgram(o,[i],s.dtype),l=XH({inputs:{x:u},backend:n,attrs:{shape:s.shape}});return n.disposeData(i.dataId),n.disposeData(u.dataId),l}const $Z={kernelName:"Softmax",backendName:"webgpu",kernelFunc:RZ},_Z={kernelName:"Multinomial",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:RZ({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[1],c=new EZ(u.shape[0],a),h=n.runWebGPUProgram(c,[u],"int32",[{type:"float32",data:[i]},{type:"int32",data:[l]}]);return o||n.disposeData(u.dataId),h}},FZ={kernelName:"Neg",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.tensorMap.get(r.dataId),[t,s]=qq(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}const s=new aj(r.shape,AH.NEG);return n.runWebGPUProgram(s,[r],r.dtype)}},DZ={kernelName:"NonMaxSuppressionV3",backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=H.nonMaxSuppressionV3Impl(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},OZ={kernelName:"NonMaxSuppressionV5",backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=H.nonMaxSuppressionV5Impl(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class MZ{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${oH("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}const PZ={kernelName:"OneHot",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{dtype:a,depth:i,onValue:o,offValue:u}=r,l=P.sizeFromShape(s.shape),c=new MZ(l,i),h=XH({inputs:{x:s},backend:n,attrs:{shape:[l]}}),p=n.runWebGPUProgram(c,[h],a,[{type:"float32",data:[o]},{type:"float32",data:[u]}]);n.disposeData(h.dataId);const d=XH({inputs:{x:p},backend:n,attrs:{shape:[...s.shape,i]}});return n.disposeData(p.dataId),d}};function zZ(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=sX({inputs:{input:r},backend:n}),t=zZ({inputs:{x:e},backend:n}),s=mX({inputs:{input:r},backend:n}),a=zZ({inputs:{x:s},backend:n}),i=rj({inputs:{real:t,imag:a},backend:n});return n.disposeData(e.dataId),n.disposeData(t.dataId),n.disposeData(s.dataId),n.disposeData(a.dataId),i}return qH({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const LZ={kernelName:"ZerosLike",backendName:"webgpu",kernelFunc:zZ},BZ={kernelName:"OnesLike",backendName:"webgpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=sX({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=mX({inputs:{input:s},backend:r}),i=zZ({inputs:{x:a},backend:r}),o=rj({inputs:{real:n,imag:i},backend:r});return r.disposeData(t.dataId),r.disposeData(n.dataId),r.disposeData(a.dataId),r.disposeData(i.dataId),o}return qH({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},WZ={kernelName:"Pack",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return IY({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{P.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),P.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],u=yX({inputs:t.map(e=>{const t=IY({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t}),backend:n,attrs:{axis:s}});return o.forEach(e=>n.disposeData(e.dataId)),u}};function VZ(e,t=!1){const n=e.length,r=aH(n),s=e.map((e,t)=>`uniforms.pad${t}[0]`).join(","),a=e.map((e,t)=>`uniforms.pad${t}[0] + uniforms.xShape${n>1?`[${t}]`:""}`).join(",");return`\n        let start = ${n>1?`${r}(${s})`:""+s};\n        let end = ${n>1?`${r}(${a})`:""+a};\n        if (${n>1?"any(paddedCoords < start)":"paddedCoords < start"} || ${n>1?"any(paddedCoords >= end)":"paddedCoords >= end"}) {\n          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${n>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n):"coords"}));\n        }\n  `}class UZ{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]),this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${VZ(this.xShape)}\n        }\n      }\n    `}}const GZ={kernelName:"PadV2",backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;if(a.every(e=>P.arraysEqual(e,[0,0])))return tj({inputs:{x:s},backend:n});if(0===P.sizeFromShape(s.shape))return qH({backend:n,attrs:{shape:a.map((e,t)=>e[0]+s.shape[t]+e[1]),value:i,dtype:s.dtype}});const o=[{type:"float32",data:[i]}];a.map(e=>o.push({type:"int32",data:[e[0],e[1]]}));const u=new UZ(s.shape,a);return n.runWebGPUProgram(u,[s],s.dtype,o)}},HZ={kernelName:"Pow",backendName:"webgpu",kernelFunc:oj({opType:EH.POW})},jZ={kernelName:"Prelu",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=new ej(EH.PRELU,r.shape,s.shape);return n.runWebGPUProgram(a,[r,s],"float32")}},qZ={kernelName:"Prod",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return wK(s,a,i,"prod",n)}},KZ={kernelName:"Range",backendName:"webgpu",kernelFunc:e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=Yq(r,s,a,i);return t.makeTensorInfo([o.length],i,o)}},XZ={kernelName:"RealDiv",backendName:"webgpu",kernelFunc:oj({opType:EH.DIV})},YZ={kernelName:"Reciprocal",backendName:"webgpu",kernelFunc:ij({opType:AH.RECIPROCAL})},ZZ={kernelName:"Relu",backendName:"webgpu",kernelFunc:ij({opType:AH.RELU})},QZ={kernelName:"Relu6",backendName:"webgpu",kernelFunc:ij({opType:AH.RELU6})};class JZ{constructor(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const eQ={kernelName:"ResizeBilinear",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,size:i,halfPixelCenters:o}=r,[u,l]=i,c=[{type:"float32",data:[a&&u>1?1:0,a&&l>1?1:0]},{type:"float32",data:[o?.5:0]}],h=new JZ(s.shape,u,l);return n.runWebGPUProgram(h,[s],"float32",c)}};class tQ{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey="resizeBilinearBackprop_"+t}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const nQ={kernelName:"ResizeBilinearGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,[,o,u]=s.shape,[,l,c]=a.shape,h=[i&&l>1?o-1:o,i&&c>1?u-1:u],p=[i&&l>1?l-1:l,i&&c>1?c-1:c],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2,x=new tQ(s.shape,i);return n.runWebGPUProgram(x,[a],a.dtype,[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[d]},{type:"float32",data:[f]},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[y]},{type:"int32",data:[b]}])}};class rQ{constructor(e,t,n,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=r,this.shaderKey="resizeNearest_"+r}getUserCode(){let e;return e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${e};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const sQ={kernelName:"ResizeNearestNeighbor",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=[{type:"float32",data:[a&&u>1?1:0,a&&l>1?1:0]},{type:"float32",data:[a?.5:0]}],h=new rQ(s.shape,u,l,i);return n.runWebGPUProgram(h,[s],s.dtype,c)}};class aQ{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey="resizeNearestNeigborBackprop_"+t}getUserCode(){return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const iQ={kernelName:"ResizeNearestNeighborGrad",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,[,o,u]=s.shape,[,l,c]=a.shape,h=[i&&l>1?o-1:o,i&&c>1?u-1:u],p=[i&&l>1?l-1:l,i&&c>1?c-1:c],d=1/(h[0]/p[0]),f=1/(h[1]/p[1]),m=2*Math.ceil(d)+2,g=2*Math.ceil(f)+2,y=new aQ(s.shape,i);return n.runWebGPUProgram(y,[a],a.dtype,[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[d]},{type:"float32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[g]}])}};class oQ{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}const uQ={kernelName:"Reverse",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,i=s.shape.length;if(0===i)return tj({inputs:{x:s},backend:n});const o=s.shape,u=[1,1,1,1];o.forEach((e,t)=>{u[t+4-i]=e});const l=P.parseAxisParam(a,s.shape),c=[0,0,0,0];l.forEach(e=>{c[e+4-i]=1});const h=[{type:"int32",data:c}],p=XH({inputs:{x:s},backend:n,attrs:{shape:u}}),d=new oQ(u),f=n.runWebGPUProgram(d,[p],p.dtype,h);n.disposeData(p.dataId);const m=XH({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeData(f.dataId),m}};class lQ{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${oH("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}const cQ={kernelName:"RotateWithOffset",backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new lQ(r.shape,a),[l,c]=G.getImageCenter(i,r.shape[1],r.shape[2]),h=[{type:"float32",data:[l]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(s)]},{type:"float32",data:[Math.cos(s)]}];return h.push("number"==typeof a?{type:"float32",data:[Number.parseFloat(a.toFixed(2))]}:{type:"float32",data:a}),o.runWebGPUProgram(u,[r],r.dtype,h)}},hQ={kernelName:"Round",backendName:"webgpu",kernelFunc:ij({opType:AH.ROUND})},pQ={kernelName:"Rsqrt",backendName:"webgpu",kernelFunc:ij({opType:AH.RSQRT,cpuKernelImpl:Zq})};class dQ{constructor(e,t,n,r,s,a,i,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=a,this.type=i,this.sumDupeIndices=o,this.dispatchLayout=vH(e),this.dispatch=yH(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${n}_${r}_${this.sliceDimGreaterThanOne}_${i}_${o}_${s.length}`;const u=aH(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=r,this.indicesRank=n}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");const t=`getIndices(${e})`,n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let r="",s="";1===this.dispatchLayout.x.length?(r="flattenedIndex",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(r="vec2<i32>(flattenedIndex, coords[1])",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");const a=`getUpdates(${Array.from({length:this.updatesRank},(e,t)=>`coords[${t}]`).join(", ")})`;return`\n    ${s}\n      ${oH("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${t}));\n            flattenedIndex = flattenedIndex + indexInside * ${n};\n          }\n          let updateValue =\n              ${dH(this.type)}(${a});\n          let flatIndex = getOutputIndexFromCoords(${r});\n\n          ${this.sumDupeIndices?nH("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}}const fQ={kernelName:"ScatterNd",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=G.calculateShapes(a,s,i),p=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const d=XH({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),f=XH({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=f.dtype,g=qH({backend:n,attrs:{shape:p,value:0,dtype:m}}),y=[{type:"int32",data:[o]},{type:"int32",data:c},{type:"int32",data:[P.sizeFromShape(f.shape)]}],b=new dQ(f.shape,o,d.shape.length,f.shape.length,c,p,m),x=n.runWebGPUProgram(b,[f,d],m,y,g),w=XH({inputs:{x},backend:n,attrs:{shape:i}});return n.disposeData(d.dataId),n.disposeData(f.dataId),n.disposeData(x.dataId),w}};class mQ{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey="search_sorted_"+t}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}const gQ={kernelName:"SearchSorted",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:a}=t,{side:i}=r,o=new mQ([a.shape[0],a.shape[1]],i);return n.runWebGPUProgram(o,[s,a],"int32",[{type:"int32",data:[s.shape[1]]}])}};class yQ{constructor(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],s=[];for(let e=0;e<this.outputShape.length;e++)s.push(""+n[e]),e<this.cRank&&r.push(""+n[e]);e=r.join(),t=s.join()}return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${e});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${t}));\n          } else {\n            setOutputAtIndex(index, getB(${t}));\n          }\n        }\n      }\n    `}}const bQ={kernelName:"Select",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new yQ(r.shape.length,s.shape,s.shape.length);return n.runWebGPUProgram(i,[r,s,a],DD(s.dtype,a.dtype))}},xQ={kernelName:"Selu",backendName:"webgpu",kernelFunc:ij({opType:AH.SELU})},wQ={kernelName:"Sigmoid",backendName:"webgpu",kernelFunc:ij({opType:AH.SIGMOID})},vQ={kernelName:"Sign",backendName:"webgpu",kernelFunc:ij({opType:AH.SIGN})},kQ={kernelName:"Sin",backendName:"webgpu",kernelFunc:ij({opType:AH.SIN})},SQ={kernelName:"Sinh",backendName:"webgpu",kernelFunc:ij({opType:AH.SINH})},IQ={kernelName:"Softplus",backendName:"webgpu",kernelFunc:ij({opType:AH.SOFTPLUS})};class NQ{constructor(e,t,n,r,s,a){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;const i=new Array(r.length);for(let o=0;o<i.length;o++)i[o]=r[s[o]];this.outputShape=i,this.newDim=s,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${aH(r.length)}, paddedXShapeStrides : ${aH(a)}, `,n.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.shaderKey="spaceToBatchND_"+s}getUserCode(){const e=aH(this.outputShape.length),t=mK(this.newDim);return`\n      ${cH(this.paddedXShape,"PaddedX")}\n      ${oH("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${VZ(this.xShape,!0)}\n        }\n      }\n    `}}const CQ={kernelName:"SpaceToBatchND",backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;P.assert(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");const o=a.reduce((e,t)=>e*t),u=[[0,0]];u.push(...i);for(let b=1+a.length;b<s.shape.length;++b)u.push([0,0]);const l=u.map((e,t)=>e[0]+s.shape[t]+e[1]),c=G.getReshaped(l,a,o,!1),h=G.getPermuted(c.length,a.length,!1),p=G.getReshapedPermuted(l,a,o,!1),d=P.computeStrides(l),f=new NQ(s.shape,l,u,c,h,d.length),m=[{type:"int32",data:c},{type:"int32",data:d}];u.map(e=>m.push({type:"int32",data:[e[0],e[1]]}));const g=n.runWebGPUProgram(f,[s],s.dtype,m),y=XH({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeData(g.dataId),y}};class TQ{constructor(e,t,n){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=n,this.dispatchLayout=vH([t]),this.dispatch=yH(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${nH("&result[outIndex]","value",this.type)}\n      }\n    }\n  `}}class EQ{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=vH(t),this.dispatch=yH(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${nH("&result[segmentId]","1","int32")}\n      }\n    }\n  `}}class AQ{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=vH(e),this.dispatch=yH(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${"float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}\n        }\n      }\n    }\n  `}}function RQ(e,t,n,r=!1,s){const a=P.sizeFromShape(e.shape)/e.shape[0],i=e.dtype,o=P.sizeFromShape(t.shape),u=s.readSync(n.dataId),l=o>0?u[o-1]+1:0;let c;const h=e.shape.slice();h[0]=l;const p=o*a,d=qH({backend:s,attrs:{shape:h,value:0,dtype:i}});c=new TQ(h,p,i);let f=[{type:"int32",data:[a]},{type:"int32",data:[p]}];const m=s.runWebGPUProgram(c,[e,t,n],i,f,d);if(r)return m;const g=qH({backend:s,attrs:{shape:[l],value:0,dtype:"int32"}});c=new EQ(l,n.shape);const y=s.runWebGPUProgram(c,[n],"int32",null,g),b=qH({backend:s,attrs:{shape:h,value:0,dtype:i}});c=new AQ(h,i),f=[{type:"int32",data:[a]}];const x=s.runWebGPUProgram(c,[m,y],i,f,b);return s.disposeData(m.dataId),s.disposeData(y.dataId),x}const $Q={kernelName:"SparseSegmentMean",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;return RQ(r,s,a,!1,n)}},_Q={kernelName:"SparseSegmentSum",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;return RQ(r,s,a,!0,n)}};class FQ{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e;s++)r.push(`(${n[s]} % ${t}aShape[${s}])`);return r.join()}(this.rank,"uniforms.");return`\n      ${oH("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${e}));\n        }\n      }\n    `}}function DQ(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if(n.shouldExecuteOnCPU([s])||"string"===s.dtype||s.shape.length>=5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map(e=>P.decodeString(e)):e,r=rM(s.shape,s.dtype,t),i=sK(r,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new FQ(s.shape,a);return n.runWebGPUProgram(i,[s],s.dtype)}const OQ={kernelName:"Tile",backendName:"webgpu",kernelFunc:DQ},MQ={kernelName:"SparseToDense",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=G.calculateShapes(a,s,o);if("string"===a.dtype){const e=n.bufferSync(s),t=n.bufferSync(a),r=P.decodeString(n.readSync(i.dataId)[0]),d=Qq(e,t,o,p,c,l,u,h,r,!1);return n.makeTensorInfo(o,d.dtype,d.values)}const d=[p/c,c],f=XH({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=a.shape.length?XH({inputs:{x:a},backend:n,attrs:{shape:[l,c]}}):tj({inputs:{x:a},backend:n}),g=m.dtype,y=n.makeTensorInfo([],g,P.makeZerosTypedArray(1,g)),b=XH({inputs:{x:i},backend:n,attrs:{shape:Array(d.length).fill(1)}}),x=DQ({inputs:{x:b},backend:n,attrs:{reps:d}}),w=[{type:"int32",data:[u]},{type:"int32",data:h},{type:"int32",data:[P.sizeFromShape([l,c])]}];switch(l){case 0:break;case 1:{const e=new dQ([l,c],u,f.shape.length,m.shape.length,h,d,g,!1);n.runWebGPUProgram(e,[m,f],g,w,x)}break;default:{const e=new dQ([l,c],u,f.shape.length,y.shape.length,h,d,g,!1);n.runWebGPUProgram(e,[y,f],g,w,x)}{const e=new dQ([l,c],u,f.shape.length,m.shape.length,h,d,g);n.runWebGPUProgram(e,[m,f],g,w,x)}}const v=XH({inputs:{x},backend:n,attrs:{shape:o}});return n.disposeData(f.dataId),n.disposeData(m.dataId),n.disposeData(b.dataId),n.disposeData(y.dataId),n.disposeData(x.dataId),v}},PQ={kernelName:"SplitV",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=P.parseAxisParam(i,s.shape)[0],u=G.prepareSplitSize(s,a,o),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map(e=>{const t=[...c];t[o]=e;const r=KK({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[o]+=e,r})}},zQ={kernelName:"Sqrt",backendName:"webgpu",kernelFunc:ij({opType:AH.SQRT})},LQ={kernelName:"Square",backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t,s=new aj(n.shape,AH.SQUARE);return r.runWebGPUProgram(s,[n],n.dtype)}},BQ={kernelName:"SquaredDifference",backendName:"webgpu",kernelFunc:oj({opType:EH.SQUARED_DIFFERENCE})},WQ={kernelName:"Step",backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=new aj(r.shape,AH.STEP,"stepAlpha : f32,");return n.runWebGPUProgram(s,[r],r.dtype,[{type:"float32",data:[t.alpha]}])}};class VQ{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const t=aH(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let t=0;e=this.outputShape.map((e,n)=>(t++,1===this.outputShape.length?`coords * uniforms.strides[${n}] + uniforms.begin[${n}]`:`coords[${t-1}] * uniforms.strides[${n}] + uniforms.begin[${n}]`)).join(",")}return`\n       ${oH("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}const UQ={kernelName:"StridedSlice",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=W.sliceInfo(s.shape,a,i,o,u,l,c,h,p);let v;if(m)v=XH({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){P.assert(s.shape.length>=1,()=>"Input must have rank at least 1, got: "+s.shape.length);const e=W.computeOutShape(b,x,w),t=KK({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});v=XH({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeData(t.dataId)}else if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=rM(s.shape,s.dtype,e),r=tK(d,t,w,b);v=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new VQ(d),t=n.runWebGPUProgram(e,[s],s.dtype,[{type:"int32",data:b},{type:"int32",data:w}]);v=XH({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeData(t.dataId)}return v}},GQ={kernelName:"StringNGrams",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=nK(p,d,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},HQ={kernelName:"Sub",backendName:"webgpu",kernelFunc:oj({opType:EH.SUB,cpuKernelImpl:rK,supportsComplex:!0})},jQ={kernelName:"Tan",backendName:"webgpu",kernelFunc:ij({opType:AH.TAN})},qQ={kernelName:"Tanh",backendName:"webgpu",kernelFunc:ij({opType:AH.TANH})},KQ={kernelName:"TensorScatterUpdate",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:r,indices:s,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:u,strides:l,outputSize:c}=G.calculateShapes(a,s,r.shape),h=[c/u,u];if(0===c)return n.makeTensorInfo(r.shape,s.dtype);const p=[],d=XH({inputs:{x:s},backend:n,attrs:{shape:[o,i]}});p.push(d);const f=XH({inputs:{x:a},backend:n,attrs:{shape:[o,u]}});p.push(f);const m=XH({inputs:{x:r},backend:n,attrs:{shape:h}});p.push(m);const g=DQ({inputs:{x:m},backend:n,attrs:{reps:Array(h.length).fill(1)}}),y=new dQ([o,u],i,d.shape.length,f.shape.length,l,h,r.dtype,!1),b=P.sizeFromShape([o,u]),x=n.runWebGPUProgram(y,[f,d],m.dtype,[{type:"int32",data:[i]},{type:"int32",data:l},{type:"int32",data:[b]}],g);p.push(x);const w=XH({inputs:{x},backend:n,attrs:{shape:r.shape}});return p.forEach(e=>n.disposeData(e.dataId)),w}};class XQ{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${oH("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}class YQ{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${oH("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}function ZQ(e,t){null!==t&&e.disposeData(t.dataId)}function QQ(e){let t=1;for(;t<e;)t*=2;return t}const JQ={kernelName:"TopK",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=s.shape,u=o[o.length-1];if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),[t,r]=aK(e,o,s.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return o[o.length-1]=0,[n.makeTensorInfo(o,s.dtype,[]),n.makeTensorInfo(o,"int32",[])];if(1===u)return[s,qH({attrs:{shape:o,dtype:"int32",value:0},backend:n})];const l=P.sizeFromShape(o)/u,c=XH({inputs:{x:s},attrs:{shape:[l,u]},backend:n}),h=QQ(a),p=QQ(u);let d=null;const f=()=>null===d?[c,c]:[c,d],m=(e,t,r)=>{const s=f(),a=new XQ(r),i=d;d=n.runWebGPUProgram(a,s,"int32",[{type:"int32",data:[u]},{type:"int32",data:[null===d?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}]),ZQ(n,i)};for(let w=1;w<h;w*=2){const e=2*w;for(let t=w;t>=1;t/=2)m(e,t,[l,p])}for(let w=p;w>h;w/=2){const e=f(),t=new YQ([l,w/2]),r=d;d=n.runWebGPUProgram(t,e,"int32",[{type:"int32",data:[u]},{type:"int32",data:[null===d?1:0]},{type:"int32",data:[h]}]),ZQ(n,r);const s=h/2,a=2*s;for(let n=s;n>=1;n/=2)m(a,n,d.shape)}let g=d;d=KK({inputs:{x:d},backend:n,attrs:{begin:0,size:[l,a]}}),ZQ(n,g);let y=HY({inputs:{x:c,indices:d},backend:n,attrs:{axis:1,batchDims:1}});ZQ(n,c);const b=o.slice(0,-1);b.push(a),g=d,d=XH({inputs:{x:d},attrs:{shape:b},backend:n}),ZQ(n,g);const x=y;return y=XH({inputs:{x:y},attrs:{shape:b},backend:n}),ZQ(n,x),[y,d]}};class eJ{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=vH(this.outputShape),this.dispatch=yH(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${oH("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}const tJ={kernelName:"Transform",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=r,[c,h,p,d]=s.shape,[f,m]=null!=l?l:[h,p],g=new eJ([c,f,m,d]),y="nearest"===i?1:2;let b;switch(o){case"constant":b=1;break;case"reflect":b=2;break;case"wrap":b=3;break;case"nearest":b=4;break;default:b=1}return n.runWebGPUProgram(g,[s,a],"float32",[{type:"int32",data:[y]},{type:"int32",data:[b]},{type:"float32",data:[u]}])}},nJ={kernelName:"Unpack",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(l[c++]=i.shape[m]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(u);for(let m=0;m<f.length;m++){p[a]=m;const e=KK({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),t=XH({inputs:{x:e},backend:n,attrs:{shape:l}});f[m]=t,h.push(e)}return h.forEach(e=>n.disposeData(e.dataId)),f}};class rJ{constructor(e,t,n){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=vH(e),this.dispatch=yH(this.dispatchLayout,e,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${n} type.`);this.type=n,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`\n    ${oH("index")} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${nH("&result[flatIndex]","value",this.type)}\n        }\n      }\n    }\n  `}}const sJ=[QH,oK,uK,lK,cK,pK,vK,kK,IK,NK,CK,TK,EK,AK,RK,LK,BK,UK,GK,HK,YK,JK,tX,iX,oX,cX,sj,dX,bX,IX,AX,$X,FX,DX,OX,MX,PX,LX,HX,jX,qX,XX,nY,rY,JX,aY,oY,cY,hY,dY,bY,xY,wY,vY,kY,SY,NY,CY,AY,KH,$Y,OY,_Y,FY,LY,BY,WY,UY,jY,qY,KY,nj,XY,gX,YY,ZY,QY,JY,eZ,tZ,rZ,aZ,sZ,iZ,oZ,uZ,pZ,fZ,OK,mZ,gZ,vZ,yZ,wZ,kZ,PK,SZ,IZ,CZ,TZ,_Z,mY,FZ,DZ,OZ,rX,PZ,BZ,WZ,GZ,HZ,jZ,qZ,KZ,aX,XZ,YZ,ZZ,QZ,YH,eQ,nQ,sQ,iQ,uQ,cQ,hQ,pQ,fQ,gQ,bQ,xQ,wQ,vQ,kQ,SQ,XK,WQ,UQ,GQ,$Z,IQ,CQ,$Q,_Q,MQ,PQ,zQ,LQ,BQ,HQ,yY,jQ,qQ,KQ,OQ,JQ,tJ,yK,nJ,{kernelName:"UnsortedSegmentSum",backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r,o=s.shape.length,u=[];let l=0;const c=G.getAxesPermutation([l],o);let h=s;null!=c&&(h=gK({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(h),l=G.getInnerMostAxes(1,o)[0]);const p=G.segment_util.computeOutShape(h.shape,l,i),d=P.sizeFromShape([h.shape[l]]),f=XH({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=s.dtype,g=[f.shape[0],i],y=qH({backend:n,attrs:{shape:g,value:0,dtype:m}}),b=new rJ(f.shape,g,m),x=[{type:"int32",data:[i]},{type:"int32",data:[P.sizeFromShape(f.shape)]}],w=n.runWebGPUProgram(b,[f,a],m,x,y),v=XH({inputs:{x:w},backend:n,attrs:{shape:p}});u.push(w);let k=v;if(null!=c){u.push(v);const e=G.getUndoAxesPermutation(c);k=gK({inputs:{x:k},backend:n,attrs:{perm:e}})}return u.forEach(e=>n.disposeData(e.dataId)),k}},LZ];for(const X1 of sJ)HF(X1);var aJ=function(e,t){return(aJ=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function iJ(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}aJ(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var oJ=function(){return(oJ=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};function uJ(e,t,n,r){return new(n||(n=Promise))((function(s,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function o(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}u((r=r.apply(e,t||[])).next())}))}function lJ(e,t){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}function cJ(e,t,n){if(n||2===arguments.length)for(var r,s=0,a=t.length;s<a;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))}var hJ=["nose","left_eye","right_eye","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle"],pJ=["nose","left_eye_inner","left_eye","left_eye_outer","right_eye_inner","right_eye","right_eye_outer","left_ear","right_ear","mouth_left","mouth_right","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_pinky","right_pinky","left_index","right_index","left_thumb","right_thumb","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle","left_heel","right_heel","left_foot_index","right_foot_index"],dJ={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},fJ={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},mJ=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],gJ=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function yJ(e){return e instanceof SVGAnimatedLength?e.baseVal.value:e}function bJ(e){return uJ(this,void 0,void 0,(function(){var t,n;return lJ(this,(function(r){switch(r.label){case 0:return t=document.createElement("canvas"),e instanceof ND?[4,B.toPixels(e,t)]:[3,2];case 1:return r.sent(),[3,3];case 2:t.width=yJ(e.width),t.height=yJ(e.height),n=t.getContext("2d"),e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0),r.label=3;case 3:return[2,t]}}))}))}function xJ(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s,a,i;return lJ(this,(function(o){switch(o.label){case 0:return e instanceof ND?(t=e.shape.slice(0,2),n=t[0],r=t[1],s=ImageData.bind,[4,B.toPixels(e)]):[3,2];case 1:return[2,new(s.apply(ImageData,[void 0,o.sent(),r,n]))];case 2:return a=document.createElement("canvas"),i=a.getContext("2d"),a.width=yJ(e.width),a.height=yJ(e.height),i.drawImage(e,0,0),[2,i.getImageData(0,0,a.width,a.height)]}}))}))}function wJ(e){return uJ(this,void 0,void 0,(function(){var t;return lJ(this,(function(n){switch(n.label){case 0:return e instanceof SVGImageElement||e instanceof OffscreenCanvas?[4,bJ(e)]:[3,2];case 1:return t=n.sent(),[3,3];case 2:t=e,n.label=3;case 3:return[2,B.fromPixels(t,4)]}}))}))}function vJ(e){if(e<0||e>=256)throw new Error("Mask value must be in range [0, 255] but got ".concat(e));if(!Number.isInteger(e))throw new Error("Mask value must be an integer but got ".concat(e))}var kJ={runtime:"mediapipe",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:"full"},SJ=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,this.mask]}))}))},e.prototype.toImageData=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,xJ(this.mask)]}))}))},e.prototype.toTensor=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,wJ(this.mask)]}))}))},e.prototype.getUnderlyingType=function(){return"canvasimagesource"},e}();function IJ(e){return vJ(e),"person"}var NJ=function(){function e(e){var t,n=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new D_.Pose({locateFile:function(t,n){if(e.solutionPath){var r=e.solutionPath.replace(/\/+$/,"");return"".concat(r,"/").concat(t)}return"".concat(n,"/").concat(t)}}),e.modelType){case"lite":t=0;break;case"heavy":t=2;break;case"full":default:t=1}this.poseSolution.setOptions({modelComplexity:t,smoothLandmarks:e.enableSmoothing,enableSegmentation:e.enableSegmentation,smoothSegmentation:e.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults((function(e){if(n.height=e.image.height,n.width=e.image.width,null==e.poseLandmarks)n.poses=[];else{var t=n.translateOutput(e.poseLandmarks,e.poseWorldLandmarks);e.segmentationMask&&(t.segmentation={maskValueToLabel:IJ,mask:new SJ(e.segmentationMask)}),n.poses=[t]}}))}return e.prototype.translateOutput=function(e,t){var n=this,r={keypoints:e.map((function(e,t){return{x:e.x*n.width,y:e.y*n.height,z:e.z,score:e.visibility,name:pJ[t]}}))};return null!=t&&(r.keypoints3D=t.map((function(e,t){return{x:e.x,y:e.y,z:e.z,score:e.visibility,name:pJ[t]}}))),r},e.prototype.estimatePoses=function(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s;return lJ(this,(function(a){switch(a.label){case 0:return t&&t.flipHorizontal&&t.flipHorizontal!==this.selfieMode&&(this.selfieMode=t.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),e instanceof ND?(s=ImageData.bind,[4,B.toPixels(e)]):[3,2];case 1:return r=new(s.apply(ImageData,[void 0,a.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:r=e,a.label=3;case 3:return[4,this.poseSolution.send({image:e=r},n)];case 4:return a.sent(),[2,this.poses]}}))}))},e.prototype.dispose=function(){this.poseSolution.close()},e.prototype.reset=function(){this.poseSolution.reset()},e.prototype.initialize=function(){return this.poseSolution.initialize()},e}();function CJ(e){return uJ(this,void 0,void 0,(function(){var t,n;return lJ(this,(function(r){switch(r.label){case 0:return t=function(e){if(null==e)return oJ({},kJ);var t=oJ({},e);return t.runtime="mediapipe",null==t.enableSegmentation&&(t.enableSegmentation=kJ.enableSegmentation),null==t.enableSmoothing&&(t.enableSmoothing=kJ.enableSmoothing),null==t.smoothSegmentation&&(t.smoothSegmentation=kJ.smoothSegmentation),null==t.modelType&&(t.modelType=kJ.modelType),t}(e),[4,(n=new NJ(t)).initialize()];case 1:return r.sent(),[2,n]}}))}))}function TJ(e){return e instanceof ND?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function EJ(e){return e-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}function AJ(e){return e instanceof ND?e:B.fromPixels(e)}function RJ(e,t,n){return $J(n,"inputResolution"),[1/n.width*e[0][0]*t.width,1/n.height*e[0][1]*t.width,e[0][3]*t.width,1/n.width*e[1][0]*t.height,1/n.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}function $J(e,t){P.assert(0!==e.width,(function(){return"".concat(t," width cannot be 0.")})),P.assert(0!==e.height,(function(){return"".concat(t," height cannot be 0.")}))}function _J(e,t,n){var r=n.rotationVectorStartKeypointIndex,s=n.rotationVectorEndKeypointIndex,a=e.locationData,i=a.relativeKeypoints[r].x*t.width,o=a.relativeKeypoints[r].y*t.height,u=a.relativeKeypoints[s].x*t.width,l=a.relativeKeypoints[s].y*t.height,c=2*Math.sqrt((u-i)*(u-i)+(l-o)*(l-o)),h=function(e,t,n){var r=e.locationData,s=n.rotationVectorStartKeypointIndex,a=n.rotationVectorEndKeypointIndex;return EJ((n.rotationVectorTargetAngle?n.rotationVectorTargetAngle:Math.PI*n.rotationVectorTargetAngleDegree/180)-Math.atan2(-(r.relativeKeypoints[a].y*t.height-r.relativeKeypoints[s].y*t.height),r.relativeKeypoints[a].x*t.width-r.relativeKeypoints[s].x*t.width))}(e,t,n);return{xCenter:i/t.width,yCenter:o/t.height,width:c/t.width,height:c/t.height,rotation:h}}function FJ(e){if(16!==e.length)throw new Error("Array length must be 16 but got ".concat(e.length));return[[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}function DJ(e,t,n,r,s,a,i){return e[t][s]*(e[n][a]*e[r][i]-e[n][i]*e[r][a])}function OJ(e,t,n){var r=(t+1)%4,s=(t+2)%4,a=(t+3)%4,i=(n+1)%4,o=(n+2)%4,u=(n+3)%4;return DJ(e,r,s,a,i,o,u)+DJ(e,s,a,r,i,o,u)+DJ(e,a,r,s,i,o,u)}function MJ(e,t,n){void 0===n&&(n={ignoreRotation:!1});for(var r=[],s=0,a=e;s<a.length;s++){var i=a[s],o=i.x-.5,u=i.y-.5,l=n.ignoreRotation?0:t.rotation,c=Math.cos(l)*o-Math.sin(l)*u,h=Math.sin(l)*o+Math.cos(l)*u;c=c*t.width+t.xCenter,h=h*t.height+t.yCenter;var p=i.z*t.width,d=oJ({},i);d.x=c,d.y=h,d.z=p,r.push(d)}return r}function PJ(e,t){var n=function(e,t,n,r){var s=(r-n)/255;return{scale:s,offset:n-0*s}}(0,0,t[0],t[1]);return sO((function(){return oM(cM(e,n.scale),n.offset)}))}function zJ(e,t,n){var r,s,a,i,o,u,l,c,h,p,d,f,m=t.outputTensorSize,g=t.keepAspectRatio,y=t.borderMode,b=t.outputTensorFloatRange,x=TJ(e),w=function(e,t){return t?{xCenter:t.xCenter*e.width,yCenter:t.yCenter*e.height,width:t.width*e.width,height:t.height*e.height,rotation:t.rotation}:{xCenter:.5*e.width,yCenter:.5*e.height,width:e.width,height:e.height,rotation:0}}(x,n),v=function(e,t,n){if(void 0===n&&(n=!1),!n)return{top:0,left:0,right:0,bottom:0};var r=t.height,s=t.width;$J(t,"targetSize"),$J(e,"roi");var a,i,o=r/s,u=e.height/e.width,l=0,c=0;return o>u?(a=e.width,i=e.width*o,c=(1-u/o)/2):(a=e.height/o,i=e.height,l=(1-o/u)/2),e.width=a,e.height=i,{top:c,left:l,right:l,bottom:c}}(w,m,g),k=(s=x.width,a=x.height,i=(r=w).width,o=r.height,u=Math.cos(r.rotation),l=Math.sin(r.rotation),c=r.xCenter,h=r.yCenter,p=1/s,d=1/a,(f=new Array(16))[0]=i*u*1*p,f[1]=-o*l*p,f[2]=0,f[3]=(-.5*i*u*1+.5*o*l+c)*p,f[4]=i*l*1*d,f[5]=o*u*d,f[6]=0,f[7]=(-.5*o*u-.5*i*l*1+h)*d,f[8]=0,f[9]=0,f[10]=i*p,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1,FJ(f));return{imageTensor:sO((function(){var t=AJ(e),n=JB(RJ(k,x,m),[1,8]),r="zero"===y?"constant":"nearest",s=IV.transform(sL(sM(t,"float32")),n,"bilinear",r,0,[m.height,m.width]);return null!=b?PJ(s,b):s})),padding:v,transformationMatrix:k}}function LJ(e,t,n,r){return 1===r?.5*(e+t):e+(t-e)*n/(r-1)}function BJ(e){return null!=e&&null!=e.currentTime}function WJ(e){for(var t={locationData:{relativeKeypoints:[]}},n=Number.MAX_SAFE_INTEGER,r=Number.MIN_SAFE_INTEGER,s=Number.MAX_SAFE_INTEGER,a=Number.MIN_SAFE_INTEGER,i=0;i<e.length;++i){var o=e[i];n=Math.min(n,o.x),r=Math.max(r,o.x),s=Math.min(s,o.y),a=Math.max(a,o.y),t.locationData.relativeKeypoints.push({x:o.x,y:o.y})}return t.locationData.relativeBoundingBox={xMin:n,yMin:s,xMax:r,yMax:a,width:r-n,height:a-s},t}function VJ(e,t,n,r){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o;return lJ(this,(function(u){switch(u.label){case 0:return e.sort((function(e,t){return Math.max.apply(Math,t.score)-Math.max.apply(Math,e.score)})),r=JB(e.map((function(e){return[e.locationData.relativeBoundingBox.yMin,e.locationData.relativeBoundingBox.xMin,e.locationData.relativeBoundingBox.yMax,e.locationData.relativeBoundingBox.xMax]}))),s=QB(e.map((function(e){return e.score[0]}))),[4,IV.nonMaxSuppressionAsync(r,s,t,n)];case 1:return[4,(a=u.sent()).array()];case 2:return i=u.sent(),o=e.filter((function(e,t){return i.indexOf(t)>-1})),aO([r,s,a]),[2,o]}}))}))}function UJ(e,t){return e.map((function(e){var n=oJ(oJ({},e),{x:e.x*t.width,y:e.y*t.height});return null!=e.z&&(n.z=e.z*t.width),n}))}function GJ(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p,d,f,m,g,y,b,x,w,v,k,S,I,N;return lJ(this,(function(C){switch(C.label){case 0:if(r=qB(t,[0]),a=(s=r.shape)[0],i=s[1],e.length!==(o=s[2]))throw new Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: "+"".concat(e.length,", heatmap length: ").concat(o));return u=[],[4,r.buffer()];case 1:for(l=C.sent(),c=0;c<e.length;c++)if(h=oJ({},e[c]),u.push(h),p=Math.trunc(h.x*i),d=Math.trunc(h.y*a),!(p<0||p>=i||d<0||p>=a)){for(f=Math.trunc((n.kernelSize-1)/2),m=Math.max(0,p-f),g=Math.min(i,p+f+1),y=Math.max(0,d-f),b=Math.min(a,d+f+1),x=0,w=0,v=0,k=0,S=y;S<b;++S)for(I=m;I<g;++I)N=l.get(S,I,c),x+=N,k=Math.max(k,N),w+=I*N,v+=S*N;k>=n.minConfidenceToRefine&&x>0&&(h.x=w/i/x,h.y=v/a/x)}return r.dispose(),[2,u]}}))}))}function HJ(e,t){var n=t.left,r=t.top,s=t.left+t.right,a=t.top+t.bottom;return e.map((function(e){return oJ(oJ({},e),{x:(e.x-n)/(1-s),y:(e.y-r)/(1-a),z:e.z/(1-s)})}))}function jJ(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i;return lJ(this,(function(o){switch(o.label){case 0:return r=e[0],s=function(e,t,n){return sO((function(){var r,s,a,i;n.reverseOutputOrder?(s=qB(nz(e,[0,n.boxCoordOffset+0],[-1,1])),r=qB(nz(e,[0,n.boxCoordOffset+1],[-1,1])),i=qB(nz(e,[0,n.boxCoordOffset+2],[-1,1])),a=qB(nz(e,[0,n.boxCoordOffset+3],[-1,1]))):(r=qB(nz(e,[0,n.boxCoordOffset+0],[-1,1])),s=qB(nz(e,[0,n.boxCoordOffset+1],[-1,1])),a=qB(nz(e,[0,n.boxCoordOffset+2],[-1,1])),i=qB(nz(e,[0,n.boxCoordOffset+3],[-1,1]))),s=oM(cM(lM(s,n.xScale),t.w),t.x),r=oM(cM(lM(r,n.yScale),t.h),t.y),n.applyExponentialOnBoxSize?(a=cM(rL(lM(a,n.hScale)),t.h),i=cM(rL(lM(i,n.wScale)),t.w)):(a=cM(lM(a,n.hScale),t.h),i=cM(lM(i,n.wScale),t.h));var o=SM(r,lM(a,2)),u=SM(s,lM(i,2)),l=oM(r,lM(a,2)),c=oM(s,lM(i,2)),h=JP([YP(o,[n.numBoxes,1]),YP(u,[n.numBoxes,1]),YP(l,[n.numBoxes,1]),YP(c,[n.numBoxes,1])],1);if(n.numKeypoints)for(var p=0;p<n.numKeypoints;++p){var d=n.keypointCoordOffset+p*n.numValuesPerKeypoint,f=void 0,m=void 0;n.reverseOutputOrder?(f=qB(nz(e,[0,d],[-1,1])),m=qB(nz(e,[0,d+1],[-1,1]))):(m=qB(nz(e,[0,d],[-1,1])),f=qB(nz(e,[0,d+1],[-1,1])));var g=oM(cM(lM(f,n.xScale),t.w),t.x),y=oM(cM(lM(m,n.yScale),t.h),t.y);h=JP([h,YP(g,[n.numBoxes,1]),YP(y,[n.numBoxes,1])],1)}return h}))}(e[1],t,n),a=sO((function(){var e=r;return n.sigmoidScore?(null!=n.scoreClippingThresh&&(e=mz(r,-n.scoreClippingThresh,n.scoreClippingThresh)),e=tz(e)):e})),[4,qJ(s,a,n)];case 1:return i=o.sent(),aO([s,a]),[2,i]}}))}))}function qJ(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p,d;return lJ(this,(function(f){switch(f.label){case 0:return r=[],[4,e.data()];case 1:return s=f.sent(),[4,t.data()];case 2:for(a=f.sent(),i=0;i<n.numBoxes;++i)if(!(null!=n.minScoreThresh&&a[i]<n.minScoreThresh||(o=i*n.numCoords,u=KJ(s[o+0],s[o+1],s[o+2],s[o+3],a[i],n.flipVertically,i),(l=u.locationData.relativeBoundingBox).width<0||l.height<0))){if(n.numKeypoints>0)for((c=u.locationData).relativeKeypoints=[],h=n.numKeypoints*n.numValuesPerKeypoint,p=0;p<h;p+=n.numValuesPerKeypoint)c.relativeKeypoints.push({x:s[(d=o+n.keypointCoordOffset+p)+0],y:n.flipVertically?1-s[d+1]:s[d+1]});r.push(u)}return[2,r]}}))}))}function KJ(e,t,n,r,s,a,i){return{score:[s],ind:i,locationData:{relativeBoundingBox:{xMin:t,yMin:a?1-n:e,xMax:r,yMax:a?1-e:n,width:r-t,height:n-e}}}}function XJ(e,t){return"none"===e?t:function(e){return 1/(1+Math.exp(-e))}(t)}function YJ(e,t,n,r){return uJ(this,void 0,void 0,(function(){var s,a,i,o,u,l,c;return lJ(this,(function(h){switch(h.label){case 0:return n=n||t.flipHorizontally||!1,r=r||t.flipVertically||!1,s=e.size/t.numLandmarks,[4,e.data()];case 1:for(a=h.sent(),i=[],o=0;o<t.numLandmarks;++o)u=o*s,(c={x:0,y:0}).x=n?t.inputImageWidth-a[u]:a[u],s>1&&(c.y=r?t.inputImageHeight-a[u+1]:a[u+1]),s>2&&(c.z=a[u+2]),s>3&&(c.score=XJ(t.visibilityActivation,a[u+3])),i.push(c);for(l=0;l<i.length;++l)(c=i[l]).x=c.x/t.inputImageWidth,c.y=c.y/t.inputImageHeight,c.z=c.z/t.inputImageWidth/(t.normalizeZ||1);return[2,i]}}))}))}function ZJ(e,t,n){var r=e.width,s=e.height,a=e.rotation;if(null==n.rotation&&null==n.rotationDegree||(a=function(e,t){return null!=t.rotation?e+=t.rotation:null!=t.rotationDegree&&(e+=Math.PI*t.rotationDegree/180),EJ(e)}(a,n)),0===a)e.xCenter=e.xCenter+r*n.shiftX,e.yCenter=e.yCenter+s*n.shiftY;else{var i=(t.width*r*n.shiftX*Math.cos(a)-t.height*s*n.shiftY*Math.sin(a))/t.width,o=(t.width*r*n.shiftX*Math.sin(a)+t.height*s*n.shiftY*Math.cos(a))/t.height;e.xCenter=e.xCenter+i,e.yCenter=e.yCenter+o}if(n.squareLong){var u=Math.max(r*t.width,s*t.height);r=u/t.width,s=u/t.height}else if(n.squareShort){var l=Math.min(r*t.width,s*t.height);r=l/t.width,s=l/t.height}return e.width=r*n.scaleX,e.height=s*n.scaleY,e}var QJ=function(){function e(e){this.alpha=e,this.initialized=!1}return e.prototype.apply=function(e,t){var n;return this.initialized?n=null==t?this.storedValue+this.alpha*(e-this.storedValue):this.storedValue+this.alpha*t*Math.asinh((e-this.storedValue)/t):(n=e,this.initialized=!0),this.rawValue=e,this.storedValue=n,n},e.prototype.applyWithAlpha=function(e,t,n){return this.alpha=t,this.apply(e,n)},e.prototype.hasLastRawValue=function(){return this.initialized},e.prototype.lastRawValue=function(){return this.rawValue},e.prototype.reset=function(){this.initialized=!1},e}(),JJ=function(){function e(e){this.frequency=e.frequency,this.minCutOff=e.minCutOff,this.beta=e.beta,this.thresholdCutOff=e.thresholdCutOff,this.thresholdBeta=e.thresholdBeta,this.derivateCutOff=e.derivateCutOff,this.x=new QJ(this.getAlpha(this.minCutOff)),this.dx=new QJ(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return e.prototype.apply=function(e,t,n){if(null==e)return e;var r=Math.trunc(t);if(this.lastTimestamp>=r)return e;0!==this.lastTimestamp&&0!==r&&(this.frequency=1/(1e-6*(r-this.lastTimestamp))),this.lastTimestamp=r;var s=this.x.hasLastRawValue()?(e-this.x.lastRawValue())*n*this.frequency:0,a=this.dx.applyWithAlpha(s,this.getAlpha(this.derivateCutOff)),i=this.minCutOff+this.beta*Math.abs(a),o=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(a):null;return this.x.applyWithAlpha(e,this.getAlpha(i),o)},e.prototype.getAlpha=function(e){return 1/(1+this.frequency/(2*Math.PI*e))},e}(),e0=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,n){var r=this;if(null==e)return this.reset(),null;this.initializeFiltersIfEmpty(e);var s=1;if(!this.config.disableValueScaling){if(n<this.config.minAllowedObjectScale)return cJ([],e,!0);s=1/n}return e.map((function(e,n){var a=oJ(oJ({},e),{x:r.xFilters[n].apply(e.x,t,s),y:r.yFilters[n].apply(e.y,t,s)});return null!=e.z&&(a.z=r.zFilters[n].apply(e.z,t,s)),a}))},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map((function(e){return new JJ(t.config)})),this.yFilters=e.map((function(e){return new JJ(t.config)})),this.zFilters=e.map((function(e){return new JJ(t.config)})))},e}(),t0=function(){function e(e){this.config=e,this.window=[],this.lowPassFilter=new QJ(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return e.prototype.apply=function(e,t,n){if(null==e)return e;var r,s=Math.trunc(t);if(this.lastTimestamp>=s)return e;if(-1===this.lastTimestamp)r=1;else{for(var a=e*n-this.lastValue*this.lastValueScale,i=s-this.lastTimestamp,o=a,u=i,l=(1+this.window.length)*(1e6/30),c=0,h=this.window;c<h.length;c++){var p=h[c];if(u+p.duration>l)break;o+=p.distance,u+=p.duration}r=1-1/(1+this.config.velocityScale*Math.abs(o/(1e-6*u))),this.window.unshift({distance:a,duration:i}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=e,this.lastValueScale=n,this.lastTimestamp=s,this.lowPassFilter.applyWithAlpha(e,r)},e}(),n0=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,n){var r=this;if(null==e)return this.reset(),null;var s=1;if(!this.config.disableValueScaling){if(n<this.config.minAllowedObjectScale)return cJ([],e,!0);s=1/n}return this.initializeFiltersIfEmpty(e),e.map((function(e,n){var a=oJ(oJ({},e),{x:r.xFilters[n].apply(e.x,t,s),y:r.yFilters[n].apply(e.y,t,s)});return null!=e.z&&(a.z=r.zFilters[n].apply(e.z,t,s)),a}))},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map((function(e){return new t0(t.config)})),this.yFilters=e.map((function(e){return new t0(t.config)})),this.zFilters=e.map((function(e){return new t0(t.config)})))},e}(),r0=function(){function e(e){if(null!=e.velocityFilter)this.keypointsFilter=new n0(e.velocityFilter);else{if(null==e.oneEuroFilter)throw new Error("Either configure velocityFilter or oneEuroFilter, but got "+"".concat(e,"."));this.keypointsFilter=new e0(e.oneEuroFilter)}}return e.prototype.apply=function(e,t,n,r,s){if(void 0===r&&(r=!1),null==e)return this.keypointsFilter.reset(),null;var a=null!=s?function(e,t){return(e.width*t.width+e.height*t.height)/2}(s,n):1,i=r?UJ(e,n):e,o=this.keypointsFilter.apply(i,t,a);return r?function(e,t){return e.map((function(e){var n=oJ(oJ({},e),{x:e.x/t.width,y:e.y/t.height});return null!=e.z&&(e.z=e.z/t.width),n}))}(o,n):o},e}(),s0=function(){function e(e){this.alpha=e.alpha}return e.prototype.apply=function(e){var t=this;if(null==e)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===e.length||(this.visibilityFilters=e.map((function(e){return new QJ(t.alpha)})));for(var n=[],r=0;r<e.length;++r){var s=e[r],a=oJ({},s);a.score=this.visibilityFilters[r].apply(s.score),n.push(a)}return n},e}(),a0={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},i0={runtime:"tfjs",modelType:"full",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1",landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"},o0={maxPoses:1,flipHorizontal:!1},u0={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},l0={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},c0={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},h0={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:"zero"},p0={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},d0={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},f0={kernelSize:7,minConfidenceToRefine:.5},m0={alpha:.1},g0={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},y0={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},b0={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},x0={activation:"none"},w0={combineWithPreviousRatio:.7},v0=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,bJ(this.mask)]}))}))},e.prototype.toImageData=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,xJ(this.mask)]}))}))},e.prototype.toTensor=function(){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(e){return[2,this.mask]}))}))},e.prototype.getUnderlyingType=function(){return"tensor"},e}();function k0(e){return vJ(e),"person"}var S0=function(){function e(e,t,n,r,s,a){this.detectorModel=e,this.landmarkModel=t,this.enableSmoothing=n,this.enableSegmentation=r,this.smoothSegmentation=s,this.modelType=a,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(e){null==e.reduceBoxesInLowestLayer&&(e.reduceBoxesInLowestLayer=!1),null==e.interpolatedScaleAspectRatio&&(e.interpolatedScaleAspectRatio=1),null==e.fixedAnchorSize&&(e.fixedAnchorSize=!1);for(var t=[],n=0;n<e.numLayers;){for(var r=[],s=[],a=[],i=[],o=n;o<e.strides.length&&e.strides[o]===e.strides[n];){var u=LJ(e.minScale,e.maxScale,o,e.strides.length);if(0===o&&e.reduceBoxesInLowestLayer)a.push(1),a.push(2),a.push(.5),i.push(.1),i.push(u),i.push(u);else{for(var l=0;l<e.aspectRatios.length;++l)a.push(e.aspectRatios[l]),i.push(u);if(e.interpolatedScaleAspectRatio>0){var c=o===e.strides.length-1?1:LJ(e.minScale,e.maxScale,o+1,e.strides.length);i.push(Math.sqrt(u*c)),a.push(e.interpolatedScaleAspectRatio)}}o++}for(var h=0;h<a.length;++h){var p=Math.sqrt(a[h]);r.push(i[h]/p),s.push(i[h]*p)}var d=0,f=0;if(e.featureMapHeight.length>0)d=e.featureMapHeight[n],f=e.featureMapWidth[n];else{var m=e.strides[n];d=Math.ceil(e.inputSizeHeight/m),f=Math.ceil(e.inputSizeWidth/m)}for(var g=0;g<d;++g)for(var y=0;y<f;++y)for(var b=0;b<r.length;++b){var x={xCenter:(y+e.anchorOffsetX)/f,yCenter:(g+e.anchorOffsetY)/d,width:0,height:0};e.fixedAnchorSize?(x.width=1,x.height=1):(x.width=s[b],x.height=r[b]),t.push(x)}n=o}return t}(a0);var i=QB(this.anchors.map((function(e){return e.width}))),o=QB(this.anchors.map((function(e){return e.height}))),u=QB(this.anchors.map((function(e){return e.xCenter}))),l=QB(this.anchors.map((function(e){return e.yCenter})));this.anchorTensor={x:u,y:l,w:i,h:o},this.prevFilteredSegmentationMask=this.enableSegmentation?JB([],[0,0]):null}return e.prototype.estimatePoses=function(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p,d,f,m,g,y,b,x,w;return lJ(this,(function(v){switch(v.label){case 0:return r=function(e){var t;if(null==(t=null==e?o0:oJ({},e)).maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1)throw new Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");return t}(t),null==e?(this.reset(),[2,[]]):(this.maxPoses=r.maxPoses,this.timestamp=null!=n?1e3*n:BJ(e)?1e6*e.currentTime:null,s=TJ(e),a=sO((function(){return sM(AJ(e),"float32")})),null!=(i=this.regionOfInterest)?[3,2]:[4,this.detectPose(a)]);case 1:if(0===(o=v.sent()).length)return this.reset(),a.dispose(),[2,[]];i=this.poseDetectionToRoi(o[0],s),v.label=2;case 2:return[4,this.poseLandmarksByRoi(i,a)];case 3:return u=v.sent(),a.dispose(),null==u?(this.reset(),[2,[]]):(l=u.poseScore,c=u.segmentationMask,h=this.poseLandmarkFiltering(u.landmarks,u.auxiliaryLandmarks,u.worldLandmarks,s),p=h.actualLandmarksFiltered,d=h.actualWorldLandmarksFiltered,f=this.poseLandmarksToRoi(h.auxiliaryLandmarksFiltered,s),this.regionOfInterest=f,m=this.smoothSegmentation&&null!=c?this.poseSegmentationFiltering(c):c,null!=(g=null!=p?UJ(p,s):null)&&g.forEach((function(e,t){e.name=pJ[t]})),null!=(y=d)&&y.forEach((function(e,t){e.name=pJ[t]})),b={score:l,keypoints:g,keypoints3D:y},null!==m&&(x=sO((function(){var e=sL(m,2),t=ZL(e,[[0,0],[0,0],[0,1]]);return VL(t,[[0,0],[0,0],[0,2]],"symmetric")})),this.smoothSegmentation||aO(m),w={maskValueToLabel:k0,mask:new v0(x)},b.segmentation=w),[2,[b]])}}))}))},e.prototype.poseSegmentationFiltering=function(e){var t=this.prevFilteredSegmentationMask;return 0===t.size?this.prevFilteredSegmentationMask=e:(this.prevFilteredSegmentationMask=function(e,t,n){return"webgl"===oO()?function(e,t,n){var r=n.combineWithPreviousRatio.toFixed(2),s={variableNames:["prevMask","newMask"],outputShape:e.shape,userCode:"\n  void main() {\n      ivec2 coords = getOutputCoords();\n      int height = coords[0];\n      int width = coords[1];\n\n      float prevMaskValue = getPrevMask(height, width);\n      float newMaskValue = getNewMask(height, width);\n\n      /*\n      * Assume p := newMaskValue\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n      * uncertainty alpha(p) =\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n      * uncertainty]\n      *\n      * The following polynomial approximates uncertainty alpha as a\n      * function of (p + 0.5):\n      */\n      const float c1 = 5.68842;\n      const float c2 = -0.748699;\n      const float c3 = -57.8051;\n      const float c4 = 291.309;\n      const float c5 = -624.717;\n      float t = newMaskValue - 0.5;\n      float x = t * t;\n\n      float uncertainty =\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\n\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\n                             (uncertainty * ".concat(r,");\n\n      setOutput(outputValue);\n    }\n")},a=uO();return sO((function(){var n=a.compileAndRun(s,[e,t]);return rO().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}))}(e,t,n):sO((function(){var r=SM(t,.5),s=pM(r),a=SM(1,WL(1,cM(s,oM(5.68842,cM(s,oM(-.748699,cM(s,oM(-57.8051,cM(s,oM(291.309,cM(s,-624.717)))))))))));return oM(t,cM(SM(e,t),cM(a,n.combineWithPreviousRatio)))}))}(t,e,w0),aO(e)),aO(t),this.prevFilteredSegmentationMask},e.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),aO([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},e.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(aO(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=JB([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},e.prototype.detectPose=function(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s,a,i,o,u,l,c;return lJ(this,(function(h){switch(h.label){case 0:return t=zJ(e,c0),r=t.padding,s=this.detectorModel.predict(n=t.imageTensor),a=function(e){return sO((function(){var t=function(e){return sO((function(){return[nz(e,[0,0,0],[1,-1,1]),nz(e,[0,0,1],[1,-1,-1])]}))}(e),n=t[0];return{boxes:qB(t[1]),logits:qB(n)}}))}(s),[4,jJ([o=a.logits,i=a.boxes],this.anchorTensor,u0)];case 1:return 0===(u=h.sent()).length?(aO([n,s,o,i]),[2,u]):[4,VJ(u,this.maxPoses,.3)];case 2:return l=h.sent(),c=function(e,t){void 0===e&&(e=[]);for(var n=t.left,r=t.top,s=t.left+t.right,a=t.top+t.bottom,i=0;i<e.length;i++){var o=e[i],u=o.locationData.relativeBoundingBox,l=(u.xMin-n)/(1-s),c=(u.yMin-r)/(1-a),h=u.width/(1-s),p=u.height/(1-a);u.xMin=l,u.yMin=c,u.width=h,u.height=p,u.xMax=l+h,u.yMax=c+p;var d=o.locationData.relativeKeypoints;d&&d.forEach((function(e){var t=(e.y-r)/(1-a);e.x=(e.x-n)/(1-s),e.y=t}))}return e}(l,r),aO([n,s,o,i]),[2,c]}}))}))},e.prototype.poseDetectionToRoi=function(e,t){return ZJ(_J(e,t,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),t,l0)},e.prototype.poseLandmarksByRoi=function(e,t){return uJ(this,void 0,void 0,(function(){var n,r,s,a,i,o,u,l,c,h;return lJ(this,(function(p){switch(p.label){case 0:if(n=TJ(t),r=zJ(t,h0,e),s=r.imageTensor,a=r.padding,i=r.transformationMatrix,"lite"!==this.modelType&&"full"!==this.modelType&&"heavy"!==this.modelType)throw new Error("Model type must be one of lite, full or heavy,"+"but got ".concat(this.modelType));return o=["ld_3d","output_poseflag","activation_heatmap","world_3d"],this.enableSegmentation&&o.push("activation_segmentation"),u=this.landmarkModel.execute(s,o),[4,this.tensorsToPoseLandmarksAndSegmentation(u)];case 1:return null==(l=p.sent())?(aO(u),aO(s),[2,null]):(c=l.poseScore,[4,this.poseLandmarksAndSegmentationInverseProjection(n,e,a,i,l.landmarks,l.auxiliaryLandmarks,l.worldLandmarks,l.segmentationMask)]);case 2:return h=p.sent(),aO(u),aO(s),[2,oJ({poseScore:c},h)]}}))}))},e.prototype.poseLandmarksAndSegmentationInverseProjection=function(e,t,n,r,s,a,i,o){return uJ(this,void 0,void 0,(function(){var u,l,c,h,p,d;return lJ(this,(function(f){return u=HJ(s,n),l=HJ(a,n),c=MJ(u,t),h=MJ(l,t),p=function(e,t){for(var n=[],r=0,s=e;r<s.length;r++){var a=s[r],i=a.x,o=a.y,u=t.rotation,l=Math.cos(u)*i-Math.sin(u)*o,c=Math.sin(u)*i+Math.cos(u)*o,h=oJ({},a);h.x=l,h.y=c,n.push(h)}return n}(i,t),d=null,this.enableSegmentation&&(d=sO((function(){var t=o.shape,n=t[0],s=t[1],a=JB(RJ(function(e){var t=FJ(new Array(16).fill(0));t[0][0]=OJ(e,0,0),t[1][0]=-OJ(e,0,1),t[2][0]=OJ(e,0,2),t[3][0]=-OJ(e,0,3),t[0][2]=OJ(e,2,0),t[1][2]=-OJ(e,2,1),t[2][2]=OJ(e,2,2),t[3][2]=-OJ(e,2,3),t[0][1]=-OJ(e,1,0),t[1][1]=OJ(e,1,1),t[2][1]=-OJ(e,1,2),t[3][1]=OJ(e,1,3),t[0][3]=-OJ(e,3,0),t[1][3]=OJ(e,3,1),t[2][3]=-OJ(e,3,2),t[3][3]=OJ(e,3,3);for(var n=e[0][0]*t[0][0]+e[1][0]*t[0][1]+e[2][0]*t[0][2]+e[3][0]*t[0][3],r=0;r<t.length;r++)for(var s=0;s<t.length;s++)t[r][s]/=n;return t}(r),{width:s,height:n},e),[1,8]);return qB(IV.transform(YP(o,[1,n,s,1]),a,"bilinear","constant",0,[e.height,e.width]),[0,3])})),aO(o)),[2,{landmarks:c,auxiliaryLandmarks:h,worldLandmarks:p,segmentationMask:d}]}))}))},e.prototype.tensorsToPoseLandmarksAndSegmentation=function(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s,a,i,o,u,l,c,h,p;return lJ(this,(function(d){switch(d.label){case 0:return t=e[0],n=e[2],r=e[3],s=this.enableSegmentation?e[4]:null,[4,e[1].data()];case 1:return(a=d.sent()[0])<.5?[2,null]:[4,YJ(t,p0)];case 2:return[4,GJ(d.sent(),n,f0)];case 3:return i=d.sent(),o=i.slice(0,33),u=i.slice(33,35),[4,YJ(r,d0)];case 4:return l=d.sent(),c=l.slice(0,33),h=function(e,t,n){void 0===n&&(n=!0);for(var r=[],s=0;s<e.length;s++){var a=oJ({},t[s]);n&&(a.score=e[s].score),r.push(a)}return r}(o,c,!0),p=this.enableSegmentation?function(e,t,n){return sO((function(){var n=qB(e,[0]),r=n.shape[2];if(1===r){var s=n;switch(t.activation){case"none":break;case"sigmoid":s=tz(s);break;case"softmax":throw new Error("Softmax activation requires two channels.");default:throw new Error("Activation not supported (".concat(t.activation,")"))}return qB(s,[2])}throw new Error("Unsupported number of tensor channels ".concat(r))}))}(s,x0):null,[2,{landmarks:o,auxiliaryLandmarks:u,poseScore:a,worldLandmarks:h,segmentationMask:p}]}}))}))},e.prototype.poseLandmarksToRoi=function(e,t){return ZJ(_J(WJ(e),t,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),t,l0)},e.prototype.poseLandmarkFiltering=function(e,t,n,r){var s,a,i;if(null!=this.timestamp&&this.enableSmoothing){var o=_J(WJ(t),r,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new s0(m0)),s=this.visibilitySmoothingFilterActual.apply(e),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new s0(m0)),a=this.visibilitySmoothingFilterAuxiliary.apply(t),i=this.visibilitySmoothingFilterActual.apply(n),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new r0(g0)),s=this.landmarksSmoothingFilterActual.apply(s,this.timestamp,r,!0,o),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new r0(y0)),a=this.landmarksSmoothingFilterAuxiliary.apply(a,this.timestamp,r,!0,o),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new r0(b0)),i=this.worldLandmarksSmoothingFilterActual.apply(n,this.timestamp)}else s=e,a=t,i=n;return{actualLandmarksFiltered:s,auxiliaryLandmarksFiltered:a,actualWorldLandmarksFiltered:i}},e}();function I0(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s;return lJ(this,(function(a){switch(a.label){case 0:return t=function(e){var t=oJ({},null==e?i0:e);if(null==t.enableSmoothing&&(t.enableSmoothing=i0.enableSmoothing),null==t.enableSegmentation&&(t.enableSegmentation=i0.enableSegmentation),null==t.smoothSegmentation&&(t.smoothSegmentation=i0.smoothSegmentation),null==t.modelType&&(t.modelType=i0.modelType),null==t.detectorModelUrl&&(t.detectorModelUrl=i0.detectorModelUrl),null==t.landmarkModelUrl)switch(t.modelType){case"lite":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/lite/2";break;case"heavy":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/heavy/2";break;case"full":default:t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"}return t}(e),n="string"==typeof t.detectorModelUrl&&t.detectorModelUrl.indexOf("https://tfhub.dev")>-1,r="string"==typeof t.landmarkModelUrl&&t.landmarkModelUrl.indexOf("https://tfhub.dev")>-1,[4,Promise.all([qG(t.detectorModelUrl,{fromTFHub:n}),qG(t.landmarkModelUrl,{fromTFHub:r})])];case 1:return s=a.sent(),[2,new S0(s[0],s[1],t.enableSmoothing,t.enableSegmentation,t.smoothSegmentation,t.modelType)]}}))}))}var N0,C0,T0,E0=function(){function e(e){!function(e){if(e.maxTracks<1)throw new Error("Must specify 'maxTracks' to be at least 1, but "+"encountered ".concat(e.maxTracks));if(e.maxAge<=0)throw new Error("Must specify 'maxAge' to be positive, but "+"encountered ".concat(e.maxAge));if(void 0!==e.keypointTrackerParams){if(e.keypointTrackerParams.keypointConfidenceThreshold<0||e.keypointTrackerParams.keypointConfidenceThreshold>1)throw new Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered "+"".concat(e.keypointTrackerParams.keypointConfidenceThreshold));if(e.keypointTrackerParams.minNumberOfKeypoints<1)throw new Error("Must specify 'minNumberOfKeypoints' to be at least 1, but "+"encountered ".concat(e.keypointTrackerParams.minNumberOfKeypoints));for(var t=0,n=e.keypointTrackerParams.keypointFalloff;t<n.length;t++){var r=n[t];if(r<=0)throw new Error("Must specify each keypoint falloff parameterto be positive "+"but encountered ".concat(r))}}}(e),this.tracks=[],this.maxTracks=e.maxTracks,this.maxAge=1e3*e.maxAge,this.minSimilarity=e.minSimilarity,this.nextID=1}return e.prototype.apply=function(e,t){this.filterOldTracks(t);var n=this.computeSimilarity(e);return this.assignTracks(e,n,t),this.updateTracks(t),e},e.prototype.getTracks=function(){return this.tracks.slice()},e.prototype.getTrackIDs=function(){return new Set(this.tracks.map((function(e){return e.id})))},e.prototype.filterOldTracks=function(e){var t=this;this.tracks=this.tracks.filter((function(n){return e-n.lastTimestamp<=t.maxAge}))},e.prototype.assignTracks=function(e,t,n){for(var r=Array.from(Array(t[0].length).keys()),s=[],a=0,i=Array.from(Array(e.length).keys());a<i.length;a++){var o=i[a];if(0!==r.length){for(var u=-1,l=-1,c=0,h=r;c<h.length;c++){var p=h[c],d=t[o][p];d>=this.minSimilarity&&d>l&&(u=p,l=d)}if(u>=0){var f=this.tracks[u];f=Object.assign(f,this.createTrack(e[o],n,f.id)),e[o].id=f.id;var m=r.indexOf(u);r.splice(m,1)}else s.push(o)}else s.push(o)}for(var g=0,y=s;g<y.length;g++){var b=this.createTrack(e[o=y[g]],n);this.tracks.push(b),e[o].id=b.id}},e.prototype.updateTracks=function(e){this.tracks.sort((function(e,t){return t.lastTimestamp-e.lastTimestamp})),this.tracks=this.tracks.slice(0,this.maxTracks)},e.prototype.createTrack=function(e,t,n){var r={id:n||this.nextTrackID(),lastTimestamp:t,keypoints:cJ([],e.keypoints,!0).map((function(e){return oJ({},e)}))};return void 0!==e.box&&(r.box=oJ({},e.box)),r},e.prototype.nextTrackID=function(){var e=this.nextID;return this.nextID+=1,e},e.prototype.remove=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.tracks=this.tracks.filter((function(t){return!e.includes(t.id)}))},e.prototype.reset=function(){this.tracks=[]},e}(),A0=function(e){function t(t){return e.call(this,t)||this}return iJ(t,e),t.prototype.computeSimilarity=function(e){var t=this;return 0===e.length||0===this.tracks.length?[[]]:e.map((function(e){return t.tracks.map((function(n){return t.iou(e,n)}))}))},t.prototype.iou=function(e,t){var n=Math.max(e.box.xMin,t.box.xMin),r=Math.max(e.box.yMin,t.box.yMin),s=Math.min(e.box.xMax,t.box.xMax),a=Math.min(e.box.yMax,t.box.yMax);if(n>=s||r>=a)return 0;var i=(s-n)*(a-r);return i/(e.box.width*e.box.height+t.box.width*t.box.height-i)},t}(E0),R0=function(e){function t(t){var n=e.call(this,t)||this;return n.keypointThreshold=t.keypointTrackerParams.keypointConfidenceThreshold,n.keypointFalloff=t.keypointTrackerParams.keypointFalloff,n.minNumKeyoints=t.keypointTrackerParams.minNumberOfKeypoints,n}return iJ(t,e),t.prototype.computeSimilarity=function(e){if(0===e.length||0===this.tracks.length)return[[]];for(var t=[],n=0,r=e;n<r.length;n++){for(var s=r[n],a=[],i=0,o=this.tracks;i<o.length;i++)a.push(this.oks(s,o[i]));t.push(a)}return t},t.prototype.oks=function(e,t){for(var n=this.area(t.keypoints)+1e-6,r=0,s=0,a=0;a<e.keypoints.length;++a){var i=e.keypoints[a],o=t.keypoints[a];if(!(i.score<this.keypointThreshold||o.score<this.keypointThreshold)){s+=1;var u=Math.pow(i.x-o.x,2)+Math.pow(i.y-o.y,2);r+=Math.exp(-1*u/(2*n*Math.pow(2*this.keypointFalloff[a],2)))}}return s<this.minNumKeyoints?0:r/s},t.prototype.area=function(e){var t=this,n=e.filter((function(e){return e.score>t.keypointThreshold})),r=Math.min.apply(Math,cJ([1],n.map((function(e){return e.x})),!1)),s=Math.max.apply(Math,cJ([0],n.map((function(e){return e.x})),!1)),a=Math.min.apply(Math,cJ([1],n.map((function(e){return e.y})),!1));return(s-r)*(Math.max.apply(Math,cJ([0],n.map((function(e){return e.y})),!1))-a)},t}(E0);function $0(e){switch(e){case C0.BlazePose:return pJ.reduce((function(e,t,n){return e[t]=n,e}),{});case C0.PoseNet:case C0.MoveNet:return hJ.reduce((function(e,t,n){return e[t]=n,e}),{});default:throw new Error("Model ".concat(e," is not supported."))}}(T0=N0||(N0={})).Keypoint="keypoint",T0.BoundingBox="boundingBox",function(e){e.MoveNet="MoveNet",e.BlazePose="BlazePose",e.PoseNet="PoseNet"}(C0||(C0={})),Object.freeze({__proto__:null,getKeypointIndexBySide:function(e){switch(e){case C0.BlazePose:return dJ;case C0.PoseNet:case C0.MoveNet:return fJ;default:throw new Error("Model ".concat(e," is not supported."))}},getAdjacentPairs:function(e){switch(e){case C0.BlazePose:return gJ;case C0.PoseNet:case C0.MoveNet:return mJ;default:throw new Error("Model ".concat(e," is not supported."))}},getKeypointIndexByName:$0});var _0=["SinglePose.Lightning","SinglePose.Thunder","MultiPose.Lightning"],F0={modelType:"SinglePose.Lightning",enableSmoothing:!0},D0={},O0={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},M0={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},P0={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function z0(e,t){var n,r,s,a;return e?t.width>t.height?(n=1,r=t.height/t.width,s=0,a=(t.width/2-t.height/2)/t.width):(n=t.width/t.height,r=1,s=(t.height/2-t.width/2)/t.height,a=0):t.width>t.height?(n=t.width/t.height,r=1,s=(t.height/2-t.width/2)/t.height,a=0):(n=1,r=t.height/t.width,s=0,a=(t.width/2-t.height/2)/t.width),{yMin:s,xMin:a,yMax:s+n,xMax:a+r,height:n,width:r}}function L0(e,t){var n={maxTracks:e.maxTracks,maxAge:e.maxAge,minSimilarity:e.minSimilarity};return null!=t.maxTracks&&(n.maxTracks=t.maxTracks),null!=t.maxAge&&(n.maxAge=t.maxAge),null!=t.minSimilarity&&(n.minSimilarity=t.minSimilarity),n}var B0=function(){function e(e,t){this.moveNetModel=e,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=$0(C0.MoveNet),"SinglePose.Lightning"===t.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):"SinglePose.Thunder"===t.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel="MultiPose.Lightning"===t.modelType,this.multiPoseModel||(this.keypointFilter=new e0(O0),this.cropRegionFilterYMin=new QJ(.9),this.cropRegionFilterXMin=new QJ(.9),this.cropRegionFilterYMax=new QJ(.9),this.cropRegionFilterXMax=new QJ(.9)),this.enableSmoothing=t.enableSmoothing,this.minPoseScore=t.minPoseScore?t.minPoseScore:.25,this.multiPoseMaxDimension=t.multiPoseMaxDimension?t.multiPoseMaxDimension:256,this.enableTracking=t.enableTracking,this.multiPoseModel&&this.enableTracking&&(t.trackerType===N0.Keypoint?this.tracker=new R0(t.trackerConfig):t.trackerType===N0.BoundingBox&&(this.tracker=new A0(t.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return e.prototype.runSinglePersonPoseModel=function(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s,a;return lJ(this,(function(i){switch(i.label){case 0:if(4!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||1!==t.shape[1]||17!==t.shape[2]||3!==t.shape[3])throw t.dispose(),new Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===oO()?[3,1]:(n=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:n=i.sent(),i.label=3;case 3:for(t.dispose(),r={keypoints:[],score:0},s=0,a=0;a<17;++a)r.keypoints[a]={y:n[3*a],x:n[3*a+1],score:n[3*a+2]},r.keypoints[a].score>.2&&(++s,r.score+=r.keypoints[a].score);return s>0&&(r.score/=s),[2,r]}}))}))},e.prototype.runMultiPersonPoseModel=function(e){return uJ(this,void 0,void 0,(function(){var t,n,r,s,a,i,o;return lJ(this,(function(u){switch(u.label){case 0:if(3!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||56!==t.shape[2])throw t.dispose(),new Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===oO()?[3,1]:(n=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:n=u.sent(),u.label=3;case 3:for(t.dispose(),r=[],s=n.length/56,a=0;a<s;++a)for(r[a]={keypoints:[]},r[a].box={yMin:n[i=56*a+51],xMin:n[i+1],yMax:n[i+2],xMax:n[i+3],width:n[i+3]-n[i+1],height:n[i+2]-n[i]},r[a].score=n[56*a+55],r[a].keypoints=[],o=0;o<17;++o)r[a].keypoints[o]={y:n[56*a+3*o],x:n[56*a+3*o+1],score:n[56*a+3*o+2]};return[2,r]}}))}))},e.prototype.estimatePoses=function(e,t,n){return void 0===t&&(t=D0),uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u;return lJ(this,(function(l){switch(l.label){case 0:return t=function(e){return null==e?D0:oJ({},e)}(t),null==e?(this.reset(),[2,[]]):(null==n?BJ(e)&&(n=1e6*e.currentTime):n*=1e3,r=AJ(e),s=TJ(r),a=sL(r,0),e instanceof ND||r.dispose(),i=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(a,s,n)]);case 1:return i=l.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(a,s,n)];case 3:i=l.sent(),l.label=4;case 4:for(o=0;o<i.length;++o)for(u=0;u<i[o].keypoints.length;++u)i[o].keypoints[u].name=hJ[u],i[o].keypoints[u].y*=s.height,i[o].keypoints[u].x*=s.width;return[2,i]}}))}))},e.prototype.estimateSinglePose=function(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o=this;return lJ(this,(function(u){switch(u.label){case 0:return this.cropRegion||(this.cropRegion=z0(null==this.cropRegion,t)),r=sO((function(){var t=JB([[o.cropRegion.yMin,o.cropRegion.xMin,o.cropRegion.yMax,o.cropRegion.xMax]]),n=zL([1],"int32");return sM(IV.cropAndResize(e,t,n,[o.modelInputResolution.height,o.modelInputResolution.width],"bilinear",0),"int32")})),e.dispose(),[4,this.runSinglePersonPoseModel(r)];case 1:if(s=u.sent(),r.dispose(),s.score<this.minPoseScore)return this.reset(),[2,[]];for(a=0;a<s.keypoints.length;++a)s.keypoints[a].y=this.cropRegion.yMin+s.keypoints[a].y*this.cropRegion.height,s.keypoints[a].x=this.cropRegion.xMin+s.keypoints[a].x*this.cropRegion.width;return null!=n&&this.enableSmoothing&&(s.keypoints=this.keypointFilter.apply(s.keypoints,n,1)),i=function(e,t,n,r){for(var s={},a=0,i=hJ;a<i.length;a++){var o=i[a];s[o]=[t[n[o]].y*r.height,t[n[o]].x*r.width]}if(function(e,t){return(e[t.left_hip].score>.2||e[t.right_hip].score>.2)&&(e[t.left_shoulder].score>.2||e[t.right_shoulder].score>.2)}(t,n)){var u=(s.left_hip[0]+s.right_hip[0])/2,l=(s.left_hip[1]+s.right_hip[1])/2,c=function(e,t,n,r,s){for(var a=["left_shoulder","right_shoulder","left_hip","right_hip"],i=0,o=0,u=0;u<a.length;u++)(d=Math.abs(r-n[a[u]][0]))>i&&(i=d),(f=Math.abs(s-n[a[u]][1]))>o&&(o=f);for(var l=0,c=0,h=0,p=Object.keys(n);h<p.length;h++){var d,f,m=p[h];e[t[m]].score<.2||((d=Math.abs(r-n[m][0]))>l&&(l=d),(f=Math.abs(s-n[m][1]))>c&&(c=f))}return[i,o,l,c]}(t,n,s,u,l),h=Math.max(1.9*c[1],1.9*c[0],1.2*c[2],1.2*c[3]),p=[u-(h=Math.min(h,Math.max(l,r.width-l,u,r.height-u))),l-h];if(h>Math.max(r.width,r.height)/2)return z0(null==e,r);var d=2*h;return{yMin:p[0]/r.height,xMin:p[1]/r.width,yMax:(p[0]+d)/r.height,xMax:(p[1]+d)/r.width,height:(p[0]+d)/r.height-p[0]/r.height,width:(p[1]+d)/r.width-p[1]/r.width}}return z0(null==e,r)}(this.cropRegion,s.keypoints,this.keypointIndexByName,t),this.cropRegion=this.filterCropRegion(i),[2,[s]]}}))}))},e.prototype.estimateMultiplePoses=function(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p,d,f=this;return lJ(this,(function(m){switch(m.label){case 0:return t.width>t.height?(s=this.multiPoseMaxDimension,a=Math.round(this.multiPoseMaxDimension*t.height/t.width),r=IV.resizeBilinear(e,[a,s]),o=s,u=32*Math.ceil(a/32),i=ZL(r,[[0,0],[0,u-a],[0,0],[0,0]])):(s=Math.round(this.multiPoseMaxDimension*t.width/t.height),r=IV.resizeBilinear(e,[a=this.multiPoseMaxDimension,s]),o=32*Math.ceil(s/32),u=a,i=ZL(r,[[0,0],[0,0],[0,o-s],[0,0]])),r.dispose(),e.dispose(),l=sM(i,"int32"),i.dispose(),[4,this.runMultiPersonPoseModel(l)];case 1:for(c=m.sent(),l.dispose(),c=c.filter((function(e){return e.score>=f.minPoseScore})),p=0;p<c.length;++p)for(h=0;h<c[p].keypoints.length;++h)c[p].keypoints[h].y*=u/a,c[p].keypoints[h].x*=o/s;if(this.enableTracking&&(this.tracker.apply(c,n),this.enableSmoothing)){for(p=0;p<c.length;++p)this.keypointFilterMap.has(c[p].id)||this.keypointFilterMap.set(c[p].id,new e0(O0)),c[p].keypoints=this.keypointFilterMap.get(c[p].id).apply(c[p].keypoints,n,1);d=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach((function(e,t){d.has(t)||f.keypointFilterMap.delete(t)}))}return[2,c]}}))}))},e.prototype.filterCropRegion=function(e){if(e){var t=this.cropRegionFilterYMin.apply(e.yMin),n=this.cropRegionFilterXMin.apply(e.xMin),r=this.cropRegionFilterYMax.apply(e.yMax),s=this.cropRegionFilterXMax.apply(e.xMax);return{yMin:t,xMin:n,yMax:r,xMax:s,height:r-t,width:s-n}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},e.prototype.dispose=function(){this.moveNetModel.dispose()},e.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},e.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},e}();function W0(e){return void 0===e&&(e=F0),uJ(this,void 0,void 0,(function(){var t,n,r,s;return lJ(this,(function(a){switch(a.label){case 0:return t=function(e){var t=null==e?F0:oJ({},e);if(null==t.modelType)t.modelType="SinglePose.Lightning";else if(_0.indexOf(t.modelType)<0)throw new Error("Invalid architecture ".concat(t.modelType,". ")+"Should be one of ".concat(_0));if(null==t.enableSmoothing&&(t.enableSmoothing=!0),null!=t.minPoseScore&&(t.minPoseScore<0||t.minPoseScore>1))throw new Error("minPoseScore should be between 0.0 and 1.0");if(null!=t.multiPoseMaxDimension&&(t.multiPoseMaxDimension%32!=0||t.multiPoseMaxDimension<32))throw new Error("multiPoseMaxDimension must be a multiple of 32 and higher than 0");if("MultiPose.Lightning"===t.modelType&&null==t.enableTracking&&(t.enableTracking=!0),"MultiPose.Lightning"===t.modelType&&!0===t.enableTracking)if(null==t.trackerType&&(t.trackerType=N0.BoundingBox),t.trackerType===N0.Keypoint)t.trackerConfig=null!=t.trackerConfig?function(e){var t=L0(M0,e);return t.keypointTrackerParams=oJ({},M0.keypointTrackerParams),null!=e.keypointTrackerParams&&(null!=e.keypointTrackerParams.keypointConfidenceThreshold&&(t.keypointTrackerParams.keypointConfidenceThreshold=e.keypointTrackerParams.keypointConfidenceThreshold),null!=e.keypointTrackerParams.keypointFalloff&&(t.keypointTrackerParams.keypointFalloff=e.keypointTrackerParams.keypointFalloff),null!=e.keypointTrackerParams.minNumberOfKeypoints&&(t.keypointTrackerParams.minNumberOfKeypoints=e.keypointTrackerParams.minNumberOfKeypoints)),t}(t.trackerConfig):M0;else{if(t.trackerType!==N0.BoundingBox)throw new Error("Tracker type not supported by MoveNet");t.trackerConfig=null!=t.trackerConfig?L0(P0,t.trackerConfig):P0}return t}(e),r=!0,t.modelUrl?(r="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,qG(t.modelUrl,{fromTFHub:r})]):[3,2];case 1:return n=a.sent(),[3,4];case 2:return s=void 0,"SinglePose.Lightning"===t.modelType?s="https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4":"SinglePose.Thunder"===t.modelType?s="https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4":"MultiPose.Lightning"===t.modelType&&(s="https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"),[4,qG(s,{fromTFHub:r})];case 3:n=a.sent(),a.label=4;case 4:return"webgl"===oO()&&FF().set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",0),[2,new B0(n,t)]}}))}))}var V0={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},U0=["MobileNetV1","ResNet50"],G0={MobileNetV1:[8,16],ResNet50:[16]},H0=[8,16,32],j0={MobileNetV1:[.5,.75,1],ResNet50:[1]},q0=[1,2,4],K0={maxPoses:1,flipHorizontal:!1},X0={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},Y0=[-123.15,-115.9,-103.06];function Z0(e){return Math.floor(e/2)}var Q0=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(Z0(e),e);)this.exchange(e,Z0(e)),e=Z0(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function J0(e,t,n,r,s,a){for(var i=a.shape,o=i[0],u=i[1],l=!0,c=Math.max(n-s,0),h=Math.min(n+s+1,o),p=c;p<h;++p){for(var d=Math.max(r-s,0),f=Math.min(r+s+1,u),m=d;m<f;++m)if(a.get(p,m,e)>t){l=!1;break}if(!l)break}return l}function e1(e){return uJ(this,void 0,void 0,(function(){return lJ(this,(function(t){return[2,Promise.all(e.map((function(e){return e.buffer()})))]}))}))}function t1(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+17)}}function n1(e,t,n){var r=t1(e.heatmapY,e.heatmapX,e.id,n);return{x:e.heatmapX*t+r.x,y:e.heatmapY*t+r.y}}function r1(e,t,n,r){var s=n.x,a=n.y;return e.some((function(e){var n,i,o=e.keypoints;return(n=o[r].y-a)*n+(i=o[r].x-s)*i<=t}))}var s1=hJ.reduce((function(e,t,n){return e[t]=n,e}),{}),a1=[["nose","left_eye"],["left_eye","left_ear"],["nose","right_eye"],["right_eye","right_ear"],["nose","left_shoulder"],["left_shoulder","left_elbow"],["left_elbow","left_wrist"],["left_shoulder","left_hip"],["left_hip","left_knee"],["left_knee","left_ankle"],["nose","right_shoulder"],["right_shoulder","right_elbow"],["right_elbow","right_wrist"],["right_shoulder","right_hip"],["right_hip","right_knee"],["right_knee","right_ankle"]].map((function(e){return[s1[e[0]],s1[e[1]]]})),i1=a1.map((function(e){return e[1]})),o1=a1.map((function(e){return e[0]}));function u1(e,t,n){return e<t?t:e>n?n:e}function l1(e,t,n,r){return{y:u1(Math.round(e.y/t),0,n-1),x:u1(Math.round(e.x/t),0,r-1)}}function c1(e,t){return{x:e.x+t.x,y:e.y+t.y}}function h1(e,t,n,r,s,a,i,o){void 0===o&&(o=2);for(var u=r.shape,l=u[0],c=u[1],h={y:t.y,x:t.x},p=c1(h,function(e,t,n){var r=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,r+e)}}(e,l1(h,a,l,c),i)),d=0;d<o;d++){var f=l1(p,a,l,c),m=t1(f.y,f.x,n,s);p=c1({x:f.x*a,y:f.y*a},{x:m.x,y:m.y})}var g=l1(p,a,l,c),y=r.get(g.y,g.x,n);return{y:p.y,x:p.x,name:hJ[n],score:y}}function p1(e,t,n,r,s,a){var i=i1.length,o=new Array(t.shape[2]),u=e.part,l=e.score,c=n1(u,r,n);o[u.id]={score:l,name:hJ[u.id],y:c.y,x:c.x};for(var h=i-1;h>=0;--h){var p=i1[h],d=o1[h];o[p]&&!o[d]&&(o[d]=h1(h,o[p],d,t,n,r,a))}for(h=0;h<i;++h)d=i1[h],o[p=o1[h]]&&!o[d]&&(o[d]=h1(h,o[p],d,t,n,r,s));return o}function d1(e,t,n){return n.reduce((function(n,r,s){var a=r.score;return r1(e,t,{y:r.y,x:r.x},s)||(n+=a),n}),0)/n.length}function f1(e,t,n,r,s,a,i,o){return void 0===i&&(i=.5),void 0===o&&(o=20),uJ(this,void 0,void 0,(function(){var u,l,c,h,p,d,f,m,g,y,b,x;return lJ(this,(function(w){switch(w.label){case 0:return[4,e1([e,t,n,r])];case 1:for(u=w.sent(),c=u[1],h=u[2],p=u[3],d=[],f=function(e,t,n){for(var r=n.shape,s=r[0],a=r[1],i=r[2],o=new Q0(s*a*i,(function(e){return e.score})),u=0;u<s;++u)for(var l=0;l<a;++l)for(var c=0;c<i;++c){var h=n.get(u,l,c);h<e||J0(c,h,u,l,1,n)&&o.enqueue({score:h,part:{heatmapY:u,heatmapX:l,id:c}})}return o}(i,0,l=u[0]),m=o*o;d.length<a&&!f.empty();)g=f.dequeue(),y=n1(g.part,s,c),r1(d,m,y,g.part.id)||(b=p1(g,l,c,s,h,p),x=d1(d,m,b),d.push({keypoints:b,score:x}));return[2,d]}}))}))}function m1(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];switch(t.length){case 0:e="fn main() ";break;case 1:e="fn main(".concat(t[0]," : i32)");break;default:throw Error("Unreachable")}return e}var g1=function(){function e(e){this.variableNames=["A","B"],this.size=!0,this.workgroupSize=[32,1,1],this.outputShape=[e[0],1],this.dispatchLayout=pe.flatDispatchLayout(this.outputShape),this.dispatch=pe.computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="getpointsConfidenceOp"}return e.prototype.getUserCode=function(){return"\n        ".concat(m1("index")," {\n          if (index < uniforms.size) {\n            let y = B[index * 2];\n            let x = B[index * 2 + 1];\n            let outIndex = y * uniforms.aShape.x * uniforms.aShape.z + x * uniforms.aShape.z + index;\n            result[index] = A[outIndex];\n          }\n        }\n        ")},e}(),y1=function(){function e(e){if(this.variableNames=["A","B"],this.size=!0,this.supportedLastDimension=2,2!==e.length||e[1]!==this.supportedLastDimension)throw new Error("GetOffsetVectorsProgram only supports shape of [x, ".concat(this.supportedLastDimension,"], but current shape is ").concat(e));this.workgroupSize=[32,1,1],this.outputShape=e;var t=[e[0],1];this.dispatchLayout=pe.flatDispatchLayout(t),this.dispatch=pe.computeDispatch(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="GetOffsetVectors"}return e.prototype.getUserCode=function(){return"\n    fn getOffsetPoint(y: i32, x: i32, index: i32) -> vec2<i32> {\n      let outIndexY = y * uniforms.bShape.x * uniforms.bShape.y + x * uniforms.bShape.y + index;\n      let outIndexX = outIndexY + uniforms.bShape.z;\n      let outY = i32(B[outIndexY]);\n      let outX = i32(B[outIndexX]);\n      return vec2<i32>(outY, outX);\n    }\n\n    ".concat(m1("index")," {\n      if (index < uniforms.size) {\n        let indexY = index * ").concat(this.supportedLastDimension,";\n        let indexX = indexY + 1;\n        let heatmapY = A[indexY];\n        let heatmapX = A[indexX];\n        let out = getOffsetPoint(i32(heatmapY), i32(heatmapX), index);\n        result[indexY] = f32(out[0]);\n        result[indexX] = f32(out[1]);\n      }\n    }\n    ")},e}();function b1(e){var t=e.shape,n=t[0],r=t[1],s=t[2];return sO((function(){var t,a,i=YP(e,[n*r,s]),o=EP(i,0),u=sL(lM(o,mM(r,"int32")),1),l=sL((t=o,a=r,sO((function(){var e=lM(t,mM(a,"int32"));return SM(t,cM(e,mM(a,"int32")))}))),1);return JP([u,l],1)}))}function x1(e,t,n){return sO((function(){var r=function(e,t){for(var n=[],r=0;r<hJ.length;r++){var s=w1(e.get(r,0).valueOf(),e.get(r,1).valueOf(),r,t),a=s.x;n.push(s.y),n.push(a)}return JB(n,[hJ.length,2])}(e,n);return oM(sM(cM(e.toTensor(),mM(t,"int32")),"float32"),r)}))}function w1(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+hJ.length)}}function v1(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h;return lJ(this,(function(p){switch(p.label){case 0:return r=0,s=b1(e),[4,Promise.all([e.buffer(),t.buffer(),s.buffer()])];case 1:return a=p.sent(),i=a[0],[4,(u=x1(o=a[2],n,a[1])).buffer()];case 2:return l=p.sent(),c=Array.from(function(e,t){for(var n=t.shape[0],r=new Float32Array(n),s=0;s<n;s++){var a=t.get(s,0),i=t.get(s,1);r[s]=e.get(a,i,s)}return r}(i,o)),h=c.map((function(e,t){return r+=e,{y:l.get(t,0),x:l.get(t,1),score:e,name:hJ[t]}})),s.dispose(),u.dispose(),[2,{keypoints:h,score:r/h.length}]}}))}))}function k1(e,t,n){return uJ(this,void 0,void 0,(function(){var r,s,a;return lJ(this,(function(i){return r=b1(e),s=function(e,t,n){return sO((function(){var r=function(e,t){if(uO()instanceof TH)return function(e,t){var n=uO(),r=new y1(e.shape),s=n.runWebGPUProgram(r,[e,t],"float32");return rO().makeTensorFromTensorInfo(s)}(e,t);throw new Error("getOffsetVectorsGPU is not supported in this backend!")}(e,n);return oM(sM(cM(e,mM(t,"int32")),"float32"),r)}))}(r,n,t),a=function(e,t){if(uO()instanceof TH)return function(e,t){var n=uO(),r=new g1(t.shape),s=n.runWebGPUProgram(r,[e,t],"float32");return rO().makeTensorFromTensorInfo(s)}(e,t);throw new Error("getPointsConfidenceWebGPU is not supported in this backend!")}(e,r),[2,[s,a]]}))}))}function S1(e,t){return(e-1)%t==0}var I1="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",N1="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";function C1(e,t){return function(e,t){return(e-1)%t==0}(e,t)?e:Math.floor(e/t)*t+1}var T1=function(){function e(e,t){this.posenetModel=e;var n=this.posenetModel.inputs[0].shape;P.assert(-1===n[1]&&-1===n[2],(function(){return"Input shape [".concat(n[1],", ").concat(n[2],"] ")+"must both be equal to or -1"}));var r,s,a={height:C1((r=t.inputResolution).height,s=t.outputStride),width:C1(r.width,s)};!function(e){P.assert(H0.indexOf(e)>=0,(function(){return"outputStride of ".concat(e," is invalid. ")+"It must be either 8 or 16."}))}(t.outputStride),function(e,t){P.assert(S1(e.height,t),(function(){return"height of ".concat(e.height," is invalid for output stride ")+"".concat(t,".")})),P.assert(S1(e.width,t),(function(){return"width of ".concat(e.width," is invalid for output stride ")+"".concat(t,".")}))}(a,t.outputStride),this.inputResolution=a,this.outputStride=t.outputStride,this.architecture=t.architecture}return e.prototype.estimatePoses=function(e,t){return void 0===t&&(t=K0),uJ(this,void 0,void 0,(function(){return lJ(this,(function(n){return[2,this.estimatePosesGPU(e,t,!1)]}))}))},e.prototype.estimatePosesGPU=function(e,t,n){return void 0===t&&(t=K0),void 0===n&&(n=!1),uJ(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p,d,f,m,g,y,b,x;return lJ(this,(function(w){switch(w.label){case 0:return r=function(e){var t=e;if(null==t.maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1){if((t=oJ(oJ({},X0),t)).scoreThreshold<0||t.scoreThreshold>1)throw new Error("Invalid scoreThreshold ".concat(t.scoreThreshold,". ")+"Should be in range [0.0, 1.0]");if(t.nmsRadius<=0)throw new Error("Invalid nmsRadius ".concat(t.nmsRadius,"."))}return t}(t),null==e?[2,n?[[],[]]:[]]:(this.maxPoses=r.maxPoses,s=zJ(e,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:"replicate"}),a=s.imageTensor,i=s.padding,o="ResNet50"===this.architecture?oM(a,Y0):PJ(a,[-1,1]),u=this.posenetModel.predict(o),"ResNet50"===this.architecture?(l=qB(u[2],[0]),c=qB(u[3],[0]),h=qB(u[0],[0]),p=qB(u[1],[0])):(l=qB(u[0],[0]),c=qB(u[1],[0]),h=qB(u[2],[0]),p=qB(u[3],[0])),d=tz(c),1!==this.maxPoses?[3,5]:n?[4,k1(d,l,this.outputStride)]:[3,2]);case 1:return m=w.sent(),f=[g=m[0],m[1]],[3,4];case 2:return[4,v1(d,l,this.outputStride)];case 3:g=w.sent(),f=[g],w.label=4;case 4:return[3,7];case 5:if(n)throw new Error("GPU renderer only supports single pose!");return[4,f1(d,l,h,p,this.outputStride,this.maxPoses,r.scoreThreshold,r.nmsRadius)];case 6:f=w.sent(),w.label=7;case 7:if(n){if(!0===r.flipHorizontal)throw new Error("flipHorizontal is not supported!");y=this.getCanvasInfo(TJ(e),this.inputResolution,i)}else x=TJ(e),b=function(e,t,n,r){var s=t.height/(n.height*(1-r.top-r.bottom)),a=t.width/(n.width*(1-r.left-r.right)),i=-r.top*n.height,o=-r.left*n.width;if(1===a&&1===s&&0===i&&0===o)return e;for(var u=0,l=e;u<l.length;u++)for(var c=0,h=l[u].keypoints;c<h.length;c++){var p=h[c];p.x=(p.x+o)*a,p.y=(p.y+i)*s}return e}(f,x,this.inputResolution,i),r.flipHorizontal&&(b=function(e,t){for(var n=0,r=e;n<r.length;n++)for(var s=0,a=r[n].keypoints;s<a.length;s++){var i=a[s];i.x=t.width-1-i.x}return e}(b,x));return a.dispose(),o.dispose(),aO(u),l.dispose(),c.dispose(),h.dispose(),p.dispose(),d.dispose(),[2,n?[f,y]:b]}}))}))},e.prototype.getCanvasInfo=function(e,t,n){return[-n.left*t.width,-n.top*t.height,e.width/(t.width*(1-n.left-n.right)),e.height/(t.height*(1-n.top-n.bottom)),e.width,e.height]},e.prototype.dispose=function(){this.posenetModel.dispose()},e.prototype.reset=function(){},e}();function E1(e){return void 0===e&&(e=V0),uJ(this,void 0,void 0,(function(){var t,n,r,s,a;return lJ(this,(function(i){switch(i.label){case 0:return"ResNet50"!==(t=function(e){var t=e||V0;if(null==t.architecture&&(t.architecture="MobileNetV1"),U0.indexOf(t.architecture)<0)throw new Error("Invalid architecture ".concat(t.architecture,". ")+"Should be one of ".concat(U0));if(null==t.inputResolution&&(t.inputResolution={height:257,width:257}),null==t.outputStride&&(t.outputStride=16),G0[t.architecture].indexOf(t.outputStride)<0)throw new Error("Invalid outputStride ".concat(t.outputStride,". ")+"Should be one of ".concat(G0[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.multiplier&&(t.multiplier=1),j0[t.architecture].indexOf(t.multiplier)<0)throw new Error("Invalid multiplier ".concat(t.multiplier,". ")+"Should be one of ".concat(j0[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.quantBytes&&(t.quantBytes=4),q0.indexOf(t.quantBytes)<0)throw new Error("Invalid quantBytes ".concat(t.quantBytes,". ")+"Should be one of ".concat(q0," ")+"for architecture ".concat(t.architecture,"."));if("MobileNetV1"===t.architecture&&32===t.outputStride&&1!==t.multiplier)throw new Error("When using an output stride of 32, you must select 1 as the multiplier.");return t}(e)).architecture?[3,2]:(o=t.quantBytes,u="model-stride".concat(t.outputStride,".json"),n=4===o?N1+"float/"+u:N1+"quant".concat(o,"/")+u,[4,qG(t.modelUrl||n)]);case 1:return r=i.sent(),[2,new T1(r,t)];case 2:return s=function(e,t,n){var r={1:"100",.75:"075",.5:"050"},s="model-stride".concat(e,".json");return 4===n?I1+"float/".concat(r[t],"/")+s:I1+"quant".concat(n,"/").concat(r[t],"/")+s}(t.outputStride,t.multiplier,t.quantBytes),[4,qG(t.modelUrl||s)];case 3:return a=i.sent(),[2,new T1(a,t)]}var o,u}))}))}class A1{constructor(e,t){this.cas=e,this.store=t,this.streamId="",this.classifierId="on3KXitewjIBjBCdtfqq",this.results=[]}ngOnInit(){console.log("this.cas",this.cas)}ngOnDestroy(){this.onDisableCamera()}captureImageBlob(e){const t=document.createElement("canvas");return t.width=1920,t.height=1080,t.getContext("2d").drawImage(e,0,0,t.width,t.height),new Promise((e,n)=>{t.toBlob(e)})}onEnableCamera(){return ye.a(this,void 0,void 0,(function*(){navigator.mediaDevices.getUserMedia&&(this.webCamStopper=yield this.runClassifierOnWebCam())}))}onDisableCamera(){this.webCamStopper&&this.webCamStopper(),this.results=[]}runClassifierOnWebCam(){return ye.a(this,void 0,void 0,(function*(){yield En.ready();const e=yield O.webcam(this.webCamEl.nativeElement,{resizeWidth:320,resizeHeight:160}),t=C0.MoveNet,n=yield function(e,t){return uJ(this,void 0,void 0,(function(){var n,r;return lJ(this,(function(s){switch(e){case C0.PoseNet:return[2,E1(t)];case C0.BlazePose:if(r=void 0,null!=(n=t)){if("tfjs"===n.runtime)return[2,I0(t)];if("mediapipe"===n.runtime)return[2,CJ(t)];r=n.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' "+"or 'mediapipe', but got ".concat(r));case C0.MoveNet:return[2,W0(t)];default:throw new Error("".concat(e," is not a supported model name."))}}))}))}(t),r=setInterval(()=>ye.a(this,void 0,void 0,(function*(){const t=yield e.capture(),r=yield n.estimatePoses(t);if(r.length&&this.user&&this.streamId&&this.classifierId){const e=yield this.captureImageBlob(this.webCamEl.nativeElement);console.log("uploading file",e),this.cas.uploadFile(e,this.user,this.streamId,this.classifierId)}this.results=r})),3e3);return()=>{this.stopVideo(this.webCamEl.nativeElement),e.stop(),clearInterval(r)}}))}stopVideo(e){const t=e.srcObject,n=t&&t.getTracks()||[];console.log("tracks",n),n.forEach(e=>e.stop()),e.srcObject=null}}var R1=n("7F6a"),$1=n("DQLy"),_1=fe.qb({encapsulation:0,styles:[["[_nghost-%COMP%]{width:100%;display:flex;flex-direction:column;padding:1rem 1.25rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]{flex:1 1 0;padding-bottom:5rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   dwu-code-snippet[_ngcontent-%COMP%]{margin:.5rem 1rem;max-width:40rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]{flex:0 0 auto;display:flex;align-items:center}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button-container[_ngcontent-%COMP%]{flex:1 1 0}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[_ngcontent-%COMP%]{background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .control-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[_ngcontent-%COMP%]{flex:1 1 0;background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .wide-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]{flex:0 0 auto;background-color:#eae6da;min-width:2rem;padding:.25rem .5rem;font-size:1rem;cursor:pointer;text-align:center;outline:0;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none;height:26px;display:flex;align-items:center}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]:hover:not([disabled]){background-color:#bac39f}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button.active[_ngcontent-%COMP%]:not([disabled]){background-color:#708238;color:#fcfcf9}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[disabled][_ngcontent-%COMP%]{pointer-events:none;opacity:.3}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .camera-control-buttons[_ngcontent-%COMP%]   .icon-button[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{font-size:1rem}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .video-container[_ngcontent-%COMP%]{width:20rem;max-width:20rem;background-color:#9d9b99;line-height:0}[_nghost-%COMP%]   .camera-container[_ngcontent-%COMP%]   .video-container[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{width:100%}"]],data:{}});function F1(e){return fe.Nb(0,[fe.Jb(402653184,1,{webCamEl:0}),(e()(),fe.sb(1,0,null,null,1,"p",[],null,null,null,null,null)),(e()(),fe.Lb(-1,null,["Welcome to Picture Piper Test App"])),(e()(),fe.sb(3,0,null,null,7,"div",[["class","camera-container"]],null,null,null,null,null)),(e()(),fe.sb(4,0,null,null,4,"div",[["class","camera-control-buttons"]],null,null,null,null,null)),(e()(),fe.sb(5,0,null,null,1,"button",[["class","control-button"]],null,[[null,"click"]],(function(e,t,n){var r=!0;return"click"===t&&(r=!1!==e.component.onEnableCamera()&&r),r}),null,null)),(e()(),fe.Lb(-1,null,["Start"])),(e()(),fe.sb(7,0,null,null,1,"button",[["class","control-button"]],null,[[null,"click"]],(function(e,t,n){var r=!0;return"click"===t&&(r=!1!==e.component.onDisableCamera()&&r),r}),null,null)),(e()(),fe.Lb(-1,null,["Stop"])),(e()(),fe.sb(9,0,null,null,1,"div",[["class","video-container"]],null,null,null,null,null)),(e()(),fe.sb(10,0,[[1,0],["webCamEl",1]],null,0,"video",[["autoplay",""],["muted",""],["playsinline",""]],null,null,null,null,null)),(e()(),fe.Lb(11,null,["\nBodies detected: ","\n"]))],null,(function(e,t){var n=t.component;e(t,11,0,null==n.results?null:n.results.length)}))}var D1=n("SVse"),O1=n("iInd"),M1=n("+ghK"),P1=n("YZbJ");class z1{constructor(e){this.store=e,this.selectedImageStream$=this.store.pipe(Object($1.B)(M1.b)),this.user$=this.store.pipe(Object($1.B)(P1.d))}}var L1=fe.qb({encapsulation:0,styles:[['[_nghost-%COMP%]{width:100%;display:flex;flex-direction:column;padding:1rem 1.25rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]{flex:1 1 0;padding-bottom:5rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:1rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   dwu-code-snippet[_ngcontent-%COMP%]{margin:.5rem 1rem;max-width:40rem}[_nghost-%COMP%]   .demo-container[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%}[_nghost-%COMP%]   p[_ngcontent-%COMP%]{margin:1rem 0}[_nghost-%COMP%]   .phone-demo[_ngcontent-%COMP%]{margin-top:1.5rem;margin-bottom:-20rem;margin-right:-11rem;height:50rem;width:27.5rem;transform:translate(-5.5rem,-10rem) scale(.6,.6);color:#202124;background-color:#fff;position:relative;border:16px solid #000;border-top-width:40px;border-bottom-width:60px;border-radius:36px}[_nghost-%COMP%]   .phone-demo[_ngcontent-%COMP%]:before{content:"";display:block;width:5rem;height:5px;position:absolute;top:-20px;left:50%;transform:translate(-50%,-50%);background:#333;border-radius:10px}[_nghost-%COMP%]   .phone-demo[_ngcontent-%COMP%]:after{content:"";display:block;width:35px;height:35px;position:absolute;left:50%;bottom:-65px;transform:translate(-50%,-50%);background:#333;border-radius:50%}']],data:{}});function B1(e){return fe.Nb(0,[(e()(),fe.sb(0,0,null,null,14,null,null,null,null,null,null,null)),(e()(),fe.sb(1,0,null,null,1,"h3",[],null,null,null,null,null)),(e()(),fe.Lb(2,null,[" Simulating "," "])),(e()(),fe.sb(3,0,null,null,1,"p",[],null,null,null,null,null)),(e()(),fe.Lb(-1,null,[" This runs the Device in this browser. For improved performance, download the app from on the device. "])),(e()(),fe.sb(5,0,null,null,4,"div",[["class","phone-demo"]],null,null,null,null,null)),(e()(),fe.sb(6,0,null,null,3,"dwu-pp-test-app",[],null,null,null,F1,_1)),fe.rb(7,245760,null,0,A1,[R1.a,$1.n],{user:[0,"user"],streamId:[1,"streamId"]},null),fe.Fb(131072,D1.b,[fe.h]),fe.Fb(131072,D1.b,[fe.h]),(e()(),fe.sb(10,0,null,null,4,"p",[],null,null,null,null,null)),(e()(),fe.sb(11,0,null,null,3,"a",[],[[1,"target",0],[8,"href",4]],[[null,"click"]],(function(e,t,n){var r=!0;return"click"===t&&(r=!1!==fe.Db(e,12).onClick(n.button,n.ctrlKey,n.metaKey,n.shiftKey)&&r),r}),null,null)),fe.rb(12,671744,null,0,O1.o,[O1.l,O1.a,D1.j],{routerLink:[0,"routerLink"]},null),fe.Eb(13,1),(e()(),fe.Lb(-1,null,["Click here to go to the full-size app"]))],(function(e,t){var n,r=t.component;e(t,7,0,fe.Mb(t,7,0,fe.Db(t,8).transform(r.user$)),null==(n=fe.Mb(t,7,1,fe.Db(t,9).transform(r.selectedImageStream$)))?null:n.id);var s=e(t,13,0,"/pp/pp-test-app");e(t,12,0,s)}),(function(e,t){e(t,2,0,t.context.ngIf.label||t.context.ngIf.id),e(t,11,0,fe.Db(t,12).target,fe.Db(t,12).href)}))}function W1(e){return fe.Nb(0,[(e()(),fe.hb(16777216,null,null,2,null,B1)),fe.rb(1,16384,null,0,D1.m,[fe.O,fe.L],{ngIf:[0,"ngIf"]},null),fe.Fb(131072,D1.b,[fe.h])],(function(e,t){var n=t.component;e(t,1,0,fe.Mb(t,1,0,fe.Db(t,2).transform(n.selectedImageStream$)))}),null)}function V1(e){return fe.Nb(0,[(e()(),fe.sb(0,0,null,null,1,"dwu-image-stream-set-up",[],null,null,null,W1,L1)),fe.rb(1,49152,null,0,z1,[$1.n],null,null)],null,null)}var U1=fe.ob("dwu-image-stream-set-up",z1,V1,{},{},[]),G1=n("c5wv"),H1=n("Yg9u");class j1{}n.d(t,"ImageStreamSetUpModuleNgFactory",(function(){return q1}));var q1=fe.pb(me,[],(function(e){return fe.Ab([fe.Bb(512,fe.j,fe.ab,[[8,[ge.a,U1]],[3,fe.j],fe.v]),fe.Bb(4608,D1.o,D1.n,[fe.s,[2,D1.A]]),fe.Bb(1073742336,D1.c,D1.c,[]),fe.Bb(1073742336,O1.p,O1.p,[[2,O1.u],[2,O1.l]]),fe.Bb(1073742336,G1.a,G1.a,[]),fe.Bb(1073742336,H1.a,H1.a,[]),fe.Bb(1073742336,j1,j1,[]),fe.Bb(1073742336,me,me,[]),fe.Bb(1024,O1.j,(function(){return[[],[{path:"",component:z1,children:[]}]]}),[])])}))},YSVl:function(e,t,n){var r=n("EhIR"),s=n("uDiL"),a=n("pJ6O"),i=n("yuCN"),o=n("euyF"),u=n("ie1u"),l=n("pJ3+");l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},euyF:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n=s[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(s=0==(n=o[127&a]^=r+(i=i+1640531527|0))?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,o[s]=(r^=r>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},ie1u:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},luXu:function(e,t){(function(){"use strict";var e;function t(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}var n="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){return e==Array.prototype||e==Object.prototype||(e[t]=n.value),e},r=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var t=0;t<e.length;++t){var n=e[t];if(n&&n.Math==Math)return n}throw Error("Cannot find global object")}(this);function s(e,t){if(t)e:{var s=r;e=e.split(".");for(var a=0;a<e.length-1;a++){var i=e[a];if(!(i in s))break e;s=s[i]}(t=t(a=s[e=e[e.length-1]]))!=a&&null!=t&&n(s,e,{configurable:!0,writable:!0,value:t})}}function a(e){return(e={next:e})[Symbol.iterator]=function(){return this},e}function i(e){var n="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return n?n.call(e):{next:t(e)}}function o(e){if(!(e instanceof Array)){e=i(e);for(var t,n=[];!(t=e.next()).done;)n.push(t.value);e=n}return e}s("Symbol",(function(e){function t(e,t){this.h=e,n(this,"description",{configurable:!0,writable:!0,value:t})}if(e)return e;t.prototype.toString=function(){return this.h};var r="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",s=0;return function e(n){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return new t(r+(n||"")+"_"+s++,n)}})),s("Symbol.iterator",(function(e){if(e)return e;e=Symbol("Symbol.iterator");for(var s="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),i=0;i<s.length;i++){var o=r[s[i]];"function"==typeof o&&"function"!=typeof o.prototype[e]&&n(o.prototype,e,{configurable:!0,writable:!0,value:function(){return a(t(this))}})}return e}));var u="function"==typeof Object.assign?Object.assign:function(e,t){for(var n=1;n<arguments.length;n++){var r=arguments[n];if(r)for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e};s("Object.assign",(function(e){return e||u}));var l,c="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};if("function"==typeof Object.setPrototypeOf)l=Object.setPrototypeOf;else{var h;e:{var p={};try{p.__proto__={a:!0},h=p.a;break e}catch(gn){}h=!1}l=h?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw new TypeError(e+" is not extensible");return e}:null}var d=l;function f(e,t){if(e.prototype=c(t.prototype),e.prototype.constructor=e,d)d(e,t);else for(var n in t)if("prototype"!=n)if(Object.defineProperties){var r=Object.getOwnPropertyDescriptor(t,n);r&&Object.defineProperty(e,n,r)}else e[n]=t[n];e.za=t.prototype}function m(){this.m=!1,this.j=null,this.i=void 0,this.h=1,this.v=this.s=0,this.l=null}function g(e){if(e.m)throw new TypeError("Generator is already running");e.m=!0}function y(e,t){e.l={ma:t,na:!0},e.h=e.s||e.v}function b(e,t,n){return e.h=n,{value:t}}function x(e){this.h=new m,this.i=e}function w(e,t,n,r){try{var s=t.call(e.h.j,n);if(!(s instanceof Object))throw new TypeError("Iterator result "+s+" is not an object");if(!s.done)return e.h.m=!1,s;var a=s.value}catch(i){return e.h.j=null,y(e.h,i),v(e)}return e.h.j=null,r.call(e.h,a),v(e)}function v(e){for(;e.h.h;)try{var t=e.i(e.h);if(t)return e.h.m=!1,{value:t.value,done:!1}}catch(n){e.h.i=void 0,y(e.h,n)}if(e.h.m=!1,e.h.l){if(t=e.h.l,e.h.l=null,t.na)throw t.ma;return{value:t.return,done:!0}}return{value:void 0,done:!0}}function k(e){this.next=function(t){return g(e.h),e.h.j?t=w(e,e.h.j.next,t,e.h.u):(e.h.u(t),t=v(e)),t},this.throw=function(t){return g(e.h),e.h.j?t=w(e,e.h.j.throw,t,e.h.u):(y(e.h,t),t=v(e)),t},this.return=function(t){return function(e,t){g(e.h);var n=e.h.j;return n?w(e,"return"in n?n.return:function(e){return{value:e,done:!0}},t,e.h.return):(e.h.return(t),v(e))}(e,t)},this[Symbol.iterator]=function(){return this}}function S(e){return function(e){function t(t){return e.next(t)}function n(t){return e.throw(t)}return new Promise((function(r,s){!function e(a){a.done?r(a.value):Promise.resolve(a.value).then(t,n).then(e,s)}(e.next())}))}(new k(new x(e)))}function I(e){return e||Array.prototype.fill}m.prototype.u=function(e){this.i=e},m.prototype.return=function(e){this.l={return:e},this.h=this.v},s("Promise",(function(e){function t(e){this.i=0,this.j=void 0,this.h=[],this.u=!1;var t=this.l();try{e(t.resolve,t.reject)}catch(n){t.reject(n)}}function n(){this.h=null}function s(e){return e instanceof t?e:new t((function(t){t(e)}))}if(e)return e;n.prototype.i=function(e){if(null==this.h){this.h=[];var t=this;this.j((function(){t.m()}))}this.h.push(e)};var a=r.setTimeout;n.prototype.j=function(e){a(e,0)},n.prototype.m=function(){for(;this.h&&this.h.length;){var e=this.h;this.h=[];for(var t=0;t<e.length;++t){var n=e[t];e[t]=null;try{n()}catch(r){this.l(r)}}}this.h=null},n.prototype.l=function(e){this.j((function(){throw e}))},t.prototype.l=function(){function e(e){return function(r){n||(n=!0,e.call(t,r))}}var t=this,n=!1;return{resolve:e(this.I),reject:e(this.m)}},t.prototype.I=function(e){if(e===this)this.m(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.L(e);else{e:switch(typeof e){case"object":var n=null!=e;break e;case"function":n=!0;break e;default:n=!1}n?this.F(e):this.s(e)}},t.prototype.F=function(e){var t=void 0;try{t=e.then}catch(n){return void this.m(n)}"function"==typeof t?this.M(t,e):this.s(e)},t.prototype.m=function(e){this.v(2,e)},t.prototype.s=function(e){this.v(1,e)},t.prototype.v=function(e,t){if(0!=this.i)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.i);this.i=e,this.j=t,2===this.i&&this.K(),this.H()},t.prototype.K=function(){var e=this;a((function(){if(e.D()){var t=r.console;void 0!==t&&t.error(e.j)}}),1)},t.prototype.D=function(){if(this.u)return!1;var e=r.CustomEvent,t=r.Event,n=r.dispatchEvent;return void 0===n||("function"==typeof e?e=new e("unhandledrejection",{cancelable:!0}):"function"==typeof t?e=new t("unhandledrejection",{cancelable:!0}):(e=r.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,e),e.promise=this,e.reason=this.j,n(e))},t.prototype.H=function(){if(null!=this.h){for(var e=0;e<this.h.length;++e)o.i(this.h[e]);this.h=null}};var o=new n;return t.prototype.L=function(e){var t=this.l();e.T(t.resolve,t.reject)},t.prototype.M=function(e,t){var n=this.l();try{e.call(t,n.resolve,n.reject)}catch(r){n.reject(r)}},t.prototype.then=function(e,n){function r(e,t){return"function"==typeof e?function(t){try{s(e(t))}catch(n){a(n)}}:t}var s,a,i=new t((function(e,t){s=e,a=t}));return this.T(r(e,s),r(n,a)),i},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.T=function(e,t){function n(){switch(r.i){case 1:e(r.j);break;case 2:t(r.j);break;default:throw Error("Unexpected state: "+r.i)}}var r=this;null==this.h?o.i(n):this.h.push(n),this.u=!0},t.resolve=s,t.reject=function(e){return new t((function(t,n){n(e)}))},t.race=function(e){return new t((function(t,n){for(var r=i(e),a=r.next();!a.done;a=r.next())s(a.value).T(t,n)}))},t.all=function(e){var n=i(e),r=n.next();return r.done?s([]):new t((function(e,t){function a(t){return function(n){i[t]=n,0==--o&&e(i)}}var i=[],o=0;do{i.push(void 0),o++,s(r.value).T(a(i.length-1),t),r=n.next()}while(!r.done)}))},t})),s("Array.prototype.keys",(function(e){return e||function(){return function(e,t){e instanceof String&&(e+="");var n=0,r=!1,s={next:function(){return!r&&n<e.length?{value:n++,done:!1}:(r=!0,{done:!0,value:void 0})}};return s[Symbol.iterator]=function(){return s},s}(this)}})),s("Array.prototype.fill",(function(e){return e||function(e,t,n){var r=this.length||0;for(0>t&&(t=Math.max(0,r+t)),(null==n||n>r)&&(n=r),0>(n=Number(n))&&(n=Math.max(0,r+n)),t=Number(t||0);t<n;t++)this[t]=e;return this}})),s("Int8Array.prototype.fill",I),s("Uint8Array.prototype.fill",I),s("Uint8ClampedArray.prototype.fill",I),s("Int16Array.prototype.fill",I),s("Uint16Array.prototype.fill",I),s("Int32Array.prototype.fill",I),s("Uint32Array.prototype.fill",I),s("Float32Array.prototype.fill",I),s("Float64Array.prototype.fill",I),s("Object.is",(function(e){return e||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}})),s("Array.prototype.includes",(function(e){return e||function(e,t){var n=this;n instanceof String&&(n=String(n));var r=n.length;for(0>(t=t||0)&&(t=Math.max(t+r,0));t<r;t++){var s=n[t];if(s===e||Object.is(s,e))return!0}return!1}})),s("String.prototype.includes",(function(e){return e||function(e,t){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(e instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(e,t||0)}}));var N=this||self;function C(e,t){e=e.split(".");var n,r=N;e[0]in r||void 0===r.execScript||r.execScript("var "+e[0]);for(;e.length&&(n=e.shift());)e.length||void 0===t?r=r[n]&&r[n]!==Object.prototype[n]?r[n]:r[n]={}:r[n]=t}function T(e){var t;return(t=N.navigator)&&(t=t.userAgent)||(t=""),-1!=t.indexOf(e)}var E=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),s="string"==typeof e?e.split(""):e,a=0;a<n;a++)a in s&&(r[a]=t.call(void 0,s[a],a,e));return r},A={},R=null;function $(){if(!R){R={};for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++){var r=e.concat(t[n].split(""));A[n]=r;for(var s=0;s<r.length;s++){var a=r[s];void 0===R[a]&&(R[a]=s)}}}}var _="undefined"!=typeof Uint8Array,F=!(T("Trident")||T("MSIE"))&&"function"==typeof N.btoa;function D(e){if(!F){var t;void 0===t&&(t=0),$(),t=A[t];for(var n=Array(Math.floor(e.length/3)),r=t[64]||"",s=0,a=0;s<e.length-2;s+=3){var i=e[s],o=e[s+1],u=e[s+2],l=t[i>>2];n[a++]=l+(i=t[(3&i)<<4|o>>4])+(o=t[(15&o)<<2|u>>6])+(u=t[63&u])}switch(l=0,u=r,e.length-s){case 2:u=t[(15&(l=e[s+1]))<<2]||r;case 1:n[a]=t[(e=e[s])>>2]+t[(3&e)<<4|l>>4]+u+r}return n.join("")}for(t="";10240<e.length;)t+=String.fromCharCode.apply(null,e.subarray(0,10240)),e=e.subarray(10240);return t+=String.fromCharCode.apply(null,e),btoa(t)}var O,M=RegExp("[-_.]","g");function P(e){switch(e){case"-":return"+";case"_":return"/";case".":return"=";default:return""}}function z(e){if(!F)return function(e){var t=e.length,n=3*t/4;n%3?n=Math.floor(n):-1!="=.".indexOf(e[t-1])&&(n=-1!="=.".indexOf(e[t-2])?n-2:n-1);var r=new Uint8Array(n),s=0;return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),s=R[n];if(null!=s)return s;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}$();for(var r=0;;){var s=n(-1),a=n(0),i=n(64),o=n(64);if(64===o&&-1===s)break;t(s<<2|a>>4),64!=i&&(t(a<<4&240|i>>2),64!=o&&t(i<<6&192|o))}}(e,(function(e){r[s++]=e})),s!==n?r.subarray(0,s):r}(e);M.test(e)&&(e=e.replace(M,P)),e=atob(e);for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function L(){return O||(O=new Uint8Array(0))}var B={},W="function"==typeof Uint8Array.prototype.slice,V=0,U=0;function G(e){var t=0>e,n=(e=Math.abs(e))>>>0;e=Math.floor((e-n)/4294967296),t&&(t=(n=i(q(n,e))).next().value,e=n.next().value,n=t),V=n>>>0,U=e>>>0}var H,j="function"==typeof BigInt;function q(e,t){return t=~t,e?e=1+~e:t+=1,[e,t]}function K(e,t){this.i=e>>>0,this.h=t>>>0}function X(e){if(!e)return H||(H=new K(0,0));if(!/^-?\d+$/.test(e))return null;if(16>e.length)G(Number(e));else if(j)e=BigInt(e),V=Number(e&BigInt(4294967295))>>>0,U=Number(e>>BigInt(32)&BigInt(4294967295));else{var t=+("-"===e[0]);U=V=0;for(var n=e.length,r=t,s=(n-t)%6+t;s<=n;r=s,s+=6)r=Number(e.slice(r,s)),U*=1e6,4294967296<=(V=1e6*V+r)&&(U+=V/4294967296|0,V%=4294967296);t&&(e=(t=i(q(V,U))).next().value,t=t.next().value,V=e,U=t)}return new K(V,U)}function Y(e,t){return Error("Invalid wire type: "+e+" (at position "+t+")")}function Z(){return Error("Failed to read varint, encoding is invalid.")}function Q(e,t){return Error("Tried to read past the end of the data "+t+" > "+e)}function J(){throw Error("Invalid UTF8")}function ee(e,t){return t=String.fromCharCode.apply(null,t),null==e?t:e+t}var te,ne,re,se=void 0,ae="undefined"!=typeof TextDecoder,ie="undefined"!=typeof TextEncoder;function oe(e){if(e!==B)throw Error("illegal external caller")}function ue(e,t){if(oe(t),this.V=e,null!=e&&0===e.length)throw Error("ByteString should be constructed with non-empty values")}function le(){return re||(re=new ue(null,B))}function ce(e){oe(B);var t=e.V;return null==(t=null==t||_&&null!=t&&t instanceof Uint8Array?t:"string"==typeof t?z(t):null)?t:e.V=t}function he(e,t){this.i=null,this.m=!1,this.h=this.j=this.l=0,pe(this,e,t)}function pe(e,t,n){e.S=void 0!==(n=void 0===n?{}:n).S&&n.S,t&&(t=function(e){if("string"==typeof e)return{buffer:z(e),C:!1};if(Array.isArray(e))return{buffer:new Uint8Array(e),C:!1};if(e.constructor===Uint8Array)return{buffer:e,C:!1};if(e.constructor===ArrayBuffer)return{buffer:new Uint8Array(e),C:!1};if(e.constructor===ue)return{buffer:ce(e)||L(),C:!0};if(e instanceof Uint8Array)return{buffer:new Uint8Array(e.buffer,e.byteOffset,e.byteLength),C:!1};throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers")}(t),e.i=t.buffer,e.m=t.C,e.l=0,e.j=e.i.length,e.h=e.l)}function de(e,t){if(e.h=t,t>e.j)throw Q(e.j,t)}function fe(e){var t=e.i,n=e.h,r=t[n++],s=127&r;if(128&r&&(s|=(127&(r=t[n++]))<<7,128&r&&(s|=(127&(r=t[n++]))<<14,128&r&&(s|=(127&(r=t[n++]))<<21,128&r&&(s|=(r=t[n++])<<28,128&r&&128&t[n++]&&128&t[n++]&&128&t[n++]&&128&t[n++]&&128&t[n++])))))throw Z();return de(e,n),s}function me(e,t){if(0>t)throw Error("Tried to read a negative byte length: "+t);var n=e.h,r=n+t;if(r>e.j)throw Q(t,e.j-n);return e.h=r,n}he.prototype.reset=function(){this.h=this.l};var ge=[];function ye(){this.h=[]}function be(e,t,n){for(;0<n||127<t;)e.h.push(127&t|128),t=(t>>>7|n<<25)>>>0,n>>>=7;e.h.push(t)}function xe(e,t){for(;127<t;)e.h.push(127&t|128),t>>>=7;e.h.push(t)}function we(e,t){if(ge.length){var n=ge.pop();pe(n,e,t),e=n}else e=new he(e,t);this.h=e,this.j=this.h.h,this.i=this.l=-1,this.setOptions(t)}function ve(e){var t=e.h;if(t.h==t.j)return!1;e.j=e.h.h;var n=fe(e.h)>>>0;if(t=n>>>3,!(0<=(n&=7)&&5>=n))throw Y(n,e.j);if(1>t)throw Error("Invalid field number: "+t+" (at position "+e.j+")");return e.l=t,e.i=n,!0}function ke(e){switch(e.i){case 0:if(0!=e.i)ke(e);else e:{for(var t=(e=e.h).h,n=t+10,r=e.i;t<n;)if(0==(128&r[t++])){de(e,t);break e}throw Z()}break;case 1:de(e=e.h,e.h+8);break;case 2:2!=e.i?ke(e):(t=fe(e.h)>>>0,de(e=e.h,e.h+t));break;case 5:de(e=e.h,e.h+4);break;case 3:for(t=e.l;;){if(!ve(e))throw Error("Unmatched start-group tag: stream EOF");if(4==e.i){if(e.l!=t)throw Error("Unmatched end-group tag");break}ke(e)}break;default:throw Y(e.i,e.j)}}ye.prototype.length=function(){return this.h.length},ye.prototype.end=function(){var e=this.h;return this.h=[],e},we.prototype.setOptions=function(e){this.ca=void 0!==(e=void 0===e?{}:e).ca&&e.ca},we.prototype.reset=function(){this.h.reset(),this.j=this.h.h,this.i=this.l=-1};var Se=[];function Ie(){this.j=[],this.i=0,this.h=new ye}function Ne(e,t){0!==t.length&&(e.j.push(t),e.i+=t.length)}var Ce="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol():void 0;function Te(e,t){return Ce?e[Ce]|=t:void 0!==e.A?e.A|=t:(Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}}),t)}function Ee(e,t){Ce?e[Ce]&&(e[Ce]&=~t):void 0!==e.A&&(e.A&=~t)}function Ae(e){var t;return null==(t=Ce?e[Ce]:e.A)?0:t}function Re(e,t){Ce?e[Ce]=t:void 0!==e.A?e.A=t:Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}})}function $e(e){return Te(e,1),e}function _e(e,t){Re(t,-51&(0|e))}function Fe(e,t){Re(t,-41&(18|e))}var De={};function Oe(e){return null!==e&&"object"==typeof e&&!Array.isArray(e)&&e.constructor===Object}var Me,Pe,ze=[];function Le(e){if(2&Ae(e.o))throw Error("Cannot mutate an immutable Message")}function Be(e){var t=e.length;(t=t?e[t-1]:void 0)&&Oe(t)?t.g=1:e.push(((t={}).g=1,t))}function We(e){return e.B||(e.B=e.o[e.i+e.G]={})}function Ve(e,t){return-1===t?null:t>=e.i?e.B?e.B[t]:void 0:e.o[t+e.G]}function Ue(e,t,n,r){Le(e),Ge(e,t,n,r)}function Ge(e,t,n,r){e.j&&(e.j=void 0),t>=e.i||r?We(e)[t]=n:(e.o[t+e.G]=n,(e=e.B)&&t in e&&delete e[t])}function He(e,t,n,r){var s=Ve(e,t);Array.isArray(s)||(s=Me);var a=Ae(s);if(1&a||$e(s),r)2&a||Te(s,2),1&n||Object.freeze(s);else{r=!(2&n);var i=2&a;1&n||!i?r&&16&a&&!i&&Ee(s,16):Ge(e,t,s=$e(Array.prototype.slice.call(s)))}return s}function je(e,t){var n=Ve(e,t),r=null==n?n:"number"==typeof n||"NaN"===n||"Infinity"===n||"-Infinity"===n?Number(n):void 0;return null!=r&&r!==n&&Ge(e,t,r),r}function qe(e,t,n,r,s){e.h||(e.h={});var a=e.h[n],i=He(e,n,3,s);if(!a){var o=i;a=[];var u=!!(16&Ae(e.o));i=!!(2&Ae(o));var l=o;!s&&i&&(o=Array.prototype.slice.call(o));for(var c=i,h=0;h<o.length;h++){var p=o[h],d=t,f=!1;if(f=void 0!==f&&f,void 0!==(p=Array.isArray(p)?new d(p):f?new d:void 0)){var m=f=Ae(d=p.o);i&&(m|=2),u&&(m|=16),m!=f&&Re(d,m),d=m,c=c||!!(2&d),a.push(p)}}return e.h[n]=a,t=33|(u=Ae(o)),u!=(t=c?-9&t:8|t)&&(c=o,Object.isFrozen(c)&&(c=Array.prototype.slice.call(c)),Re(c,t),o=c),l!==o&&Ge(e,n,o),(s||r&&i)&&Te(a,2),r&&Object.freeze(a),a}return s||(s=Object.isFrozen(a),r&&!s?Object.freeze(a):!r&&s&&(a=Array.prototype.slice.call(a),e.h[n]=a)),a}function Ke(e,t,n){var r=!!(2&Ae(e.o));if(t=qe(e,t,n,r,r),e=He(e,n,3,r),!(r||8&Ae(e))){for(r=0;r<t.length;r++){if(2&Ae((n=t[r]).o)){var s=it(n,!1);s.j=n}else s=n;n!==s&&(t[r]=s,e[r]=s.o)}Te(e,8)}return t}function Xe(e,t,n){if(null!=n&&"number"!=typeof n)throw Error("Value of float/double field must be a number|null|undefined, found "+typeof n+": "+n);Ue(e,t,n)}function Ye(e,t,n,r,s){Le(e);var a=qe(e,n,t,!1,!1);return n=null!=r?r:new n,e=He(e,t,2,!1),null!=s?(a.splice(s,0,n),e.splice(s,0,n.o)):(a.push(n),e.push(n.o)),n.C()&&Ee(e,8),n}function Ze(e,t){return null==e?t:e}function Qe(e,t,n){return n=void 0===n?0:n,Ze(je(e,t),n)}function Je(e,t,n,r){if(null!=e){if(Array.isArray(e))e=et(e,t,n,void 0!==r);else if(Oe(e)){var s,a={};for(s in e)a[s]=Je(e[s],t,n,r);e=a}else e=t(e,r);return e}}function et(e,t,n,r){var s=Ae(e);r=r?!!(16&s):void 0,e=Array.prototype.slice.call(e);for(var a=0;a<e.length;a++)e[a]=Je(e[a],t,n,r);return n(s,e),e}function tt(e){return e.ja===De?e.toJSON():function(e){switch(typeof e){case"number":return isFinite(e)?e:String(e);case"object":if(e)if(Array.isArray(e)){if(0!=(128&Ae(e)))return Be(e=Array.prototype.slice.call(e)),e}else{if(_&&null!=e&&e instanceof Uint8Array)return D(e);if(e instanceof ue){var t=e.V;return null==t?"":"string"==typeof t?t:e.V=D(t)}}}return e}(e)}function nt(e,t){128&e&&Be(t)}function rt(e,t,n){if(n=void 0===n?Fe:n,null!=e){if(_&&e instanceof Uint8Array)return e.length?new ue(new Uint8Array(e),B):le();if(Array.isArray(e)){var r=Ae(e);return 2&r?e:!t||32&r||!(16&r||0===r)?(4&(t=Ae(e=et(e,rt,4&r?Fe:n,!0)))&&2&t&&Object.freeze(e),e):(Re(e,2|r),e)}return e.ja===De?at(e):e}}function st(e,t,n,r,s,a,i){if(e=e.h&&e.h[n]){if(2&(r=Ae(e))?r=e:(Fe(r,a=E(e,at)),Object.freeze(a),r=a),Le(t),i=null==r?Me:$e([]),null!=r){for(a=!!r.length,e=0;e<r.length;e++){var o=r[e];a=a&&!(2&Ae(o.o)),i[e]=o.o}a=1|(a?8:0),((e=Ae(i))&a)!==a&&(Object.isFrozen(i)&&(i=Array.prototype.slice.call(i)),Re(i,e|a)),t.h||(t.h={}),t.h[n]=r}else t.h&&(t.h[n]=void 0);Ge(t,n,i,s)}else Ue(t,n,rt(r,a,i),s)}function at(e){return 2&Ae(e.o)||Te((e=it(e,!0)).o,2),e}function it(e,t){var n=e.o,r=[];Te(r,16);var s=e.constructor.h;if(s&&r.push(s),s=e.B){r.length=n.length,r.fill(void 0,r.length,n.length);var a={};r[r.length-1]=a}0!=(128&Ae(n))&&Be(r),t=t||e.C()?Fe:_e,Pe=r,r=new(a=e.constructor)(r),Pe=void 0,e.R&&(r.R=e.R.slice()),a=!!(16&Ae(n));for(var i=s?n.length-1:n.length,o=0;o<i;o++)st(e,r,o-e.G,n[o],!1,a,t);if(s)for(var u in s)st(e,r,+u,s[u],!0,a,t);return r}function ot(e,t,n){null==e&&(e=Pe),Pe=void 0;var r,s=this.constructor.i||0,a=0<s,i=this.constructor.h,o=!1;if(null==e){var u=48,l=!0;a&&(s=0,u|=128),Re(e=i?[i]:[],u)}else{if(!Array.isArray(e))throw Error();if(i&&i!==e[0])throw Error();var c=u=Te(e,0);if((l=0!=(16&c))&&((o=0!=(32&c))||(c|=32)),a){if(128&c)s=0;else if(0<e.length){var h=e[e.length-1];if(Oe(h)&&"g"in h){s=0,c|=128,delete h.g;var p,d=!0;for(p in h){d=!1;break}d&&e.pop()}}}else if(128&c)throw Error();u!==c&&Re(e,c)}if(this.G=(i?0:-1)-s,this.h=void 0,this.o=e,s=(i=this.o.length)-1,i&&Oe(i=this.o[s])?(this.B=i,this.i=s-this.G):void 0!==t&&-1<t?(this.i=Math.max(t,s+1-this.G),this.B=void 0):this.i=Number.MAX_VALUE,!a&&this.B&&"g"in this.B)throw Error('Unexpected "g" flag in sparse object of message that is not a group type.');if(n)for(t=l&&!o&&!0,a=this.i,l=0;l<n.length;l++)(o=n[l])<a?(s=e[o+=this.G])?ut(s,t):e[o]=Me:(r||(r=We(this)),(s=r[o])?ut(s,t):r[o]=Me)}function ut(e,t){if(Array.isArray(e)){var n=Ae(e),r=1;!t||2&n||(r|=16),(n&r)!==r&&Re(e,n|r)}}function lt(e,t,n){if(n){var r,s={};for(r in n){var a=n[r],i=a.ra;i||(s.J=a.xa||a.oa.W,a.ia?(s.aa=yt(a.ia),i=function(e){return function(t,n,r){return e.J(t,n,r,e.aa)}}(s)):a.ka?(s.Z=bt(a.da.P,a.ka),i=function(e){return function(t,n,r){return e.J(t,n,r,e.Z)}}(s)):i=s.J,a.ra=i),i(t,e,a.da),s={J:s.J,aa:s.aa,Z:s.Z}}}!function(e,t){if(t=t.R){Ne(e,e.h.end());for(var n=0;n<t.length;n++)Ne(e,ce(t[n])||L())}}(t,e)}Re(ze,23),Me=Object.freeze(ze),ot.prototype.toJSON=function(){return et(this.o,tt,nt)},ot.prototype.C=function(){return!!(2&Ae(this.o))},ot.prototype.ja=De,ot.prototype.toString=function(){return this.o.toString()};var ct=Symbol();function ht(e,t,n){return e[ct]||(e[ct]=function(e,r){return t(e,r,n)})}function pt(e){var t=e[ct];if(!t){var n=Rt(e);e[ct]=t=function(e,t){return $t(e,t,n)}}return t}function dt(e){var t=function(e){var t=e.ia;return t?pt(t):(t=e.wa)?ht(e.da.P,t,e.ka):void 0}(e),n=e.da,r=e.oa.U;return t?function(e,s){return r(e,s,n,t)}:function(e,t){return r(e,t,n)}}function ft(e,t){var n=e[t];return"function"==typeof n&&0===n.length&&(n=n(),e[t]=n),Array.isArray(n)&&(Nt in n||xt in n||0<n.length&&"function"==typeof n[0])?n:void 0}function mt(e,t,n,r,s,a){t.P=e[0];var i=1;if(e.length>i&&"number"!=typeof e[i]){var o=e[i++];n(t,o)}for(;i<e.length;){n=e[i++];for(var u=i+1;u<e.length&&"number"!=typeof e[u];)u++;switch(o=e[i++],u-=i){case 0:r(t,n,o);break;case 1:(u=ft(e,i))?(i++,s(t,n,o,u)):r(t,n,o,e[i++]);break;case 2:s(t,n,o,u=ft(e,u=i++),e[i++]);break;case 3:a(t,n,o,e[i++],e[i++],e[i++]);break;case 4:a(t,n,o,e[i++],e[i++],e[i++],e[i++]);break;default:throw Error("unexpected number of binary field arguments: "+u)}}return t}var gt=Symbol();function yt(e){var t=e[gt];if(!t){var n=It(e);e[gt]=t=function(e,t){return _t(e,t,n)}}return t}function bt(e,t){var n=e[gt];return n||(e[gt]=n=function(e,n){return lt(e,n,t)}),n}var xt=Symbol();function wt(e,t){e.push(t)}function vt(e,t,n){e.push(t,n.W)}function kt(e,t,n,r){var s=yt(r),a=It(r).P,i=n.W;e.push(t,(function(e,t,n){return i(e,t,n,a,s)}))}function St(e,t,n,r,s,a){var i=bt(r,a),o=n.W;e.push(t,(function(e,t,n){return o(e,t,n,r,i)}))}function It(e){var t=e[xt];return t||(t=mt(e,e[xt]=[],wt,vt,kt,St),Nt in e&&xt in e&&(e.length=0),t)}var Nt=Symbol();function Ct(e,t){e[0]=t}function Tt(e,t,n,r){var s=n.U;e[t]=r?function(e,t,n){return s(e,t,n,r)}:s}function Et(e,t,n,r,s){var a=n.U,i=pt(r),o=Rt(r).P;e[t]=function(e,t,n){return a(e,t,n,o,i,s)}}function At(e,t,n,r,s,a,i){var o=n.U,u=ht(r,s,a);e[t]=function(e,t,n){return o(e,t,n,r,u,i)}}function Rt(e){var t=e[Nt];return t||(t=mt(e,e[Nt]={},Ct,Tt,Et,At),Nt in e&&xt in e&&(e.length=0),t)}function $t(e,t,n){for(;ve(t)&&4!=t.i;){var r=t.l,s=n[r];if(!s){var a=n[0];a&&(a=a[r])&&(s=n[r]=dt(a))}if(!s||!s(t,e,r)){r=e,a=(s=t).j,ke(s);var i=s;if(!i.ca){if(s=i.h.h-a,i.h.h=a,i=i.h,0==s)s=le();else{if(a=me(i,s),i.S&&i.m)s=i.i.subarray(a,a+s);else{i=i.i;var o=a;s=o===(s=a+s)?L():W?i.slice(o,s):new Uint8Array(i.subarray(o,s))}s=0==s.length?le():new ue(s,B)}(a=r.R)?a.push(s):r.R=[s]}}}return e}function _t(e,t,n){for(var r=n.length,s=1==r%2,a=s?1:0;a<r;a+=2)(0,n[a+1])(t,e,n[a]);lt(e,t,s?n[0]:void 0)}function Ft(e,t){return{U:e,W:t}}var Dt=Ft((function(e,t,n){if(5!==e.i)return!1;var r=(e=e.h).i,s=e.h,a=r[s],i=r[s+1],o=r[s+2];return r=r[s+3],de(e,e.h+4),e=2*((i=(a<<0|i<<8|o<<16|r<<24)>>>0)>>31)+1,a=i>>>23&255,i&=8388607,Ue(t,n,255==a?i?NaN:1/0*e:0==a?e*Math.pow(2,-149)*i:e*Math.pow(2,a-150)*(i+Math.pow(2,23))),!0}),(function(e,t,n){if(null!=(t=je(t,n))){xe(e.h,8*n+5),e=e.h;var r=+t;0===r?0<1/r?V=U=0:(U=0,V=2147483648):isNaN(r)?(U=0,V=2147483647):34028234663852886e22<(r=(n=0>r?-2147483648:0)?-r:r)?(U=0,V=(2139095040|n)>>>0):11754943508222875e-54>r?(r=Math.round(r/Math.pow(2,-149)),U=0,V=(n|r)>>>0):(t=Math.floor(Math.log(r)/Math.LN2),r*=Math.pow(2,-t),16777216<=(r=Math.round(8388608*r))&&++t,U=0,V=(n|t+127<<23|8388607&r)>>>0),e.h.push((n=V)>>>0&255),e.h.push(n>>>8&255),e.h.push(n>>>16&255),e.h.push(n>>>24&255)}})),Ot=Ft((function(e,t,n){if(0!==e.i)return!1;var r=e.h,s=0,a=e=0,i=r.i,o=r.h;do{var u=i[o++];s|=(127&u)<<a,a+=7}while(32>a&&128&u);for(32<a&&(e|=(127&u)>>4),a=3;32>a&&128&u;a+=7)e|=(127&(u=i[o++]))<<a;if(de(r,o),!(128>u))throw Z();return r=s>>>0,(e=2147483648&(u=e>>>0))&&(u=~u>>>0,0==(r=1+~r>>>0)&&(u=u+1>>>0)),r=4294967296*u+(r>>>0),Ue(t,n,e?-r:r),!0}),(function(e,t,n){null!=(t=Ve(t,n))&&("string"==typeof t&&X(t),null!=t&&(xe(e.h,8*n),"number"==typeof t?(e=e.h,G(t),be(e,V,U)):(n=X(t),be(e.h,n.i,n.h))))})),Mt=Ft((function(e,t,n){return 0===e.i&&(Ue(t,n,fe(e.h)),!0)}),(function(e,t,n){if(null!=(t=Ve(t,n))&&null!=t)if(xe(e.h,8*n),e=e.h,0<=(n=t))xe(e,n);else{for(t=0;9>t;t++)e.h.push(127&n|128),n>>=7;e.h.push(1)}})),Pt=Ft((function(e,t,n){if(2!==e.i)return!1;var r=fe(e.h)>>>0,s=me(e=e.h,r);if(e=e.i,ae){var a,i=e;(a=te)||(a=te=new TextDecoder("utf-8",{fatal:!0})),e=s+r,i=0===s&&e===i.length?i:i.subarray(s,e);try{var o=a.decode(i)}catch(h){if(void 0===se){try{a.decode(new Uint8Array([128]))}catch(p){}try{a.decode(new Uint8Array([97])),se=!0}catch(p){se=!1}}throw!se&&(te=void 0),h}}else{r=(o=s)+r,s=[];for(var u,l,c=null;o<r;)128>(u=e[o++])?s.push(u):224>u?o>=r?J():(l=e[o++],194>u||128!=(192&l)?(o--,J()):s.push((31&u)<<6|63&l)):240>u?o>=r-1?J():128!=(192&(l=e[o++]))||224===u&&160>l||237===u&&160<=l||128!=(192&(i=e[o++]))?(o--,J()):s.push((15&u)<<12|(63&l)<<6|63&i):244>=u?o>=r-2?J():128!=(192&(l=e[o++]))||0!=l-144+(u<<28)>>30||128!=(192&(i=e[o++]))||128!=(192&(a=e[o++]))?(o--,J()):(u=(7&u)<<18|(63&l)<<12|(63&i)<<6|63&a,s.push(55296+((u-=65536)>>10&1023),56320+(1023&u))):J(),8192<=s.length&&(c=ee(c,s),s.length=0);o=ee(c,s)}return Ue(t,n,o),!0}),(function(e,t,n){if(null!=(t=Ve(t,n))){var r=!1;if(r=void 0!==r&&r,ie){if(r&&/(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(t))throw Error("Found an unpaired surrogate");t=(ne||(ne=new TextEncoder)).encode(t)}else{for(var s=0,a=new Uint8Array(3*t.length),i=0;i<t.length;i++){var o=t.charCodeAt(i);if(128>o)a[s++]=o;else{if(2048>o)a[s++]=o>>6|192;else{if(55296<=o&&57343>=o){if(56319>=o&&i<t.length){var u=t.charCodeAt(++i);if(56320<=u&&57343>=u){a[s++]=(o=1024*(o-55296)+u-56320+65536)>>18|240,a[s++]=o>>12&63|128,a[s++]=o>>6&63|128,a[s++]=63&o|128;continue}i--}if(r)throw Error("Found an unpaired surrogate");o=65533}a[s++]=o>>12|224,a[s++]=o>>6&63|128}a[s++]=63&o|128}}t=s===a.length?a:a.subarray(0,s)}xe(e.h,8*n+2),xe(e.h,t.length),Ne(e,e.h.end()),Ne(e,t)}})),zt=Ft((function(e,t,n,r,s){if(2!==e.i)return!1;t=Ye(t,n,r),n=e.h.j,r=fe(e.h)>>>0;var a=e.h.h+r,i=a-n;if(0>=i&&(e.h.j=a,s(t,e,void 0,void 0,void 0),i=a-e.h.h),i)throw Error("Message parsing ended unexpectedly. Expected to read "+r+" bytes, instead read "+(r-i)+" bytes, either the data ended unexpectedly or the message misreported its own length");return e.h.h=a,e.h.j=n,!0}),(function(e,t,n,r,s){if(null!=(t=Ke(t,r,n)))for(r=0;r<t.length;r++){var a=e;xe(a.h,8*n+2);var i=a.h.end();Ne(a,i),i.push(a.i),a=i,s(t[r],e),i=e;var o=a.pop();for(o=i.i+i.h.length()-o;127<o;)a.push(127&o|128),o>>>=7,i.i++;a.push(o),i.i++}}));function Lt(e){return function(t,n){e:{if(Se.length){var r=Se.pop();r.setOptions(n),pe(r.h,t,n),t=r}else t=new we(t,n);try{var s=Rt(e),a=$t(new s.P,t,s);break e}finally{(s=t.h).i=null,s.m=!1,s.l=0,s.j=0,s.h=0,s.S=!1,t.l=-1,t.i=-1,100>Se.length&&Se.push(t)}a=void 0}return a}}function Bt(e){return function(){var t=new Ie;_t(this,t,It(e)),Ne(t,t.h.end());for(var n=new Uint8Array(t.i),r=t.j,s=r.length,a=0,i=0;i<s;i++){var o=r[i];n.set(o,a),a+=o.length}return t.j=[n],n}}function Wt(e){ot.call(this,e)}f(Wt,ot);var Vt=[Wt,1,Mt,2,Dt,3,Pt,4,Pt];function Ut(e){ot.call(this,e,-1,Gt)}Wt.prototype.l=Bt(Vt),f(Ut,ot),Ut.prototype.addClassification=function(e,t){return Ye(this,1,Wt,e,t),this};var Gt=[1],Ht=Lt([Ut,1,zt,Vt]);function jt(e){ot.call(this,e)}f(jt,ot);var qt=[jt,1,Dt,2,Dt,3,Dt,4,Dt,5,Dt];function Kt(e){ot.call(this,e,-1,Xt)}jt.prototype.l=Bt(qt),f(Kt,ot);var Xt=[1],Yt=Lt([Kt,1,zt,qt]);function Zt(e){ot.call(this,e)}f(Zt,ot);var Qt=[Zt,1,Dt,2,Dt,3,Dt,4,Dt,5,Dt,6,Ot],Jt=Lt(Qt);function en(e,t,n){if(n=e.createShader(0===n?e.VERTEX_SHADER:e.FRAGMENT_SHADER),e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+e.getShaderInfoLog(n));return n}function tn(e){return Ke(e,Wt,1).map((function(e){var t=Ve(e,1);return{index:null==t?0:t,qa:Qe(e,2),label:null!=Ve(e,3)?Ze(Ve(e,3),""):void 0,displayName:null!=Ve(e,4)?Ze(Ve(e,4),""):void 0}}))}function nn(e){return{x:Qe(e,1),y:Qe(e,2),z:Qe(e,3),visibility:null!=je(e,4)?Qe(e,4):void 0}}function rn(e){return Ke(Yt(e),jt,1).map(nn)}function sn(e,t){this.i=e,this.h=t,this.m=0}function an(e,t,n){return function(e,t){var n=e.h;if(void 0===e.s){var r=en(n,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),s=en(n,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),a=n.createProgram();if(n.attachShader(a,r),n.attachShader(a,s),n.linkProgram(a),!n.getProgramParameter(a,n.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+n.getProgramInfoLog(a));r=e.s=a,n.useProgram(r),s=n.getUniformLocation(r,"sampler0"),e.l={O:n.getAttribLocation(r,"aVertex"),N:n.getAttribLocation(r,"aTex"),ya:s},e.v=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,e.v),n.enableVertexAttribArray(e.l.O),n.vertexAttribPointer(e.l.O,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),e.u=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,e.u),n.enableVertexAttribArray(e.l.N),n.vertexAttribPointer(e.l.N,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.uniform1i(s,0)}r=e.l,n.useProgram(e.s),n.canvas.width=t.width,n.canvas.height=t.height,n.viewport(0,0,t.width,t.height),n.activeTexture(n.TEXTURE0),e.i.bindTexture2d(t.glName),n.enableVertexAttribArray(r.O),n.bindBuffer(n.ARRAY_BUFFER,e.v),n.vertexAttribPointer(r.O,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(r.N),n.bindBuffer(n.ARRAY_BUFFER,e.u),n.vertexAttribPointer(r.N,2,n.FLOAT,!1,0,0),n.bindFramebuffer(n.DRAW_FRAMEBUFFER?n.DRAW_FRAMEBUFFER:n.FRAMEBUFFER,null),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.colorMask(!0,!0,!0,!0),n.drawArrays(n.TRIANGLE_FAN,0,4),n.disableVertexAttribArray(r.O),n.disableVertexAttribArray(r.N),n.bindBuffer(n.ARRAY_BUFFER,null),e.i.bindTexture2d(0)}(e,t),"function"==typeof e.h.canvas.transferToImageBitmap?Promise.resolve(e.h.canvas.transferToImageBitmap()):n?Promise.resolve(e.h.canvas):"function"==typeof createImageBitmap?createImageBitmap(e.h.canvas):(void 0===e.j&&(e.j=document.createElement("canvas")),new Promise((function(t){e.j.height=e.h.canvas.height,e.j.width=e.h.canvas.width,e.j.getContext("2d",{}).drawImage(e.h.canvas,0,0,e.h.canvas.width,e.h.canvas.height),t(e.j)})))}function on(e){this.h=e}Zt.prototype.l=Bt(Qt);var un=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function ln(e,t){return t+e}function cn(e,t){window[e]=t}function hn(e){if(this.h=e,this.listeners={},this.l={},this.L={},this.s={},this.v={},this.M=this.u=this.ga=!0,this.I=Promise.resolve(),this.fa="",this.D={},this.locateFile=e&&e.locateFile||ln,"object"==typeof window)var t=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else{if("undefined"==typeof location)throw Error("solutions can only be loaded on a web page or in a web worker");t=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/"}if(this.ha=t,e.options)for(var n=(t=i(Object.keys(e.options))).next();!n.done;n=t.next()){var r=e.options[n=n.value].default;void 0!==r&&(this.l[n]="function"==typeof r?r():r)}}function pn(e,t){var n,r;return S((function(s){return t in e.L?s.return(e.L[t]):(n=e.locateFile(t,""),r=fetch(n).then((function(e){return e.arrayBuffer()})),e.L[t]=r,s.return(r))}))}function dn(e,t){for(var n=t.name||"$",r=[].concat(o(t.wants)),s=new e.i.StringList,a=i(t.wants),u=a.next();!u.done;u=a.next())s.push_back(u.value);a=e.i.PacketListener.implement({onResults:function(s){for(var a={},o=0;o<t.wants.length;++o)a[r[o]]=s.get(o);var u=e.listeners[n];u&&(e.I=function(e,t,n){var r,s,a,o,u,l,c,h,p,d,f,m;return S((function(g){switch(g.h){case 1:if(!n)return g.return(t);for(r={},s=0,a=i(Object.keys(n)),o=a.next();!o.done;o=a.next())"string"!=typeof(u=n[o.value])&&"texture"===u.type&&void 0!==t[u.stream]&&++s;1<s&&(e.M=!1),l=i(Object.keys(n)),o=l.next();case 2:if(o.done){g.h=4;break}if("string"==typeof(h=n[c=o.value]))return f=r,m=c,b(g,function(e,t,n){var r;return S((function(s){return"number"==typeof n||n instanceof Uint8Array||n instanceof e.i.Uint8BlobList?s.return(n):n instanceof e.i.Texture2dDataOut?((r=e.v[t])||(r=new sn(e.i,e.K),e.v[t]=r),s.return(an(r,n,e.M))):s.return(void 0)}))}(e,c,t[h]),14);if(p=t[h.stream],"detection_list"===h.type){if(p){for(var y=p.getRectList(),x=p.getLandmarksList(),w=p.getClassificationsList(),v=[],k=0;k<y.size();++k){var I=Jt(y.get(k)),N=void 0;N=void 0===N?0:N,I={la:{sa:Qe(I,1),ta:Qe(I,2),height:Qe(I,3),width:Qe(I,4),rotation:Qe(I,5,0),pa:Ze(Ve(I,6),N)},ea:rn(x.get(k)),ba:tn(Ht(w.get(k)))},v.push(I)}y=v}else y=[];r[c]=y,g.h=7;break}if("proto_list"===h.type){if(p){for(y=Array(p.size()),x=0;x<p.size();x++)y[x]=p.get(x);p.delete()}else y=[];r[c]=y,g.h=7;break}if(void 0===p){g.h=3;break}if("float_list"===h.type){r[c]=p,g.h=7;break}if("proto"===h.type){r[c]=p,g.h=7;break}if("texture"!==h.type)throw Error("Unknown output config type: '"+h.type+"'");return(d=e.v[c])||(d=new sn(e.i,e.K),e.v[c]=d),b(g,an(d,p,e.M),13);case 13:r[c]=g.i;case 7:h.transform&&r[c]&&(r[c]=h.transform(r[c])),g.h=3;break;case 14:f[m]=g.i;case 3:o=l.next(),g.h=2;break;case 4:return g.return(r)}}))}(e,a,t.outs).then((function(n){n=u(n);for(var s=0;s<t.wants.length;++s){var i=a[r[s]];"object"==typeof i&&i.hasOwnProperty&&i.hasOwnProperty("delete")&&i.delete()}n&&(e.I=n)})))}}),e.j.attachMultiListener(s,a),s.delete()}function fn(e){switch(void 0===e&&(e=0),e){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}function mn(e){var t=this;this.h=new hn({locateFile:(e=e||{}).locateFile,files:function(e){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:fn(e.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",transform:rn},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:rn},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"==typeof window&&void 0!==window.navigator&&("iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(e){var n,r;return S((function(s){return 1==s.h?(n=fn(e),r="third_party/mediapipe/modules/pose_landmark/"+n,b(s,pn(t.h,n),2)):(t.h.overrideFile(r,s.i),s.return(!0))}))}},smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}(e=hn.prototype).close=function(){return this.j&&this.j.delete(),Promise.resolve()},e.reset=function(){var e=this;return S((function(t){e.j&&(e.j.reset(),e.s={},e.v={}),t.h=0}))},e.setOptions=function(e,t){var n=this;if(t=t||this.h.options){for(var r=[],s=[],a={},o=i(Object.keys(e)),u=o.next();!u.done;a={X:a.X,Y:a.Y},u=o.next())if(!((u=u.value)in this.l)||this.l[u]!==e[u]){this.l[u]=e[u];var l=t[u];void 0!==l&&(l.onChange&&(a.X=l.onChange,a.Y=e[u],r.push(function(e){return function(){return S((function(t){if(1==t.h)return b(t,e.X(e.Y),2);!0===t.i&&(n.u=!0),t.h=0}))}}(a))),l.graphOptionXref&&(u=Object.assign({},{calculatorName:"",calculatorIndex:0},l.graphOptionXref,{valueNumber:1===l.type?e[u]:0,valueBoolean:0===l.type&&e[u],valueString:2===l.type?e[u]:""}),s.push(u)))}0===r.length&&0===s.length||(this.u=!0,this.H=(void 0===this.H?[]:this.H).concat(s),this.F=(void 0===this.F?[]:this.F).concat(r))}},e.initialize=function(){var e=this;return S((function(t){return 1==t.h?b(t,function(e){var t,n,r,s,a,i,u,l,c,h,p;return S((function(d){switch(d.h){case 1:return e.ga?(t=void 0===e.h.files?[]:"function"==typeof e.h.files?e.h.files(e.l):e.h.files,b(d,S((function(e){switch(e.h){case 1:return e.s=2,b(e,WebAssembly.instantiate(un),4);case 4:e.h=3,e.s=0;break;case 2:return e.s=0,e.l=null,e.return(!1);case 3:return e.return(!0)}})),2)):d.return();case 2:if(n=d.i,"object"==typeof window)return cn("createMediapipeSolutionsWasm",{locateFile:e.locateFile}),cn("createMediapipeSolutionsPackedAssets",{locateFile:e.locateFile}),i=t.filter((function(e){return void 0!==e.data})),u=t.filter((function(e){return void 0===e.data})),l=Promise.all(i.map((function(t){var n=pn(e,t.url);if(void 0!==t.path){var r=t.path;n=n.then((function(t){return e.overrideFile(r,t),Promise.resolve(t)}))}return n}))),c=Promise.all(u.map((function(t){return void 0===t.simd||t.simd&&n||!t.simd&&!n?function(e){var t=document.createElement("script");return t.setAttribute("src",e),t.setAttribute("crossorigin","anonymous"),new Promise((function(e){t.addEventListener("load",(function(){e()}),!1),t.addEventListener("error",(function(){e()}),!1),document.body.appendChild(t)}))}(e.locateFile(t.url,e.ha)):Promise.resolve()}))).then((function(){var t,n,r;return S((function(s){if(1==s.h)return t=window.createMediapipeSolutionsWasm,n=window.createMediapipeSolutionsPackedAssets,r=e,b(s,t(n),2);r.i=s.i,s.h=0}))})),h=S((function(t){return e.h.graph&&e.h.graph.url?t=b(t,pn(e,e.h.graph.url),0):(t.h=0,t=void 0),t})),b(d,Promise.all([c,l,h]),7);if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return r=t.filter((function(e){return void 0===e.simd||e.simd&&n||!e.simd&&!n})).map((function(t){return e.locateFile(t.url,e.ha)})),importScripts.apply(null,o(r)),s=e,b(d,createMediapipeSolutionsWasm(Module),6);case 6:s.i=d.i,e.m=new OffscreenCanvas(1,1),e.i.canvas=e.m,a=e.i.GL.createContext(e.m,{antialias:!1,alpha:!1,va:"undefined"!=typeof WebGL2RenderingContext?2:1}),e.i.GL.makeContextCurrent(a),d.h=4;break;case 7:if(e.m=document.createElement("canvas"),!(p=e.m.getContext("webgl2",{}))&&!(p=e.m.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),d.return();e.K=p,e.i.canvas=e.m,e.i.createContext(e.m,!0,!0,{});case 4:e.j=new e.i.SolutionWasm,e.ga=!1,d.h=0}}))}(e),2):3!=t.h?b(t,function(e){var t,n,r,s,a,o;return S((function(u){if(1==u.h)return e.h.graph&&e.h.graph.url&&e.fa===e.h.graph.url?u.return():(e.u=!0,e.h.graph&&e.h.graph.url?(e.fa=e.h.graph.url,b(u,pn(e,e.h.graph.url),3)):void(u.h=2));for(2!=u.h&&e.j.loadGraph(u.i),t=i(Object.keys(e.D)),n=t.next();!n.done;n=t.next())e.j.overrideFile(r=n.value,e.D[r]);if(e.D={},e.h.listeners)for(s=i(e.h.listeners),a=s.next();!a.done;a=s.next())dn(e,a.value);o=e.l,e.l={},e.setOptions(o),u.h=0}))}(e),3):b(t,function(e){var t,n,r,s,a;return S((function(o){switch(o.h){case 1:if(!e.u)return o.return();if(!e.F){o.h=2;break}t=i(e.F),n=t.next();case 3:if(n.done){o.h=5;break}return b(o,(0,n.value)(),4);case 4:n=t.next(),o.h=3;break;case 5:e.F=void 0;case 2:if(e.H){for(r=new e.i.GraphOptionChangeRequestList,s=i(e.H),a=s.next();!a.done;a=s.next())r.push_back(a.value);e.j.changeOptions(r),r.delete(),e.H=void 0}e.u=!1,o.h=0}}))}(e),0)}))},e.overrideFile=function(e,t){this.j?this.j.overrideFile(e,t):this.D[e]=t},e.clearOverriddenFiles=function(){this.D={},this.j&&this.j.clearOverriddenFiles()},e.send=function(e,t){var n,r,s,a,o,u,l,c,h,p=this;return S((function(d){switch(d.h){case 1:return p.h.inputs?(n=1e3*(null==t?performance.now():t),b(d,p.I,2)):d.return();case 2:return b(d,p.initialize(),3);case 3:for(r=new p.i.PacketDataList,s=i(Object.keys(e)),a=s.next();!a.done;a=s.next())if(u=p.h.inputs[o=a.value]){e:{var f=e[o];switch(u.type){case"video":var m=p.s[u.stream];if(m||(m=new sn(p.i,p.K),p.s[u.stream]=m),0===m.m&&(m.m=m.i.createTexture()),"undefined"!=typeof HTMLVideoElement&&f instanceof HTMLVideoElement)var g=f.videoWidth,y=f.videoHeight;else"undefined"!=typeof HTMLImageElement&&f instanceof HTMLImageElement?(g=f.naturalWidth,y=f.naturalHeight):(g=f.width,y=f.height);y={glName:m.m,width:g,height:y},(g=m.h).canvas.width=y.width,g.canvas.height=y.height,g.activeTexture(g.TEXTURE0),m.i.bindTexture2d(m.m),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,f),m.i.bindTexture2d(0),m=y;break e;case"detections":for((m=p.s[u.stream])||(m=new on(p.i),p.s[u.stream]=m),m.data||(m.data=new m.h.DetectionListData),m.data.reset(f.length),y=0;y<f.length;++y){var x=m.data,w=x.setBoundingBox,v=y,k=(g=f[y]).la,S=new Zt;if(Xe(S,1,k.sa),Xe(S,2,k.ta),Xe(S,3,k.height),Xe(S,4,k.width),Xe(S,5,k.rotation),Ue(S,6,k.pa),k=S.l(),w.call(x,v,k),g.ea)for(x=0;x<g.ea.length;++x){S=g.ea[x],v=(w=m.data).addNormalizedLandmark,k=y,S=Object.assign({},S,{visibility:S.visibility?S.visibility:0});var I=new jt;Xe(I,1,S.x),Xe(I,2,S.y),Xe(I,3,S.z),S.visibility&&Xe(I,4,S.visibility),S=I.l(),v.call(w,k,S)}if(g.ba)for(x=0;x<g.ba.length;++x)v=(w=m.data).addClassification,k=y,S=g.ba[x],Xe(I=new Wt,2,S.qa),S.index&&Ue(I,1,S.index),S.label&&Ue(I,3,S.label),S.displayName&&Ue(I,4,S.displayName),S=I.l(),v.call(w,k,S)}m=m.data;break e;default:m={}}}switch(l=m,c=u.stream,u.type){case"video":r.pushTexture2d(Object.assign({},l,{stream:c,timestamp:n}));break;case"detections":(h=l).stream=c,h.timestamp=n,r.pushDetectionList(h);break;default:throw Error("Unknown input config type: '"+u.type+"'")}}return p.j.send(r),b(d,p.I,4);case 4:r.delete(),d.h=0}}))},e.onResults=function(e,t){this.listeners[t||"$"]=e},C("Solution",hn),C("OptionType",{BOOL:0,NUMBER:1,ua:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(e=mn.prototype).reset=function(){this.h.reset()},e.close=function(){return this.h.close(),Promise.resolve()},e.onResults=function(e){this.h.onResults(e)},e.initialize=function(){var e=this;return S((function(t){return b(t,e.h.initialize(),0)}))},e.send=function(e,t){var n=this;return S((function(r){return b(r,n.h.send(e,t),0)}))},e.setOptions=function(e){this.h.setOptions(e)},C("Pose",mn),C("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]),C("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32}),C("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31}),C("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32}),C("POSE_LANDMARKS_NEUTRAL",{NOSE:0}),C("VERSION","0.5.1675469404")}).call(this)},"pJ3+":function(e,t,n){var r;!function(s,a,i){var o,u=i.pow(256,6),l=i.pow(2,52),c=2*l;function h(e,t,n){var r=[],h=f(function e(t,n){var r,s=[],a=typeof t;if(n&&"object"==a)for(r in t)try{s.push(e(t[r],n-1))}catch(i){}return s.length?s:"string"==a?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,m(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(256):(e=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(e)),m(e)}catch(r){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,m(a)]}}():e,3),r),g=new p(r),y=function(){for(var e=g.g(6),t=u,n=0;e<l;)e=256*(e+n),t*=256,n=g.g(1);for(;e>=c;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,f(m(g.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&d(r,g),e.state=function(){return d(g,{})}),n?(i.random=e,t):e})(y,h,"global"in t?t.global:this==i,t.state)}function p(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(256)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function f(e,t){for(var n,r=e+"",s=0;s<r.length;)t[255&s]=255&(n^=19*t[255&s])+r.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(i.random(),a),e.exports){e.exports=h;try{o=n(7)}catch(g){}}else void 0===(r=(function(){return h}).call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},pJ6O:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},uDiL:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},yuCN:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],r[s]=n^=(e^=e<<13)^e<<9,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return u}).call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))}}]);